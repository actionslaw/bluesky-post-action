import './sourcemap-register.cjs'
import { createRequire as __WEBPACK_EXTERNAL_createRequire } from 'module'
/******/ var __webpack_modules__ = {
  /***/ 7351: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k]
              }
            })
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.issue = exports.issueCommand = void 0
    const os = __importStar(__nccwpck_require__(2037))
    const utils_1 = __nccwpck_require__(5278)
    /**
     * Commands
     *
     * Command Format:
     *   ::name key=value,key=value::message
     *
     * Examples:
     *   ::warning::This is the message
     *   ::set-env name=MY_VAR::some value
     */
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message)
      process.stdout.write(cmd.toString() + os.EOL)
    }
    exports.issueCommand = issueCommand
    function issue(name, message = '') {
      issueCommand(name, {}, message)
    }
    exports.issue = issue
    const CMD_STRING = '::'
    class Command {
      constructor(command, properties, message) {
        if (!command) {
          command = 'missing.command'
        }
        this.command = command
        this.properties = properties
        this.message = message
      }
      toString() {
        let cmdStr = CMD_STRING + this.command
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += ' '
          let first = true
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key]
              if (val) {
                if (first) {
                  first = false
                } else {
                  cmdStr += ','
                }
                cmdStr += `${key}=${escapeProperty(val)}`
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`
        return cmdStr
      }
    }
    function escapeData(s) {
      return utils_1
        .toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
    }
    function escapeProperty(s) {
      return utils_1
        .toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C')
    }
    //# sourceMappingURL=command.js.map

    /***/
  },

  /***/ 2186: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k]
              }
            })
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    var __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.getIDToken =
      exports.getState =
      exports.saveState =
      exports.group =
      exports.endGroup =
      exports.startGroup =
      exports.info =
      exports.notice =
      exports.warning =
      exports.error =
      exports.debug =
      exports.isDebug =
      exports.setFailed =
      exports.setCommandEcho =
      exports.setOutput =
      exports.getBooleanInput =
      exports.getMultilineInput =
      exports.getInput =
      exports.addPath =
      exports.setSecret =
      exports.exportVariable =
      exports.ExitCode =
        void 0
    const command_1 = __nccwpck_require__(7351)
    const file_command_1 = __nccwpck_require__(717)
    const utils_1 = __nccwpck_require__(5278)
    const os = __importStar(__nccwpck_require__(2037))
    const path = __importStar(__nccwpck_require__(1017))
    const oidc_utils_1 = __nccwpck_require__(8041)
    /**
     * The code to exit an action
     */
    var ExitCode
    ;(function (ExitCode) {
      /**
       * A code indicating that the action was successful
       */
      ExitCode[(ExitCode['Success'] = 0)] = 'Success'
      /**
       * A code indicating that the action was a failure
       */
      ExitCode[(ExitCode['Failure'] = 1)] = 'Failure'
    })((ExitCode = exports.ExitCode || (exports.ExitCode = {})))
    //-----------------------------------------------------------------------
    // Variables
    //-----------------------------------------------------------------------
    /**
     * Sets env variable for this action and future actions in the job
     * @param name the name of the variable to set
     * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val)
      process.env[name] = convertedVal
      const filePath = process.env['GITHUB_ENV'] || ''
      if (filePath) {
        return file_command_1.issueFileCommand(
          'ENV',
          file_command_1.prepareKeyValueMessage(name, val)
        )
      }
      command_1.issueCommand('set-env', { name }, convertedVal)
    }
    exports.exportVariable = exportVariable
    /**
     * Registers a secret which will get masked from logs
     * @param secret value of the secret
     */
    function setSecret(secret) {
      command_1.issueCommand('add-mask', {}, secret)
    }
    exports.setSecret = setSecret
    /**
     * Prepends inputPath to the PATH (for this action and future actions)
     * @param inputPath
     */
    function addPath(inputPath) {
      const filePath = process.env['GITHUB_PATH'] || ''
      if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath)
      } else {
        command_1.issueCommand('add-path', {}, inputPath)
      }
      process.env['PATH'] =
        `${inputPath}${path.delimiter}${process.env['PATH']}`
    }
    exports.addPath = addPath
    /**
     * Gets the value of an input.
     * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
     * Returns an empty string if the value is not defined.
     *
     * @param     name     name of the input to get
     * @param     options  optional. See InputOptions.
     * @returns   string
     */
    function getInput(name, options) {
      const val =
        process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || ''
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`)
      }
      if (options && options.trimWhitespace === false) {
        return val
      }
      return val.trim()
    }
    exports.getInput = getInput
    /**
     * Gets the values of an multiline input.  Each value is also trimmed.
     *
     * @param     name     name of the input to get
     * @param     options  optional. See InputOptions.
     * @returns   string[]
     *
     */
    function getMultilineInput(name, options) {
      const inputs = getInput(name, options)
        .split('\n')
        .filter((x) => x !== '')
      if (options && options.trimWhitespace === false) {
        return inputs
      }
      return inputs.map((input) => input.trim())
    }
    exports.getMultilineInput = getMultilineInput
    /**
     * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
     * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
     * The return value is also in boolean type.
     * ref: https://yaml.org/spec/1.2/spec.html#id2804923
     *
     * @param     name     name of the input to get
     * @param     options  optional. See InputOptions.
     * @returns   boolean
     */
    function getBooleanInput(name, options) {
      const trueValue = ['true', 'True', 'TRUE']
      const falseValue = ['false', 'False', 'FALSE']
      const val = getInput(name, options)
      if (trueValue.includes(val)) return true
      if (falseValue.includes(val)) return false
      throw new TypeError(
        `Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
          `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``
      )
    }
    exports.getBooleanInput = getBooleanInput
    /**
     * Sets the value of an output.
     *
     * @param     name     name of the output to set
     * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function setOutput(name, value) {
      const filePath = process.env['GITHUB_OUTPUT'] || ''
      if (filePath) {
        return file_command_1.issueFileCommand(
          'OUTPUT',
          file_command_1.prepareKeyValueMessage(name, value)
        )
      }
      process.stdout.write(os.EOL)
      command_1.issueCommand(
        'set-output',
        { name },
        utils_1.toCommandValue(value)
      )
    }
    exports.setOutput = setOutput
    /**
     * Enables or disables the echoing of commands into stdout for the rest of the step.
     * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
     *
     */
    function setCommandEcho(enabled) {
      command_1.issue('echo', enabled ? 'on' : 'off')
    }
    exports.setCommandEcho = setCommandEcho
    //-----------------------------------------------------------------------
    // Results
    //-----------------------------------------------------------------------
    /**
     * Sets the action status to failed.
     * When the action exits it will be with an exit code of 1
     * @param message add error issue message
     */
    function setFailed(message) {
      process.exitCode = ExitCode.Failure
      error(message)
    }
    exports.setFailed = setFailed
    //-----------------------------------------------------------------------
    // Logging Commands
    //-----------------------------------------------------------------------
    /**
     * Gets whether Actions Step Debug is on or not
     */
    function isDebug() {
      return process.env['RUNNER_DEBUG'] === '1'
    }
    exports.isDebug = isDebug
    /**
     * Writes debug message to user log
     * @param message debug message
     */
    function debug(message) {
      command_1.issueCommand('debug', {}, message)
    }
    exports.debug = debug
    /**
     * Adds an error issue
     * @param message error issue message. Errors will be converted to string via toString()
     * @param properties optional properties to add to the annotation.
     */
    function error(message, properties = {}) {
      command_1.issueCommand(
        'error',
        utils_1.toCommandProperties(properties),
        message instanceof Error ? message.toString() : message
      )
    }
    exports.error = error
    /**
     * Adds a warning issue
     * @param message warning issue message. Errors will be converted to string via toString()
     * @param properties optional properties to add to the annotation.
     */
    function warning(message, properties = {}) {
      command_1.issueCommand(
        'warning',
        utils_1.toCommandProperties(properties),
        message instanceof Error ? message.toString() : message
      )
    }
    exports.warning = warning
    /**
     * Adds a notice issue
     * @param message notice issue message. Errors will be converted to string via toString()
     * @param properties optional properties to add to the annotation.
     */
    function notice(message, properties = {}) {
      command_1.issueCommand(
        'notice',
        utils_1.toCommandProperties(properties),
        message instanceof Error ? message.toString() : message
      )
    }
    exports.notice = notice
    /**
     * Writes info to log with console.log.
     * @param message info message
     */
    function info(message) {
      process.stdout.write(message + os.EOL)
    }
    exports.info = info
    /**
     * Begin an output group.
     *
     * Output until the next `groupEnd` will be foldable in this group
     *
     * @param name The name of the output group
     */
    function startGroup(name) {
      command_1.issue('group', name)
    }
    exports.startGroup = startGroup
    /**
     * End an output group.
     */
    function endGroup() {
      command_1.issue('endgroup')
    }
    exports.endGroup = endGroup
    /**
     * Wrap an asynchronous function call in a group.
     *
     * Returns the same type as the function itself.
     *
     * @param name The name of the group
     * @param fn The function to wrap in the group
     */
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name)
        let result
        try {
          result = yield fn()
        } finally {
          endGroup()
        }
        return result
      })
    }
    exports.group = group
    //-----------------------------------------------------------------------
    // Wrapper action state
    //-----------------------------------------------------------------------
    /**
     * Saves state for current action, the state can only be retrieved by this action's post job execution.
     *
     * @param     name     name of the state to store
     * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function saveState(name, value) {
      const filePath = process.env['GITHUB_STATE'] || ''
      if (filePath) {
        return file_command_1.issueFileCommand(
          'STATE',
          file_command_1.prepareKeyValueMessage(name, value)
        )
      }
      command_1.issueCommand(
        'save-state',
        { name },
        utils_1.toCommandValue(value)
      )
    }
    exports.saveState = saveState
    /**
     * Gets the value of an state set by this action's main execution.
     *
     * @param     name     name of the state to get
     * @returns   string
     */
    function getState(name) {
      return process.env[`STATE_${name}`] || ''
    }
    exports.getState = getState
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud)
      })
    }
    exports.getIDToken = getIDToken
    /**
     * Summary exports
     */
    var summary_1 = __nccwpck_require__(1327)
    Object.defineProperty(exports, 'summary', {
      enumerable: true,
      get: function () {
        return summary_1.summary
      }
    })
    /**
     * @deprecated use core.summary
     */
    var summary_2 = __nccwpck_require__(1327)
    Object.defineProperty(exports, 'markdownSummary', {
      enumerable: true,
      get: function () {
        return summary_2.markdownSummary
      }
    })
    /**
     * Path exports
     */
    var path_utils_1 = __nccwpck_require__(2981)
    Object.defineProperty(exports, 'toPosixPath', {
      enumerable: true,
      get: function () {
        return path_utils_1.toPosixPath
      }
    })
    Object.defineProperty(exports, 'toWin32Path', {
      enumerable: true,
      get: function () {
        return path_utils_1.toWin32Path
      }
    })
    Object.defineProperty(exports, 'toPlatformPath', {
      enumerable: true,
      get: function () {
        return path_utils_1.toPlatformPath
      }
    })
    //# sourceMappingURL=core.js.map

    /***/
  },

  /***/ 717: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    // For internal use, subject to change.
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k]
              }
            })
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0
    // We use any as a valid input type
    /* eslint-disable @typescript-eslint/no-explicit-any */
    const fs = __importStar(__nccwpck_require__(7147))
    const os = __importStar(__nccwpck_require__(2037))
    const uuid_1 = __nccwpck_require__(5840)
    const utils_1 = __nccwpck_require__(5278)
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`]
      if (!filePath) {
        throw new Error(
          `Unable to find environment variable for file command ${command}`
        )
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`)
      }
      fs.appendFileSync(
        filePath,
        `${utils_1.toCommandValue(message)}${os.EOL}`,
        {
          encoding: 'utf8'
        }
      )
    }
    exports.issueFileCommand = issueFileCommand
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`
      const convertedValue = utils_1.toCommandValue(value)
      // These should realistically never happen, but just in case someone finds a
      // way to exploit uuid generation let's not allow keys or values that contain
      // the delimiter.
      if (key.includes(delimiter)) {
        throw new Error(
          `Unexpected input: name should not contain the delimiter "${delimiter}"`
        )
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(
          `Unexpected input: value should not contain the delimiter "${delimiter}"`
        )
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`
    }
    exports.prepareKeyValueMessage = prepareKeyValueMessage
    //# sourceMappingURL=file-command.js.map

    /***/
  },

  /***/ 8041: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    var __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.OidcClient = void 0
    const http_client_1 = __nccwpck_require__(6255)
    const auth_1 = __nccwpck_require__(5526)
    const core_1 = __nccwpck_require__(2186)
    class OidcClient {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        }
        return new http_client_1.HttpClient(
          'actions/oidc-client',
          [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())],
          requestOptions
        )
      }
      static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN']
        if (!token) {
          throw new Error(
            'Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable'
          )
        }
        return token
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
        if (!runtimeUrl) {
          throw new Error(
            'Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable'
          )
        }
        return runtimeUrl
      }
      static getCall(id_token_url) {
        var _a
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = OidcClient.createHttpClient()
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`)
          })
          const id_token =
            (_a = res.result) === null || _a === void 0 ? void 0 : _a.value
          if (!id_token) {
            throw new Error('Response json body do not have ID Token field')
          }
          return id_token
        })
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            // New ID Token is requested from action service
            let id_token_url = OidcClient.getIDTokenUrl()
            if (audience) {
              const encodedAudience = encodeURIComponent(audience)
              id_token_url = `${id_token_url}&audience=${encodedAudience}`
            }
            core_1.debug(`ID token url is ${id_token_url}`)
            const id_token = yield OidcClient.getCall(id_token_url)
            core_1.setSecret(id_token)
            return id_token
          } catch (error) {
            throw new Error(`Error message: ${error.message}`)
          }
        })
      }
    }
    exports.OidcClient = OidcClient
    //# sourceMappingURL=oidc-utils.js.map

    /***/
  },

  /***/ 2981: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k]
              }
            })
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0
    const path = __importStar(__nccwpck_require__(1017))
    /**
     * toPosixPath converts the given path to the posix form. On Windows, \\ will be
     * replaced with /.
     *
     * @param pth. Path to transform.
     * @return string Posix path.
     */
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, '/')
    }
    exports.toPosixPath = toPosixPath
    /**
     * toWin32Path converts the given path to the win32 form. On Linux, / will be
     * replaced with \\.
     *
     * @param pth. Path to transform.
     * @return string Win32 path.
     */
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, '\\')
    }
    exports.toWin32Path = toWin32Path
    /**
     * toPlatformPath converts the given path to a platform-specific path. It does
     * this by replacing instances of / and \ with the platform-specific path
     * separator.
     *
     * @param pth The path to platformize.
     * @return string The platform-specific path.
     */
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep)
    }
    exports.toPlatformPath = toPlatformPath
    //# sourceMappingURL=path-utils.js.map

    /***/
  },

  /***/ 1327: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    var __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.summary =
      exports.markdownSummary =
      exports.SUMMARY_DOCS_URL =
      exports.SUMMARY_ENV_VAR =
        void 0
    const os_1 = __nccwpck_require__(2037)
    const fs_1 = __nccwpck_require__(7147)
    const { access, appendFile, writeFile } = fs_1.promises
    exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY'
    exports.SUMMARY_DOCS_URL =
      'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary'
    class Summary {
      constructor() {
        this._buffer = ''
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR]
          if (!pathFromEnv) {
            throw new Error(
              `Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`
            )
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK)
          } catch (_a) {
            throw new Error(
              `Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`
            )
          }
          this._filePath = pathFromEnv
          return this._filePath
        })
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
          .map(([key, value]) => ` ${key}="${value}"`)
          .join('')
        if (!content) {
          return `<${tag}${htmlAttrs}>`
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0
            ? void 0
            : options.overwrite)
          const filePath = yield this.filePath()
          const writeFunc = overwrite ? writeFile : appendFile
          yield writeFunc(filePath, this._buffer, { encoding: 'utf8' })
          return this.emptyBuffer()
        })
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true })
        })
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = ''
        return this
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text
        return addEOL ? this.addEOL() : this
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL)
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang })
        const element = this.wrap('pre', this.wrap('code', code), attrs)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul'
        const listItems = items.map((item) => this.wrap('li', item)).join('')
        const element = this.wrap(tag, listItems)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows
          .map((row) => {
            const cells = row
              .map((cell) => {
                if (typeof cell === 'string') {
                  return this.wrap('td', cell)
                }
                const { header, data, colspan, rowspan } = cell
                const tag = header ? 'th' : 'td'
                const attrs = Object.assign(
                  Object.assign({}, colspan && { colspan }),
                  rowspan && { rowspan }
                )
                return this.wrap(tag, data, attrs)
              })
              .join('')
            return this.wrap('tr', cells)
          })
          .join('')
        const element = this.wrap('table', tableBody)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap(
          'details',
          this.wrap('summary', label) + content
        )
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {}
        const attrs = Object.assign(
          Object.assign({}, width && { width }),
          height && { height }
        )
        const element = this.wrap(
          'img',
          null,
          Object.assign({ src, alt }, attrs)
        )
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
          ? tag
          : 'h1'
        const element = this.wrap(allowedTag, text)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap('hr', null)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap('br', null)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite })
        const element = this.wrap('blockquote', text, attrs)
        return this.addRaw(element).addEOL()
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap('a', text, { href })
        return this.addRaw(element).addEOL()
      }
    }
    const _summary = new Summary()
    /**
     * @deprecated use `core.summary`
     */
    exports.markdownSummary = _summary
    exports.summary = _summary
    //# sourceMappingURL=summary.js.map

    /***/
  },

  /***/ 5278: /***/ (__unused_webpack_module, exports) => {
    // We use any as a valid input type
    /* eslint-disable @typescript-eslint/no-explicit-any */
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.toCommandProperties = exports.toCommandValue = void 0
    /**
     * Sanitizes an input into a string so it can be passed into issueCommand safely
     * @param input input to sanitize into a string
     */
    function toCommandValue(input) {
      if (input === null || input === undefined) {
        return ''
      } else if (typeof input === 'string' || input instanceof String) {
        return input
      }
      return JSON.stringify(input)
    }
    exports.toCommandValue = toCommandValue
    /**
     *
     * @param annotationProperties
     * @returns The command properties to send with the actual annotation command
     * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
     */
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {}
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      }
    }
    exports.toCommandProperties = toCommandProperties
    //# sourceMappingURL=utils.js.map

    /***/
  },

  /***/ 5526: /***/ function (__unused_webpack_module, exports) {
    var __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.PersonalAccessTokenCredentialHandler =
      exports.BearerCredentialHandler =
      exports.BasicCredentialHandler =
        void 0
    class BasicCredentialHandler {
      constructor(username, password) {
        this.username = username
        this.password = password
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers')
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(
          `${this.username}:${this.password}`
        ).toString('base64')}`
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented')
        })
      }
    }
    exports.BasicCredentialHandler = BasicCredentialHandler
    class BearerCredentialHandler {
      constructor(token) {
        this.token = token
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers')
        }
        options.headers['Authorization'] = `Bearer ${this.token}`
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented')
        })
      }
    }
    exports.BearerCredentialHandler = BearerCredentialHandler
    class PersonalAccessTokenCredentialHandler {
      constructor(token) {
        this.token = token
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers')
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(
          `PAT:${this.token}`
        ).toString('base64')}`
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented')
        })
      }
    }
    exports.PersonalAccessTokenCredentialHandler =
      PersonalAccessTokenCredentialHandler
    //# sourceMappingURL=auth.js.map

    /***/
  },

  /***/ 6255: /***/ function (
    __unused_webpack_module,
    exports,
    __nccwpck_require__
  ) {
    /* eslint-disable @typescript-eslint/no-explicit-any */
    var __createBinding =
      (this && this.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            var desc = Object.getOwnPropertyDescriptor(m, k)
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              }
            }
            Object.defineProperty(o, k2, desc)
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k
            o[k2] = m[k]
          })
    var __setModuleDefault =
      (this && this.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v })
          }
        : function (o, v) {
            o['default'] = v
          })
    var __importStar =
      (this && this.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod
        var result = {}
        if (mod != null)
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k)
        __setModuleDefault(result, mod)
        return result
      }
    var __awaiter =
      (this && this.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value)
              })
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value))
            } catch (e) {
              reject(e)
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value))
            } catch (e) {
              reject(e)
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected)
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next())
        })
      }
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.HttpClient =
      exports.isHttps =
      exports.HttpClientResponse =
      exports.HttpClientError =
      exports.getProxyUrl =
      exports.MediaTypes =
      exports.Headers =
      exports.HttpCodes =
        void 0
    const http = __importStar(__nccwpck_require__(3685))
    const https = __importStar(__nccwpck_require__(5687))
    const pm = __importStar(__nccwpck_require__(9835))
    const tunnel = __importStar(__nccwpck_require__(4294))
    const undici_1 = __nccwpck_require__(1773)
    var HttpCodes
    ;(function (HttpCodes) {
      HttpCodes[(HttpCodes['OK'] = 200)] = 'OK'
      HttpCodes[(HttpCodes['MultipleChoices'] = 300)] = 'MultipleChoices'
      HttpCodes[(HttpCodes['MovedPermanently'] = 301)] = 'MovedPermanently'
      HttpCodes[(HttpCodes['ResourceMoved'] = 302)] = 'ResourceMoved'
      HttpCodes[(HttpCodes['SeeOther'] = 303)] = 'SeeOther'
      HttpCodes[(HttpCodes['NotModified'] = 304)] = 'NotModified'
      HttpCodes[(HttpCodes['UseProxy'] = 305)] = 'UseProxy'
      HttpCodes[(HttpCodes['SwitchProxy'] = 306)] = 'SwitchProxy'
      HttpCodes[(HttpCodes['TemporaryRedirect'] = 307)] = 'TemporaryRedirect'
      HttpCodes[(HttpCodes['PermanentRedirect'] = 308)] = 'PermanentRedirect'
      HttpCodes[(HttpCodes['BadRequest'] = 400)] = 'BadRequest'
      HttpCodes[(HttpCodes['Unauthorized'] = 401)] = 'Unauthorized'
      HttpCodes[(HttpCodes['PaymentRequired'] = 402)] = 'PaymentRequired'
      HttpCodes[(HttpCodes['Forbidden'] = 403)] = 'Forbidden'
      HttpCodes[(HttpCodes['NotFound'] = 404)] = 'NotFound'
      HttpCodes[(HttpCodes['MethodNotAllowed'] = 405)] = 'MethodNotAllowed'
      HttpCodes[(HttpCodes['NotAcceptable'] = 406)] = 'NotAcceptable'
      HttpCodes[(HttpCodes['ProxyAuthenticationRequired'] = 407)] =
        'ProxyAuthenticationRequired'
      HttpCodes[(HttpCodes['RequestTimeout'] = 408)] = 'RequestTimeout'
      HttpCodes[(HttpCodes['Conflict'] = 409)] = 'Conflict'
      HttpCodes[(HttpCodes['Gone'] = 410)] = 'Gone'
      HttpCodes[(HttpCodes['TooManyRequests'] = 429)] = 'TooManyRequests'
      HttpCodes[(HttpCodes['InternalServerError'] = 500)] =
        'InternalServerError'
      HttpCodes[(HttpCodes['NotImplemented'] = 501)] = 'NotImplemented'
      HttpCodes[(HttpCodes['BadGateway'] = 502)] = 'BadGateway'
      HttpCodes[(HttpCodes['ServiceUnavailable'] = 503)] = 'ServiceUnavailable'
      HttpCodes[(HttpCodes['GatewayTimeout'] = 504)] = 'GatewayTimeout'
    })(HttpCodes || (exports.HttpCodes = HttpCodes = {}))
    var Headers
    ;(function (Headers) {
      Headers['Accept'] = 'accept'
      Headers['ContentType'] = 'content-type'
    })(Headers || (exports.Headers = Headers = {}))
    var MediaTypes
    ;(function (MediaTypes) {
      MediaTypes['ApplicationJson'] = 'application/json'
    })(MediaTypes || (exports.MediaTypes = MediaTypes = {}))
    /**
     * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl))
      return proxyUrl ? proxyUrl.href : ''
    }
    exports.getProxyUrl = getProxyUrl
    const HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ]
    const HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ]
    const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD']
    const ExponentialBackoffCeiling = 10
    const ExponentialBackoffTimeSlice = 5
    class HttpClientError extends Error {
      constructor(message, statusCode) {
        super(message)
        this.name = 'HttpClientError'
        this.statusCode = statusCode
        Object.setPrototypeOf(this, HttpClientError.prototype)
      }
    }
    exports.HttpClientError = HttpClientError
    class HttpClientResponse {
      constructor(message) {
        this.message = message
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) =>
            __awaiter(this, void 0, void 0, function* () {
              let output = Buffer.alloc(0)
              this.message.on('data', (chunk) => {
                output = Buffer.concat([output, chunk])
              })
              this.message.on('end', () => {
                resolve(output.toString())
              })
            })
          )
        })
      }
      readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) =>
            __awaiter(this, void 0, void 0, function* () {
              const chunks = []
              this.message.on('data', (chunk) => {
                chunks.push(chunk)
              })
              this.message.on('end', () => {
                resolve(Buffer.concat(chunks))
              })
            })
          )
        })
      }
    }
    exports.HttpClientResponse = HttpClientResponse
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl)
      return parsedUrl.protocol === 'https:'
    }
    exports.isHttps = isHttps
    class HttpClient {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false
        this._allowRedirects = true
        this._allowRedirectDowngrade = false
        this._maxRedirects = 50
        this._allowRetries = false
        this._maxRetries = 1
        this._keepAlive = false
        this._disposed = false
        this.userAgent = userAgent
        this.handlers = handlers || []
        this.requestOptions = requestOptions
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError
          }
          this._socketTimeout = requestOptions.socketTimeout
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0)
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(
            'OPTIONS',
            requestUrl,
            null,
            additionalHeaders || {}
          )
        })
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('GET', requestUrl, null, additionalHeaders || {})
        })
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(
            'DELETE',
            requestUrl,
            null,
            additionalHeaders || {}
          )
        })
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('POST', requestUrl, data, additionalHeaders || {})
        })
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(
            'PATCH',
            requestUrl,
            data,
            additionalHeaders || {}
          )
        })
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('PUT', requestUrl, data, additionalHeaders || {})
        })
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('HEAD', requestUrl, null, additionalHeaders || {})
        })
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders)
        })
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          const res = yield this.get(requestUrl, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        })
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] =
            this._getExistingOrDefaultHeader(
              additionalHeaders,
              Headers.ContentType,
              MediaTypes.ApplicationJson
            )
          const res = yield this.post(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        })
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] =
            this._getExistingOrDefaultHeader(
              additionalHeaders,
              Headers.ContentType,
              MediaTypes.ApplicationJson
            )
          const res = yield this.put(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        })
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] =
            this._getExistingOrDefaultHeader(
              additionalHeaders,
              Headers.ContentType,
              MediaTypes.ApplicationJson
            )
          const res = yield this.patch(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        })
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error('Client has already been disposed.')
          }
          const parsedUrl = new URL(requestUrl)
          let info = this._prepareRequest(verb, parsedUrl, headers)
          // Only perform retries on reads since writes may not be idempotent.
          const maxTries =
            this._allowRetries && RetryableHttpVerbs.includes(verb)
              ? this._maxRetries + 1
              : 1
          let numTries = 0
          let response
          do {
            response = yield this.requestRaw(info, data)
            // Check if it's an authentication challenge
            if (
              response &&
              response.message &&
              response.message.statusCode === HttpCodes.Unauthorized
            ) {
              let authenticationHandler
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler
                  break
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(
                  this,
                  info,
                  data
                )
              } else {
                // We have received an unauthorized response but have no handlers to handle it.
                // Let the response return to the caller.
                return response
              }
            }
            let redirectsRemaining = this._maxRedirects
            while (
              response.message.statusCode &&
              HttpRedirectCodes.includes(response.message.statusCode) &&
              this._allowRedirects &&
              redirectsRemaining > 0
            ) {
              const redirectUrl = response.message.headers['location']
              if (!redirectUrl) {
                // if there's no location to redirect to, we won't
                break
              }
              const parsedRedirectUrl = new URL(redirectUrl)
              if (
                parsedUrl.protocol === 'https:' &&
                parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                !this._allowRedirectDowngrade
              ) {
                throw new Error(
                  'Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.'
                )
              }
              // we need to finish reading the response before reassigning response
              // which will leak the open socket.
              yield response.readBody()
              // strip authorization header if redirected to a different hostname
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  // header names are case insensitive
                  if (header.toLowerCase() === 'authorization') {
                    delete headers[header]
                  }
                }
              }
              // let's make the request with the new redirectUrl
              info = this._prepareRequest(verb, parsedRedirectUrl, headers)
              response = yield this.requestRaw(info, data)
              redirectsRemaining--
            }
            if (
              !response.message.statusCode ||
              !HttpResponseRetryCodes.includes(response.message.statusCode)
            ) {
              // If not a retry code, return immediately instead of retrying
              return response
            }
            numTries += 1
            if (numTries < maxTries) {
              yield response.readBody()
              yield this._performExponentialBackoff(numTries)
            }
          } while (numTries < maxTries)
          return response
        })
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy()
        }
        this._disposed = true
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err)
              } else if (!res) {
                // If `err` is not passed, then `res` must be passed.
                reject(new Error('Unknown error'))
              } else {
                resolve(res)
              }
            }
            this.requestRawWithCallback(info, data, callbackForResult)
          })
        })
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
          if (!info.options.headers) {
            info.options.headers = {}
          }
          info.options.headers['Content-Length'] = Buffer.byteLength(
            data,
            'utf8'
          )
        }
        let callbackCalled = false
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true
            onResult(err, res)
          }
        }
        const req = info.httpModule.request(info.options, (msg) => {
          const res = new HttpClientResponse(msg)
          handleResult(undefined, res)
        })
        let socket
        req.on('socket', (sock) => {
          socket = sock
        })
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
          if (socket) {
            socket.end()
          }
          handleResult(new Error(`Request timeout: ${info.options.path}`))
        })
        req.on('error', function (err) {
          // err has statusCode property
          // res should have headers
          handleResult(err)
        })
        if (data && typeof data === 'string') {
          req.write(data, 'utf8')
        }
        if (data && typeof data !== 'string') {
          data.on('close', function () {
            req.end()
          })
          data.pipe(req)
        } else {
          req.end()
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl)
        return this._getAgent(parsedUrl)
      }
      getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl)
        const proxyUrl = pm.getProxyUrl(parsedUrl)
        const useProxy = proxyUrl && proxyUrl.hostname
        if (!useProxy) {
          return
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl)
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {}
        info.parsedUrl = requestUrl
        const usingSsl = info.parsedUrl.protocol === 'https:'
        info.httpModule = usingSsl ? https : http
        const defaultPort = usingSsl ? 443 : 80
        info.options = {}
        info.options.host = info.parsedUrl.hostname
        info.options.port = info.parsedUrl.port
          ? parseInt(info.parsedUrl.port)
          : defaultPort
        info.options.path =
          (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '')
        info.options.method = method
        info.options.headers = this._mergeHeaders(headers)
        if (this.userAgent != null) {
          info.options.headers['user-agent'] = this.userAgent
        }
        info.options.agent = this._getAgent(info.parsedUrl)
        // gives handlers an opportunity to participate
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info.options)
          }
        }
        return info
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign(
            {},
            lowercaseKeys(this.requestOptions.headers),
            lowercaseKeys(headers || {})
          )
        }
        return lowercaseKeys(headers || {})
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header]
        }
        return additionalHeaders[header] || clientHeader || _default
      }
      _getAgent(parsedUrl) {
        let agent
        const proxyUrl = pm.getProxyUrl(parsedUrl)
        const useProxy = proxyUrl && proxyUrl.hostname
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent
        }
        // if agent is already assigned use that agent.
        if (agent) {
          return agent
        }
        const usingSsl = parsedUrl.protocol === 'https:'
        let maxSockets = 100
        if (this.requestOptions) {
          maxSockets =
            this.requestOptions.maxSockets || http.globalAgent.maxSockets
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(
              Object.assign(
                {},
                (proxyUrl.username || proxyUrl.password) && {
                  proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                }
              ),
              { host: proxyUrl.hostname, port: proxyUrl.port }
            )
          }
          let tunnelAgent
          const overHttps = proxyUrl.protocol === 'https:'
          if (usingSsl) {
            tunnelAgent = overHttps
              ? tunnel.httpsOverHttps
              : tunnel.httpsOverHttp
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp
          }
          agent = tunnelAgent(agentOptions)
          this._proxyAgent = agent
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets }
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options)
          this._agent = agent
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent
        }
        if (usingSsl && this._ignoreSslError) {
          // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
          // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
          // we have to cast it to any and change it directly
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          })
        }
        return agent
      }
      _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent
        if (this._keepAlive) {
          proxyAgent = this._proxyAgentDispatcher
        }
        // if agent is already assigned use that agent.
        if (proxyAgent) {
          return proxyAgent
        }
        const usingSsl = parsedUrl.protocol === 'https:'
        proxyAgent = new undici_1.ProxyAgent(
          Object.assign(
            { uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 },
            (proxyUrl.username || proxyUrl.password) && {
              token: `${proxyUrl.username}:${proxyUrl.password}`
            }
          )
        )
        this._proxyAgentDispatcher = proxyAgent
        if (usingSsl && this._ignoreSslError) {
          // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
          // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
          // we have to cast it to any and change it directly
          proxyAgent.options = Object.assign(
            proxyAgent.options.requestTls || {},
            {
              rejectUnauthorized: false
            }
          )
        }
        return proxyAgent
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber)
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber)
          return new Promise((resolve) => setTimeout(() => resolve(), ms))
        })
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) =>
            __awaiter(this, void 0, void 0, function* () {
              const statusCode = res.message.statusCode || 0
              const response = {
                statusCode,
                result: null,
                headers: {}
              }
              // not found leads to null obj returned
              if (statusCode === HttpCodes.NotFound) {
                resolve(response)
              }
              // get the result from the body
              function dateTimeDeserializer(key, value) {
                if (typeof value === 'string') {
                  const a = new Date(value)
                  if (!isNaN(a.valueOf())) {
                    return a
                  }
                }
                return value
              }
              let obj
              let contents
              try {
                contents = yield res.readBody()
                if (contents && contents.length > 0) {
                  if (options && options.deserializeDates) {
                    obj = JSON.parse(contents, dateTimeDeserializer)
                  } else {
                    obj = JSON.parse(contents)
                  }
                  response.result = obj
                }
                response.headers = res.message.headers
              } catch (err) {
                // Invalid resource (contents not json);  leaving result obj null
              }
              // note that 3xx redirects are handled by the http layer.
              if (statusCode > 299) {
                let msg
                // if exception/error in body, attempt to get better error
                if (obj && obj.message) {
                  msg = obj.message
                } else if (contents && contents.length > 0) {
                  // it may be the case that the exception is in the body message as string
                  msg = contents
                } else {
                  msg = `Failed request: (${statusCode})`
                }
                const err = new HttpClientError(msg, statusCode)
                err.result = response.result
                reject(err)
              } else {
                resolve(response)
              }
            })
          )
        })
      }
    }
    exports.HttpClient = HttpClient
    const lowercaseKeys = (obj) =>
      Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {})
    //# sourceMappingURL=index.js.map

    /***/
  },

  /***/ 9835: /***/ (__unused_webpack_module, exports) => {
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.checkBypass = exports.getProxyUrl = void 0
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === 'https:'
      if (checkBypass(reqUrl)) {
        return undefined
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env['https_proxy'] || process.env['HTTPS_PROXY']
        } else {
          return process.env['http_proxy'] || process.env['HTTP_PROXY']
        }
      })()
      if (proxyVar) {
        try {
          return new URL(proxyVar)
        } catch (_a) {
          if (
            !proxyVar.startsWith('http://') &&
            !proxyVar.startsWith('https://')
          )
            return new URL(`http://${proxyVar}`)
        }
      } else {
        return undefined
      }
    }
    exports.getProxyUrl = getProxyUrl
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false
      }
      const reqHost = reqUrl.hostname
      if (isLoopbackAddress(reqHost)) {
        return true
      }
      const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || ''
      if (!noProxy) {
        return false
      }
      // Determine the request port
      let reqPort
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port)
      } else if (reqUrl.protocol === 'http:') {
        reqPort = 80
      } else if (reqUrl.protocol === 'https:') {
        reqPort = 443
      }
      // Format the request hostname and hostname with port
      const upperReqHosts = [reqUrl.hostname.toUpperCase()]
      if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`)
      }
      // Compare request host against noproxy
      for (const upperNoProxyItem of noProxy
        .split(',')
        .map((x) => x.trim().toUpperCase())
        .filter((x) => x)) {
        if (
          upperNoProxyItem === '*' ||
          upperReqHosts.some(
            (x) =>
              x === upperNoProxyItem ||
              x.endsWith(`.${upperNoProxyItem}`) ||
              (upperNoProxyItem.startsWith('.') &&
                x.endsWith(`${upperNoProxyItem}`))
          )
        ) {
          return true
        }
      }
      return false
    }
    exports.checkBypass = checkBypass
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase()
      return (
        hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]')
      )
    }
    //# sourceMappingURL=proxy.js.map

    /***/
  },

  /***/ 7663: /***/ (module) => {
    var __create = Object.create
    var __defProp = Object.defineProperty
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor
    var __getOwnPropNames = Object.getOwnPropertyNames
    var __getProtoOf = Object.getPrototypeOf
    var __hasOwnProp = Object.prototype.hasOwnProperty
    var __commonJS = (cb, mod) =>
      function __require() {
        return (
          mod ||
            (0, cb[__getOwnPropNames(cb)[0]])(
              (mod = { exports: {} }).exports,
              mod
            ),
          mod.exports
        )
      }
    var __export = (target, all) => {
      for (var name2 in all)
        __defProp(target, name2, { get: all[name2], enumerable: true })
    }
    var __copyProps = (to, from3, except, desc) => {
      if ((from3 && typeof from3 === 'object') || typeof from3 === 'function') {
        for (let key of __getOwnPropNames(from3))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, {
              get: () => from3[key],
              enumerable:
                !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable
            })
      }
      return to
    }
    var __toESM = (mod, isNodeMode, target) => (
      (target = mod != null ? __create(__getProtoOf(mod)) : {}),
      __copyProps(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    )
    var __toCommonJS = (mod) =>
      __copyProps(__defProp({}, '__esModule', { value: true }), mod)

    // ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js
    var require_boundaries = __commonJS({
      '../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js'(
        exports
      ) {
        'use strict'
        Object.defineProperty(exports, '__esModule', { value: true })
        exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0
        var CLUSTER_BREAK
        ;(function (CLUSTER_BREAK2) {
          CLUSTER_BREAK2[(CLUSTER_BREAK2['CR'] = 0)] = 'CR'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['LF'] = 1)] = 'LF'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['CONTROL'] = 2)] = 'CONTROL'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['EXTEND'] = 3)] = 'EXTEND'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['REGIONAL_INDICATOR'] = 4)] =
            'REGIONAL_INDICATOR'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['SPACINGMARK'] = 5)] = 'SPACINGMARK'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['L'] = 6)] = 'L'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['V'] = 7)] = 'V'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['T'] = 8)] = 'T'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['LV'] = 9)] = 'LV'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['LVT'] = 10)] = 'LVT'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['OTHER'] = 11)] = 'OTHER'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['PREPEND'] = 12)] = 'PREPEND'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['E_BASE'] = 13)] = 'E_BASE'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['E_MODIFIER'] = 14)] = 'E_MODIFIER'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['ZWJ'] = 15)] = 'ZWJ'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['GLUE_AFTER_ZWJ'] = 16)] =
            'GLUE_AFTER_ZWJ'
          CLUSTER_BREAK2[(CLUSTER_BREAK2['E_BASE_GAZ'] = 17)] = 'E_BASE_GAZ'
        })(
          (CLUSTER_BREAK =
            exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}))
        )
        exports.EXTENDED_PICTOGRAPHIC = 101
      }
    })

    // ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js
    var require_GraphemerHelper = __commonJS({
      '../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js'(
        exports
      ) {
        'use strict'
        Object.defineProperty(exports, '__esModule', { value: true })
        var boundaries_1 = require_boundaries()
        var NotBreak = 0
        var BreakStart = 1
        var Break = 2
        var BreakLastRegional = 3
        var BreakPenultimateRegional = 4
        var GraphemerHelper = class {
          static isSurrogate(str, pos) {
            return (
              55296 <= str.charCodeAt(pos) &&
              str.charCodeAt(pos) <= 56319 &&
              56320 <= str.charCodeAt(pos + 1) &&
              str.charCodeAt(pos + 1) <= 57343
            )
          }
          static codePointAt(str, idx) {
            if (idx === void 0) {
              idx = 0
            }
            const code2 = str.charCodeAt(idx)
            if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
              const hi = code2
              const low = str.charCodeAt(idx + 1)
              if (56320 <= low && low <= 57343) {
                return (hi - 55296) * 1024 + (low - 56320) + 65536
              }
              return hi
            }
            if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
              const hi = str.charCodeAt(idx - 1)
              const low = code2
              if (55296 <= hi && hi <= 56319) {
                return (hi - 55296) * 1024 + (low - 56320) + 65536
              }
              return low
            }
            return code2
          }
          static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
            const all = [start].concat(mid).concat([end])
            const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji])
            const previous = all[all.length - 2]
            const next = end
            const nextEmoji = endEmoji
            const rIIndex = all.lastIndexOf(
              boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
            )
            if (
              rIIndex > 0 &&
              all.slice(1, rIIndex).every(function (c) {
                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
              }) &&
              [
                boundaries_1.CLUSTER_BREAK.PREPEND,
                boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
              ].indexOf(previous) === -1
            ) {
              if (
                all.filter(function (c) {
                  return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
                }).length %
                  2 ===
                1
              ) {
                return BreakLastRegional
              } else {
                return BreakPenultimateRegional
              }
            }
            if (
              previous === boundaries_1.CLUSTER_BREAK.CR &&
              next === boundaries_1.CLUSTER_BREAK.LF
            ) {
              return NotBreak
            } else if (
              previous === boundaries_1.CLUSTER_BREAK.CONTROL ||
              previous === boundaries_1.CLUSTER_BREAK.CR ||
              previous === boundaries_1.CLUSTER_BREAK.LF
            ) {
              return BreakStart
            } else if (
              next === boundaries_1.CLUSTER_BREAK.CONTROL ||
              next === boundaries_1.CLUSTER_BREAK.CR ||
              next === boundaries_1.CLUSTER_BREAK.LF
            ) {
              return BreakStart
            } else if (
              previous === boundaries_1.CLUSTER_BREAK.L &&
              (next === boundaries_1.CLUSTER_BREAK.L ||
                next === boundaries_1.CLUSTER_BREAK.V ||
                next === boundaries_1.CLUSTER_BREAK.LV ||
                next === boundaries_1.CLUSTER_BREAK.LVT)
            ) {
              return NotBreak
            } else if (
              (previous === boundaries_1.CLUSTER_BREAK.LV ||
                previous === boundaries_1.CLUSTER_BREAK.V) &&
              (next === boundaries_1.CLUSTER_BREAK.V ||
                next === boundaries_1.CLUSTER_BREAK.T)
            ) {
              return NotBreak
            } else if (
              (previous === boundaries_1.CLUSTER_BREAK.LVT ||
                previous === boundaries_1.CLUSTER_BREAK.T) &&
              next === boundaries_1.CLUSTER_BREAK.T
            ) {
              return NotBreak
            } else if (
              next === boundaries_1.CLUSTER_BREAK.EXTEND ||
              next === boundaries_1.CLUSTER_BREAK.ZWJ
            ) {
              return NotBreak
            } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
              return NotBreak
            } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
              return NotBreak
            }
            const previousNonExtendIndex = allEmoji
              .slice(0, -1)
              .lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC)
            if (
              previousNonExtendIndex !== -1 &&
              allEmoji[previousNonExtendIndex] ===
                boundaries_1.EXTENDED_PICTOGRAPHIC &&
              all.slice(previousNonExtendIndex + 1, -2).every(function (c) {
                return c === boundaries_1.CLUSTER_BREAK.EXTEND
              }) &&
              previous === boundaries_1.CLUSTER_BREAK.ZWJ &&
              nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC
            ) {
              return NotBreak
            }
            if (
              mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1
            ) {
              return Break
            }
            if (
              previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR &&
              next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
            ) {
              return NotBreak
            }
            return BreakStart
          }
        }
        exports.default = GraphemerHelper
      }
    })

    // ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js
    var require_GraphemerIterator = __commonJS({
      '../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js'(
        exports
      ) {
        'use strict'
        Object.defineProperty(exports, '__esModule', { value: true })
        var GraphemerIterator = class {
          constructor(str, nextBreak) {
            this._index = 0
            this._str = str
            this._nextBreak = nextBreak
          }
          [Symbol.iterator]() {
            return this
          }
          next() {
            let brk
            if (
              (brk = this._nextBreak(this._str, this._index)) < this._str.length
            ) {
              const value = this._str.slice(this._index, brk)
              this._index = brk
              return { value, done: false }
            }
            if (this._index < this._str.length) {
              const value = this._str.slice(this._index)
              this._index = this._str.length
              return { value, done: false }
            }
            return { value: void 0, done: true }
          }
        }
        exports.default = GraphemerIterator
      }
    })

    // ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js
    var require_Graphemer = __commonJS({
      '../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js'(
        exports
      ) {
        'use strict'
        var __importDefault =
          (exports && exports.__importDefault) ||
          function (mod) {
            return mod && mod.__esModule ? mod : { default: mod }
          }
        Object.defineProperty(exports, '__esModule', { value: true })
        var boundaries_1 = require_boundaries()
        var GraphemerHelper_1 = __importDefault(require_GraphemerHelper())
        var GraphemerIterator_1 = __importDefault(require_GraphemerIterator())
        var Graphemer2 = class {
          static nextBreak(string3, index) {
            if (index === void 0) {
              index = 0
            }
            if (index < 0) {
              return 0
            }
            if (index >= string3.length - 1) {
              return string3.length
            }
            const prevCP = GraphemerHelper_1.default.codePointAt(string3, index)
            const prev = Graphemer2.getGraphemeBreakProperty(prevCP)
            const prevEmoji = Graphemer2.getEmojiProperty(prevCP)
            const mid = []
            const midEmoji = []
            for (let i = index + 1; i < string3.length; i++) {
              if (GraphemerHelper_1.default.isSurrogate(string3, i - 1)) {
                continue
              }
              const nextCP = GraphemerHelper_1.default.codePointAt(string3, i)
              const next = Graphemer2.getGraphemeBreakProperty(nextCP)
              const nextEmoji = Graphemer2.getEmojiProperty(nextCP)
              if (
                GraphemerHelper_1.default.shouldBreak(
                  prev,
                  mid,
                  next,
                  prevEmoji,
                  midEmoji,
                  nextEmoji
                )
              ) {
                return i
              }
              mid.push(next)
              midEmoji.push(nextEmoji)
            }
            return string3.length
          }
          splitGraphemes(str) {
            const res = []
            let index = 0
            let brk
            while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {
              res.push(str.slice(index, brk))
              index = brk
            }
            if (index < str.length) {
              res.push(str.slice(index))
            }
            return res
          }
          iterateGraphemes(str) {
            return new GraphemerIterator_1.default(str, Graphemer2.nextBreak)
          }
          countGraphemes(str) {
            let count = 0
            let index = 0
            let brk
            while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {
              index = brk
              count++
            }
            if (index < str.length) {
              count++
            }
            return count
          }
          static getGraphemeBreakProperty(code2) {
            if (code2 < 48905) {
              if (code2 < 44116) {
                if (code2 < 4141) {
                  if (code2 < 2818) {
                    if (code2 < 2363) {
                      if (code2 < 1759) {
                        if (code2 < 1471) {
                          if (code2 < 127) {
                            if (code2 < 11) {
                              if (code2 < 10) {
                                if (0 <= code2 && code2 <= 9) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 === 10) {
                                  return boundaries_1.CLUSTER_BREAK.LF
                                }
                              }
                            } else {
                              if (code2 < 13) {
                                if (11 <= code2 && code2 <= 12) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 < 14) {
                                  if (code2 === 13) {
                                    return boundaries_1.CLUSTER_BREAK.CR
                                  }
                                } else {
                                  if (14 <= code2 && code2 <= 31) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 768) {
                              if (code2 < 173) {
                                if (127 <= code2 && code2 <= 159) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 === 173) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              }
                            } else {
                              if (code2 < 1155) {
                                if (768 <= code2 && code2 <= 879) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 1425) {
                                  if (1155 <= code2 && code2 <= 1161) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (1425 <= code2 && code2 <= 1469) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 1552) {
                            if (code2 < 1476) {
                              if (code2 < 1473) {
                                if (code2 === 1471) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (1473 <= code2 && code2 <= 1474) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 1479) {
                                if (1476 <= code2 && code2 <= 1477) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 1536) {
                                  if (code2 === 1479) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (1536 <= code2 && code2 <= 1541) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 1648) {
                              if (code2 < 1564) {
                                if (1552 <= code2 && code2 <= 1562) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 1611) {
                                  if (code2 === 1564) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                } else {
                                  if (1611 <= code2 && code2 <= 1631) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 1750) {
                                if (code2 === 1648) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 1757) {
                                  if (1750 <= code2 && code2 <= 1756) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 1757) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2075) {
                          if (code2 < 1840) {
                            if (code2 < 1770) {
                              if (code2 < 1767) {
                                if (1759 <= code2 && code2 <= 1764) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (1767 <= code2 && code2 <= 1768) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 1807) {
                                if (1770 <= code2 && code2 <= 1773) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 1807) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                                if (code2 === 1809) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 2027) {
                              if (code2 < 1958) {
                                if (1840 <= code2 && code2 <= 1866) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (1958 <= code2 && code2 <= 1968) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 2045) {
                                if (2027 <= code2 && code2 <= 2035) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2070) {
                                  if (code2 === 2045) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2070 <= code2 && code2 <= 2073) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2200) {
                            if (code2 < 2089) {
                              if (code2 < 2085) {
                                if (2075 <= code2 && code2 <= 2083) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (2085 <= code2 && code2 <= 2087) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 2137) {
                                if (2089 <= code2 && code2 <= 2093) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2192) {
                                  if (2137 <= code2 && code2 <= 2139) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2192 <= code2 && code2 <= 2193) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2275) {
                              if (code2 < 2250) {
                                if (2200 <= code2 && code2 <= 2207) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2274) {
                                  if (2250 <= code2 && code2 <= 2273) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 2274) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2307) {
                                if (2275 <= code2 && code2 <= 2306) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 2307) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 2362) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2561) {
                        if (code2 < 2434) {
                          if (code2 < 2381) {
                            if (code2 < 2366) {
                              if (code2 === 2363) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 2364) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 2369) {
                                if (2366 <= code2 && code2 <= 2368) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 2377) {
                                  if (2369 <= code2 && code2 <= 2376) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2377 <= code2 && code2 <= 2380) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2385) {
                              if (code2 < 2382) {
                                if (code2 === 2381) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (2382 <= code2 && code2 <= 2383) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 2402) {
                                if (2385 <= code2 && code2 <= 2391) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2433) {
                                  if (2402 <= code2 && code2 <= 2403) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 2433) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2503) {
                            if (code2 < 2494) {
                              if (code2 < 2492) {
                                if (2434 <= code2 && code2 <= 2435) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 2492) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 2495) {
                                if (code2 === 2494) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2497) {
                                  if (2495 <= code2 && code2 <= 2496) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (2497 <= code2 && code2 <= 2500) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2519) {
                              if (code2 < 2507) {
                                if (2503 <= code2 && code2 <= 2504) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 2509) {
                                  if (2507 <= code2 && code2 <= 2508) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 2509) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2530) {
                                if (code2 === 2519) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2558) {
                                  if (2530 <= code2 && code2 <= 2531) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 2558) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2691) {
                          if (code2 < 2631) {
                            if (code2 < 2620) {
                              if (code2 < 2563) {
                                if (2561 <= code2 && code2 <= 2562) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 2563) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 2622) {
                                if (code2 === 2620) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2625) {
                                  if (2622 <= code2 && code2 <= 2624) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (2625 <= code2 && code2 <= 2626) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2672) {
                              if (code2 < 2635) {
                                if (2631 <= code2 && code2 <= 2632) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2641) {
                                  if (2635 <= code2 && code2 <= 2637) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 2641) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2677) {
                                if (2672 <= code2 && code2 <= 2673) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2689) {
                                  if (code2 === 2677) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2689 <= code2 && code2 <= 2690) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2761) {
                            if (code2 < 2750) {
                              if (code2 === 2691) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 2748) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 2753) {
                                if (2750 <= code2 && code2 <= 2752) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 2759) {
                                  if (2753 <= code2 && code2 <= 2757) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2759 <= code2 && code2 <= 2760) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2786) {
                              if (code2 < 2763) {
                                if (code2 === 2761) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 2765) {
                                  if (2763 <= code2 && code2 <= 2764) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 2765) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2810) {
                                if (2786 <= code2 && code2 <= 2787) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2817) {
                                  if (2810 <= code2 && code2 <= 2815) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 2817) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3315) {
                      if (code2 < 3076) {
                        if (code2 < 2946) {
                          if (code2 < 2887) {
                            if (code2 < 2878) {
                              if (code2 < 2876) {
                                if (2818 <= code2 && code2 <= 2819) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 2876) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 2880) {
                                if (2878 <= code2 && code2 <= 2879) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2881) {
                                  if (code2 === 2880) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (2881 <= code2 && code2 <= 2884) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2893) {
                              if (code2 < 2891) {
                                if (2887 <= code2 && code2 <= 2888) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (2891 <= code2 && code2 <= 2892) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 2901) {
                                if (code2 === 2893) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 2914) {
                                  if (2901 <= code2 && code2 <= 2903) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (2914 <= code2 && code2 <= 2915) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3014) {
                            if (code2 < 3007) {
                              if (code2 === 2946) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                              if (code2 === 3006) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 3008) {
                                if (code2 === 3007) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3009) {
                                  if (code2 === 3008) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3009 <= code2 && code2 <= 3010) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3031) {
                              if (code2 < 3018) {
                                if (3014 <= code2 && code2 <= 3016) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3021) {
                                  if (3018 <= code2 && code2 <= 3020) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 3021) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3072) {
                                if (code2 === 3031) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3073) {
                                  if (code2 === 3072) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3073 <= code2 && code2 <= 3075) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3262) {
                          if (code2 < 3146) {
                            if (code2 < 3134) {
                              if (code2 === 3076) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                              if (code2 === 3132) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 3137) {
                                if (3134 <= code2 && code2 <= 3136) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3142) {
                                  if (3137 <= code2 && code2 <= 3140) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (3142 <= code2 && code2 <= 3144) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3201) {
                              if (code2 < 3157) {
                                if (3146 <= code2 && code2 <= 3149) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3170) {
                                  if (3157 <= code2 && code2 <= 3158) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3170 <= code2 && code2 <= 3171) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3202) {
                                if (code2 === 3201) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3260) {
                                  if (3202 <= code2 && code2 <= 3203) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 3260) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3270) {
                            if (code2 < 3264) {
                              if (code2 === 3262) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 3263) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 3266) {
                                if (3264 <= code2 && code2 <= 3265) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3267) {
                                  if (code2 === 3266) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3267 <= code2 && code2 <= 3268) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3276) {
                              if (code2 < 3271) {
                                if (code2 === 3270) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3274) {
                                  if (3271 <= code2 && code2 <= 3272) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (3274 <= code2 && code2 <= 3275) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3285) {
                                if (3276 <= code2 && code2 <= 3277) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3298) {
                                  if (3285 <= code2 && code2 <= 3286) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3298 <= code2 && code2 <= 3299) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3551) {
                        if (code2 < 3406) {
                          if (code2 < 3391) {
                            if (code2 < 3330) {
                              if (code2 < 3328) {
                                if (code2 === 3315) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (3328 <= code2 && code2 <= 3329) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 3387) {
                                if (3330 <= code2 && code2 <= 3331) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3390) {
                                  if (3387 <= code2 && code2 <= 3388) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 3390) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3398) {
                              if (code2 < 3393) {
                                if (3391 <= code2 && code2 <= 3392) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (3393 <= code2 && code2 <= 3396) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 3402) {
                                if (3398 <= code2 && code2 <= 3400) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3405) {
                                  if (3402 <= code2 && code2 <= 3404) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 3405) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3530) {
                            if (code2 < 3426) {
                              if (code2 === 3406) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND
                              }
                              if (code2 === 3415) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 3457) {
                                if (3426 <= code2 && code2 <= 3427) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3458) {
                                  if (code2 === 3457) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3458 <= code2 && code2 <= 3459) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3538) {
                              if (code2 < 3535) {
                                if (code2 === 3530) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3536) {
                                  if (code2 === 3535) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3536 <= code2 && code2 <= 3537) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3542) {
                                if (3538 <= code2 && code2 <= 3540) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3544) {
                                  if (code2 === 3542) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3544 <= code2 && code2 <= 3550) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3893) {
                          if (code2 < 3655) {
                            if (code2 < 3633) {
                              if (code2 < 3570) {
                                if (code2 === 3551) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (3570 <= code2 && code2 <= 3571) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 3635) {
                                if (code2 === 3633) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3636) {
                                  if (code2 === 3635) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (3636 <= code2 && code2 <= 3642) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3764) {
                              if (code2 < 3761) {
                                if (3655 <= code2 && code2 <= 3662) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 3761) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 3763) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 3784) {
                                if (3764 <= code2 && code2 <= 3772) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3864) {
                                  if (3784 <= code2 && code2 <= 3790) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3864 <= code2 && code2 <= 3865) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3967) {
                            if (code2 < 3897) {
                              if (code2 === 3893) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                              if (code2 === 3895) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 3902) {
                                if (code2 === 3897) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 3953) {
                                  if (3902 <= code2 && code2 <= 3903) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (3953 <= code2 && code2 <= 3966) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3981) {
                              if (code2 < 3968) {
                                if (code2 === 3967) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 3974) {
                                  if (3968 <= code2 && code2 <= 3972) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (3974 <= code2 && code2 <= 3975) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3993) {
                                if (3981 <= code2 && code2 <= 3991) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 4038) {
                                  if (3993 <= code2 && code2 <= 4028) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 4038) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 7204) {
                    if (code2 < 6448) {
                      if (code2 < 5938) {
                        if (code2 < 4226) {
                          if (code2 < 4157) {
                            if (code2 < 4146) {
                              if (code2 < 4145) {
                                if (4141 <= code2 && code2 <= 4144) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 4145) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 4153) {
                                if (4146 <= code2 && code2 <= 4151) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 4155) {
                                  if (4153 <= code2 && code2 <= 4154) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (4155 <= code2 && code2 <= 4156) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 4184) {
                              if (code2 < 4182) {
                                if (4157 <= code2 && code2 <= 4158) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (4182 <= code2 && code2 <= 4183) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 4190) {
                                if (4184 <= code2 && code2 <= 4185) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 4209) {
                                  if (4190 <= code2 && code2 <= 4192) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (4209 <= code2 && code2 <= 4212) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 4352) {
                            if (code2 < 4229) {
                              if (code2 === 4226) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                              if (code2 === 4228) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                            } else {
                              if (code2 < 4237) {
                                if (4229 <= code2 && code2 <= 4230) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 4237) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 4253) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 4957) {
                              if (code2 < 4448) {
                                if (4352 <= code2 && code2 <= 4447) {
                                  return boundaries_1.CLUSTER_BREAK.L
                                }
                              } else {
                                if (code2 < 4520) {
                                  if (4448 <= code2 && code2 <= 4519) {
                                    return boundaries_1.CLUSTER_BREAK.V
                                  }
                                } else {
                                  if (4520 <= code2 && code2 <= 4607) {
                                    return boundaries_1.CLUSTER_BREAK.T
                                  }
                                }
                              }
                            } else {
                              if (code2 < 5906) {
                                if (4957 <= code2 && code2 <= 4959) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 5909) {
                                  if (5906 <= code2 && code2 <= 5908) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 5909) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6089) {
                          if (code2 < 6070) {
                            if (code2 < 5970) {
                              if (code2 < 5940) {
                                if (5938 <= code2 && code2 <= 5939) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 5940) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 6002) {
                                if (5970 <= code2 && code2 <= 5971) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 6068) {
                                  if (6002 <= code2 && code2 <= 6003) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6068 <= code2 && code2 <= 6069) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 6078) {
                              if (code2 < 6071) {
                                if (code2 === 6070) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (6071 <= code2 && code2 <= 6077) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 6086) {
                                if (6078 <= code2 && code2 <= 6085) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 6087) {
                                  if (code2 === 6086) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6087 <= code2 && code2 <= 6088) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6277) {
                            if (code2 < 6155) {
                              if (code2 < 6109) {
                                if (6089 <= code2 && code2 <= 6099) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 6109) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 6158) {
                                if (6155 <= code2 && code2 <= 6157) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 6158) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                                if (code2 === 6159) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 6435) {
                              if (code2 < 6313) {
                                if (6277 <= code2 && code2 <= 6278) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 6432) {
                                  if (code2 === 6313) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6432 <= code2 && code2 <= 6434) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6439) {
                                if (6435 <= code2 && code2 <= 6438) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 6441) {
                                  if (6439 <= code2 && code2 <= 6440) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6441 <= code2 && code2 <= 6443) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6971) {
                        if (code2 < 6744) {
                          if (code2 < 6681) {
                            if (code2 < 6451) {
                              if (code2 < 6450) {
                                if (6448 <= code2 && code2 <= 6449) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 6450) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 6457) {
                                if (6451 <= code2 && code2 <= 6456) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 6679) {
                                  if (6457 <= code2 && code2 <= 6459) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6679 <= code2 && code2 <= 6680) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 6741) {
                              if (code2 < 6683) {
                                if (6681 <= code2 && code2 <= 6682) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 6683) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 6742) {
                                if (code2 === 6741) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 6742) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 6743) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6771) {
                            if (code2 < 6754) {
                              if (code2 < 6752) {
                                if (6744 <= code2 && code2 <= 6750) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 6752) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 6757) {
                                if (code2 === 6754) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 6765) {
                                  if (6757 <= code2 && code2 <= 6764) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6765 <= code2 && code2 <= 6770) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 6912) {
                              if (code2 < 6783) {
                                if (6771 <= code2 && code2 <= 6780) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 6832) {
                                  if (code2 === 6783) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6832 <= code2 && code2 <= 6862) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6916) {
                                if (6912 <= code2 && code2 <= 6915) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 6964) {
                                  if (code2 === 6916) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (6964 <= code2 && code2 <= 6970) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7080) {
                          if (code2 < 7019) {
                            if (code2 < 6973) {
                              if (code2 === 6971) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 6972) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 6978) {
                                if (6973 <= code2 && code2 <= 6977) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 6979) {
                                  if (code2 === 6978) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (6979 <= code2 && code2 <= 6980) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 7073) {
                              if (code2 < 7040) {
                                if (7019 <= code2 && code2 <= 7027) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 7042) {
                                  if (7040 <= code2 && code2 <= 7041) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 7042) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 7074) {
                                if (code2 === 7073) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 7078) {
                                  if (7074 <= code2 && code2 <= 7077) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (7078 <= code2 && code2 <= 7079) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7144) {
                            if (code2 < 7083) {
                              if (code2 < 7082) {
                                if (7080 <= code2 && code2 <= 7081) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 7082) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 7142) {
                                if (7083 <= code2 && code2 <= 7085) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 7142) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 7143) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          } else {
                            if (code2 < 7150) {
                              if (code2 < 7146) {
                                if (7144 <= code2 && code2 <= 7145) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 7149) {
                                  if (7146 <= code2 && code2 <= 7148) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 7149) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 7151) {
                                if (code2 === 7150) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 7154) {
                                  if (7151 <= code2 && code2 <= 7153) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (7154 <= code2 && code2 <= 7155) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 43346) {
                      if (code2 < 11647) {
                        if (code2 < 7415) {
                          if (code2 < 7380) {
                            if (code2 < 7220) {
                              if (code2 < 7212) {
                                if (7204 <= code2 && code2 <= 7211) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (7212 <= code2 && code2 <= 7219) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 7222) {
                                if (7220 <= code2 && code2 <= 7221) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 7376) {
                                  if (7222 <= code2 && code2 <= 7223) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (7376 <= code2 && code2 <= 7378) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 7394) {
                              if (code2 < 7393) {
                                if (7380 <= code2 && code2 <= 7392) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 7393) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 7405) {
                                if (7394 <= code2 && code2 <= 7400) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 7405) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 7412) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 8205) {
                            if (code2 < 7616) {
                              if (code2 < 7416) {
                                if (code2 === 7415) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (7416 <= code2 && code2 <= 7417) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 8203) {
                                if (7616 <= code2 && code2 <= 7679) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 8203) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                                if (code2 === 8204) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 8288) {
                              if (code2 < 8206) {
                                if (code2 === 8205) {
                                  return boundaries_1.CLUSTER_BREAK.ZWJ
                                }
                              } else {
                                if (code2 < 8232) {
                                  if (8206 <= code2 && code2 <= 8207) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                } else {
                                  if (8232 <= code2 && code2 <= 8238) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                }
                              }
                            } else {
                              if (code2 < 8400) {
                                if (8288 <= code2 && code2 <= 8303) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 < 11503) {
                                  if (8400 <= code2 && code2 <= 8432) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (11503 <= code2 && code2 <= 11505) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43043) {
                          if (code2 < 42612) {
                            if (code2 < 12330) {
                              if (code2 < 11744) {
                                if (code2 === 11647) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (11744 <= code2 && code2 <= 11775) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 12441) {
                                if (12330 <= code2 && code2 <= 12335) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 42607) {
                                  if (12441 <= code2 && code2 <= 12442) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (42607 <= code2 && code2 <= 42610) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 43010) {
                              if (code2 < 42654) {
                                if (42612 <= code2 && code2 <= 42621) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 42736) {
                                  if (42654 <= code2 && code2 <= 42655) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (42736 <= code2 && code2 <= 42737) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43014) {
                                if (code2 === 43010) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 43014) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 43019) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43188) {
                            if (code2 < 43047) {
                              if (code2 < 43045) {
                                if (43043 <= code2 && code2 <= 43044) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (43045 <= code2 && code2 <= 43046) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 43052) {
                                if (code2 === 43047) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 43136) {
                                  if (code2 === 43052) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (43136 <= code2 && code2 <= 43137) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 43263) {
                              if (code2 < 43204) {
                                if (43188 <= code2 && code2 <= 43203) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 43232) {
                                  if (43204 <= code2 && code2 <= 43205) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (43232 <= code2 && code2 <= 43249) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43302) {
                                if (code2 === 43263) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 43335) {
                                  if (43302 <= code2 && code2 <= 43309) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (43335 <= code2 && code2 <= 43345) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43698) {
                        if (code2 < 43493) {
                          if (code2 < 43444) {
                            if (code2 < 43392) {
                              if (code2 < 43360) {
                                if (43346 <= code2 && code2 <= 43347) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (43360 <= code2 && code2 <= 43388) {
                                  return boundaries_1.CLUSTER_BREAK.L
                                }
                              }
                            } else {
                              if (code2 < 43395) {
                                if (43392 <= code2 && code2 <= 43394) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 43395) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 43443) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 43450) {
                              if (code2 < 43446) {
                                if (43444 <= code2 && code2 <= 43445) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (43446 <= code2 && code2 <= 43449) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 43452) {
                                if (43450 <= code2 && code2 <= 43451) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 43454) {
                                  if (43452 <= code2 && code2 <= 43453) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (43454 <= code2 && code2 <= 43456) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43573) {
                            if (code2 < 43567) {
                              if (code2 < 43561) {
                                if (code2 === 43493) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (43561 <= code2 && code2 <= 43566) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 43569) {
                                if (43567 <= code2 && code2 <= 43568) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 43571) {
                                  if (43569 <= code2 && code2 <= 43570) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (43571 <= code2 && code2 <= 43572) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 43597) {
                              if (code2 < 43587) {
                                if (43573 <= code2 && code2 <= 43574) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 43587) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 43596) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 43644) {
                                if (code2 === 43597) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 43644) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 43696) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44006) {
                          if (code2 < 43756) {
                            if (code2 < 43710) {
                              if (code2 < 43703) {
                                if (43698 <= code2 && code2 <= 43700) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (43703 <= code2 && code2 <= 43704) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 43713) {
                                if (43710 <= code2 && code2 <= 43711) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 43713) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 43755) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          } else {
                            if (code2 < 43766) {
                              if (code2 < 43758) {
                                if (43756 <= code2 && code2 <= 43757) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 43765) {
                                  if (43758 <= code2 && code2 <= 43759) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 43765) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44003) {
                                if (code2 === 43766) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 44005) {
                                  if (44003 <= code2 && code2 <= 44004) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 44005) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44032) {
                            if (code2 < 44009) {
                              if (code2 < 44008) {
                                if (44006 <= code2 && code2 <= 44007) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 44008) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 44012) {
                                if (44009 <= code2 && code2 <= 44010) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 44012) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 44013) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 44061) {
                              if (code2 < 44033) {
                                if (code2 === 44032) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44060) {
                                  if (44033 <= code2 && code2 <= 44059) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44060) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44088) {
                                if (44061 <= code2 && code2 <= 44087) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44089) {
                                  if (code2 === 44088) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44089 <= code2 && code2 <= 44115) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 46497) {
                  if (code2 < 45293) {
                    if (code2 < 44704) {
                      if (code2 < 44397) {
                        if (code2 < 44256) {
                          if (code2 < 44173) {
                            if (code2 < 44144) {
                              if (code2 < 44117) {
                                if (code2 === 44116) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (44117 <= code2 && code2 <= 44143) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 44145) {
                                if (code2 === 44144) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44172) {
                                  if (44145 <= code2 && code2 <= 44171) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44172) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44201) {
                              if (code2 < 44200) {
                                if (44173 <= code2 && code2 <= 44199) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 44200) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 44228) {
                                if (44201 <= code2 && code2 <= 44227) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44229) {
                                  if (code2 === 44228) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44229 <= code2 && code2 <= 44255) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44313) {
                            if (code2 < 44284) {
                              if (code2 < 44257) {
                                if (code2 === 44256) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (44257 <= code2 && code2 <= 44283) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 44285) {
                                if (code2 === 44284) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44312) {
                                  if (44285 <= code2 && code2 <= 44311) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44312) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44368) {
                              if (code2 < 44340) {
                                if (44313 <= code2 && code2 <= 44339) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44341) {
                                  if (code2 === 44340) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44341 <= code2 && code2 <= 44367) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44369) {
                                if (code2 === 44368) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44396) {
                                  if (44369 <= code2 && code2 <= 44395) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44396) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44537) {
                          if (code2 < 44480) {
                            if (code2 < 44425) {
                              if (code2 < 44424) {
                                if (44397 <= code2 && code2 <= 44423) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 44424) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 44452) {
                                if (44425 <= code2 && code2 <= 44451) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44453) {
                                  if (code2 === 44452) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44453 <= code2 && code2 <= 44479) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44508) {
                              if (code2 < 44481) {
                                if (code2 === 44480) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (44481 <= code2 && code2 <= 44507) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 44509) {
                                if (code2 === 44508) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44536) {
                                  if (44509 <= code2 && code2 <= 44535) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44536) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44620) {
                            if (code2 < 44565) {
                              if (code2 < 44564) {
                                if (44537 <= code2 && code2 <= 44563) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 44564) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 44592) {
                                if (44565 <= code2 && code2 <= 44591) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44593) {
                                  if (code2 === 44592) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44593 <= code2 && code2 <= 44619) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44649) {
                              if (code2 < 44621) {
                                if (code2 === 44620) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44648) {
                                  if (44621 <= code2 && code2 <= 44647) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44648) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44676) {
                                if (44649 <= code2 && code2 <= 44675) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44677) {
                                  if (code2 === 44676) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44677 <= code2 && code2 <= 44703) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44985) {
                        if (code2 < 44844) {
                          if (code2 < 44761) {
                            if (code2 < 44732) {
                              if (code2 < 44705) {
                                if (code2 === 44704) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (44705 <= code2 && code2 <= 44731) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 44733) {
                                if (code2 === 44732) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44760) {
                                  if (44733 <= code2 && code2 <= 44759) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44760) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44789) {
                              if (code2 < 44788) {
                                if (44761 <= code2 && code2 <= 44787) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 44788) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 44816) {
                                if (44789 <= code2 && code2 <= 44815) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44817) {
                                  if (code2 === 44816) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44817 <= code2 && code2 <= 44843) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44901) {
                            if (code2 < 44872) {
                              if (code2 < 44845) {
                                if (code2 === 44844) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (44845 <= code2 && code2 <= 44871) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 44873) {
                                if (code2 === 44872) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44900) {
                                  if (44873 <= code2 && code2 <= 44899) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44900) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44956) {
                              if (code2 < 44928) {
                                if (44901 <= code2 && code2 <= 44927) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 44929) {
                                  if (code2 === 44928) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (44929 <= code2 && code2 <= 44955) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44957) {
                                if (code2 === 44956) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 44984) {
                                  if (44957 <= code2 && code2 <= 44983) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 44984) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45152) {
                          if (code2 < 45068) {
                            if (code2 < 45013) {
                              if (code2 < 45012) {
                                if (44985 <= code2 && code2 <= 45011) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 45012) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 45040) {
                                if (45013 <= code2 && code2 <= 45039) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45041) {
                                  if (code2 === 45040) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45041 <= code2 && code2 <= 45067) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45097) {
                              if (code2 < 45069) {
                                if (code2 === 45068) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45096) {
                                  if (45069 <= code2 && code2 <= 45095) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45096) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45124) {
                                if (45097 <= code2 && code2 <= 45123) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45125) {
                                  if (code2 === 45124) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45125 <= code2 && code2 <= 45151) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45209) {
                            if (code2 < 45180) {
                              if (code2 < 45153) {
                                if (code2 === 45152) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (45153 <= code2 && code2 <= 45179) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 45181) {
                                if (code2 === 45180) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45208) {
                                  if (45181 <= code2 && code2 <= 45207) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45208) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45264) {
                              if (code2 < 45236) {
                                if (45209 <= code2 && code2 <= 45235) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45237) {
                                  if (code2 === 45236) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45237 <= code2 && code2 <= 45263) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45265) {
                                if (code2 === 45264) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45292) {
                                  if (45265 <= code2 && code2 <= 45291) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45292) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 45908) {
                      if (code2 < 45600) {
                        if (code2 < 45433) {
                          if (code2 < 45376) {
                            if (code2 < 45321) {
                              if (code2 < 45320) {
                                if (45293 <= code2 && code2 <= 45319) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 45320) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 45348) {
                                if (45321 <= code2 && code2 <= 45347) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45349) {
                                  if (code2 === 45348) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45349 <= code2 && code2 <= 45375) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45404) {
                              if (code2 < 45377) {
                                if (code2 === 45376) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (45377 <= code2 && code2 <= 45403) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 45405) {
                                if (code2 === 45404) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45432) {
                                  if (45405 <= code2 && code2 <= 45431) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45432) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45516) {
                            if (code2 < 45461) {
                              if (code2 < 45460) {
                                if (45433 <= code2 && code2 <= 45459) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 45460) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 45488) {
                                if (45461 <= code2 && code2 <= 45487) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45489) {
                                  if (code2 === 45488) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45489 <= code2 && code2 <= 45515) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45545) {
                              if (code2 < 45517) {
                                if (code2 === 45516) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45544) {
                                  if (45517 <= code2 && code2 <= 45543) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45544) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45572) {
                                if (45545 <= code2 && code2 <= 45571) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45573) {
                                  if (code2 === 45572) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45573 <= code2 && code2 <= 45599) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45741) {
                          if (code2 < 45657) {
                            if (code2 < 45628) {
                              if (code2 < 45601) {
                                if (code2 === 45600) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (45601 <= code2 && code2 <= 45627) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 45629) {
                                if (code2 === 45628) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45656) {
                                  if (45629 <= code2 && code2 <= 45655) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45656) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45712) {
                              if (code2 < 45684) {
                                if (45657 <= code2 && code2 <= 45683) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45685) {
                                  if (code2 === 45684) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45685 <= code2 && code2 <= 45711) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45713) {
                                if (code2 === 45712) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45740) {
                                  if (45713 <= code2 && code2 <= 45739) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45740) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45824) {
                            if (code2 < 45769) {
                              if (code2 < 45768) {
                                if (45741 <= code2 && code2 <= 45767) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 45768) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 45796) {
                                if (45769 <= code2 && code2 <= 45795) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45797) {
                                  if (code2 === 45796) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45797 <= code2 && code2 <= 45823) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45853) {
                              if (code2 < 45825) {
                                if (code2 === 45824) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45852) {
                                  if (45825 <= code2 && code2 <= 45851) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45852) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45880) {
                                if (45853 <= code2 && code2 <= 45879) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 45881) {
                                  if (code2 === 45880) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (45881 <= code2 && code2 <= 45907) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46189) {
                        if (code2 < 46048) {
                          if (code2 < 45965) {
                            if (code2 < 45936) {
                              if (code2 < 45909) {
                                if (code2 === 45908) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (45909 <= code2 && code2 <= 45935) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 45937) {
                                if (code2 === 45936) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 45964) {
                                  if (45937 <= code2 && code2 <= 45963) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 45964) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45993) {
                              if (code2 < 45992) {
                                if (45965 <= code2 && code2 <= 45991) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 45992) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 46020) {
                                if (45993 <= code2 && code2 <= 46019) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46021) {
                                  if (code2 === 46020) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46021 <= code2 && code2 <= 46047) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46105) {
                            if (code2 < 46076) {
                              if (code2 < 46049) {
                                if (code2 === 46048) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (46049 <= code2 && code2 <= 46075) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 46077) {
                                if (code2 === 46076) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46104) {
                                  if (46077 <= code2 && code2 <= 46103) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46104) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46160) {
                              if (code2 < 46132) {
                                if (46105 <= code2 && code2 <= 46131) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46133) {
                                  if (code2 === 46132) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46133 <= code2 && code2 <= 46159) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46161) {
                                if (code2 === 46160) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46188) {
                                  if (46161 <= code2 && code2 <= 46187) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46188) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46356) {
                          if (code2 < 46272) {
                            if (code2 < 46217) {
                              if (code2 < 46216) {
                                if (46189 <= code2 && code2 <= 46215) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 46216) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 46244) {
                                if (46217 <= code2 && code2 <= 46243) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46245) {
                                  if (code2 === 46244) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46245 <= code2 && code2 <= 46271) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46301) {
                              if (code2 < 46273) {
                                if (code2 === 46272) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46300) {
                                  if (46273 <= code2 && code2 <= 46299) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46300) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46328) {
                                if (46301 <= code2 && code2 <= 46327) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46329) {
                                  if (code2 === 46328) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46329 <= code2 && code2 <= 46355) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46413) {
                            if (code2 < 46384) {
                              if (code2 < 46357) {
                                if (code2 === 46356) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (46357 <= code2 && code2 <= 46383) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 46385) {
                                if (code2 === 46384) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46412) {
                                  if (46385 <= code2 && code2 <= 46411) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46412) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46468) {
                              if (code2 < 46440) {
                                if (46413 <= code2 && code2 <= 46439) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46441) {
                                  if (code2 === 46440) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46441 <= code2 && code2 <= 46467) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46469) {
                                if (code2 === 46468) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46496) {
                                  if (46469 <= code2 && code2 <= 46495) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46496) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 47701) {
                    if (code2 < 47112) {
                      if (code2 < 46804) {
                        if (code2 < 46637) {
                          if (code2 < 46580) {
                            if (code2 < 46525) {
                              if (code2 < 46524) {
                                if (46497 <= code2 && code2 <= 46523) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 46524) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 46552) {
                                if (46525 <= code2 && code2 <= 46551) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46553) {
                                  if (code2 === 46552) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46553 <= code2 && code2 <= 46579) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46608) {
                              if (code2 < 46581) {
                                if (code2 === 46580) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (46581 <= code2 && code2 <= 46607) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 46609) {
                                if (code2 === 46608) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46636) {
                                  if (46609 <= code2 && code2 <= 46635) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46636) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46720) {
                            if (code2 < 46665) {
                              if (code2 < 46664) {
                                if (46637 <= code2 && code2 <= 46663) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 46664) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 46692) {
                                if (46665 <= code2 && code2 <= 46691) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46693) {
                                  if (code2 === 46692) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46693 <= code2 && code2 <= 46719) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46749) {
                              if (code2 < 46721) {
                                if (code2 === 46720) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46748) {
                                  if (46721 <= code2 && code2 <= 46747) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46748) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46776) {
                                if (46749 <= code2 && code2 <= 46775) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46777) {
                                  if (code2 === 46776) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46777 <= code2 && code2 <= 46803) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46945) {
                          if (code2 < 46861) {
                            if (code2 < 46832) {
                              if (code2 < 46805) {
                                if (code2 === 46804) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (46805 <= code2 && code2 <= 46831) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 46833) {
                                if (code2 === 46832) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46860) {
                                  if (46833 <= code2 && code2 <= 46859) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46860) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46916) {
                              if (code2 < 46888) {
                                if (46861 <= code2 && code2 <= 46887) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 46889) {
                                  if (code2 === 46888) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (46889 <= code2 && code2 <= 46915) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46917) {
                                if (code2 === 46916) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 46944) {
                                  if (46917 <= code2 && code2 <= 46943) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 46944) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47028) {
                            if (code2 < 46973) {
                              if (code2 < 46972) {
                                if (46945 <= code2 && code2 <= 46971) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 46972) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 47e3) {
                                if (46973 <= code2 && code2 <= 46999) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47001) {
                                  if (code2 === 47e3) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47001 <= code2 && code2 <= 47027) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47057) {
                              if (code2 < 47029) {
                                if (code2 === 47028) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47056) {
                                  if (47029 <= code2 && code2 <= 47055) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47056) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47084) {
                                if (47057 <= code2 && code2 <= 47083) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47085) {
                                  if (code2 === 47084) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47085 <= code2 && code2 <= 47111) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47393) {
                        if (code2 < 47252) {
                          if (code2 < 47169) {
                            if (code2 < 47140) {
                              if (code2 < 47113) {
                                if (code2 === 47112) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (47113 <= code2 && code2 <= 47139) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 47141) {
                                if (code2 === 47140) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47168) {
                                  if (47141 <= code2 && code2 <= 47167) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47168) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47197) {
                              if (code2 < 47196) {
                                if (47169 <= code2 && code2 <= 47195) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 47196) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 47224) {
                                if (47197 <= code2 && code2 <= 47223) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47225) {
                                  if (code2 === 47224) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47225 <= code2 && code2 <= 47251) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47309) {
                            if (code2 < 47280) {
                              if (code2 < 47253) {
                                if (code2 === 47252) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (47253 <= code2 && code2 <= 47279) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 47281) {
                                if (code2 === 47280) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47308) {
                                  if (47281 <= code2 && code2 <= 47307) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47308) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47364) {
                              if (code2 < 47336) {
                                if (47309 <= code2 && code2 <= 47335) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47337) {
                                  if (code2 === 47336) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47337 <= code2 && code2 <= 47363) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47365) {
                                if (code2 === 47364) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47392) {
                                  if (47365 <= code2 && code2 <= 47391) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47392) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47560) {
                          if (code2 < 47476) {
                            if (code2 < 47421) {
                              if (code2 < 47420) {
                                if (47393 <= code2 && code2 <= 47419) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 47420) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 47448) {
                                if (47421 <= code2 && code2 <= 47447) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47449) {
                                  if (code2 === 47448) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47449 <= code2 && code2 <= 47475) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47505) {
                              if (code2 < 47477) {
                                if (code2 === 47476) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47504) {
                                  if (47477 <= code2 && code2 <= 47503) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47504) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47532) {
                                if (47505 <= code2 && code2 <= 47531) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47533) {
                                  if (code2 === 47532) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47533 <= code2 && code2 <= 47559) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47617) {
                            if (code2 < 47588) {
                              if (code2 < 47561) {
                                if (code2 === 47560) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (47561 <= code2 && code2 <= 47587) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 47589) {
                                if (code2 === 47588) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47616) {
                                  if (47589 <= code2 && code2 <= 47615) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47616) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47672) {
                              if (code2 < 47644) {
                                if (47617 <= code2 && code2 <= 47643) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47645) {
                                  if (code2 === 47644) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47645 <= code2 && code2 <= 47671) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47673) {
                                if (code2 === 47672) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47700) {
                                  if (47673 <= code2 && code2 <= 47699) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47700) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48316) {
                      if (code2 < 48008) {
                        if (code2 < 47841) {
                          if (code2 < 47784) {
                            if (code2 < 47729) {
                              if (code2 < 47728) {
                                if (47701 <= code2 && code2 <= 47727) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 47728) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 47756) {
                                if (47729 <= code2 && code2 <= 47755) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47757) {
                                  if (code2 === 47756) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47757 <= code2 && code2 <= 47783) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47812) {
                              if (code2 < 47785) {
                                if (code2 === 47784) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (47785 <= code2 && code2 <= 47811) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 47813) {
                                if (code2 === 47812) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47840) {
                                  if (47813 <= code2 && code2 <= 47839) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47840) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47924) {
                            if (code2 < 47869) {
                              if (code2 < 47868) {
                                if (47841 <= code2 && code2 <= 47867) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 47868) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 47896) {
                                if (47869 <= code2 && code2 <= 47895) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47897) {
                                  if (code2 === 47896) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47897 <= code2 && code2 <= 47923) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47953) {
                              if (code2 < 47925) {
                                if (code2 === 47924) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 47952) {
                                  if (47925 <= code2 && code2 <= 47951) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 47952) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47980) {
                                if (47953 <= code2 && code2 <= 47979) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 47981) {
                                  if (code2 === 47980) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (47981 <= code2 && code2 <= 48007) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48149) {
                          if (code2 < 48065) {
                            if (code2 < 48036) {
                              if (code2 < 48009) {
                                if (code2 === 48008) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (48009 <= code2 && code2 <= 48035) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 48037) {
                                if (code2 === 48036) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48064) {
                                  if (48037 <= code2 && code2 <= 48063) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48064) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48120) {
                              if (code2 < 48092) {
                                if (48065 <= code2 && code2 <= 48091) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48093) {
                                  if (code2 === 48092) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48093 <= code2 && code2 <= 48119) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48121) {
                                if (code2 === 48120) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48148) {
                                  if (48121 <= code2 && code2 <= 48147) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48148) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48232) {
                            if (code2 < 48177) {
                              if (code2 < 48176) {
                                if (48149 <= code2 && code2 <= 48175) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 48176) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 48204) {
                                if (48177 <= code2 && code2 <= 48203) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48205) {
                                  if (code2 === 48204) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48205 <= code2 && code2 <= 48231) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48261) {
                              if (code2 < 48233) {
                                if (code2 === 48232) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48260) {
                                  if (48233 <= code2 && code2 <= 48259) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48260) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48288) {
                                if (48261 <= code2 && code2 <= 48287) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48289) {
                                  if (code2 === 48288) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48289 <= code2 && code2 <= 48315) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48597) {
                        if (code2 < 48456) {
                          if (code2 < 48373) {
                            if (code2 < 48344) {
                              if (code2 < 48317) {
                                if (code2 === 48316) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (48317 <= code2 && code2 <= 48343) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 48345) {
                                if (code2 === 48344) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48372) {
                                  if (48345 <= code2 && code2 <= 48371) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48372) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48401) {
                              if (code2 < 48400) {
                                if (48373 <= code2 && code2 <= 48399) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 48400) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 48428) {
                                if (48401 <= code2 && code2 <= 48427) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48429) {
                                  if (code2 === 48428) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48429 <= code2 && code2 <= 48455) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48513) {
                            if (code2 < 48484) {
                              if (code2 < 48457) {
                                if (code2 === 48456) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (48457 <= code2 && code2 <= 48483) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 48485) {
                                if (code2 === 48484) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48512) {
                                  if (48485 <= code2 && code2 <= 48511) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48512) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48568) {
                              if (code2 < 48540) {
                                if (48513 <= code2 && code2 <= 48539) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48541) {
                                  if (code2 === 48540) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48541 <= code2 && code2 <= 48567) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48569) {
                                if (code2 === 48568) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48596) {
                                  if (48569 <= code2 && code2 <= 48595) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48596) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48764) {
                          if (code2 < 48680) {
                            if (code2 < 48625) {
                              if (code2 < 48624) {
                                if (48597 <= code2 && code2 <= 48623) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 48624) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 48652) {
                                if (48625 <= code2 && code2 <= 48651) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48653) {
                                  if (code2 === 48652) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48653 <= code2 && code2 <= 48679) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48709) {
                              if (code2 < 48681) {
                                if (code2 === 48680) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48708) {
                                  if (48681 <= code2 && code2 <= 48707) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48708) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48736) {
                                if (48709 <= code2 && code2 <= 48735) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48737) {
                                  if (code2 === 48736) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48737 <= code2 && code2 <= 48763) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48821) {
                            if (code2 < 48792) {
                              if (code2 < 48765) {
                                if (code2 === 48764) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (48765 <= code2 && code2 <= 48791) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 48793) {
                                if (code2 === 48792) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48820) {
                                  if (48793 <= code2 && code2 <= 48819) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48820) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48876) {
                              if (code2 < 48848) {
                                if (48821 <= code2 && code2 <= 48847) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48849) {
                                  if (code2 === 48848) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48849 <= code2 && code2 <= 48875) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48877) {
                                if (code2 === 48876) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 48904) {
                                  if (48877 <= code2 && code2 <= 48903) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 48904) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 53720) {
                if (code2 < 51312) {
                  if (code2 < 50108) {
                    if (code2 < 49493) {
                      if (code2 < 49212) {
                        if (code2 < 49045) {
                          if (code2 < 48988) {
                            if (code2 < 48933) {
                              if (code2 < 48932) {
                                if (48905 <= code2 && code2 <= 48931) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 48932) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 48960) {
                                if (48933 <= code2 && code2 <= 48959) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 48961) {
                                  if (code2 === 48960) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (48961 <= code2 && code2 <= 48987) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49016) {
                              if (code2 < 48989) {
                                if (code2 === 48988) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (48989 <= code2 && code2 <= 49015) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 49017) {
                                if (code2 === 49016) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49044) {
                                  if (49017 <= code2 && code2 <= 49043) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49044) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49128) {
                            if (code2 < 49073) {
                              if (code2 < 49072) {
                                if (49045 <= code2 && code2 <= 49071) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 49072) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 49100) {
                                if (49073 <= code2 && code2 <= 49099) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49101) {
                                  if (code2 === 49100) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49101 <= code2 && code2 <= 49127) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49157) {
                              if (code2 < 49129) {
                                if (code2 === 49128) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49156) {
                                  if (49129 <= code2 && code2 <= 49155) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49156) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49184) {
                                if (49157 <= code2 && code2 <= 49183) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49185) {
                                  if (code2 === 49184) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49185 <= code2 && code2 <= 49211) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49352) {
                          if (code2 < 49269) {
                            if (code2 < 49240) {
                              if (code2 < 49213) {
                                if (code2 === 49212) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (49213 <= code2 && code2 <= 49239) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 49241) {
                                if (code2 === 49240) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49268) {
                                  if (49241 <= code2 && code2 <= 49267) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49268) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49297) {
                              if (code2 < 49296) {
                                if (49269 <= code2 && code2 <= 49295) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 49296) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 49324) {
                                if (49297 <= code2 && code2 <= 49323) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49325) {
                                  if (code2 === 49324) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49325 <= code2 && code2 <= 49351) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49409) {
                            if (code2 < 49380) {
                              if (code2 < 49353) {
                                if (code2 === 49352) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (49353 <= code2 && code2 <= 49379) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 49381) {
                                if (code2 === 49380) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49408) {
                                  if (49381 <= code2 && code2 <= 49407) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49408) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49464) {
                              if (code2 < 49436) {
                                if (49409 <= code2 && code2 <= 49435) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49437) {
                                  if (code2 === 49436) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49437 <= code2 && code2 <= 49463) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49465) {
                                if (code2 === 49464) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49492) {
                                  if (49465 <= code2 && code2 <= 49491) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49492) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49800) {
                        if (code2 < 49633) {
                          if (code2 < 49576) {
                            if (code2 < 49521) {
                              if (code2 < 49520) {
                                if (49493 <= code2 && code2 <= 49519) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 49520) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 49548) {
                                if (49521 <= code2 && code2 <= 49547) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49549) {
                                  if (code2 === 49548) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49549 <= code2 && code2 <= 49575) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49604) {
                              if (code2 < 49577) {
                                if (code2 === 49576) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (49577 <= code2 && code2 <= 49603) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 49605) {
                                if (code2 === 49604) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49632) {
                                  if (49605 <= code2 && code2 <= 49631) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49632) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49716) {
                            if (code2 < 49661) {
                              if (code2 < 49660) {
                                if (49633 <= code2 && code2 <= 49659) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 49660) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 49688) {
                                if (49661 <= code2 && code2 <= 49687) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49689) {
                                  if (code2 === 49688) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49689 <= code2 && code2 <= 49715) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49745) {
                              if (code2 < 49717) {
                                if (code2 === 49716) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49744) {
                                  if (49717 <= code2 && code2 <= 49743) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49744) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49772) {
                                if (49745 <= code2 && code2 <= 49771) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49773) {
                                  if (code2 === 49772) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49773 <= code2 && code2 <= 49799) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49941) {
                          if (code2 < 49857) {
                            if (code2 < 49828) {
                              if (code2 < 49801) {
                                if (code2 === 49800) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (49801 <= code2 && code2 <= 49827) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 49829) {
                                if (code2 === 49828) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49856) {
                                  if (49829 <= code2 && code2 <= 49855) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49856) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49912) {
                              if (code2 < 49884) {
                                if (49857 <= code2 && code2 <= 49883) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49885) {
                                  if (code2 === 49884) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49885 <= code2 && code2 <= 49911) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49913) {
                                if (code2 === 49912) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 49940) {
                                  if (49913 <= code2 && code2 <= 49939) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 49940) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50024) {
                            if (code2 < 49969) {
                              if (code2 < 49968) {
                                if (49941 <= code2 && code2 <= 49967) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 49968) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 49996) {
                                if (49969 <= code2 && code2 <= 49995) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 49997) {
                                  if (code2 === 49996) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (49997 <= code2 && code2 <= 50023) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50053) {
                              if (code2 < 50025) {
                                if (code2 === 50024) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50052) {
                                  if (50025 <= code2 && code2 <= 50051) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50052) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50080) {
                                if (50053 <= code2 && code2 <= 50079) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50081) {
                                  if (code2 === 50080) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50081 <= code2 && code2 <= 50107) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 50697) {
                      if (code2 < 50389) {
                        if (code2 < 50248) {
                          if (code2 < 50165) {
                            if (code2 < 50136) {
                              if (code2 < 50109) {
                                if (code2 === 50108) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (50109 <= code2 && code2 <= 50135) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 50137) {
                                if (code2 === 50136) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50164) {
                                  if (50137 <= code2 && code2 <= 50163) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50164) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50193) {
                              if (code2 < 50192) {
                                if (50165 <= code2 && code2 <= 50191) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 50192) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 50220) {
                                if (50193 <= code2 && code2 <= 50219) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50221) {
                                  if (code2 === 50220) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50221 <= code2 && code2 <= 50247) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50305) {
                            if (code2 < 50276) {
                              if (code2 < 50249) {
                                if (code2 === 50248) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (50249 <= code2 && code2 <= 50275) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 50277) {
                                if (code2 === 50276) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50304) {
                                  if (50277 <= code2 && code2 <= 50303) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50304) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50360) {
                              if (code2 < 50332) {
                                if (50305 <= code2 && code2 <= 50331) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50333) {
                                  if (code2 === 50332) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50333 <= code2 && code2 <= 50359) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50361) {
                                if (code2 === 50360) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50388) {
                                  if (50361 <= code2 && code2 <= 50387) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50388) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50556) {
                          if (code2 < 50472) {
                            if (code2 < 50417) {
                              if (code2 < 50416) {
                                if (50389 <= code2 && code2 <= 50415) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 50416) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 50444) {
                                if (50417 <= code2 && code2 <= 50443) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50445) {
                                  if (code2 === 50444) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50445 <= code2 && code2 <= 50471) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50501) {
                              if (code2 < 50473) {
                                if (code2 === 50472) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50500) {
                                  if (50473 <= code2 && code2 <= 50499) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50500) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50528) {
                                if (50501 <= code2 && code2 <= 50527) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50529) {
                                  if (code2 === 50528) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50529 <= code2 && code2 <= 50555) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50613) {
                            if (code2 < 50584) {
                              if (code2 < 50557) {
                                if (code2 === 50556) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (50557 <= code2 && code2 <= 50583) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 50585) {
                                if (code2 === 50584) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50612) {
                                  if (50585 <= code2 && code2 <= 50611) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50612) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50668) {
                              if (code2 < 50640) {
                                if (50613 <= code2 && code2 <= 50639) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50641) {
                                  if (code2 === 50640) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50641 <= code2 && code2 <= 50667) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50669) {
                                if (code2 === 50668) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50696) {
                                  if (50669 <= code2 && code2 <= 50695) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50696) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51004) {
                        if (code2 < 50837) {
                          if (code2 < 50780) {
                            if (code2 < 50725) {
                              if (code2 < 50724) {
                                if (50697 <= code2 && code2 <= 50723) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 50724) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 50752) {
                                if (50725 <= code2 && code2 <= 50751) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50753) {
                                  if (code2 === 50752) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50753 <= code2 && code2 <= 50779) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50808) {
                              if (code2 < 50781) {
                                if (code2 === 50780) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (50781 <= code2 && code2 <= 50807) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 50809) {
                                if (code2 === 50808) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50836) {
                                  if (50809 <= code2 && code2 <= 50835) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50836) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50920) {
                            if (code2 < 50865) {
                              if (code2 < 50864) {
                                if (50837 <= code2 && code2 <= 50863) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 50864) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 50892) {
                                if (50865 <= code2 && code2 <= 50891) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50893) {
                                  if (code2 === 50892) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50893 <= code2 && code2 <= 50919) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50949) {
                              if (code2 < 50921) {
                                if (code2 === 50920) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 50948) {
                                  if (50921 <= code2 && code2 <= 50947) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 50948) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50976) {
                                if (50949 <= code2 && code2 <= 50975) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 50977) {
                                  if (code2 === 50976) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (50977 <= code2 && code2 <= 51003) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51145) {
                          if (code2 < 51061) {
                            if (code2 < 51032) {
                              if (code2 < 51005) {
                                if (code2 === 51004) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (51005 <= code2 && code2 <= 51031) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 51033) {
                                if (code2 === 51032) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51060) {
                                  if (51033 <= code2 && code2 <= 51059) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51060) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51116) {
                              if (code2 < 51088) {
                                if (51061 <= code2 && code2 <= 51087) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51089) {
                                  if (code2 === 51088) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51089 <= code2 && code2 <= 51115) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51117) {
                                if (code2 === 51116) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51144) {
                                  if (51117 <= code2 && code2 <= 51143) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51144) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51228) {
                            if (code2 < 51173) {
                              if (code2 < 51172) {
                                if (51145 <= code2 && code2 <= 51171) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 51172) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 51200) {
                                if (51173 <= code2 && code2 <= 51199) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51201) {
                                  if (code2 === 51200) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51201 <= code2 && code2 <= 51227) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51257) {
                              if (code2 < 51229) {
                                if (code2 === 51228) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51256) {
                                  if (51229 <= code2 && code2 <= 51255) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51256) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51284) {
                                if (51257 <= code2 && code2 <= 51283) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51285) {
                                  if (code2 === 51284) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51285 <= code2 && code2 <= 51311) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 52516) {
                    if (code2 < 51901) {
                      if (code2 < 51593) {
                        if (code2 < 51452) {
                          if (code2 < 51369) {
                            if (code2 < 51340) {
                              if (code2 < 51313) {
                                if (code2 === 51312) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (51313 <= code2 && code2 <= 51339) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 51341) {
                                if (code2 === 51340) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51368) {
                                  if (51341 <= code2 && code2 <= 51367) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51368) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51397) {
                              if (code2 < 51396) {
                                if (51369 <= code2 && code2 <= 51395) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 51396) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 51424) {
                                if (51397 <= code2 && code2 <= 51423) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51425) {
                                  if (code2 === 51424) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51425 <= code2 && code2 <= 51451) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51509) {
                            if (code2 < 51480) {
                              if (code2 < 51453) {
                                if (code2 === 51452) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (51453 <= code2 && code2 <= 51479) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 51481) {
                                if (code2 === 51480) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51508) {
                                  if (51481 <= code2 && code2 <= 51507) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51508) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51564) {
                              if (code2 < 51536) {
                                if (51509 <= code2 && code2 <= 51535) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51537) {
                                  if (code2 === 51536) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51537 <= code2 && code2 <= 51563) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51565) {
                                if (code2 === 51564) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51592) {
                                  if (51565 <= code2 && code2 <= 51591) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51592) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51760) {
                          if (code2 < 51676) {
                            if (code2 < 51621) {
                              if (code2 < 51620) {
                                if (51593 <= code2 && code2 <= 51619) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 51620) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 51648) {
                                if (51621 <= code2 && code2 <= 51647) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51649) {
                                  if (code2 === 51648) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51649 <= code2 && code2 <= 51675) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51705) {
                              if (code2 < 51677) {
                                if (code2 === 51676) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51704) {
                                  if (51677 <= code2 && code2 <= 51703) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51704) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51732) {
                                if (51705 <= code2 && code2 <= 51731) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51733) {
                                  if (code2 === 51732) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51733 <= code2 && code2 <= 51759) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51817) {
                            if (code2 < 51788) {
                              if (code2 < 51761) {
                                if (code2 === 51760) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (51761 <= code2 && code2 <= 51787) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 51789) {
                                if (code2 === 51788) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51816) {
                                  if (51789 <= code2 && code2 <= 51815) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51816) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51872) {
                              if (code2 < 51844) {
                                if (51817 <= code2 && code2 <= 51843) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51845) {
                                  if (code2 === 51844) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51845 <= code2 && code2 <= 51871) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51873) {
                                if (code2 === 51872) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 51900) {
                                  if (51873 <= code2 && code2 <= 51899) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 51900) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52208) {
                        if (code2 < 52041) {
                          if (code2 < 51984) {
                            if (code2 < 51929) {
                              if (code2 < 51928) {
                                if (51901 <= code2 && code2 <= 51927) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 51928) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 51956) {
                                if (51929 <= code2 && code2 <= 51955) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 51957) {
                                  if (code2 === 51956) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (51957 <= code2 && code2 <= 51983) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52012) {
                              if (code2 < 51985) {
                                if (code2 === 51984) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (51985 <= code2 && code2 <= 52011) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 52013) {
                                if (code2 === 52012) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52040) {
                                  if (52013 <= code2 && code2 <= 52039) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52040) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52124) {
                            if (code2 < 52069) {
                              if (code2 < 52068) {
                                if (52041 <= code2 && code2 <= 52067) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 52068) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 52096) {
                                if (52069 <= code2 && code2 <= 52095) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52097) {
                                  if (code2 === 52096) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52097 <= code2 && code2 <= 52123) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52153) {
                              if (code2 < 52125) {
                                if (code2 === 52124) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52152) {
                                  if (52125 <= code2 && code2 <= 52151) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52152) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52180) {
                                if (52153 <= code2 && code2 <= 52179) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52181) {
                                  if (code2 === 52180) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52181 <= code2 && code2 <= 52207) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52349) {
                          if (code2 < 52265) {
                            if (code2 < 52236) {
                              if (code2 < 52209) {
                                if (code2 === 52208) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (52209 <= code2 && code2 <= 52235) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 52237) {
                                if (code2 === 52236) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52264) {
                                  if (52237 <= code2 && code2 <= 52263) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52264) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52320) {
                              if (code2 < 52292) {
                                if (52265 <= code2 && code2 <= 52291) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52293) {
                                  if (code2 === 52292) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52293 <= code2 && code2 <= 52319) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52321) {
                                if (code2 === 52320) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52348) {
                                  if (52321 <= code2 && code2 <= 52347) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52348) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52432) {
                            if (code2 < 52377) {
                              if (code2 < 52376) {
                                if (52349 <= code2 && code2 <= 52375) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 52376) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 52404) {
                                if (52377 <= code2 && code2 <= 52403) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52405) {
                                  if (code2 === 52404) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52405 <= code2 && code2 <= 52431) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52461) {
                              if (code2 < 52433) {
                                if (code2 === 52432) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52460) {
                                  if (52433 <= code2 && code2 <= 52459) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52460) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52488) {
                                if (52461 <= code2 && code2 <= 52487) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52489) {
                                  if (code2 === 52488) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52489 <= code2 && code2 <= 52515) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 53105) {
                      if (code2 < 52797) {
                        if (code2 < 52656) {
                          if (code2 < 52573) {
                            if (code2 < 52544) {
                              if (code2 < 52517) {
                                if (code2 === 52516) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (52517 <= code2 && code2 <= 52543) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 52545) {
                                if (code2 === 52544) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52572) {
                                  if (52545 <= code2 && code2 <= 52571) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52572) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52601) {
                              if (code2 < 52600) {
                                if (52573 <= code2 && code2 <= 52599) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 52600) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 52628) {
                                if (52601 <= code2 && code2 <= 52627) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52629) {
                                  if (code2 === 52628) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52629 <= code2 && code2 <= 52655) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52713) {
                            if (code2 < 52684) {
                              if (code2 < 52657) {
                                if (code2 === 52656) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (52657 <= code2 && code2 <= 52683) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 52685) {
                                if (code2 === 52684) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52712) {
                                  if (52685 <= code2 && code2 <= 52711) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52712) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52768) {
                              if (code2 < 52740) {
                                if (52713 <= code2 && code2 <= 52739) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52741) {
                                  if (code2 === 52740) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52741 <= code2 && code2 <= 52767) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52769) {
                                if (code2 === 52768) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52796) {
                                  if (52769 <= code2 && code2 <= 52795) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52796) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52964) {
                          if (code2 < 52880) {
                            if (code2 < 52825) {
                              if (code2 < 52824) {
                                if (52797 <= code2 && code2 <= 52823) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 52824) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 52852) {
                                if (52825 <= code2 && code2 <= 52851) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52853) {
                                  if (code2 === 52852) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52853 <= code2 && code2 <= 52879) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52909) {
                              if (code2 < 52881) {
                                if (code2 === 52880) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 52908) {
                                  if (52881 <= code2 && code2 <= 52907) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 52908) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52936) {
                                if (52909 <= code2 && code2 <= 52935) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 52937) {
                                  if (code2 === 52936) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (52937 <= code2 && code2 <= 52963) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53021) {
                            if (code2 < 52992) {
                              if (code2 < 52965) {
                                if (code2 === 52964) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (52965 <= code2 && code2 <= 52991) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 52993) {
                                if (code2 === 52992) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53020) {
                                  if (52993 <= code2 && code2 <= 53019) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53020) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53076) {
                              if (code2 < 53048) {
                                if (53021 <= code2 && code2 <= 53047) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53049) {
                                  if (code2 === 53048) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53049 <= code2 && code2 <= 53075) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53077) {
                                if (code2 === 53076) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53104) {
                                  if (53077 <= code2 && code2 <= 53103) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53104) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53412) {
                        if (code2 < 53245) {
                          if (code2 < 53188) {
                            if (code2 < 53133) {
                              if (code2 < 53132) {
                                if (53105 <= code2 && code2 <= 53131) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 53132) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 53160) {
                                if (53133 <= code2 && code2 <= 53159) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53161) {
                                  if (code2 === 53160) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53161 <= code2 && code2 <= 53187) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53216) {
                              if (code2 < 53189) {
                                if (code2 === 53188) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (53189 <= code2 && code2 <= 53215) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 53217) {
                                if (code2 === 53216) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53244) {
                                  if (53217 <= code2 && code2 <= 53243) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53244) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53328) {
                            if (code2 < 53273) {
                              if (code2 < 53272) {
                                if (53245 <= code2 && code2 <= 53271) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 53272) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 53300) {
                                if (53273 <= code2 && code2 <= 53299) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53301) {
                                  if (code2 === 53300) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53301 <= code2 && code2 <= 53327) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53357) {
                              if (code2 < 53329) {
                                if (code2 === 53328) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53356) {
                                  if (53329 <= code2 && code2 <= 53355) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53356) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53384) {
                                if (53357 <= code2 && code2 <= 53383) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53385) {
                                  if (code2 === 53384) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53385 <= code2 && code2 <= 53411) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53553) {
                          if (code2 < 53469) {
                            if (code2 < 53440) {
                              if (code2 < 53413) {
                                if (code2 === 53412) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (53413 <= code2 && code2 <= 53439) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 53441) {
                                if (code2 === 53440) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53468) {
                                  if (53441 <= code2 && code2 <= 53467) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53468) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53524) {
                              if (code2 < 53496) {
                                if (53469 <= code2 && code2 <= 53495) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53497) {
                                  if (code2 === 53496) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53497 <= code2 && code2 <= 53523) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53525) {
                                if (code2 === 53524) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53552) {
                                  if (53525 <= code2 && code2 <= 53551) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53552) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53636) {
                            if (code2 < 53581) {
                              if (code2 < 53580) {
                                if (53553 <= code2 && code2 <= 53579) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 53580) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 53608) {
                                if (53581 <= code2 && code2 <= 53607) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53609) {
                                  if (code2 === 53608) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53609 <= code2 && code2 <= 53635) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53665) {
                              if (code2 < 53637) {
                                if (code2 === 53636) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53664) {
                                  if (53637 <= code2 && code2 <= 53663) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53664) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53692) {
                                if (53665 <= code2 && code2 <= 53691) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53693) {
                                  if (code2 === 53692) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53693 <= code2 && code2 <= 53719) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 70459) {
                  if (code2 < 54897) {
                    if (code2 < 54308) {
                      if (code2 < 54001) {
                        if (code2 < 53860) {
                          if (code2 < 53777) {
                            if (code2 < 53748) {
                              if (code2 < 53721) {
                                if (code2 === 53720) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (53721 <= code2 && code2 <= 53747) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 53749) {
                                if (code2 === 53748) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53776) {
                                  if (53749 <= code2 && code2 <= 53775) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53776) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53805) {
                              if (code2 < 53804) {
                                if (53777 <= code2 && code2 <= 53803) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 53804) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 53832) {
                                if (53805 <= code2 && code2 <= 53831) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53833) {
                                  if (code2 === 53832) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53833 <= code2 && code2 <= 53859) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53917) {
                            if (code2 < 53888) {
                              if (code2 < 53861) {
                                if (code2 === 53860) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (53861 <= code2 && code2 <= 53887) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 53889) {
                                if (code2 === 53888) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 53916) {
                                  if (53889 <= code2 && code2 <= 53915) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 53916) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53972) {
                              if (code2 < 53944) {
                                if (53917 <= code2 && code2 <= 53943) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 53945) {
                                  if (code2 === 53944) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (53945 <= code2 && code2 <= 53971) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53973) {
                                if (code2 === 53972) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54e3) {
                                  if (53973 <= code2 && code2 <= 53999) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54e3) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54141) {
                          if (code2 < 54084) {
                            if (code2 < 54029) {
                              if (code2 < 54028) {
                                if (54001 <= code2 && code2 <= 54027) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 54028) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 54056) {
                                if (54029 <= code2 && code2 <= 54055) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54057) {
                                  if (code2 === 54056) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54057 <= code2 && code2 <= 54083) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54112) {
                              if (code2 < 54085) {
                                if (code2 === 54084) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (54085 <= code2 && code2 <= 54111) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 54113) {
                                if (code2 === 54112) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54140) {
                                  if (54113 <= code2 && code2 <= 54139) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54140) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54224) {
                            if (code2 < 54169) {
                              if (code2 < 54168) {
                                if (54141 <= code2 && code2 <= 54167) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 54168) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 54196) {
                                if (54169 <= code2 && code2 <= 54195) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54197) {
                                  if (code2 === 54196) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54197 <= code2 && code2 <= 54223) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54253) {
                              if (code2 < 54225) {
                                if (code2 === 54224) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54252) {
                                  if (54225 <= code2 && code2 <= 54251) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54252) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54280) {
                                if (54253 <= code2 && code2 <= 54279) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54281) {
                                  if (code2 === 54280) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54281 <= code2 && code2 <= 54307) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54589) {
                        if (code2 < 54448) {
                          if (code2 < 54365) {
                            if (code2 < 54336) {
                              if (code2 < 54309) {
                                if (code2 === 54308) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (54309 <= code2 && code2 <= 54335) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 54337) {
                                if (code2 === 54336) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54364) {
                                  if (54337 <= code2 && code2 <= 54363) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54364) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54393) {
                              if (code2 < 54392) {
                                if (54365 <= code2 && code2 <= 54391) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 54392) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 54420) {
                                if (54393 <= code2 && code2 <= 54419) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54421) {
                                  if (code2 === 54420) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54421 <= code2 && code2 <= 54447) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54505) {
                            if (code2 < 54476) {
                              if (code2 < 54449) {
                                if (code2 === 54448) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (54449 <= code2 && code2 <= 54475) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 54477) {
                                if (code2 === 54476) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54504) {
                                  if (54477 <= code2 && code2 <= 54503) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54504) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54560) {
                              if (code2 < 54532) {
                                if (54505 <= code2 && code2 <= 54531) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54533) {
                                  if (code2 === 54532) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54533 <= code2 && code2 <= 54559) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54561) {
                                if (code2 === 54560) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54588) {
                                  if (54561 <= code2 && code2 <= 54587) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54588) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54756) {
                          if (code2 < 54672) {
                            if (code2 < 54617) {
                              if (code2 < 54616) {
                                if (54589 <= code2 && code2 <= 54615) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 54616) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 54644) {
                                if (54617 <= code2 && code2 <= 54643) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54645) {
                                  if (code2 === 54644) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54645 <= code2 && code2 <= 54671) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54701) {
                              if (code2 < 54673) {
                                if (code2 === 54672) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54700) {
                                  if (54673 <= code2 && code2 <= 54699) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54700) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54728) {
                                if (54701 <= code2 && code2 <= 54727) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54729) {
                                  if (code2 === 54728) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54729 <= code2 && code2 <= 54755) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54813) {
                            if (code2 < 54784) {
                              if (code2 < 54757) {
                                if (code2 === 54756) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (54757 <= code2 && code2 <= 54783) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 54785) {
                                if (code2 === 54784) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54812) {
                                  if (54785 <= code2 && code2 <= 54811) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54812) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54868) {
                              if (code2 < 54840) {
                                if (54813 <= code2 && code2 <= 54839) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54841) {
                                  if (code2 === 54840) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54841 <= code2 && code2 <= 54867) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54869) {
                                if (code2 === 54868) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 54896) {
                                  if (54869 <= code2 && code2 <= 54895) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 54896) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 69632) {
                      if (code2 < 55216) {
                        if (code2 < 55037) {
                          if (code2 < 54980) {
                            if (code2 < 54925) {
                              if (code2 < 54924) {
                                if (54897 <= code2 && code2 <= 54923) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 54924) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 54952) {
                                if (54925 <= code2 && code2 <= 54951) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 54953) {
                                  if (code2 === 54952) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (54953 <= code2 && code2 <= 54979) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 55008) {
                              if (code2 < 54981) {
                                if (code2 === 54980) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (54981 <= code2 && code2 <= 55007) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              }
                            } else {
                              if (code2 < 55009) {
                                if (code2 === 55008) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 55036) {
                                  if (55009 <= code2 && code2 <= 55035) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 55036) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55120) {
                            if (code2 < 55065) {
                              if (code2 < 55064) {
                                if (55037 <= code2 && code2 <= 55063) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 === 55064) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              }
                            } else {
                              if (code2 < 55092) {
                                if (55065 <= code2 && code2 <= 55091) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 55093) {
                                  if (code2 === 55092) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (55093 <= code2 && code2 <= 55119) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 55149) {
                              if (code2 < 55121) {
                                if (code2 === 55120) {
                                  return boundaries_1.CLUSTER_BREAK.LV
                                }
                              } else {
                                if (code2 < 55148) {
                                  if (55121 <= code2 && code2 <= 55147) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                } else {
                                  if (code2 === 55148) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                }
                              }
                            } else {
                              if (code2 < 55176) {
                                if (55149 <= code2 && code2 <= 55175) {
                                  return boundaries_1.CLUSTER_BREAK.LVT
                                }
                              } else {
                                if (code2 < 55177) {
                                  if (code2 === 55176) {
                                    return boundaries_1.CLUSTER_BREAK.LV
                                  }
                                } else {
                                  if (55177 <= code2 && code2 <= 55203) {
                                    return boundaries_1.CLUSTER_BREAK.LVT
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 68097) {
                          if (code2 < 65279) {
                            if (code2 < 64286) {
                              if (code2 < 55243) {
                                if (55216 <= code2 && code2 <= 55238) {
                                  return boundaries_1.CLUSTER_BREAK.V
                                }
                              } else {
                                if (55243 <= code2 && code2 <= 55291) {
                                  return boundaries_1.CLUSTER_BREAK.T
                                }
                              }
                            } else {
                              if (code2 < 65024) {
                                if (code2 === 64286) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 65056) {
                                  if (65024 <= code2 && code2 <= 65039) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (65056 <= code2 && code2 <= 65071) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 66045) {
                              if (code2 < 65438) {
                                if (code2 === 65279) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 < 65520) {
                                  if (65438 <= code2 && code2 <= 65439) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (65520 <= code2 && code2 <= 65531) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                }
                              }
                            } else {
                              if (code2 < 66272) {
                                if (code2 === 66045) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 66422) {
                                  if (code2 === 66272) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (66422 <= code2 && code2 <= 66426) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 68325) {
                            if (code2 < 68108) {
                              if (code2 < 68101) {
                                if (68097 <= code2 && code2 <= 68099) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (68101 <= code2 && code2 <= 68102) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 68152) {
                                if (68108 <= code2 && code2 <= 68111) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 68159) {
                                  if (68152 <= code2 && code2 <= 68154) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 68159) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 69373) {
                              if (code2 < 68900) {
                                if (68325 <= code2 && code2 <= 68326) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 69291) {
                                  if (68900 <= code2 && code2 <= 68903) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (69291 <= code2 && code2 <= 69292) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 69446) {
                                if (69373 <= code2 && code2 <= 69375) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 69506) {
                                  if (69446 <= code2 && code2 <= 69456) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (69506 <= code2 && code2 <= 69509) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70016) {
                        if (code2 < 69815) {
                          if (code2 < 69747) {
                            if (code2 < 69634) {
                              if (code2 === 69632) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 69633) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 69688) {
                                if (code2 === 69634) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 69744) {
                                  if (69688 <= code2 && code2 <= 69702) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 69744) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 69762) {
                              if (code2 < 69759) {
                                if (69747 <= code2 && code2 <= 69748) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (69759 <= code2 && code2 <= 69761) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 69808) {
                                if (code2 === 69762) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 69811) {
                                  if (69808 <= code2 && code2 <= 69810) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (69811 <= code2 && code2 <= 69814) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69888) {
                            if (code2 < 69821) {
                              if (code2 < 69817) {
                                if (69815 <= code2 && code2 <= 69816) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (69817 <= code2 && code2 <= 69818) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 69826) {
                                if (code2 === 69821) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              } else {
                                if (code2 === 69826) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 69837) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 69933) {
                              if (code2 < 69927) {
                                if (69888 <= code2 && code2 <= 69890) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 69932) {
                                  if (69927 <= code2 && code2 <= 69931) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 69932) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 69957) {
                                if (69933 <= code2 && code2 <= 69940) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70003) {
                                  if (69957 <= code2 && code2 <= 69958) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (code2 === 70003) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70194) {
                          if (code2 < 70082) {
                            if (code2 < 70067) {
                              if (code2 < 70018) {
                                if (70016 <= code2 && code2 <= 70017) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 70018) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 70070) {
                                if (70067 <= code2 && code2 <= 70069) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 70079) {
                                  if (70070 <= code2 && code2 <= 70078) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (70079 <= code2 && code2 <= 70080) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70095) {
                              if (code2 < 70089) {
                                if (70082 <= code2 && code2 <= 70083) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              } else {
                                if (code2 < 70094) {
                                  if (70089 <= code2 && code2 <= 70092) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 70094) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70188) {
                                if (code2 === 70095) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70191) {
                                  if (70188 <= code2 && code2 <= 70190) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (70191 <= code2 && code2 <= 70193) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70209) {
                            if (code2 < 70197) {
                              if (code2 < 70196) {
                                if (70194 <= code2 && code2 <= 70195) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 70196) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 70198) {
                                if (code2 === 70197) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 70206) {
                                  if (70198 <= code2 && code2 <= 70199) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 70206) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70371) {
                              if (code2 < 70367) {
                                if (code2 === 70209) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70368) {
                                  if (code2 === 70367) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (70368 <= code2 && code2 <= 70370) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70400) {
                                if (70371 <= code2 && code2 <= 70378) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70402) {
                                  if (70400 <= code2 && code2 <= 70401) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (70402 <= code2 && code2 <= 70403) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 72343) {
                    if (code2 < 71339) {
                      if (code2 < 70841) {
                        if (code2 < 70512) {
                          if (code2 < 70471) {
                            if (code2 < 70463) {
                              if (code2 < 70462) {
                                if (70459 <= code2 && code2 <= 70460) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 70462) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 70464) {
                                if (code2 === 70463) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 70465) {
                                  if (code2 === 70464) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (70465 <= code2 && code2 <= 70468) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70487) {
                              if (code2 < 70475) {
                                if (70471 <= code2 && code2 <= 70472) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (70475 <= code2 && code2 <= 70477) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 70498) {
                                if (code2 === 70487) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70502) {
                                  if (70498 <= code2 && code2 <= 70499) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (70502 <= code2 && code2 <= 70508) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70725) {
                            if (code2 < 70712) {
                              if (code2 < 70709) {
                                if (70512 <= code2 && code2 <= 70516) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (70709 <= code2 && code2 <= 70711) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 70720) {
                                if (70712 <= code2 && code2 <= 70719) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70722) {
                                  if (70720 <= code2 && code2 <= 70721) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (70722 <= code2 && code2 <= 70724) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70832) {
                              if (code2 < 70726) {
                                if (code2 === 70725) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 70726) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 70750) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 70833) {
                                if (code2 === 70832) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70835) {
                                  if (70833 <= code2 && code2 <= 70834) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (70835 <= code2 && code2 <= 70840) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71096) {
                          if (code2 < 70847) {
                            if (code2 < 70843) {
                              if (code2 === 70841) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 70842) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 70845) {
                                if (70843 <= code2 && code2 <= 70844) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 70845) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 70846) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          } else {
                            if (code2 < 71087) {
                              if (code2 < 70849) {
                                if (70847 <= code2 && code2 <= 70848) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 70850) {
                                  if (code2 === 70849) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (70850 <= code2 && code2 <= 70851) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71088) {
                                if (code2 === 71087) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71090) {
                                  if (71088 <= code2 && code2 <= 71089) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (71090 <= code2 && code2 <= 71093) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71216) {
                            if (code2 < 71102) {
                              if (code2 < 71100) {
                                if (71096 <= code2 && code2 <= 71099) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (71100 <= code2 && code2 <= 71101) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 71103) {
                                if (code2 === 71102) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 71132) {
                                  if (71103 <= code2 && code2 <= 71104) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (71132 <= code2 && code2 <= 71133) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 71229) {
                              if (code2 < 71219) {
                                if (71216 <= code2 && code2 <= 71218) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 71227) {
                                  if (71219 <= code2 && code2 <= 71226) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (71227 <= code2 && code2 <= 71228) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71230) {
                                if (code2 === 71229) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71231) {
                                  if (code2 === 71230) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (71231 <= code2 && code2 <= 71232) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71999) {
                        if (code2 < 71463) {
                          if (code2 < 71350) {
                            if (code2 < 71341) {
                              if (code2 === 71339) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                              if (code2 === 71340) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                            } else {
                              if (code2 < 71342) {
                                if (code2 === 71341) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71344) {
                                  if (71342 <= code2 && code2 <= 71343) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (71344 <= code2 && code2 <= 71349) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 71453) {
                              if (code2 === 71350) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 71351) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 71458) {
                                if (71453 <= code2 && code2 <= 71455) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71462) {
                                  if (71458 <= code2 && code2 <= 71461) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 71462) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71984) {
                            if (code2 < 71727) {
                              if (code2 < 71724) {
                                if (71463 <= code2 && code2 <= 71467) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (71724 <= code2 && code2 <= 71726) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 71736) {
                                if (71727 <= code2 && code2 <= 71735) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71737) {
                                  if (code2 === 71736) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (71737 <= code2 && code2 <= 71738) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 71995) {
                              if (code2 < 71985) {
                                if (code2 === 71984) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 71991) {
                                  if (71985 <= code2 && code2 <= 71989) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (71991 <= code2 && code2 <= 71992) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71997) {
                                if (71995 <= code2 && code2 <= 71996) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 71997) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 71998) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72193) {
                          if (code2 < 72145) {
                            if (code2 < 72001) {
                              if (code2 === 71999) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND
                              }
                              if (code2 === 72e3) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                            } else {
                              if (code2 < 72002) {
                                if (code2 === 72001) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              } else {
                                if (code2 === 72002) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 72003) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 72156) {
                              if (code2 < 72148) {
                                if (72145 <= code2 && code2 <= 72147) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 72154) {
                                  if (72148 <= code2 && code2 <= 72151) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (72154 <= code2 && code2 <= 72155) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 72160) {
                                if (72156 <= code2 && code2 <= 72159) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 === 72160) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 72164) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72263) {
                            if (code2 < 72249) {
                              if (code2 < 72243) {
                                if (72193 <= code2 && code2 <= 72202) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (72243 <= code2 && code2 <= 72248) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 72250) {
                                if (code2 === 72249) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 72251) {
                                  if (code2 === 72250) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                } else {
                                  if (72251 <= code2 && code2 <= 72254) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 72281) {
                              if (code2 < 72273) {
                                if (code2 === 72263) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 72279) {
                                  if (72273 <= code2 && code2 <= 72278) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (72279 <= code2 && code2 <= 72280) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            } else {
                              if (code2 < 72324) {
                                if (72281 <= code2 && code2 <= 72283) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 72330) {
                                  if (72324 <= code2 && code2 <= 72329) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND
                                  }
                                } else {
                                  if (72330 <= code2 && code2 <= 72342) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 94033) {
                      if (code2 < 73104) {
                        if (code2 < 72881) {
                          if (code2 < 72766) {
                            if (code2 < 72751) {
                              if (code2 < 72344) {
                                if (code2 === 72343) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (72344 <= code2 && code2 <= 72345) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 72752) {
                                if (code2 === 72751) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 72760) {
                                  if (72752 <= code2 && code2 <= 72758) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (72760 <= code2 && code2 <= 72765) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 72850) {
                              if (code2 === 72766) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                              }
                              if (code2 === 72767) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND
                              }
                            } else {
                              if (code2 < 72873) {
                                if (72850 <= code2 && code2 <= 72871) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 72874) {
                                  if (code2 === 72873) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (72874 <= code2 && code2 <= 72880) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 73018) {
                            if (code2 < 72884) {
                              if (code2 < 72882) {
                                if (code2 === 72881) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (72882 <= code2 && code2 <= 72883) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 72885) {
                                if (code2 === 72884) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (code2 < 73009) {
                                  if (72885 <= code2 && code2 <= 72886) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (73009 <= code2 && code2 <= 73014) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 73030) {
                              if (code2 < 73020) {
                                if (code2 === 73018) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 73023) {
                                  if (73020 <= code2 && code2 <= 73021) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (73023 <= code2 && code2 <= 73029) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 73031) {
                                if (code2 === 73030) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              } else {
                                if (code2 < 73098) {
                                  if (code2 === 73031) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (73098 <= code2 && code2 <= 73102) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 73526) {
                          if (code2 < 73459) {
                            if (code2 < 73109) {
                              if (code2 < 73107) {
                                if (73104 <= code2 && code2 <= 73105) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (73107 <= code2 && code2 <= 73108) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 73110) {
                                if (code2 === 73109) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 73110) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 73111) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 73474) {
                              if (code2 < 73461) {
                                if (73459 <= code2 && code2 <= 73460) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 73472) {
                                  if (73461 <= code2 && code2 <= 73462) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (73472 <= code2 && code2 <= 73473) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 73475) {
                                if (code2 === 73474) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND
                                }
                              } else {
                                if (code2 < 73524) {
                                  if (code2 === 73475) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (73524 <= code2 && code2 <= 73525) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 78896) {
                            if (code2 < 73536) {
                              if (code2 < 73534) {
                                if (73526 <= code2 && code2 <= 73530) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (73534 <= code2 && code2 <= 73535) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 73537) {
                                if (code2 === 73536) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 73537) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                                if (code2 === 73538) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            }
                          } else {
                            if (code2 < 92912) {
                              if (code2 < 78912) {
                                if (78896 <= code2 && code2 <= 78911) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 < 78919) {
                                  if (code2 === 78912) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (78919 <= code2 && code2 <= 78933) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 92976) {
                                if (92912 <= code2 && code2 <= 92916) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 94031) {
                                  if (92976 <= code2 && code2 <= 92982) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 94031) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 121476) {
                        if (code2 < 119143) {
                          if (code2 < 113824) {
                            if (code2 < 94180) {
                              if (code2 < 94095) {
                                if (94033 <= code2 && code2 <= 94087) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              } else {
                                if (94095 <= code2 && code2 <= 94098) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 94192) {
                                if (code2 === 94180) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 113821) {
                                  if (94192 <= code2 && code2 <= 94193) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .SPACINGMARK
                                  }
                                } else {
                                  if (113821 <= code2 && code2 <= 113822) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 118576) {
                              if (code2 < 118528) {
                                if (113824 <= code2 && code2 <= 113827) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (118528 <= code2 && code2 <= 118573) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 119141) {
                                if (118576 <= code2 && code2 <= 118598) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 119141) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                                if (code2 === 119142) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 119173) {
                            if (code2 < 119150) {
                              if (code2 < 119149) {
                                if (119143 <= code2 && code2 <= 119145) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 === 119149) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK
                                }
                              }
                            } else {
                              if (code2 < 119155) {
                                if (119150 <= code2 && code2 <= 119154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 119163) {
                                  if (119155 <= code2 && code2 <= 119162) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                } else {
                                  if (119163 <= code2 && code2 <= 119170) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 121344) {
                              if (code2 < 119210) {
                                if (119173 <= code2 && code2 <= 119179) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 119362) {
                                  if (119210 <= code2 && code2 <= 119213) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (119362 <= code2 && code2 <= 119364) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 121403) {
                                if (121344 <= code2 && code2 <= 121398) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 121461) {
                                  if (121403 <= code2 && code2 <= 121452) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 121461) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 123628) {
                          if (code2 < 122907) {
                            if (code2 < 121505) {
                              if (code2 < 121499) {
                                if (code2 === 121476) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (121499 <= code2 && code2 <= 121503) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 122880) {
                                if (121505 <= code2 && code2 <= 121519) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 122888) {
                                  if (122880 <= code2 && code2 <= 122886) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (122888 <= code2 && code2 <= 122904) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 123023) {
                              if (code2 < 122915) {
                                if (122907 <= code2 && code2 <= 122913) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 122918) {
                                  if (122915 <= code2 && code2 <= 122916) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (122918 <= code2 && code2 <= 122922) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 123184) {
                                if (code2 === 123023) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 123566) {
                                  if (123184 <= code2 && code2 <= 123190) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (code2 === 123566) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 127995) {
                            if (code2 < 125136) {
                              if (code2 < 124140) {
                                if (123628 <= code2 && code2 <= 123631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (124140 <= code2 && code2 <= 124143) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              }
                            } else {
                              if (code2 < 125252) {
                                if (125136 <= code2 && code2 <= 125142) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 127462) {
                                  if (125252 <= code2 && code2 <= 125258) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (127462 <= code2 && code2 <= 127487) {
                                    return boundaries_1.CLUSTER_BREAK
                                      .REGIONAL_INDICATOR
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 917632) {
                              if (code2 < 917504) {
                                if (127995 <= code2 && code2 <= 127999) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND
                                }
                              } else {
                                if (code2 < 917536) {
                                  if (917504 <= code2 && code2 <= 917535) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                } else {
                                  if (917536 <= code2 && code2 <= 917631) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                }
                              }
                            } else {
                              if (code2 < 917760) {
                                if (917632 <= code2 && code2 <= 917759) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL
                                }
                              } else {
                                if (code2 < 918e3) {
                                  if (917760 <= code2 && code2 <= 917999) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND
                                  }
                                } else {
                                  if (918e3 <= code2 && code2 <= 921599) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return boundaries_1.CLUSTER_BREAK.OTHER
          }
          static getEmojiProperty(code2) {
            if (code2 < 10160) {
              if (code2 < 9728) {
                if (code2 < 9e3) {
                  if (code2 < 8482) {
                    if (code2 < 8252) {
                      if (code2 === 169) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 174) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 === 8252) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 8265) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    }
                  } else {
                    if (code2 < 8596) {
                      if (code2 === 8482) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 8505) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 < 8617) {
                        if (8596 <= code2 && code2 <= 8601) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 8986) {
                          if (8617 <= code2 && code2 <= 8618) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (8986 <= code2 && code2 <= 8987) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 9410) {
                    if (code2 < 9167) {
                      if (code2 === 9e3) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 9096) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 < 9193) {
                        if (code2 === 9167) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 9208) {
                          if (9193 <= code2 && code2 <= 9203) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (9208 <= code2 && code2 <= 9210) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 9654) {
                      if (code2 < 9642) {
                        if (code2 === 9410) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (9642 <= code2 && code2 <= 9643) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 9664) {
                        if (code2 === 9654) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 9723) {
                          if (code2 === 9664) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (9723 <= code2 && code2 <= 9726) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 10035) {
                  if (code2 < 10004) {
                    if (code2 < 9748) {
                      if (code2 < 9735) {
                        if (9728 <= code2 && code2 <= 9733) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (9735 <= code2 && code2 <= 9746) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 9872) {
                        if (9748 <= code2 && code2 <= 9861) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 9992) {
                          if (9872 <= code2 && code2 <= 9989) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (9992 <= code2 && code2 <= 10002) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 10013) {
                      if (code2 === 10004) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 10006) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 < 10017) {
                        if (code2 === 10013) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 10017) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                        if (code2 === 10024) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 10067) {
                    if (code2 < 10055) {
                      if (code2 < 10052) {
                        if (10035 <= code2 && code2 <= 10036) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 10052) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 10060) {
                        if (code2 === 10055) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 10060) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                        if (code2 === 10062) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    }
                  } else {
                    if (code2 < 10083) {
                      if (code2 < 10071) {
                        if (10067 <= code2 && code2 <= 10069) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 10071) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 10133) {
                        if (10083 <= code2 && code2 <= 10087) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 10145) {
                          if (10133 <= code2 && code2 <= 10135) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (code2 === 10145) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 127489) {
                if (code2 < 12951) {
                  if (code2 < 11035) {
                    if (code2 < 10548) {
                      if (code2 === 10160) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 10175) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 < 11013) {
                        if (10548 <= code2 && code2 <= 10549) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (11013 <= code2 && code2 <= 11015) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    }
                  } else {
                    if (code2 < 11093) {
                      if (code2 < 11088) {
                        if (11035 <= code2 && code2 <= 11036) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 11088) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 12336) {
                        if (code2 === 11093) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 12336) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                        if (code2 === 12349) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 127340) {
                    if (code2 < 126976) {
                      if (code2 === 12951) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                      if (code2 === 12953) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC
                      }
                    } else {
                      if (code2 < 127245) {
                        if (126976 <= code2 && code2 <= 127231) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 127279) {
                          if (127245 <= code2 && code2 <= 127247) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (code2 === 127279) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 127374) {
                      if (code2 < 127358) {
                        if (127340 <= code2 && code2 <= 127345) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (127358 <= code2 && code2 <= 127359) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 127377) {
                        if (code2 === 127374) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 127405) {
                          if (127377 <= code2 && code2 <= 127386) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (127405 <= code2 && code2 <= 127461) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 128981) {
                  if (code2 < 127561) {
                    if (code2 < 127535) {
                      if (code2 < 127514) {
                        if (127489 <= code2 && code2 <= 127503) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 === 127514) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 127538) {
                        if (code2 === 127535) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 127548) {
                          if (127538 <= code2 && code2 <= 127546) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (127548 <= code2 && code2 <= 127551) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 128326) {
                      if (code2 < 128e3) {
                        if (127561 <= code2 && code2 <= 127994) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (128e3 <= code2 && code2 <= 128317) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 128640) {
                        if (128326 <= code2 && code2 <= 128591) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 128884) {
                          if (128640 <= code2 && code2 <= 128767) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (128884 <= code2 && code2 <= 128895) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 129198) {
                    if (code2 < 129096) {
                      if (code2 < 129036) {
                        if (128981 <= code2 && code2 <= 129023) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (129036 <= code2 && code2 <= 129039) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 129114) {
                        if (129096 <= code2 && code2 <= 129103) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 129160) {
                          if (129114 <= code2 && code2 <= 129119) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (129160 <= code2 && code2 <= 129167) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 129340) {
                      if (code2 < 129292) {
                        if (129198 <= code2 && code2 <= 129279) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (129292 <= code2 && code2 <= 129338) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      }
                    } else {
                      if (code2 < 129351) {
                        if (129340 <= code2 && code2 <= 129349) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC
                        }
                      } else {
                        if (code2 < 130048) {
                          if (129351 <= code2 && code2 <= 129791) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        } else {
                          if (130048 <= code2 && code2 <= 131069) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return boundaries_1.CLUSTER_BREAK.OTHER
          }
        }
        exports.default = Graphemer2
      }
    })

    // ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js
    var require_lib = __commonJS({
      '../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js'(
        exports
      ) {
        'use strict'
        var __importDefault =
          (exports && exports.__importDefault) ||
          function (mod) {
            return mod && mod.__esModule ? mod : { default: mod }
          }
        Object.defineProperty(exports, '__esModule', { value: true })
        var Graphemer_1 = __importDefault(require_Graphemer())
        exports.default = Graphemer_1.default
      }
    })

    // ../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js
    var require_dist = __commonJS({
      '../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js'(
        exports
      ) {
        ;(() => {
          'use strict'
          var e = {
              d: (t2, r2) => {
                for (var n2 in r2)
                  e.o(r2, n2) &&
                    !e.o(t2, n2) &&
                    Object.defineProperty(t2, n2, {
                      enumerable: true,
                      get: r2[n2]
                    })
              },
              o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2),
              r: (e2) => {
                typeof Symbol != 'undefined' &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e2, Symbol.toStringTag, {
                    value: 'Module'
                  }),
                  Object.defineProperty(e2, '__esModule', { value: true })
              }
            },
            t = {}
          function r(e2, t2) {
            return (
              t2 === void 0 && (t2 = '-'),
              new RegExp(
                '^(?!0{4}' +
                  t2 +
                  '0{2}' +
                  t2 +
                  '0{2})((?=[0-9]{4}' +
                  t2 +
                  '(((0[^2])|1[0-2])|02(?=' +
                  t2 +
                  '(([0-1][0-9])|2[0-8])))' +
                  t2 +
                  '[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))' +
                  t2 +
                  '02' +
                  t2 +
                  '29))([0-9]{4})' +
                  t2 +
                  '(?!((0[469])|11)' +
                  t2 +
                  '31)((0[1,3-9]|1[0-2])|(02(?!' +
                  t2 +
                  '3)))' +
                  t2 +
                  '(0[1-9]|[1-2][0-9]|3[0-1])$'
              ).test(e2)
            )
          }
          function n(e2) {
            var t2 = /\D/.exec(e2)
            return t2 ? t2[0] : ''
          }
          function i(e2, t2, r2) {
            t2 === void 0 && (t2 = ':'), r2 === void 0 && (r2 = false)
            var i2 = new RegExp(
              '^([0-1]|2(?=([0-3])|4' +
                t2 +
                '00))[0-9]' +
                t2 +
                '[0-5][0-9](' +
                t2 +
                '([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$'
            )
            if (!r2 || !/[Z+\-]/.test(e2)) return i2.test(e2)
            if (/Z$/.test(e2)) return i2.test(e2.replace('Z', ''))
            var o2 = e2.includes('+'),
              a2 = e2.split(/[+-]/),
              u2 = a2[0],
              d2 = a2[1]
            return (
              i2.test(u2) &&
              (function (e3, t3, r3) {
                return (
                  r3 === void 0 && (r3 = ':'),
                  new RegExp(
                    t3
                      ? '^(0(?!(2' +
                        r3 +
                        '4)|0' +
                        r3 +
                        '3)|1(?=([0-1]|2(?=' +
                        r3 +
                        '[04])|[34](?=' +
                        r3 +
                        '0))))([03469](?=' +
                        r3 +
                        '[03])|[17](?=' +
                        r3 +
                        '0)|2(?=' +
                        r3 +
                        '[04])|5(?=' +
                        r3 +
                        '[034])|8(?=' +
                        r3 +
                        '[04]))' +
                        r3 +
                        '([03](?=0)|4(?=5))[05]$'
                      : '^(0(?=[^0])|1(?=[0-2]))([39](?=' +
                        r3 +
                        '[03])|[0-24-8](?=' +
                        r3 +
                        '00))' +
                        r3 +
                        '[03]0$'
                  ).test(e3)
                )
              })(d2, o2, n(d2))
            )
          }
          function o(e2) {
            var t2 = e2.split('T'),
              o2 = t2[0],
              a2 = t2[1],
              u2 = r(o2, n(o2))
            if (!a2) return false
            var d2,
              s =
                ((d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/)),
                Array.isArray(d2) ? d2[0] : '')
            return u2 && i(a2, s, true)
          }
          function a(e2, t2) {
            return (
              t2 === void 0 && (t2 = '-'),
              new RegExp(
                '^[0-9]{4}' + t2 + '(0(?=[^0])|1(?=[0-2]))[0-9]$'
              ).test(e2)
            )
          }
          e.r(t),
            e.d(t, {
              isValidDate: () => r,
              isValidISODateString: () => o,
              isValidTime: () => i,
              isValidYearMonth: () => a
            })
          var u = exports
          for (var d in t) u[d] = t[d]
          t.__esModule &&
            Object.defineProperty(u, '__esModule', { value: true })
        })()
      }
    })

    // src/index.ts
    var src_exports2 = {}
    __export(src_exports2, {
      APP_BSKY_GRAPH: () => APP_BSKY_GRAPH,
      ActorNS: () => ActorNS,
      AdminNS: () => AdminNS,
      AppBskyActorDefs: () => defs_exports5,
      AppBskyActorGetPreferences: () => getPreferences_exports,
      AppBskyActorGetProfile: () => getProfile_exports,
      AppBskyActorGetProfiles: () => getProfiles_exports,
      AppBskyActorGetSuggestions: () => getSuggestions_exports,
      AppBskyActorProfile: () => profile_exports,
      AppBskyActorPutPreferences: () => putPreferences_exports,
      AppBskyActorSearchActors: () => searchActors_exports,
      AppBskyActorSearchActorsTypeahead: () => searchActorsTypeahead_exports,
      AppBskyEmbedExternal: () => external_exports,
      AppBskyEmbedImages: () => images_exports,
      AppBskyEmbedRecord: () => record_exports,
      AppBskyEmbedRecordWithMedia: () => recordWithMedia_exports,
      AppBskyFeedDefs: () => defs_exports6,
      AppBskyFeedDescribeFeedGenerator: () => describeFeedGenerator_exports,
      AppBskyFeedGenerator: () => generator_exports,
      AppBskyFeedGetActorFeeds: () => getActorFeeds_exports,
      AppBskyFeedGetActorLikes: () => getActorLikes_exports,
      AppBskyFeedGetAuthorFeed: () => getAuthorFeed_exports,
      AppBskyFeedGetFeed: () => getFeed_exports,
      AppBskyFeedGetFeedGenerator: () => getFeedGenerator_exports,
      AppBskyFeedGetFeedGenerators: () => getFeedGenerators_exports,
      AppBskyFeedGetFeedSkeleton: () => getFeedSkeleton_exports,
      AppBskyFeedGetLikes: () => getLikes_exports,
      AppBskyFeedGetListFeed: () => getListFeed_exports,
      AppBskyFeedGetPostThread: () => getPostThread_exports,
      AppBskyFeedGetPosts: () => getPosts_exports,
      AppBskyFeedGetRepostedBy: () => getRepostedBy_exports,
      AppBskyFeedGetSuggestedFeeds: () => getSuggestedFeeds_exports,
      AppBskyFeedGetTimeline: () => getTimeline_exports,
      AppBskyFeedLike: () => like_exports,
      AppBskyFeedPost: () => post_exports,
      AppBskyFeedRepost: () => repost_exports,
      AppBskyFeedSearchPosts: () => searchPosts_exports,
      AppBskyFeedThreadgate: () => threadgate_exports,
      AppBskyGraphBlock: () => block_exports,
      AppBskyGraphDefs: () => defs_exports7,
      AppBskyGraphFollow: () => follow_exports,
      AppBskyGraphGetBlocks: () => getBlocks_exports2,
      AppBskyGraphGetFollowers: () => getFollowers_exports,
      AppBskyGraphGetFollows: () => getFollows_exports,
      AppBskyGraphGetList: () => getList_exports,
      AppBskyGraphGetListBlocks: () => getListBlocks_exports,
      AppBskyGraphGetListMutes: () => getListMutes_exports,
      AppBskyGraphGetLists: () => getLists_exports,
      AppBskyGraphGetMutes: () => getMutes_exports,
      AppBskyGraphGetSuggestedFollowsByActor: () =>
        getSuggestedFollowsByActor_exports,
      AppBskyGraphList: () => list_exports,
      AppBskyGraphListblock: () => listblock_exports,
      AppBskyGraphListitem: () => listitem_exports,
      AppBskyGraphMuteActor: () => muteActor_exports,
      AppBskyGraphMuteActorList: () => muteActorList_exports,
      AppBskyGraphUnmuteActor: () => unmuteActor_exports,
      AppBskyGraphUnmuteActorList: () => unmuteActorList_exports,
      AppBskyNotificationGetUnreadCount: () => getUnreadCount_exports,
      AppBskyNotificationListNotifications: () => listNotifications_exports,
      AppBskyNotificationRegisterPush: () => registerPush_exports,
      AppBskyNotificationUpdateSeen: () => updateSeen_exports,
      AppBskyRichtextFacet: () => facet_exports,
      AppBskyUnspeccedDefs: () => defs_exports8,
      AppBskyUnspeccedGetPopular: () => getPopular_exports,
      AppBskyUnspeccedGetPopularFeedGenerators: () =>
        getPopularFeedGenerators_exports,
      AppBskyUnspeccedGetTimelineSkeleton: () => getTimelineSkeleton_exports,
      AppBskyUnspeccedSearchActorsSkeleton: () => searchActorsSkeleton_exports,
      AppBskyUnspeccedSearchPostsSkeleton: () => searchPostsSkeleton_exports,
      AppNS: () => AppNS,
      AtUri: () => AtUri,
      AtpAgent: () => AtpAgent,
      AtpBaseClient: () => AtpBaseClient,
      AtpServiceClient: () => AtpServiceClient,
      AtprotoNS: () => AtprotoNS,
      BlobRef: () => BlobRef,
      BlockRecord: () => BlockRecord,
      BskyAgent: () => BskyAgent,
      BskyNS: () => BskyNS,
      COM_ATPROTO_ADMIN: () => COM_ATPROTO_ADMIN,
      COM_ATPROTO_MODERATION: () => COM_ATPROTO_MODERATION,
      ComAtprotoAdminDefs: () => defs_exports,
      ComAtprotoAdminDeleteAccount: () => deleteAccount_exports,
      ComAtprotoAdminDisableAccountInvites: () => disableAccountInvites_exports,
      ComAtprotoAdminDisableInviteCodes: () => disableInviteCodes_exports,
      ComAtprotoAdminEmitModerationEvent: () => emitModerationEvent_exports,
      ComAtprotoAdminEnableAccountInvites: () => enableAccountInvites_exports,
      ComAtprotoAdminGetAccountInfo: () => getAccountInfo_exports,
      ComAtprotoAdminGetInviteCodes: () => getInviteCodes_exports,
      ComAtprotoAdminGetModerationEvent: () => getModerationEvent_exports,
      ComAtprotoAdminGetRecord: () => getRecord_exports,
      ComAtprotoAdminGetRepo: () => getRepo_exports,
      ComAtprotoAdminGetSubjectStatus: () => getSubjectStatus_exports,
      ComAtprotoAdminQueryModerationEvents: () => queryModerationEvents_exports,
      ComAtprotoAdminQueryModerationStatuses: () =>
        queryModerationStatuses_exports,
      ComAtprotoAdminSearchRepos: () => searchRepos_exports,
      ComAtprotoAdminSendEmail: () => sendEmail_exports,
      ComAtprotoAdminUpdateAccountEmail: () => updateAccountEmail_exports,
      ComAtprotoAdminUpdateAccountHandle: () => updateAccountHandle_exports,
      ComAtprotoAdminUpdateSubjectStatus: () => updateSubjectStatus_exports,
      ComAtprotoIdentityResolveHandle: () => resolveHandle_exports,
      ComAtprotoIdentityUpdateHandle: () => updateHandle_exports,
      ComAtprotoLabelDefs: () => defs_exports2,
      ComAtprotoLabelQueryLabels: () => queryLabels_exports,
      ComAtprotoLabelSubscribeLabels: () => subscribeLabels_exports,
      ComAtprotoModerationCreateReport: () => createReport_exports,
      ComAtprotoModerationDefs: () => defs_exports3,
      ComAtprotoRepoApplyWrites: () => applyWrites_exports,
      ComAtprotoRepoCreateRecord: () => createRecord_exports,
      ComAtprotoRepoDeleteRecord: () => deleteRecord_exports,
      ComAtprotoRepoDescribeRepo: () => describeRepo_exports,
      ComAtprotoRepoGetRecord: () => getRecord_exports2,
      ComAtprotoRepoListRecords: () => listRecords_exports,
      ComAtprotoRepoPutRecord: () => putRecord_exports,
      ComAtprotoRepoStrongRef: () => strongRef_exports,
      ComAtprotoRepoUploadBlob: () => uploadBlob_exports,
      ComAtprotoServerConfirmEmail: () => confirmEmail_exports,
      ComAtprotoServerCreateAccount: () => createAccount_exports,
      ComAtprotoServerCreateAppPassword: () => createAppPassword_exports,
      ComAtprotoServerCreateInviteCode: () => createInviteCode_exports,
      ComAtprotoServerCreateInviteCodes: () => createInviteCodes_exports,
      ComAtprotoServerCreateSession: () => createSession_exports,
      ComAtprotoServerDefs: () => defs_exports4,
      ComAtprotoServerDeleteAccount: () => deleteAccount_exports2,
      ComAtprotoServerDeleteSession: () => deleteSession_exports,
      ComAtprotoServerDescribeServer: () => describeServer_exports,
      ComAtprotoServerGetAccountInviteCodes: () =>
        getAccountInviteCodes_exports,
      ComAtprotoServerGetSession: () => getSession_exports,
      ComAtprotoServerListAppPasswords: () => listAppPasswords_exports,
      ComAtprotoServerRefreshSession: () => refreshSession_exports,
      ComAtprotoServerRequestAccountDelete: () => requestAccountDelete_exports,
      ComAtprotoServerRequestEmailConfirmation: () =>
        requestEmailConfirmation_exports,
      ComAtprotoServerRequestEmailUpdate: () => requestEmailUpdate_exports,
      ComAtprotoServerRequestPasswordReset: () => requestPasswordReset_exports,
      ComAtprotoServerReserveSigningKey: () => reserveSigningKey_exports,
      ComAtprotoServerResetPassword: () => resetPassword_exports,
      ComAtprotoServerRevokeAppPassword: () => revokeAppPassword_exports,
      ComAtprotoServerUpdateEmail: () => updateEmail_exports,
      ComAtprotoSyncGetBlob: () => getBlob_exports,
      ComAtprotoSyncGetBlocks: () => getBlocks_exports,
      ComAtprotoSyncGetCheckout: () => getCheckout_exports,
      ComAtprotoSyncGetHead: () => getHead_exports,
      ComAtprotoSyncGetLatestCommit: () => getLatestCommit_exports,
      ComAtprotoSyncGetRecord: () => getRecord_exports3,
      ComAtprotoSyncGetRepo: () => getRepo_exports2,
      ComAtprotoSyncListBlobs: () => listBlobs_exports,
      ComAtprotoSyncListRepos: () => listRepos_exports,
      ComAtprotoSyncNotifyOfUpdate: () => notifyOfUpdate_exports,
      ComAtprotoSyncRequestCrawl: () => requestCrawl_exports,
      ComAtprotoSyncSubscribeRepos: () => subscribeRepos_exports,
      ComAtprotoTempFetchLabels: () => fetchLabels_exports,
      ComAtprotoTempImportRepo: () => importRepo_exports,
      ComAtprotoTempPushBlob: () => pushBlob_exports,
      ComAtprotoTempTransferAccount: () => transferAccount_exports,
      ComNS: () => ComNS,
      EmbedNS: () => EmbedNS,
      FeedNS: () => FeedNS,
      FollowRecord: () => FollowRecord,
      GeneratorRecord: () => GeneratorRecord,
      GraphNS: () => GraphNS,
      IdentityNS: () => IdentityNS,
      LABELS: () => LABELS,
      LABEL_GROUPS: () => LABEL_GROUPS,
      LabelNS: () => LabelNS,
      LikeRecord: () => LikeRecord,
      ListRecord: () => ListRecord,
      ListblockRecord: () => ListblockRecord,
      ListitemRecord: () => ListitemRecord,
      ModerationDecision: () => ModerationDecision,
      ModerationNS: () => ModerationNS,
      NotificationNS: () => NotificationNS,
      PostRecord: () => PostRecord,
      ProfileRecord: () => ProfileRecord,
      RepoNS: () => RepoNS,
      RepostRecord: () => RepostRecord,
      RichText: () => RichText,
      RichTextSegment: () => RichTextSegment,
      RichtextNS: () => RichtextNS,
      ServerNS: () => ServerNS,
      SyncNS: () => SyncNS,
      TempNS: () => TempNS,
      ThreadgateRecord: () => ThreadgateRecord,
      UnicodeString: () => UnicodeString,
      UnspeccedNS: () => UnspeccedNS,
      default: () => AtpAgent,
      jsonStringToLex: () => jsonStringToLex,
      jsonToLex: () => jsonToLex,
      lexToJson: () => lexToJson,
      moderateFeedGenerator: () => moderateFeedGenerator,
      moderatePost: () => moderatePost,
      moderateProfile: () => moderateProfile,
      moderateUserList: () => moderateUserList,
      parseLanguage: () => parseLanguage,
      sanitizeRichText: () => sanitizeRichText,
      stringifyLex: () => stringifyLex
    })
    module.exports = __toCommonJS(src_exports2)

    // ../syntax/src/handle.ts
    var ensureValidHandle = (handle2) => {
      if (!/^[a-zA-Z0-9.-]*$/.test(handle2)) {
        throw new InvalidHandleError(
          'Disallowed characters in handle (ASCII letters, digits, dashes, periods only)'
        )
      }
      if (handle2.length > 253) {
        throw new InvalidHandleError('Handle is too long (253 chars max)')
      }
      const labels = handle2.split('.')
      if (labels.length < 2) {
        throw new InvalidHandleError('Handle domain needs at least two parts')
      }
      for (let i = 0; i < labels.length; i++) {
        const l = labels[i]
        if (l.length < 1) {
          throw new InvalidHandleError('Handle parts can not be empty')
        }
        if (l.length > 63) {
          throw new InvalidHandleError('Handle part too long (max 63 chars)')
        }
        if (l.endsWith('-') || l.startsWith('-')) {
          throw new InvalidHandleError(
            'Handle parts can not start or end with hyphens'
          )
        }
        if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {
          throw new InvalidHandleError(
            'Handle final component (TLD) must start with ASCII letter'
          )
        }
      }
    }
    var InvalidHandleError = class extends Error {}

    // ../syntax/src/did.ts
    var ensureValidDid = (did2) => {
      if (!/^[a-zA-Z0-9._:%-]*$/.test(did2)) {
        throw new InvalidDidError(
          'Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)'
        )
      }
      const parts = did2.split(':')
      if (parts.length < 3) {
        throw new InvalidDidError(
          'DID requires prefix, method, and method-specific content'
        )
      }
      if (parts[0] != 'did') {
        throw new InvalidDidError('DID requires "did:" prefix')
      }
      if (!/^[a-z]+$/.test(parts[1])) {
        throw new InvalidDidError('DID method must be lower-case letters')
      }
      if (did2.endsWith(':') || did2.endsWith('%')) {
        throw new InvalidDidError('DID can not end with ":" or "%"')
      }
      if (did2.length > 2 * 1024) {
        throw new InvalidDidError('DID is too long (2048 chars max)')
      }
    }
    var InvalidDidError = class extends Error {}

    // ../syntax/src/nsid.ts
    var NSID = class {
      constructor(nsid2) {
        this.segments = []
        ensureValidNsid(nsid2)
        this.segments = nsid2.split('.')
      }
      static parse(nsid2) {
        return new NSID(nsid2)
      }
      static create(authority, name2) {
        const segments = [...authority.split('.').reverse(), name2].join('.')
        return new NSID(segments)
      }
      static isValid(nsid2) {
        try {
          NSID.parse(nsid2)
          return true
        } catch (e) {
          return false
        }
      }
      get authority() {
        return this.segments
          .slice(0, this.segments.length - 1)
          .reverse()
          .join('.')
      }
      get name() {
        return this.segments.at(this.segments.length - 1)
      }
      toString() {
        return this.segments.join('.')
      }
    }
    var ensureValidNsid = (nsid2) => {
      const toCheck = nsid2
      if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
        throw new InvalidNsidError(
          'Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)'
        )
      }
      if (toCheck.length > 253 + 1 + 63) {
        throw new InvalidNsidError('NSID is too long (317 chars max)')
      }
      const labels = toCheck.split('.')
      if (labels.length < 3) {
        throw new InvalidNsidError('NSID needs at least three parts')
      }
      for (let i = 0; i < labels.length; i++) {
        const l = labels[i]
        if (l.length < 1) {
          throw new InvalidNsidError('NSID parts can not be empty')
        }
        if (l.length > 63) {
          throw new InvalidNsidError('NSID part too long (max 63 chars)')
        }
        if (l.endsWith('-') || l.startsWith('-')) {
          throw new InvalidNsidError(
            'NSID parts can not start or end with hyphen'
          )
        }
        if (/^[0-9]/.test(l) && i == 0) {
          throw new InvalidNsidError(
            'NSID first part may not start with a digit'
          )
        }
        if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {
          throw new InvalidNsidError('NSID name part must be only letters')
        }
      }
    }
    var InvalidNsidError = class extends Error {}

    // ../syntax/src/aturi_validation.ts
    var ensureValidAtUri = (uri2) => {
      const uriParts = uri2.split('#')
      if (uriParts.length > 2) {
        throw new Error(
          'ATURI can have at most one "#", separating fragment out'
        )
      }
      const fragmentPart = uriParts[1] || null
      uri2 = uriParts[0]
      if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri2)) {
        throw new Error('Disallowed characters in ATURI (ASCII)')
      }
      const parts = uri2.split('/')
      if (parts.length >= 3 && (parts[0] != 'at:' || parts[1].length != 0)) {
        throw new Error('ATURI must start with "at://"')
      }
      if (parts.length < 3) {
        throw new Error('ATURI requires at least method and authority sections')
      }
      try {
        if (parts[2].startsWith('did:')) {
          ensureValidDid(parts[2])
        } else {
          ensureValidHandle(parts[2])
        }
      } catch {
        throw new Error('ATURI authority must be a valid handle or DID')
      }
      if (parts.length >= 4) {
        if (parts[3].length == 0) {
          throw new Error(
            'ATURI can not have a slash after authority without a path segment'
          )
        }
        try {
          ensureValidNsid(parts[3])
        } catch {
          throw new Error(
            'ATURI requires first path segment (if supplied) to be valid NSID'
          )
        }
      }
      if (parts.length >= 5) {
        if (parts[4].length == 0) {
          throw new Error(
            'ATURI can not have a slash after collection, unless record key is provided'
          )
        }
      }
      if (parts.length >= 6) {
        throw new Error(
          'ATURI path can have at most two parts, and no trailing slash'
        )
      }
      if (uriParts.length >= 2 && fragmentPart == null) {
        throw new Error('ATURI fragment must be non-empty and start with slash')
      }
      if (fragmentPart != null) {
        if (fragmentPart.length == 0 || fragmentPart[0] != '/') {
          throw new Error(
            'ATURI fragment must be non-empty and start with slash'
          )
        }
        if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
          throw new Error('Disallowed characters in ATURI fragment (ASCII)')
        }
      }
      if (uri2.length > 8 * 1024) {
        throw new Error('ATURI is far too long')
      }
    }

    // ../syntax/src/aturi.ts
    var ATP_URI_REGEX =
      /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i
    var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i
    var AtUri = class {
      constructor(uri2, base3) {
        let parsed
        if (base3) {
          parsed = parse(base3)
          if (!parsed) {
            throw new Error(`Invalid at uri: ${base3}`)
          }
          const relativep = parseRelative(uri2)
          if (!relativep) {
            throw new Error(`Invalid path: ${uri2}`)
          }
          Object.assign(parsed, relativep)
        } else {
          parsed = parse(uri2)
          if (!parsed) {
            throw new Error(`Invalid at uri: ${uri2}`)
          }
        }
        this.hash = parsed.hash
        this.host = parsed.host
        this.pathname = parsed.pathname
        this.searchParams = parsed.searchParams
      }
      static make(handleOrDid, collection, rkey) {
        let str = handleOrDid
        if (collection) str += '/' + collection
        if (rkey) str += '/' + rkey
        return new AtUri(str)
      }
      get protocol() {
        return 'at:'
      }
      get origin() {
        return `at://${this.host}`
      }
      get hostname() {
        return this.host
      }
      set hostname(v) {
        this.host = v
      }
      get search() {
        return this.searchParams.toString()
      }
      set search(v) {
        this.searchParams = new URLSearchParams(v)
      }
      get collection() {
        return this.pathname.split('/').filter(Boolean)[0] || ''
      }
      set collection(v) {
        const parts = this.pathname.split('/').filter(Boolean)
        parts[0] = v
        this.pathname = parts.join('/')
      }
      get rkey() {
        return this.pathname.split('/').filter(Boolean)[1] || ''
      }
      set rkey(v) {
        const parts = this.pathname.split('/').filter(Boolean)
        if (!parts[0]) parts[0] = 'undefined'
        parts[1] = v
        this.pathname = parts.join('/')
      }
      get href() {
        return this.toString()
      }
      toString() {
        let path = this.pathname || '/'
        if (!path.startsWith('/')) {
          path = `/${path}`
        }
        let qs = this.searchParams.toString()
        if (qs && !qs.startsWith('?')) {
          qs = `?${qs}`
        }
        let hash = this.hash
        if (hash && !hash.startsWith('#')) {
          hash = `#${hash}`
        }
        return `at://${this.host}${path}${qs}${hash}`
      }
    }
    function parse(str) {
      const match = ATP_URI_REGEX.exec(str)
      if (match) {
        return {
          hash: match[5] || '',
          host: match[2] || '',
          pathname: match[3] || '',
          searchParams: new URLSearchParams(match[4] || '')
        }
      }
      return void 0
    }
    function parseRelative(str) {
      const match = RELATIVE_REGEX.exec(str)
      if (match) {
        return {
          hash: match[3] || '',
          pathname: match[1] || '',
          searchParams: new URLSearchParams(match[2] || '')
        }
      }
      return void 0
    }

    // ../../node_modules/.pnpm/zod@3.21.4/node_modules/zod/lib/index.mjs
    var util
    ;(function (util2) {
      util2.assertEqual = (val) => val
      function assertIs(_arg) {}
      util2.assertIs = assertIs
      function assertNever(_x) {
        throw new Error()
      }
      util2.assertNever = assertNever
      util2.arrayToEnum = (items) => {
        const obj = {}
        for (const item of items) {
          obj[item] = item
        }
        return obj
      }
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2
          .objectKeys(obj)
          .filter((k) => typeof obj[obj[k]] !== 'number')
        const filtered = {}
        for (const k of validKeys) {
          filtered[k] = obj[k]
        }
        return util2.objectValues(filtered)
      }
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function (e) {
          return obj[e]
        })
      }
      util2.objectKeys =
        typeof Object.keys === 'function'
          ? (obj) => Object.keys(obj)
          : (object2) => {
              const keys = []
              for (const key in object2) {
                if (Object.prototype.hasOwnProperty.call(object2, key)) {
                  keys.push(key)
                }
              }
              return keys
            }
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item)) return item
        }
        return void 0
      }
      util2.isInteger =
        typeof Number.isInteger === 'function'
          ? (val) => Number.isInteger(val)
          : (val) =>
              typeof val === 'number' &&
              isFinite(val) &&
              Math.floor(val) === val
      function joinValues(array2, separator = ' | ') {
        return array2
          .map((val) => (typeof val === 'string' ? `'${val}'` : val))
          .join(separator)
      }
      util2.joinValues = joinValues
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === 'bigint') {
          return value.toString()
        }
        return value
      }
    })(util || (util = {}))
    var objectUtil
    ;(function (objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
        }
      }
    })(objectUtil || (objectUtil = {}))
    var ZodParsedType = util.arrayToEnum([
      'string',
      'nan',
      'number',
      'integer',
      'float',
      'boolean',
      'date',
      'bigint',
      'symbol',
      'function',
      'undefined',
      'null',
      'array',
      'object',
      'unknown',
      'promise',
      'void',
      'never',
      'map',
      'set'
    ])
    var getParsedType = (data) => {
      const t = typeof data
      switch (t) {
        case 'undefined':
          return ZodParsedType.undefined
        case 'string':
          return ZodParsedType.string
        case 'number':
          return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number
        case 'boolean':
          return ZodParsedType.boolean
        case 'function':
          return ZodParsedType.function
        case 'bigint':
          return ZodParsedType.bigint
        case 'symbol':
          return ZodParsedType.symbol
        case 'object':
          if (Array.isArray(data)) {
            return ZodParsedType.array
          }
          if (data === null) {
            return ZodParsedType.null
          }
          if (
            data.then &&
            typeof data.then === 'function' &&
            data.catch &&
            typeof data.catch === 'function'
          ) {
            return ZodParsedType.promise
          }
          if (typeof Map !== 'undefined' && data instanceof Map) {
            return ZodParsedType.map
          }
          if (typeof Set !== 'undefined' && data instanceof Set) {
            return ZodParsedType.set
          }
          if (typeof Date !== 'undefined' && data instanceof Date) {
            return ZodParsedType.date
          }
          return ZodParsedType.object
        default:
          return ZodParsedType.unknown
      }
    }
    var ZodIssueCode = util.arrayToEnum([
      'invalid_type',
      'invalid_literal',
      'custom',
      'invalid_union',
      'invalid_union_discriminator',
      'invalid_enum_value',
      'unrecognized_keys',
      'invalid_arguments',
      'invalid_return_type',
      'invalid_date',
      'invalid_string',
      'too_small',
      'too_big',
      'invalid_intersection_types',
      'not_multiple_of',
      'not_finite'
    ])
    var quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2)
      return json.replace(/"([^"]+)":/g, '$1:')
    }
    var ZodError = class extends Error {
      constructor(issues) {
        super()
        this.issues = []
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub]
        }
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs]
        }
        const actualProto = new.target.prototype
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto)
        } else {
          this.__proto__ = actualProto
        }
        this.name = 'ZodError'
        this.issues = issues
      }
      get errors() {
        return this.issues
      }
      format(_mapper) {
        const mapper =
          _mapper ||
          function (issue) {
            return issue.message
          }
        const fieldErrors = { _errors: [] }
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === 'invalid_union') {
              issue.unionErrors.map(processError)
            } else if (issue.code === 'invalid_return_type') {
              processError(issue.returnTypeError)
            } else if (issue.code === 'invalid_arguments') {
              processError(issue.argumentsError)
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue))
            } else {
              let curr = fieldErrors
              let i = 0
              while (i < issue.path.length) {
                const el = issue.path[i]
                const terminal = i === issue.path.length - 1
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] }
                } else {
                  curr[el] = curr[el] || { _errors: [] }
                  curr[el]._errors.push(mapper(issue))
                }
                curr = curr[el]
                i++
              }
            }
          }
        }
        processError(this)
        return fieldErrors
      }
      toString() {
        return this.message
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2)
      }
      get isEmpty() {
        return this.issues.length === 0
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {}
        const formErrors = []
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || []
            fieldErrors[sub.path[0]].push(mapper(sub))
          } else {
            formErrors.push(mapper(sub))
          }
        }
        return { formErrors, fieldErrors }
      }
      get formErrors() {
        return this.flatten()
      }
    }
    ZodError.create = (issues) => {
      const error = new ZodError(issues)
      return error
    }
    var errorMap = (issue, _ctx) => {
      let message
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message = 'Required'
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`
          }
          break
        case ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(
            issue.expected,
            util.jsonStringifyReplacer
          )}`
          break
        case ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util.joinValues(
            issue.keys,
            ', '
          )}`
          break
        case ZodIssueCode.invalid_union:
          message = `Invalid input`
          break
        case ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util.joinValues(
            issue.options
          )}`
          break
        case ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util.joinValues(
            issue.options
          )}, received '${issue.received}'`
          break
        case ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`
          break
        case ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`
          break
        case ZodIssueCode.invalid_date:
          message = `Invalid date`
          break
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === 'object') {
            if ('includes' in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`
              if (typeof issue.validation.position === 'number') {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`
              }
            } else if ('startsWith' in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`
            } else if ('endsWith' in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`
            } else {
              util.assertNever(issue.validation)
            }
          } else if (issue.validation !== 'regex') {
            message = `Invalid ${issue.validation}`
          } else {
            message = 'Invalid'
          }
          break
        case ZodIssueCode.too_small:
          if (issue.type === 'array')
            message = `Array must contain ${
              issue.exact
                ? 'exactly'
                : issue.inclusive
                  ? `at least`
                  : `more than`
            } ${issue.minimum} element(s)`
          else if (issue.type === 'string')
            message = `String must contain ${
              issue.exact ? 'exactly' : issue.inclusive ? `at least` : `over`
            } ${issue.minimum} character(s)`
          else if (issue.type === 'number')
            message = `Number must be ${
              issue.exact
                ? `exactly equal to `
                : issue.inclusive
                  ? `greater than or equal to `
                  : `greater than `
            }${issue.minimum}`
          else if (issue.type === 'date')
            message = `Date must be ${
              issue.exact
                ? `exactly equal to `
                : issue.inclusive
                  ? `greater than or equal to `
                  : `greater than `
            }${new Date(Number(issue.minimum))}`
          else message = 'Invalid input'
          break
        case ZodIssueCode.too_big:
          if (issue.type === 'array')
            message = `Array must contain ${
              issue.exact
                ? `exactly`
                : issue.inclusive
                  ? `at most`
                  : `less than`
            } ${issue.maximum} element(s)`
          else if (issue.type === 'string')
            message = `String must contain ${
              issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`
            } ${issue.maximum} character(s)`
          else if (issue.type === 'number')
            message = `Number must be ${
              issue.exact
                ? `exactly`
                : issue.inclusive
                  ? `less than or equal to`
                  : `less than`
            } ${issue.maximum}`
          else if (issue.type === 'bigint')
            message = `BigInt must be ${
              issue.exact
                ? `exactly`
                : issue.inclusive
                  ? `less than or equal to`
                  : `less than`
            } ${issue.maximum}`
          else if (issue.type === 'date')
            message = `Date must be ${
              issue.exact
                ? `exactly`
                : issue.inclusive
                  ? `smaller than or equal to`
                  : `smaller than`
            } ${new Date(Number(issue.maximum))}`
          else message = 'Invalid input'
          break
        case ZodIssueCode.custom:
          message = `Invalid input`
          break
        case ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`
          break
        case ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`
          break
        case ZodIssueCode.not_finite:
          message = 'Number must be finite'
          break
        default:
          message = _ctx.defaultError
          util.assertNever(issue)
      }
      return { message }
    }
    var overrideErrorMap = errorMap
    function setErrorMap(map) {
      overrideErrorMap = map
    }
    function getErrorMap() {
      return overrideErrorMap
    }
    var makeIssue = (params2) => {
      const { data, path, errorMaps, issueData } = params2
      const fullPath = [...path, ...(issueData.path || [])]
      const fullIssue = {
        ...issueData,
        path: fullPath
      }
      let errorMessage = ''
      const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse()
      for (const map of maps) {
        errorMessage = map(fullIssue, {
          data,
          defaultError: errorMessage
        }).message
      }
      return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
      }
    }
    var EMPTY_PATH = []
    function addIssueToContext(ctx, issueData) {
      const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x)
      })
      ctx.common.issues.push(issue)
    }
    var ParseStatus = class {
      constructor() {
        this.value = 'valid'
      }
      dirty() {
        if (this.value === 'valid') this.value = 'dirty'
      }
      abort() {
        if (this.value !== 'aborted') this.value = 'aborted'
      }
      static mergeArray(status, results) {
        const arrayValue = []
        for (const s of results) {
          if (s.status === 'aborted') return INVALID
          if (s.status === 'dirty') status.dirty()
          arrayValue.push(s.value)
        }
        return { status: status.value, value: arrayValue }
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = []
        for (const pair of pairs) {
          syncPairs.push({
            key: await pair.key,
            value: await pair.value
          })
        }
        return ParseStatus.mergeObjectSync(status, syncPairs)
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {}
        for (const pair of pairs) {
          const { key, value } = pair
          if (key.status === 'aborted') return INVALID
          if (value.status === 'aborted') return INVALID
          if (key.status === 'dirty') status.dirty()
          if (value.status === 'dirty') status.dirty()
          if (typeof value.value !== 'undefined' || pair.alwaysSet) {
            finalObject[key.value] = value.value
          }
        }
        return { status: status.value, value: finalObject }
      }
    }
    var INVALID = Object.freeze({
      status: 'aborted'
    })
    var DIRTY = (value) => ({ status: 'dirty', value })
    var OK = (value) => ({ status: 'valid', value })
    var isAborted = (x) => x.status === 'aborted'
    var isDirty = (x) => x.status === 'dirty'
    var isValid = (x) => x.status === 'valid'
    var isAsync = (x) => typeof Promise !== 'undefined' && x instanceof Promise
    var errorUtil
    ;(function (errorUtil2) {
      errorUtil2.errToObj = (message) =>
        typeof message === 'string' ? { message } : message || {}
      errorUtil2.toString = (message) =>
        typeof message === 'string'
          ? message
          : message === null || message === void 0
            ? void 0
            : message.message
    })(errorUtil || (errorUtil = {}))
    var ParseInputLazyPath = class {
      constructor(parent, value, path, key) {
        this._cachedPath = []
        this.parent = parent
        this.data = value
        this._path = path
        this._key = key
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key)
          } else {
            this._cachedPath.push(...this._path, this._key)
          }
        }
        return this._cachedPath
      }
    }
    var handleResult = (ctx, result) => {
      if (isValid(result)) {
        return { success: true, data: result.value }
      } else {
        if (!ctx.common.issues.length) {
          throw new Error('Validation failed but no issues detected.')
        }
        return {
          success: false,
          get error() {
            if (this._error) return this._error
            const error = new ZodError(ctx.common.issues)
            this._error = error
            return this._error
          }
        }
      }
    }
    function processCreateParams(params2) {
      if (!params2) return {}
      const {
        errorMap: errorMap2,
        invalid_type_error,
        required_error,
        description
      } = params2
      if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(
          `Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`
        )
      }
      if (errorMap2) return { errorMap: errorMap2, description }
      const customMap = (iss, ctx) => {
        if (iss.code !== 'invalid_type') return { message: ctx.defaultError }
        if (typeof ctx.data === 'undefined') {
          return {
            message:
              required_error !== null && required_error !== void 0
                ? required_error
                : ctx.defaultError
          }
        }
        return {
          message:
            invalid_type_error !== null && invalid_type_error !== void 0
              ? invalid_type_error
              : ctx.defaultError
        }
      }
      return { errorMap: customMap, description }
    }
    var ZodType = class {
      constructor(def2) {
        this.spa = this.safeParseAsync
        this._def = def2
        this.parse = this.parse.bind(this)
        this.safeParse = this.safeParse.bind(this)
        this.parseAsync = this.parseAsync.bind(this)
        this.safeParseAsync = this.safeParseAsync.bind(this)
        this.spa = this.spa.bind(this)
        this.refine = this.refine.bind(this)
        this.refinement = this.refinement.bind(this)
        this.superRefine = this.superRefine.bind(this)
        this.optional = this.optional.bind(this)
        this.nullable = this.nullable.bind(this)
        this.nullish = this.nullish.bind(this)
        this.array = this.array.bind(this)
        this.promise = this.promise.bind(this)
        this.or = this.or.bind(this)
        this.and = this.and.bind(this)
        this.transform = this.transform.bind(this)
        this.brand = this.brand.bind(this)
        this.default = this.default.bind(this)
        this.catch = this.catch.bind(this)
        this.describe = this.describe.bind(this)
        this.pipe = this.pipe.bind(this)
        this.isNullable = this.isNullable.bind(this)
        this.isOptional = this.isOptional.bind(this)
      }
      get description() {
        return this._def.description
      }
      _getType(input) {
        return getParsedType(input.data)
      }
      _getOrReturnCtx(input, ctx) {
        return (
          ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        )
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        }
      }
      _parseSync(input) {
        const result = this._parse(input)
        if (isAsync(result)) {
          throw new Error('Synchronous parse encountered promise.')
        }
        return result
      }
      _parseAsync(input) {
        const result = this._parse(input)
        return Promise.resolve(result)
      }
      parse(data, params2) {
        const result = this.safeParse(data, params2)
        if (result.success) return result.data
        throw result.error
      }
      safeParse(data, params2) {
        var _a
        const ctx = {
          common: {
            issues: [],
            async:
              (_a =
                params2 === null || params2 === void 0
                  ? void 0
                  : params2.async) !== null && _a !== void 0
                ? _a
                : false,
            contextualErrorMap:
              params2 === null || params2 === void 0 ? void 0 : params2.errorMap
          },
          path:
            (params2 === null || params2 === void 0 ? void 0 : params2.path) ||
            [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        }
        const result = this._parseSync({ data, path: ctx.path, parent: ctx })
        return handleResult(ctx, result)
      }
      async parseAsync(data, params2) {
        const result = await this.safeParseAsync(data, params2)
        if (result.success) return result.data
        throw result.error
      }
      async safeParseAsync(data, params2) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap:
              params2 === null || params2 === void 0
                ? void 0
                : params2.errorMap,
            async: true
          },
          path:
            (params2 === null || params2 === void 0 ? void 0 : params2.path) ||
            [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        }
        const maybeAsyncResult = this._parse({
          data,
          path: ctx.path,
          parent: ctx
        })
        const result = await (isAsync(maybeAsyncResult)
          ? maybeAsyncResult
          : Promise.resolve(maybeAsyncResult))
        return handleResult(ctx, result)
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === 'string' || typeof message === 'undefined') {
            return { message }
          } else if (typeof message === 'function') {
            return message(val)
          } else {
            return message
          }
        }
        return this._refinement((val, ctx) => {
          const result = check(val)
          const setError = () =>
            ctx.addIssue({
              code: ZodIssueCode.custom,
              ...getIssueProperties(val)
            })
          if (typeof Promise !== 'undefined' && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError()
                return false
              } else {
                return true
              }
            })
          }
          if (!result) {
            setError()
            return false
          } else {
            return true
          }
        })
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(
              typeof refinementData === 'function'
                ? refinementData(val, ctx)
                : refinementData
            )
            return false
          } else {
            return true
          }
        })
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: 'refinement', refinement }
        })
      }
      superRefine(refinement) {
        return this._refinement(refinement)
      }
      optional() {
        return ZodOptional.create(this, this._def)
      }
      nullable() {
        return ZodNullable.create(this, this._def)
      }
      nullish() {
        return this.nullable().optional()
      }
      array() {
        return ZodArray.create(this, this._def)
      }
      promise() {
        return ZodPromise.create(this, this._def)
      }
      or(option) {
        return ZodUnion.create([this, option], this._def)
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def)
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: 'transform', transform }
        })
      }
      default(def2) {
        const defaultValueFunc = typeof def2 === 'function' ? def2 : () => def2
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        })
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        })
      }
      catch(def2) {
        const catchValueFunc = typeof def2 === 'function' ? def2 : () => def2
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        })
      }
      describe(description) {
        const This = this.constructor
        return new This({
          ...this._def,
          description
        })
      }
      pipe(target) {
        return ZodPipeline.create(this, target)
      }
      isOptional() {
        return this.safeParse(void 0).success
      }
      isNullable() {
        return this.safeParse(null).success
      }
    }
    var cuidRegex = /^c[^\s-]{8,}$/i
    var cuid2Regex = /^[a-z][a-z0-9]*$/
    var ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/
    var uuidRegex =
      /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i
    var emailRegex =
      /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/
    var emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u
    var ipv4Regex =
      /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/
    var ipv6Regex =
      /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/
    var datetimeRegex = (args) => {
      if (args.precision) {
        if (args.offset) {
          return new RegExp(
            `^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`
          )
        } else {
          return new RegExp(
            `^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`
          )
        }
      } else if (args.precision === 0) {
        if (args.offset) {
          return new RegExp(
            `^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`
          )
        } else {
          return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`)
        }
      } else {
        if (args.offset) {
          return new RegExp(
            `^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`
          )
        } else {
          return new RegExp(
            `^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`
          )
        }
      }
    }
    function isValidIP(ip, version2) {
      if ((version2 === 'v4' || !version2) && ipv4Regex.test(ip)) {
        return true
      }
      if ((version2 === 'v6' || !version2) && ipv6Regex.test(ip)) {
        return true
      }
      return false
    }
    var ZodString = class extends ZodType {
      constructor() {
        super(...arguments)
        this._regex = (regex, validation, message) =>
          this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
          })
        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message))
        this.trim = () =>
          new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: 'trim' }]
          })
        this.toLowerCase = () =>
          new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: 'toLowerCase' }]
          })
        this.toUpperCase = () =>
          new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: 'toUpperCase' }]
          })
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data)
        }
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          })
          return INVALID
        }
        const status = new ParseStatus()
        let ctx = void 0
        for (const check of this._def.checks) {
          if (check.kind === 'min') {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: 'string',
                inclusive: true,
                exact: false,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'max') {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: 'string',
                inclusive: true,
                exact: false,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'length') {
            const tooBig = input.data.length > check.value
            const tooSmall = input.data.length < check.value
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx)
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: 'string',
                  inclusive: true,
                  exact: true,
                  message: check.message
                })
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: 'string',
                  inclusive: true,
                  exact: true,
                  message: check.message
                })
              }
              status.dirty()
            }
          } else if (check.kind === 'email') {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'email',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'emoji') {
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'emoji',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'uuid') {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'uuid',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'cuid') {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'cuid',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'cuid2') {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'cuid2',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'ulid') {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'ulid',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'url') {
            try {
              new URL(input.data)
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'url',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'regex') {
            check.regex.lastIndex = 0
            const testResult = check.regex.test(input.data)
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'regex',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'trim') {
            input.data = input.data.trim()
          } else if (check.kind === 'includes') {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'toLowerCase') {
            input.data = input.data.toLowerCase()
          } else if (check.kind === 'toUpperCase') {
            input.data = input.data.toUpperCase()
          } else if (check.kind === 'startsWith') {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'endsWith') {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'datetime') {
            const regex = datetimeRegex(check)
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: 'datetime',
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'ip') {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                validation: 'ip',
                code: ZodIssueCode.invalid_string,
                message: check.message
              })
              status.dirty()
            }
          } else {
            util.assertNever(check)
          }
        }
        return { status: status.value, value: input.data }
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        })
      }
      email(message) {
        return this._addCheck({ kind: 'email', ...errorUtil.errToObj(message) })
      }
      url(message) {
        return this._addCheck({ kind: 'url', ...errorUtil.errToObj(message) })
      }
      emoji(message) {
        return this._addCheck({ kind: 'emoji', ...errorUtil.errToObj(message) })
      }
      uuid(message) {
        return this._addCheck({ kind: 'uuid', ...errorUtil.errToObj(message) })
      }
      cuid(message) {
        return this._addCheck({ kind: 'cuid', ...errorUtil.errToObj(message) })
      }
      cuid2(message) {
        return this._addCheck({ kind: 'cuid2', ...errorUtil.errToObj(message) })
      }
      ulid(message) {
        return this._addCheck({ kind: 'ulid', ...errorUtil.errToObj(message) })
      }
      ip(options) {
        return this._addCheck({ kind: 'ip', ...errorUtil.errToObj(options) })
      }
      datetime(options) {
        var _a
        if (typeof options === 'string') {
          return this._addCheck({
            kind: 'datetime',
            precision: null,
            offset: false,
            message: options
          })
        }
        return this._addCheck({
          kind: 'datetime',
          precision:
            typeof (options === null || options === void 0
              ? void 0
              : options.precision) === 'undefined'
              ? null
              : options === null || options === void 0
                ? void 0
                : options.precision,
          offset:
            (_a =
              options === null || options === void 0
                ? void 0
                : options.offset) !== null && _a !== void 0
              ? _a
              : false,
          ...errorUtil.errToObj(
            options === null || options === void 0 ? void 0 : options.message
          )
        })
      }
      regex(regex, message) {
        return this._addCheck({
          kind: 'regex',
          regex,
          ...errorUtil.errToObj(message)
        })
      }
      includes(value, options) {
        return this._addCheck({
          kind: 'includes',
          value,
          position:
            options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil.errToObj(
            options === null || options === void 0 ? void 0 : options.message
          )
        })
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: 'startsWith',
          value,
          ...errorUtil.errToObj(message)
        })
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: 'endsWith',
          value,
          ...errorUtil.errToObj(message)
        })
      }
      min(minLength, message) {
        return this._addCheck({
          kind: 'min',
          value: minLength,
          ...errorUtil.errToObj(message)
        })
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: 'max',
          value: maxLength,
          ...errorUtil.errToObj(message)
        })
      }
      length(len, message) {
        return this._addCheck({
          kind: 'length',
          value: len,
          ...errorUtil.errToObj(message)
        })
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === 'datetime')
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === 'email')
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === 'url')
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === 'emoji')
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === 'uuid')
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === 'cuid')
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === 'cuid2')
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === 'ulid')
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === 'ip')
      }
      get minLength() {
        let min = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'min') {
            if (min === null || ch.value > min) min = ch.value
          }
        }
        return min
      }
      get maxLength() {
        let max = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'max') {
            if (max === null || ch.value < max) max = ch.value
          }
        }
        return max
      }
    }
    ZodString.create = (params2) => {
      var _a
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce:
          (_a =
            params2 === null || params2 === void 0
              ? void 0
              : params2.coerce) !== null && _a !== void 0
            ? _a
            : false,
        ...processCreateParams(params2)
      })
    }
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split('.')[1] || '').length
      const stepDecCount = (step.toString().split('.')[1] || '').length
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount
      const valInt = parseInt(val.toFixed(decCount).replace('.', ''))
      const stepInt = parseInt(step.toFixed(decCount).replace('.', ''))
      return (valInt % stepInt) / Math.pow(10, decCount)
    }
    var ZodNumber = class extends ZodType {
      constructor() {
        super(...arguments)
        this.min = this.gte
        this.max = this.lte
        this.step = this.multipleOf
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data)
        }
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          })
          return INVALID
        }
        let ctx = void 0
        const status = new ParseStatus()
        for (const check of this._def.checks) {
          if (check.kind === 'int') {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: 'integer',
                received: 'float',
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'min') {
            const tooSmall = check.inclusive
              ? input.data < check.value
              : input.data <= check.value
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: 'number',
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'max') {
            const tooBig = check.inclusive
              ? input.data > check.value
              : input.data >= check.value
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: 'number',
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'multipleOf') {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'finite') {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              })
              status.dirty()
            }
          } else {
            util.assertNever(check)
          }
        }
        return { status: status.value, value: input.data }
      }
      gte(value, message) {
        return this.setLimit('min', value, true, errorUtil.toString(message))
      }
      gt(value, message) {
        return this.setLimit('min', value, false, errorUtil.toString(message))
      }
      lte(value, message) {
        return this.setLimit('max', value, true, errorUtil.toString(message))
      }
      lt(value, message) {
        return this.setLimit('max', value, false, errorUtil.toString(message))
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        })
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        })
      }
      int(message) {
        return this._addCheck({
          kind: 'int',
          message: errorUtil.toString(message)
        })
      }
      positive(message) {
        return this._addCheck({
          kind: 'min',
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        })
      }
      negative(message) {
        return this._addCheck({
          kind: 'max',
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        })
      }
      nonpositive(message) {
        return this._addCheck({
          kind: 'max',
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        })
      }
      nonnegative(message) {
        return this._addCheck({
          kind: 'min',
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        })
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: 'multipleOf',
          value,
          message: errorUtil.toString(message)
        })
      }
      finite(message) {
        return this._addCheck({
          kind: 'finite',
          message: errorUtil.toString(message)
        })
      }
      safe(message) {
        return this._addCheck({
          kind: 'min',
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })._addCheck({
          kind: 'max',
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })
      }
      get minValue() {
        let min = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'min') {
            if (min === null || ch.value > min) min = ch.value
          }
        }
        return min
      }
      get maxValue() {
        let max = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'max') {
            if (max === null || ch.value < max) max = ch.value
          }
        }
        return max
      }
      get isInt() {
        return !!this._def.checks.find(
          (ch) =>
            ch.kind === 'int' ||
            (ch.kind === 'multipleOf' && util.isInteger(ch.value))
        )
      }
      get isFinite() {
        let max = null,
          min = null
        for (const ch of this._def.checks) {
          if (
            ch.kind === 'finite' ||
            ch.kind === 'int' ||
            ch.kind === 'multipleOf'
          ) {
            return true
          } else if (ch.kind === 'min') {
            if (min === null || ch.value > min) min = ch.value
          } else if (ch.kind === 'max') {
            if (max === null || ch.value < max) max = ch.value
          }
        }
        return Number.isFinite(min) && Number.isFinite(max)
      }
    }
    ZodNumber.create = (params2) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce:
          (params2 === null || params2 === void 0 ? void 0 : params2.coerce) ||
          false,
        ...processCreateParams(params2)
      })
    }
    var ZodBigInt = class extends ZodType {
      constructor() {
        super(...arguments)
        this.min = this.gte
        this.max = this.lte
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = BigInt(input.data)
        }
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.bigint) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.bigint,
            received: ctx2.parsedType
          })
          return INVALID
        }
        let ctx = void 0
        const status = new ParseStatus()
        for (const check of this._def.checks) {
          if (check.kind === 'min') {
            const tooSmall = check.inclusive
              ? input.data < check.value
              : input.data <= check.value
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: 'bigint',
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'max') {
            const tooBig = check.inclusive
              ? input.data > check.value
              : input.data >= check.value
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: 'bigint',
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              })
              status.dirty()
            }
          } else if (check.kind === 'multipleOf') {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              })
              status.dirty()
            }
          } else {
            util.assertNever(check)
          }
        }
        return { status: status.value, value: input.data }
      }
      gte(value, message) {
        return this.setLimit('min', value, true, errorUtil.toString(message))
      }
      gt(value, message) {
        return this.setLimit('min', value, false, errorUtil.toString(message))
      }
      lte(value, message) {
        return this.setLimit('max', value, true, errorUtil.toString(message))
      }
      lt(value, message) {
        return this.setLimit('max', value, false, errorUtil.toString(message))
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        })
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        })
      }
      positive(message) {
        return this._addCheck({
          kind: 'min',
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        })
      }
      negative(message) {
        return this._addCheck({
          kind: 'max',
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        })
      }
      nonpositive(message) {
        return this._addCheck({
          kind: 'max',
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        })
      }
      nonnegative(message) {
        return this._addCheck({
          kind: 'min',
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        })
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: 'multipleOf',
          value,
          message: errorUtil.toString(message)
        })
      }
      get minValue() {
        let min = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'min') {
            if (min === null || ch.value > min) min = ch.value
          }
        }
        return min
      }
      get maxValue() {
        let max = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'max') {
            if (max === null || ch.value < max) max = ch.value
          }
        }
        return max
      }
    }
    ZodBigInt.create = (params2) => {
      var _a
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce:
          (_a =
            params2 === null || params2 === void 0
              ? void 0
              : params2.coerce) !== null && _a !== void 0
            ? _a
            : false,
        ...processCreateParams(params2)
      })
    }
    var ZodBoolean = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data)
        }
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          })
          return INVALID
        }
        return OK(input.data)
      }
    }
    ZodBoolean.create = (params2) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce:
          (params2 === null || params2 === void 0 ? void 0 : params2.coerce) ||
          false,
        ...processCreateParams(params2)
      })
    }
    var ZodDate = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data)
        }
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          })
          return INVALID
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          })
          return INVALID
        }
        const status = new ParseStatus()
        let ctx = void 0
        for (const check of this._def.checks) {
          if (check.kind === 'min') {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: 'date'
              })
              status.dirty()
            }
          } else if (check.kind === 'max') {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx)
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: 'date'
              })
              status.dirty()
            }
          } else {
            util.assertNever(check)
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        }
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        })
      }
      min(minDate, message) {
        return this._addCheck({
          kind: 'min',
          value: minDate.getTime(),
          message: errorUtil.toString(message)
        })
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: 'max',
          value: maxDate.getTime(),
          message: errorUtil.toString(message)
        })
      }
      get minDate() {
        let min = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'min') {
            if (min === null || ch.value > min) min = ch.value
          }
        }
        return min != null ? new Date(min) : null
      }
      get maxDate() {
        let max = null
        for (const ch of this._def.checks) {
          if (ch.kind === 'max') {
            if (max === null || ch.value < max) max = ch.value
          }
        }
        return max != null ? new Date(max) : null
      }
    }
    ZodDate.create = (params2) => {
      return new ZodDate({
        checks: [],
        coerce:
          (params2 === null || params2 === void 0 ? void 0 : params2.coerce) ||
          false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params2)
      })
    }
    var ZodSymbol = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          })
          return INVALID
        }
        return OK(input.data)
      }
    }
    ZodSymbol.create = (params2) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params2)
      })
    }
    var ZodUndefined = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          })
          return INVALID
        }
        return OK(input.data)
      }
    }
    ZodUndefined.create = (params2) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params2)
      })
    }
    var ZodNull = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          })
          return INVALID
        }
        return OK(input.data)
      }
    }
    ZodNull.create = (params2) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params2)
      })
    }
    var ZodAny = class extends ZodType {
      constructor() {
        super(...arguments)
        this._any = true
      }
      _parse(input) {
        return OK(input.data)
      }
    }
    ZodAny.create = (params2) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params2)
      })
    }
    var ZodUnknown = class extends ZodType {
      constructor() {
        super(...arguments)
        this._unknown = true
      }
      _parse(input) {
        return OK(input.data)
      }
    }
    ZodUnknown.create = (params2) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params2)
      })
    }
    var ZodNever = class extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input)
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        })
        return INVALID
      }
    }
    ZodNever.create = (params2) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params2)
      })
    }
    var ZodVoid = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          })
          return INVALID
        }
        return OK(input.data)
      }
    }
    ZodVoid.create = (params2) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params2)
      })
    }
    var ZodArray = class extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input)
        const def2 = this._def
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          })
          return INVALID
        }
        if (def2.exactLength !== null) {
          const tooBig = ctx.data.length > def2.exactLength.value
          const tooSmall = ctx.data.length < def2.exactLength.value
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def2.exactLength.value : void 0,
              maximum: tooBig ? def2.exactLength.value : void 0,
              type: 'array',
              inclusive: true,
              exact: true,
              message: def2.exactLength.message
            })
            status.dirty()
          }
        }
        if (def2.minLength !== null) {
          if (ctx.data.length < def2.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def2.minLength.value,
              type: 'array',
              inclusive: true,
              exact: false,
              message: def2.minLength.message
            })
            status.dirty()
          }
        }
        if (def2.maxLength !== null) {
          if (ctx.data.length > def2.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def2.maxLength.value,
              type: 'array',
              inclusive: true,
              exact: false,
              message: def2.maxLength.message
            })
            status.dirty()
          }
        }
        if (ctx.common.async) {
          return Promise.all(
            [...ctx.data].map((item, i) => {
              return def2.type._parseAsync(
                new ParseInputLazyPath(ctx, item, ctx.path, i)
              )
            })
          ).then((result2) => {
            return ParseStatus.mergeArray(status, result2)
          })
        }
        const result = [...ctx.data].map((item, i) => {
          return def2.type._parseSync(
            new ParseInputLazyPath(ctx, item, ctx.path, i)
          )
        })
        return ParseStatus.mergeArray(status, result)
      }
      get element() {
        return this._def.type
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message) }
        })
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message) }
        })
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message) }
        })
      }
      nonempty(message) {
        return this.min(1, message)
      }
    }
    ZodArray.create = (schema2, params2) => {
      return new ZodArray({
        type: schema2,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params2)
      })
    }
    function deepPartialify(schema2) {
      if (schema2 instanceof ZodObject) {
        const newShape = {}
        for (const key in schema2.shape) {
          const fieldSchema = schema2.shape[key]
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema))
        }
        return new ZodObject({
          ...schema2._def,
          shape: () => newShape
        })
      } else if (schema2 instanceof ZodArray) {
        return new ZodArray({
          ...schema2._def,
          type: deepPartialify(schema2.element)
        })
      } else if (schema2 instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema2.unwrap()))
      } else if (schema2 instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema2.unwrap()))
      } else if (schema2 instanceof ZodTuple) {
        return ZodTuple.create(
          schema2.items.map((item) => deepPartialify(item))
        )
      } else {
        return schema2
      }
    }
    var ZodObject = class extends ZodType {
      constructor() {
        super(...arguments)
        this._cached = null
        this.nonstrict = this.passthrough
        this.augment = this.extend
      }
      _getCached() {
        if (this._cached !== null) return this._cached
        const shape = this._def.shape()
        const keys = util.objectKeys(shape)
        return (this._cached = { shape, keys })
      }
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input)
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          })
          return INVALID
        }
        const { status, ctx } = this._processInputParams(input)
        const { shape, keys: shapeKeys } = this._getCached()
        const extraKeys = []
        if (
          !(
            this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === 'strip'
          )
        ) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key)
            }
          }
        }
        const pairs = []
        for (const key of shapeKeys) {
          const keyValidator = shape[key]
          const value = ctx.data[key]
          pairs.push({
            key: { status: 'valid', value: key },
            value: keyValidator._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
            ),
            alwaysSet: key in ctx.data
          })
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys
          if (unknownKeys === 'passthrough') {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: 'valid', value: key },
                value: { status: 'valid', value: ctx.data[key] }
              })
            }
          } else if (unknownKeys === 'strict') {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              })
              status.dirty()
            }
          } else if (unknownKeys === 'strip');
          else {
            throw new Error(
              `Internal ZodObject error: invalid unknownKeys value.`
            )
          }
        } else {
          const catchall = this._def.catchall
          for (const key of extraKeys) {
            const value = ctx.data[key]
            pairs.push({
              key: { status: 'valid', value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
              ),
              alwaysSet: key in ctx.data
            })
          }
        }
        if (ctx.common.async) {
          return Promise.resolve()
            .then(async () => {
              const syncPairs = []
              for (const pair of pairs) {
                const key = await pair.key
                syncPairs.push({
                  key,
                  value: await pair.value,
                  alwaysSet: pair.alwaysSet
                })
              }
              return syncPairs
            })
            .then((syncPairs) => {
              return ParseStatus.mergeObjectSync(status, syncPairs)
            })
        } else {
          return ParseStatus.mergeObjectSync(status, pairs)
        }
      }
      get shape() {
        return this._def.shape()
      }
      strict(message) {
        errorUtil.errToObj
        return new ZodObject({
          ...this._def,
          unknownKeys: 'strict',
          ...(message !== void 0
            ? {
                errorMap: (issue, ctx) => {
                  var _a, _b, _c, _d
                  const defaultError =
                    (_c =
                      (_b = (_a = this._def).errorMap) === null || _b === void 0
                        ? void 0
                        : _b.call(_a, issue, ctx).message) !== null &&
                    _c !== void 0
                      ? _c
                      : ctx.defaultError
                  if (issue.code === 'unrecognized_keys')
                    return {
                      message:
                        (_d = errorUtil.errToObj(message).message) !== null &&
                        _d !== void 0
                          ? _d
                          : defaultError
                    }
                  return {
                    message: defaultError
                  }
                }
              }
            : {})
        })
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: 'strip'
        })
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: 'passthrough'
        })
      }
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        })
      }
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        })
        return merged
      }
      setKey(key, schema2) {
        return this.augment({ [key]: schema2 })
      }
      catchall(index) {
        return new ZodObject({
          ...this._def,
          catchall: index
        })
      }
      pick(mask) {
        const shape = {}
        util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key]
          }
        })
        return new ZodObject({
          ...this._def,
          shape: () => shape
        })
      }
      omit(mask) {
        const shape = {}
        util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key]
          }
        })
        return new ZodObject({
          ...this._def,
          shape: () => shape
        })
      }
      deepPartial() {
        return deepPartialify(this)
      }
      partial(mask) {
        const newShape = {}
        util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key]
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema
          } else {
            newShape[key] = fieldSchema.optional()
          }
        })
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        })
      }
      required(mask) {
        const newShape = {}
        util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key]
          } else {
            const fieldSchema = this.shape[key]
            let newField = fieldSchema
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType
            }
            newShape[key] = newField
          }
        })
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        })
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape))
      }
    }
    ZodObject.create = (shape, params2) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: 'strip',
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params2)
      })
    }
    ZodObject.strictCreate = (shape, params2) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: 'strict',
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params2)
      })
    }
    ZodObject.lazycreate = (shape, params2) => {
      return new ZodObject({
        shape,
        unknownKeys: 'strip',
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params2)
      })
    }
    var ZodUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        const options = this._def.options
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === 'valid') {
              return result.result
            }
          }
          for (const result of results) {
            if (result.result.status === 'dirty') {
              ctx.common.issues.push(...result.ctx.common.issues)
              return result.result
            }
          }
          const unionErrors = results.map(
            (result) => new ZodError(result.ctx.common.issues)
          )
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          })
          return INVALID
        }
        if (ctx.common.async) {
          return Promise.all(
            options.map(async (option) => {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              }
              return {
                result: await option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              }
            })
          ).then(handleResults)
        } else {
          let dirty = void 0
          const issues = []
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            }
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            })
            if (result.status === 'valid') {
              return result
            } else if (result.status === 'dirty' && !dirty) {
              dirty = { result, ctx: childCtx }
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues)
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues)
            return dirty.result
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2))
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          })
          return INVALID
        }
      }
      get options() {
        return this._def.options
      }
    }
    ZodUnion.create = (types, params2) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params2)
      })
    }
    var getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema)
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType())
      } else if (type instanceof ZodLiteral) {
        return [type.value]
      } else if (type instanceof ZodEnum) {
        return type.options
      } else if (type instanceof ZodNativeEnum) {
        return Object.keys(type.enum)
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType)
      } else if (type instanceof ZodUndefined) {
        return [void 0]
      } else if (type instanceof ZodNull) {
        return [null]
      } else {
        return null
      }
    }
    var ZodDiscriminatedUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          })
          return INVALID
        }
        const discriminator = this.discriminator
        const discriminatorValue = ctx.data[discriminator]
        const option = this.optionsMap.get(discriminatorValue)
        if (!option) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          })
          return INVALID
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        }
      }
      get discriminator() {
        return this._def.discriminator
      }
      get options() {
        return this._def.options
      }
      get optionsMap() {
        return this._def.optionsMap
      }
      static create(discriminator, options, params2) {
        const optionsMap = /* @__PURE__ */ new Map()
        for (const type of options) {
          const discriminatorValues = getDiscriminator(
            type.shape[discriminator]
          )
          if (!discriminatorValues) {
            throw new Error(
              `A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`
            )
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(
                `Discriminator property ${String(
                  discriminator
                )} has duplicate value ${String(value)}`
              )
            }
            optionsMap.set(value, type)
          }
        }
        return new ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params2)
        })
      }
    }
    function mergeValues(a, b) {
      const aType = getParsedType(a)
      const bType = getParsedType(b)
      if (a === b) {
        return { valid: true, data: a }
      } else if (
        aType === ZodParsedType.object &&
        bType === ZodParsedType.object
      ) {
        const bKeys = util.objectKeys(b)
        const sharedKeys = util
          .objectKeys(a)
          .filter((key) => bKeys.indexOf(key) !== -1)
        const newObj = { ...a, ...b }
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a[key], b[key])
          if (!sharedValue.valid) {
            return { valid: false }
          }
          newObj[key] = sharedValue.data
        }
        return { valid: true, data: newObj }
      } else if (
        aType === ZodParsedType.array &&
        bType === ZodParsedType.array
      ) {
        if (a.length !== b.length) {
          return { valid: false }
        }
        const newArray = []
        for (let index = 0; index < a.length; index++) {
          const itemA = a[index]
          const itemB = b[index]
          const sharedValue = mergeValues(itemA, itemB)
          if (!sharedValue.valid) {
            return { valid: false }
          }
          newArray.push(sharedValue.data)
        }
        return { valid: true, data: newArray }
      } else if (
        aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b
      ) {
        return { valid: true, data: a }
      } else {
        return { valid: false }
      }
    }
    var ZodIntersection = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        const handleParsed = (parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value)
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            })
            return INVALID
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty()
          }
          return { status: status.value, value: merged.data }
        }
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right))
        } else {
          return handleParsed(
            this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          )
        }
      }
    }
    ZodIntersection.create = (left, right, params2) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params2)
      })
    }
    var ZodTuple = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          })
          return INVALID
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: 'array'
          })
          return INVALID
        }
        const rest = this._def.rest
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: 'array'
          })
          status.dirty()
        }
        const items = [...ctx.data]
          .map((item, itemIndex) => {
            const schema2 = this._def.items[itemIndex] || this._def.rest
            if (!schema2) return null
            return schema2._parse(
              new ParseInputLazyPath(ctx, item, ctx.path, itemIndex)
            )
          })
          .filter((x) => !!x)
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results)
          })
        } else {
          return ParseStatus.mergeArray(status, items)
        }
      }
      get items() {
        return this._def.items
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        })
      }
    }
    ZodTuple.create = (schemas2, params2) => {
      if (!Array.isArray(schemas2)) {
        throw new Error('You must pass an array of schemas to z.tuple([ ... ])')
      }
      return new ZodTuple({
        items: schemas2,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params2)
      })
    }
    var ZodRecord = class extends ZodType {
      get keySchema() {
        return this._def.keyType
      }
      get valueSchema() {
        return this._def.valueType
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          })
          return INVALID
        }
        const pairs = []
        const keyType = this._def.keyType
        const valueType = this._def.valueType
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(
              new ParseInputLazyPath(ctx, key, ctx.path, key)
            ),
            value: valueType._parse(
              new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)
            )
          })
        }
        if (ctx.common.async) {
          return ParseStatus.mergeObjectAsync(status, pairs)
        } else {
          return ParseStatus.mergeObjectSync(status, pairs)
        }
      }
      get element() {
        return this._def.valueType
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          })
        }
        return new ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        })
      }
    }
    var ZodMap = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          })
          return INVALID
        }
        const keyType = this._def.keyType
        const valueType = this._def.valueType
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(
              new ParseInputLazyPath(ctx, key, ctx.path, [index, 'key'])
            ),
            value: valueType._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, [index, 'value'])
            )
          }
        })
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map()
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key
              const value = await pair.value
              if (key.status === 'aborted' || value.status === 'aborted') {
                return INVALID
              }
              if (key.status === 'dirty' || value.status === 'dirty') {
                status.dirty()
              }
              finalMap.set(key.value, value.value)
            }
            return { status: status.value, value: finalMap }
          })
        } else {
          const finalMap = /* @__PURE__ */ new Map()
          for (const pair of pairs) {
            const key = pair.key
            const value = pair.value
            if (key.status === 'aborted' || value.status === 'aborted') {
              return INVALID
            }
            if (key.status === 'dirty' || value.status === 'dirty') {
              status.dirty()
            }
            finalMap.set(key.value, value.value)
          }
          return { status: status.value, value: finalMap }
        }
      }
    }
    ZodMap.create = (keyType, valueType, params2) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params2)
      })
    }
    var ZodSet = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          })
          return INVALID
        }
        const def2 = this._def
        if (def2.minSize !== null) {
          if (ctx.data.size < def2.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def2.minSize.value,
              type: 'set',
              inclusive: true,
              exact: false,
              message: def2.minSize.message
            })
            status.dirty()
          }
        }
        if (def2.maxSize !== null) {
          if (ctx.data.size > def2.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def2.maxSize.value,
              type: 'set',
              inclusive: true,
              exact: false,
              message: def2.maxSize.message
            })
            status.dirty()
          }
        }
        const valueType = this._def.valueType
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set()
          for (const element of elements2) {
            if (element.status === 'aborted') return INVALID
            if (element.status === 'dirty') status.dirty()
            parsedSet.add(element.value)
          }
          return { status: status.value, value: parsedSet }
        }
        const elements = [...ctx.data.values()].map((item, i) =>
          valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i))
        )
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) =>
            finalizeSet(elements2)
          )
        } else {
          return finalizeSet(elements)
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message) }
        })
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message) }
        })
      }
      size(size, message) {
        return this.min(size, message).max(size, message)
      }
      nonempty(message) {
        return this.min(1, message)
      }
    }
    ZodSet.create = (valueType, params2) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params2)
      })
    }
    var ZodFunction = class extends ZodType {
      constructor() {
        super(...arguments)
        this.validate = this.implement
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        if (ctx.parsedType !== ZodParsedType.function) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.function,
            received: ctx.parsedType
          })
          return INVALID
        }
        function makeArgsIssue(args, error) {
          return makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          })
        }
        function makeReturnsIssue(returns, error) {
          return makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          })
        }
        const params2 = { errorMap: ctx.common.contextualErrorMap }
        const fn = ctx.data
        if (this._def.returns instanceof ZodPromise) {
          return OK(async (...args) => {
            const error = new ZodError([])
            const parsedArgs = await this._def.args
              .parseAsync(args, params2)
              .catch((e) => {
                error.addIssue(makeArgsIssue(args, e))
                throw error
              })
            const result = await fn(...parsedArgs)
            const parsedReturns = await this._def.returns._def.type
              .parseAsync(result, params2)
              .catch((e) => {
                error.addIssue(makeReturnsIssue(result, e))
                throw error
              })
            return parsedReturns
          })
        } else {
          return OK((...args) => {
            const parsedArgs = this._def.args.safeParse(args, params2)
            if (!parsedArgs.success) {
              throw new ZodError([makeArgsIssue(args, parsedArgs.error)])
            }
            const result = fn(...parsedArgs.data)
            const parsedReturns = this._def.returns.safeParse(result, params2)
            if (!parsedReturns.success) {
              throw new ZodError([
                makeReturnsIssue(result, parsedReturns.error)
              ])
            }
            return parsedReturns.data
          })
        }
      }
      parameters() {
        return this._def.args
      }
      returnType() {
        return this._def.returns
      }
      args(...items) {
        return new ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        })
      }
      returns(returnType) {
        return new ZodFunction({
          ...this._def,
          returns: returnType
        })
      }
      implement(func) {
        const validatedFunc = this.parse(func)
        return validatedFunc
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func)
        return validatedFunc
      }
      static create(args, returns, params2) {
        return new ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params2)
        })
      }
    }
    var ZodLazy = class extends ZodType {
      get schema() {
        return this._def.getter()
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        const lazySchema = this._def.getter()
        return lazySchema._parse({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      }
    }
    ZodLazy.create = (getter, params2) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params2)
      })
    }
    var ZodLiteral = class extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          })
          return INVALID
        }
        return { status: 'valid', value: input.data }
      }
      get value() {
        return this._def.value
      }
    }
    ZodLiteral.create = (value, params2) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params2)
      })
    }
    function createZodEnum(values, params2) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params2)
      })
    }
    var ZodEnum = class extends ZodType {
      _parse(input) {
        if (typeof input.data !== 'string') {
          const ctx = this._getOrReturnCtx(input)
          const expectedValues = this._def.values
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          })
          return INVALID
        }
        if (this._def.values.indexOf(input.data) === -1) {
          const ctx = this._getOrReturnCtx(input)
          const expectedValues = this._def.values
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          })
          return INVALID
        }
        return OK(input.data)
      }
      get options() {
        return this._def.values
      }
      get enum() {
        const enumValues = {}
        for (const val of this._def.values) {
          enumValues[val] = val
        }
        return enumValues
      }
      get Values() {
        const enumValues = {}
        for (const val of this._def.values) {
          enumValues[val] = val
        }
        return enumValues
      }
      get Enum() {
        const enumValues = {}
        for (const val of this._def.values) {
          enumValues[val] = val
        }
        return enumValues
      }
      extract(values) {
        return ZodEnum.create(values)
      }
      exclude(values) {
        return ZodEnum.create(
          this.options.filter((opt) => !values.includes(opt))
        )
      }
    }
    ZodEnum.create = createZodEnum
    var ZodNativeEnum = class extends ZodType {
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values)
        const ctx = this._getOrReturnCtx(input)
        if (
          ctx.parsedType !== ZodParsedType.string &&
          ctx.parsedType !== ZodParsedType.number
        ) {
          const expectedValues = util.objectValues(nativeEnumValues)
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          })
          return INVALID
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
          const expectedValues = util.objectValues(nativeEnumValues)
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          })
          return INVALID
        }
        return OK(input.data)
      }
      get enum() {
        return this._def.values
      }
    }
    ZodNativeEnum.create = (values, params2) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params2)
      })
    }
    var ZodPromise = class extends ZodType {
      unwrap() {
        return this._def.type
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        if (
          ctx.parsedType !== ZodParsedType.promise &&
          ctx.common.async === false
        ) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          })
          return INVALID
        }
        const promisified =
          ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data)
        return OK(
          promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            })
          })
        )
      }
    }
    ZodPromise.create = (schema2, params2) => {
      return new ZodPromise({
        type: schema2,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params2)
      })
    }
    var ZodEffects = class extends ZodType {
      innerType() {
        return this._def.schema
      }
      sourceType() {
        return this._def.schema._def.typeName ===
          ZodFirstPartyTypeKind.ZodEffects
          ? this._def.schema.sourceType()
          : this._def.schema
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        const effect = this._def.effect || null
        if (effect.type === 'preprocess') {
          const processed = effect.transform(ctx.data)
          if (ctx.common.async) {
            return Promise.resolve(processed).then((processed2) => {
              return this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              })
            })
          } else {
            return this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            })
          }
        }
        const checkCtx = {
          addIssue: (arg) => {
            addIssueToContext(ctx, arg)
            if (arg.fatal) {
              status.abort()
            } else {
              status.dirty()
            }
          },
          get path() {
            return ctx.path
          }
        }
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx)
        if (effect.type === 'refinement') {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx)
            if (ctx.common.async) {
              return Promise.resolve(result)
            }
            if (result instanceof Promise) {
              throw new Error(
                'Async refinement encountered during synchronous parse operation. Use .parseAsync instead.'
              )
            }
            return acc
          }
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
            if (inner.status === 'aborted') return INVALID
            if (inner.status === 'dirty') status.dirty()
            executeRefinement(inner.value)
            return { status: status.value, value: inner.value }
          } else {
            return this._def.schema
              ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
              .then((inner) => {
                if (inner.status === 'aborted') return INVALID
                if (inner.status === 'dirty') status.dirty()
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value }
                })
              })
          }
        }
        if (effect.type === 'transform') {
          if (ctx.common.async === false) {
            const base3 = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
            if (!isValid(base3)) return base3
            const result = effect.transform(base3.value, checkCtx)
            if (result instanceof Promise) {
              throw new Error(
                `Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`
              )
            }
            return { status: status.value, value: result }
          } else {
            return this._def.schema
              ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
              .then((base3) => {
                if (!isValid(base3)) return base3
                return Promise.resolve(
                  effect.transform(base3.value, checkCtx)
                ).then((result) => ({ status: status.value, value: result }))
              })
          }
        }
        util.assertNever(effect)
      }
    }
    ZodEffects.create = (schema2, effect, params2) => {
      return new ZodEffects({
        schema: schema2,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params2)
      })
    }
    ZodEffects.createWithPreprocess = (preprocess, schema2, params2) => {
      return new ZodEffects({
        schema: schema2,
        effect: { type: 'preprocess', transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params2)
      })
    }
    var ZodOptional = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0)
        }
        return this._def.innerType._parse(input)
      }
      unwrap() {
        return this._def.innerType
      }
    }
    ZodOptional.create = (type, params2) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params2)
      })
    }
    var ZodNullable = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType === ZodParsedType.null) {
          return OK(null)
        }
        return this._def.innerType._parse(input)
      }
      unwrap() {
        return this._def.innerType
      }
    }
    ZodNullable.create = (type, params2) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params2)
      })
    }
    var ZodDefault = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        let data = ctx.data
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue()
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        })
      }
      removeDefault() {
        return this._def.innerType
      }
    }
    ZodDefault.create = (type, params2) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue:
          typeof params2.default === 'function'
            ? params2.default
            : () => params2.default,
        ...processCreateParams(params2)
      })
    }
    var ZodCatch = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        }
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        })
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: 'valid',
              value:
                result2.status === 'valid'
                  ? result2.value
                  : this._def.catchValue({
                      get error() {
                        return new ZodError(newCtx.common.issues)
                      },
                      input: newCtx.data
                    })
            }
          })
        } else {
          return {
            status: 'valid',
            value:
              result.status === 'valid'
                ? result.value
                : this._def.catchValue({
                    get error() {
                      return new ZodError(newCtx.common.issues)
                    },
                    input: newCtx.data
                  })
          }
        }
      }
      removeCatch() {
        return this._def.innerType
      }
    }
    ZodCatch.create = (type, params2) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue:
          typeof params2.catch === 'function'
            ? params2.catch
            : () => params2.catch,
        ...processCreateParams(params2)
      })
    }
    var ZodNaN = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input)
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input)
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          })
          return INVALID
        }
        return { status: 'valid', value: input.data }
      }
    }
    ZodNaN.create = (params2) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params2)
      })
    }
    var BRAND = Symbol('zod_brand')
    var ZodBranded = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input)
        const data = ctx.data
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        })
      }
      unwrap() {
        return this._def.type
      }
    }
    var ZodPipeline = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input)
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
            if (inResult.status === 'aborted') return INVALID
            if (inResult.status === 'dirty') {
              status.dirty()
              return DIRTY(inResult.value)
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              })
            }
          }
          return handleAsync()
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
          if (inResult.status === 'aborted') return INVALID
          if (inResult.status === 'dirty') {
            status.dirty()
            return {
              status: 'dirty',
              value: inResult.value
            }
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            })
          }
        }
      }
      static create(a, b) {
        return new ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        })
      }
    }
    var custom = (check, params2 = {}, fatal) => {
      if (check)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a, _b
          if (!check(data)) {
            const p =
              typeof params2 === 'function'
                ? params2(data)
                : typeof params2 === 'string'
                  ? { message: params2 }
                  : params2
            const _fatal =
              (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !==
                null && _b !== void 0
                ? _b
                : true
            const p2 = typeof p === 'string' ? { message: p } : p
            ctx.addIssue({ code: 'custom', ...p2, fatal: _fatal })
          }
        })
      return ZodAny.create()
    }
    var late = {
      object: ZodObject.lazycreate
    }
    var ZodFirstPartyTypeKind
    ;(function (ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2['ZodString'] = 'ZodString'
      ZodFirstPartyTypeKind2['ZodNumber'] = 'ZodNumber'
      ZodFirstPartyTypeKind2['ZodNaN'] = 'ZodNaN'
      ZodFirstPartyTypeKind2['ZodBigInt'] = 'ZodBigInt'
      ZodFirstPartyTypeKind2['ZodBoolean'] = 'ZodBoolean'
      ZodFirstPartyTypeKind2['ZodDate'] = 'ZodDate'
      ZodFirstPartyTypeKind2['ZodSymbol'] = 'ZodSymbol'
      ZodFirstPartyTypeKind2['ZodUndefined'] = 'ZodUndefined'
      ZodFirstPartyTypeKind2['ZodNull'] = 'ZodNull'
      ZodFirstPartyTypeKind2['ZodAny'] = 'ZodAny'
      ZodFirstPartyTypeKind2['ZodUnknown'] = 'ZodUnknown'
      ZodFirstPartyTypeKind2['ZodNever'] = 'ZodNever'
      ZodFirstPartyTypeKind2['ZodVoid'] = 'ZodVoid'
      ZodFirstPartyTypeKind2['ZodArray'] = 'ZodArray'
      ZodFirstPartyTypeKind2['ZodObject'] = 'ZodObject'
      ZodFirstPartyTypeKind2['ZodUnion'] = 'ZodUnion'
      ZodFirstPartyTypeKind2['ZodDiscriminatedUnion'] = 'ZodDiscriminatedUnion'
      ZodFirstPartyTypeKind2['ZodIntersection'] = 'ZodIntersection'
      ZodFirstPartyTypeKind2['ZodTuple'] = 'ZodTuple'
      ZodFirstPartyTypeKind2['ZodRecord'] = 'ZodRecord'
      ZodFirstPartyTypeKind2['ZodMap'] = 'ZodMap'
      ZodFirstPartyTypeKind2['ZodSet'] = 'ZodSet'
      ZodFirstPartyTypeKind2['ZodFunction'] = 'ZodFunction'
      ZodFirstPartyTypeKind2['ZodLazy'] = 'ZodLazy'
      ZodFirstPartyTypeKind2['ZodLiteral'] = 'ZodLiteral'
      ZodFirstPartyTypeKind2['ZodEnum'] = 'ZodEnum'
      ZodFirstPartyTypeKind2['ZodEffects'] = 'ZodEffects'
      ZodFirstPartyTypeKind2['ZodNativeEnum'] = 'ZodNativeEnum'
      ZodFirstPartyTypeKind2['ZodOptional'] = 'ZodOptional'
      ZodFirstPartyTypeKind2['ZodNullable'] = 'ZodNullable'
      ZodFirstPartyTypeKind2['ZodDefault'] = 'ZodDefault'
      ZodFirstPartyTypeKind2['ZodCatch'] = 'ZodCatch'
      ZodFirstPartyTypeKind2['ZodPromise'] = 'ZodPromise'
      ZodFirstPartyTypeKind2['ZodBranded'] = 'ZodBranded'
      ZodFirstPartyTypeKind2['ZodPipeline'] = 'ZodPipeline'
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}))
    var instanceOfType = (
      cls,
      params2 = {
        message: `Input not instance of ${cls.name}`
      }
    ) => custom((data) => data instanceof cls, params2)
    var stringType = ZodString.create
    var numberType = ZodNumber.create
    var nanType = ZodNaN.create
    var bigIntType = ZodBigInt.create
    var booleanType = ZodBoolean.create
    var dateType = ZodDate.create
    var symbolType = ZodSymbol.create
    var undefinedType = ZodUndefined.create
    var nullType = ZodNull.create
    var anyType = ZodAny.create
    var unknownType = ZodUnknown.create
    var neverType = ZodNever.create
    var voidType = ZodVoid.create
    var arrayType = ZodArray.create
    var objectType = ZodObject.create
    var strictObjectType = ZodObject.strictCreate
    var unionType = ZodUnion.create
    var discriminatedUnionType = ZodDiscriminatedUnion.create
    var intersectionType = ZodIntersection.create
    var tupleType = ZodTuple.create
    var recordType = ZodRecord.create
    var mapType = ZodMap.create
    var setType = ZodSet.create
    var functionType = ZodFunction.create
    var lazyType = ZodLazy.create
    var literalType = ZodLiteral.create
    var enumType = ZodEnum.create
    var nativeEnumType = ZodNativeEnum.create
    var promiseType = ZodPromise.create
    var effectsType = ZodEffects.create
    var optionalType = ZodOptional.create
    var nullableType = ZodNullable.create
    var preprocessType = ZodEffects.createWithPreprocess
    var pipelineType = ZodPipeline.create
    var ostring = () => stringType().optional()
    var onumber = () => numberType().optional()
    var oboolean = () => booleanType().optional()
    var coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) =>
        ZodBoolean.create({
          ...arg,
          coerce: true
        }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    }
    var NEVER = INVALID
    var z = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      defaultErrorMap: errorMap,
      setErrorMap,
      getErrorMap,
      makeIssue,
      EMPTY_PATH,
      addIssueToContext,
      ParseStatus,
      INVALID,
      DIRTY,
      OK,
      isAborted,
      isDirty,
      isValid,
      isAsync,
      get util() {
        return util
      },
      get objectUtil() {
        return objectUtil
      },
      ZodParsedType,
      getParsedType,
      ZodType,
      ZodString,
      ZodNumber,
      ZodBigInt,
      ZodBoolean,
      ZodDate,
      ZodSymbol,
      ZodUndefined,
      ZodNull,
      ZodAny,
      ZodUnknown,
      ZodNever,
      ZodVoid,
      ZodArray,
      ZodObject,
      ZodUnion,
      ZodDiscriminatedUnion,
      ZodIntersection,
      ZodTuple,
      ZodRecord,
      ZodMap,
      ZodSet,
      ZodFunction,
      ZodLazy,
      ZodLiteral,
      ZodEnum,
      ZodNativeEnum,
      ZodPromise,
      ZodEffects,
      ZodTransformer: ZodEffects,
      ZodOptional,
      ZodNullable,
      ZodDefault,
      ZodCatch,
      ZodNaN,
      BRAND,
      ZodBranded,
      ZodPipeline,
      custom,
      Schema: ZodType,
      ZodSchema: ZodType,
      late,
      get ZodFirstPartyTypeKind() {
        return ZodFirstPartyTypeKind
      },
      coerce,
      any: anyType,
      array: arrayType,
      bigint: bigIntType,
      boolean: booleanType,
      date: dateType,
      discriminatedUnion: discriminatedUnionType,
      effect: effectsType,
      enum: enumType,
      function: functionType,
      instanceof: instanceOfType,
      intersection: intersectionType,
      lazy: lazyType,
      literal: literalType,
      map: mapType,
      nan: nanType,
      nativeEnum: nativeEnumType,
      never: neverType,
      null: nullType,
      nullable: nullableType,
      number: numberType,
      object: objectType,
      oboolean,
      onumber,
      optional: optionalType,
      ostring,
      pipeline: pipelineType,
      preprocess: preprocessType,
      promise: promiseType,
      record: recordType,
      set: setType,
      strictObject: strictObjectType,
      string: stringType,
      symbol: symbolType,
      transformer: effectsType,
      tuple: tupleType,
      undefined: undefinedType,
      union: unionType,
      unknown: unknownType,
      void: voidType,
      NEVER,
      ZodIssueCode,
      quotelessJson,
      ZodError
    })

    // ../common-web/src/check.ts
    var check_exports = {}
    __export(check_exports, {
      assure: () => assure,
      is: () => is,
      isObject: () => isObject
    })
    var is = (obj, def2) => {
      return def2.safeParse(obj).success
    }
    var assure = (def2, obj) => {
      return def2.parse(obj)
    }
    var isObject = (obj) => {
      return typeof obj === 'object' && obj !== null
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js
    var encode_1 = encode
    var MSB = 128
    var REST = 127
    var MSBALL = ~REST
    var INT = Math.pow(2, 31)
    function encode(num, out, offset) {
      out = out || []
      offset = offset || 0
      var oldOffset = offset
      while (num >= INT) {
        out[offset++] = (num & 255) | MSB
        num /= 128
      }
      while (num & MSBALL) {
        out[offset++] = (num & 255) | MSB
        num >>>= 7
      }
      out[offset] = num | 0
      encode.bytes = offset - oldOffset + 1
      return out
    }
    var decode = read
    var MSB$1 = 128
    var REST$1 = 127
    function read(buf, offset) {
      var res = 0,
        offset = offset || 0,
        shift = 0,
        counter = offset,
        b,
        l = buf.length
      do {
        if (counter >= l) {
          read.bytes = 0
          throw new RangeError('Could not decode varint')
        }
        b = buf[counter++]
        res +=
          shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift)
        shift += 7
      } while (b >= MSB$1)
      read.bytes = counter - offset
      return res
    }
    var N1 = Math.pow(2, 7)
    var N2 = Math.pow(2, 14)
    var N3 = Math.pow(2, 21)
    var N4 = Math.pow(2, 28)
    var N5 = Math.pow(2, 35)
    var N6 = Math.pow(2, 42)
    var N7 = Math.pow(2, 49)
    var N8 = Math.pow(2, 56)
    var N9 = Math.pow(2, 63)
    var length = function (value) {
      return value < N1
        ? 1
        : value < N2
          ? 2
          : value < N3
            ? 3
            : value < N4
              ? 4
              : value < N5
                ? 5
                : value < N6
                  ? 6
                  : value < N7
                    ? 7
                    : value < N8
                      ? 8
                      : value < N9
                        ? 9
                        : 10
    }
    var varint = {
      encode: encode_1,
      decode,
      encodingLength: length
    }
    var _brrp_varint = varint
    var varint_default = _brrp_varint

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js
    var decode2 = (data, offset = 0) => {
      const code2 = varint_default.decode(data, offset)
      return [code2, varint_default.decode.bytes]
    }
    var encodeTo = (int, target, offset = 0) => {
      varint_default.encode(int, target, offset)
      return target
    }
    var encodingLength = (int) => {
      return varint_default.encodingLength(int)
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js
    var empty = new Uint8Array(0)
    var equals = (aa, bb) => {
      if (aa === bb) return true
      if (aa.byteLength !== bb.byteLength) {
        return false
      }
      for (let ii = 0; ii < aa.byteLength; ii++) {
        if (aa[ii] !== bb[ii]) {
          return false
        }
      }
      return true
    }
    var coerce2 = (o) => {
      if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
        return o
      if (o instanceof ArrayBuffer) return new Uint8Array(o)
      if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)
      }
      throw new Error('Unknown type, must be binary type')
    }
    var fromString = (str) => new TextEncoder().encode(str)
    var toString = (b) => new TextDecoder().decode(b)

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js
    var create = (code2, digest2) => {
      const size = digest2.byteLength
      const sizeOffset = encodingLength(code2)
      const digestOffset = sizeOffset + encodingLength(size)
      const bytes2 = new Uint8Array(digestOffset + size)
      encodeTo(code2, bytes2, 0)
      encodeTo(size, bytes2, sizeOffset)
      bytes2.set(digest2, digestOffset)
      return new Digest(code2, size, digest2, bytes2)
    }
    var decode3 = (multihash) => {
      const bytes2 = coerce2(multihash)
      const [code2, sizeOffset] = decode2(bytes2)
      const [size, digestOffset] = decode2(bytes2.subarray(sizeOffset))
      const digest2 = bytes2.subarray(sizeOffset + digestOffset)
      if (digest2.byteLength !== size) {
        throw new Error('Incorrect length')
      }
      return new Digest(code2, size, digest2, bytes2)
    }
    var equals2 = (a, b) => {
      if (a === b) {
        return true
      } else {
        return (
          a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes)
        )
      }
    }
    var Digest = class {
      constructor(code2, size, digest2, bytes2) {
        this.code = code2
        this.size = size
        this.digest = digest2
        this.bytes = bytes2
      }
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js
    var base58_exports = {}
    __export(base58_exports, {
      base58btc: () => base58btc,
      base58flickr: () => base58flickr
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js
    function base(ALPHABET, name2) {
      if (ALPHABET.length >= 255) {
        throw new TypeError('Alphabet too long')
      }
      var BASE_MAP = new Uint8Array(256)
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i)
        var xc = x.charCodeAt(0)
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + ' is ambiguous')
        }
        BASE_MAP[xc] = i
      }
      var BASE = ALPHABET.length
      var LEADER = ALPHABET.charAt(0)
      var FACTOR = Math.log(BASE) / Math.log(256)
      var iFACTOR = Math.log(256) / Math.log(BASE)
      function encode5(source) {
        if (source instanceof Uint8Array);
        else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(
            source.buffer,
            source.byteOffset,
            source.byteLength
          )
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source)
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError('Expected Uint8Array')
        }
        if (source.length === 0) {
          return ''
        }
        var zeroes = 0
        var length2 = 0
        var pbegin = 0
        var pend = source.length
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++
          zeroes++
        }
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
        var b58 = new Uint8Array(size)
        while (pbegin !== pend) {
          var carry = source[pbegin]
          var i2 = 0
          for (
            var it1 = size - 1;
            (carry !== 0 || i2 < length2) && it1 !== -1;
            it1--, i2++
          ) {
            carry += (256 * b58[it1]) >>> 0
            b58[it1] = carry % BASE >>> 0
            carry = (carry / BASE) >>> 0
          }
          if (carry !== 0) {
            throw new Error('Non-zero carry')
          }
          length2 = i2
          pbegin++
        }
        var it2 = size - length2
        while (it2 !== size && b58[it2] === 0) {
          it2++
        }
        var str = LEADER.repeat(zeroes)
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2])
        }
        return str
      }
      function decodeUnsafe(source) {
        if (typeof source !== 'string') {
          throw new TypeError('Expected String')
        }
        if (source.length === 0) {
          return new Uint8Array()
        }
        var psz = 0
        if (source[psz] === ' ') {
          return
        }
        var zeroes = 0
        var length2 = 0
        while (source[psz] === LEADER) {
          zeroes++
          psz++
        }
        var size = ((source.length - psz) * FACTOR + 1) >>> 0
        var b256 = new Uint8Array(size)
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)]
          if (carry === 255) {
            return
          }
          var i2 = 0
          for (
            var it3 = size - 1;
            (carry !== 0 || i2 < length2) && it3 !== -1;
            it3--, i2++
          ) {
            carry += (BASE * b256[it3]) >>> 0
            b256[it3] = carry % 256 >>> 0
            carry = (carry / 256) >>> 0
          }
          if (carry !== 0) {
            throw new Error('Non-zero carry')
          }
          length2 = i2
          psz++
        }
        if (source[psz] === ' ') {
          return
        }
        var it4 = size - length2
        while (it4 !== size && b256[it4] === 0) {
          it4++
        }
        var vch = new Uint8Array(zeroes + (size - it4))
        var j2 = zeroes
        while (it4 !== size) {
          vch[j2++] = b256[it4++]
        }
        return vch
      }
      function decode6(string3) {
        var buffer = decodeUnsafe(string3)
        if (buffer) {
          return buffer
        }
        throw new Error(`Non-${name2} character`)
      }
      return {
        encode: encode5,
        decodeUnsafe,
        decode: decode6
      }
    }
    var src = base
    var _brrp__multiformats_scope_baseX = src
    var base_x_default = _brrp__multiformats_scope_baseX

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js
    var Encoder = class {
      constructor(name2, prefix, baseEncode) {
        this.name = name2
        this.prefix = prefix
        this.baseEncode = baseEncode
      }
      encode(bytes2) {
        if (bytes2 instanceof Uint8Array) {
          return `${this.prefix}${this.baseEncode(bytes2)}`
        } else {
          throw Error('Unknown type, must be binary type')
        }
      }
    }
    var Decoder = class {
      constructor(name2, prefix, baseDecode) {
        this.name = name2
        this.prefix = prefix
        if (prefix.codePointAt(0) === void 0) {
          throw new Error('Invalid prefix character')
        }
        this.prefixCodePoint = prefix.codePointAt(0)
        this.baseDecode = baseDecode
      }
      decode(text) {
        if (typeof text === 'string') {
          if (text.codePointAt(0) !== this.prefixCodePoint) {
            throw Error(
              `Unable to decode multibase string ${JSON.stringify(text)}, ${
                this.name
              } decoder only supports inputs prefixed with ${this.prefix}`
            )
          }
          return this.baseDecode(text.slice(this.prefix.length))
        } else {
          throw Error('Can only multibase decode strings')
        }
      }
      or(decoder2) {
        return or(this, decoder2)
      }
    }
    var ComposedDecoder = class {
      constructor(decoders) {
        this.decoders = decoders
      }
      or(decoder2) {
        return or(this, decoder2)
      }
      decode(input) {
        const prefix = input[0]
        const decoder2 = this.decoders[prefix]
        if (decoder2) {
          return decoder2.decode(input)
        } else {
          throw RangeError(
            `Unable to decode multibase string ${JSON.stringify(
              input
            )}, only inputs prefixed with ${Object.keys(
              this.decoders
            )} are supported`
          )
        }
      }
    }
    var or = (left, right) =>
      new ComposedDecoder({
        ...(left.decoders || { [left.prefix]: left }),
        ...(right.decoders || { [right.prefix]: right })
      })
    var Codec = class {
      constructor(name2, prefix, baseEncode, baseDecode) {
        this.name = name2
        this.prefix = prefix
        this.baseEncode = baseEncode
        this.baseDecode = baseDecode
        this.encoder = new Encoder(name2, prefix, baseEncode)
        this.decoder = new Decoder(name2, prefix, baseDecode)
      }
      encode(input) {
        return this.encoder.encode(input)
      }
      decode(input) {
        return this.decoder.decode(input)
      }
    }
    var from = ({ name: name2, prefix, encode: encode5, decode: decode6 }) =>
      new Codec(name2, prefix, encode5, decode6)
    var baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
      const { encode: encode5, decode: decode6 } = base_x_default(
        alphabet2,
        name2
      )
      return from({
        prefix,
        name: name2,
        encode: encode5,
        decode: (text) => coerce2(decode6(text))
      })
    }
    var decode4 = (string3, alphabet2, bitsPerChar, name2) => {
      const codes = {}
      for (let i = 0; i < alphabet2.length; ++i) {
        codes[alphabet2[i]] = i
      }
      let end = string3.length
      while (string3[end - 1] === '=') {
        --end
      }
      const out = new Uint8Array(((end * bitsPerChar) / 8) | 0)
      let bits = 0
      let buffer = 0
      let written = 0
      for (let i = 0; i < end; ++i) {
        const value = codes[string3[i]]
        if (value === void 0) {
          throw new SyntaxError(`Non-${name2} character`)
        }
        buffer = (buffer << bitsPerChar) | value
        bits += bitsPerChar
        if (bits >= 8) {
          bits -= 8
          out[written++] = 255 & (buffer >> bits)
        }
      }
      if (bits >= bitsPerChar || 255 & (buffer << (8 - bits))) {
        throw new SyntaxError('Unexpected end of data')
      }
      return out
    }
    var encode2 = (data, alphabet2, bitsPerChar) => {
      const pad = alphabet2[alphabet2.length - 1] === '='
      const mask = (1 << bitsPerChar) - 1
      let out = ''
      let bits = 0
      let buffer = 0
      for (let i = 0; i < data.length; ++i) {
        buffer = (buffer << 8) | data[i]
        bits += 8
        while (bits > bitsPerChar) {
          bits -= bitsPerChar
          out += alphabet2[mask & (buffer >> bits)]
        }
      }
      if (bits) {
        out += alphabet2[mask & (buffer << (bitsPerChar - bits))]
      }
      if (pad) {
        while ((out.length * bitsPerChar) & 7) {
          out += '='
        }
      }
      return out
    }
    var rfc4648 = ({
      name: name2,
      prefix,
      bitsPerChar,
      alphabet: alphabet2
    }) => {
      return from({
        prefix,
        name: name2,
        encode(input) {
          return encode2(input, alphabet2, bitsPerChar)
        },
        decode(input) {
          return decode4(input, alphabet2, bitsPerChar, name2)
        }
      })
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js
    var base58btc = baseX({
      name: 'base58btc',
      prefix: 'z',
      alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    })
    var base58flickr = baseX({
      name: 'base58flickr',
      prefix: 'Z',
      alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js
    var base32_exports = {}
    __export(base32_exports, {
      base32: () => base32,
      base32hex: () => base32hex,
      base32hexpad: () => base32hexpad,
      base32hexpadupper: () => base32hexpadupper,
      base32hexupper: () => base32hexupper,
      base32pad: () => base32pad,
      base32padupper: () => base32padupper,
      base32upper: () => base32upper,
      base32z: () => base32z
    })
    var base32 = rfc4648({
      prefix: 'b',
      name: 'base32',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
      bitsPerChar: 5
    })
    var base32upper = rfc4648({
      prefix: 'B',
      name: 'base32upper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
      bitsPerChar: 5
    })
    var base32pad = rfc4648({
      prefix: 'c',
      name: 'base32pad',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
      bitsPerChar: 5
    })
    var base32padupper = rfc4648({
      prefix: 'C',
      name: 'base32padupper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
      bitsPerChar: 5
    })
    var base32hex = rfc4648({
      prefix: 'v',
      name: 'base32hex',
      alphabet: '0123456789abcdefghijklmnopqrstuv',
      bitsPerChar: 5
    })
    var base32hexupper = rfc4648({
      prefix: 'V',
      name: 'base32hexupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
      bitsPerChar: 5
    })
    var base32hexpad = rfc4648({
      prefix: 't',
      name: 'base32hexpad',
      alphabet: '0123456789abcdefghijklmnopqrstuv=',
      bitsPerChar: 5
    })
    var base32hexpadupper = rfc4648({
      prefix: 'T',
      name: 'base32hexpadupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
      bitsPerChar: 5
    })
    var base32z = rfc4648({
      prefix: 'h',
      name: 'base32z',
      alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
      bitsPerChar: 5
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js
    var CID = class {
      constructor(version2, code2, multihash, bytes2) {
        this.code = code2
        this.version = version2
        this.multihash = multihash
        this.bytes = bytes2
        this.byteOffset = bytes2.byteOffset
        this.byteLength = bytes2.byteLength
        this.asCID = this
        this._baseCache = /* @__PURE__ */ new Map()
        Object.defineProperties(this, {
          byteOffset: hidden,
          byteLength: hidden,
          code: readonly,
          version: readonly,
          multihash: readonly,
          bytes: readonly,
          _baseCache: hidden,
          asCID: hidden
        })
      }
      toV0() {
        switch (this.version) {
          case 0: {
            return this
          }
          default: {
            const { code: code2, multihash } = this
            if (code2 !== DAG_PB_CODE) {
              throw new Error('Cannot convert a non dag-pb CID to CIDv0')
            }
            if (multihash.code !== SHA_256_CODE) {
              throw new Error(
                'Cannot convert non sha2-256 multihash CID to CIDv0'
              )
            }
            return CID.createV0(multihash)
          }
        }
      }
      toV1() {
        switch (this.version) {
          case 0: {
            const { code: code2, digest: digest2 } = this.multihash
            const multihash = create(code2, digest2)
            return CID.createV1(this.code, multihash)
          }
          case 1: {
            return this
          }
          default: {
            throw Error(
              `Can not convert CID version ${this.version} to version 0. This is a bug please report`
            )
          }
        }
      }
      equals(other) {
        return (
          other &&
          this.code === other.code &&
          this.version === other.version &&
          equals2(this.multihash, other.multihash)
        )
      }
      toString(base3) {
        const { bytes: bytes2, version: version2, _baseCache } = this
        switch (version2) {
          case 0:
            return toStringV0(bytes2, _baseCache, base3 || base58btc.encoder)
          default:
            return toStringV1(bytes2, _baseCache, base3 || base32.encoder)
        }
      }
      toJSON() {
        return {
          code: this.code,
          version: this.version,
          hash: this.multihash.bytes
        }
      }
      get [Symbol.toStringTag]() {
        return 'CID'
      }
      [Symbol.for('nodejs.util.inspect.custom')]() {
        return 'CID(' + this.toString() + ')'
      }
      static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION)
        return !!(value && (value[cidSymbol] || value.asCID === value))
      }
      get toBaseEncodedString() {
        throw new Error('Deprecated, use .toString()')
      }
      get codec() {
        throw new Error(
          '"codec" property is deprecated, use integer "code" property instead'
        )
      }
      get buffer() {
        throw new Error(
          'Deprecated .buffer property, use .bytes to get Uint8Array instead'
        )
      }
      get multibaseName() {
        throw new Error('"multibaseName" property is deprecated')
      }
      get prefix() {
        throw new Error('"prefix" property is deprecated')
      }
      static asCID(value) {
        if (value instanceof CID) {
          return value
        } else if (value != null && value.asCID === value) {
          const {
            version: version2,
            code: code2,
            multihash,
            bytes: bytes2
          } = value
          return new CID(
            version2,
            code2,
            multihash,
            bytes2 || encodeCID(version2, code2, multihash.bytes)
          )
        } else if (value != null && value[cidSymbol] === true) {
          const { version: version2, multihash, code: code2 } = value
          const digest2 = decode3(multihash)
          return CID.create(version2, code2, digest2)
        } else {
          return null
        }
      }
      static create(version2, code2, digest2) {
        if (typeof code2 !== 'number') {
          throw new Error('String codecs are no longer supported')
        }
        switch (version2) {
          case 0: {
            if (code2 !== DAG_PB_CODE) {
              throw new Error(
                `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`
              )
            } else {
              return new CID(version2, code2, digest2, digest2.bytes)
            }
          }
          case 1: {
            const bytes2 = encodeCID(version2, code2, digest2.bytes)
            return new CID(version2, code2, digest2, bytes2)
          }
          default: {
            throw new Error('Invalid version')
          }
        }
      }
      static createV0(digest2) {
        return CID.create(0, DAG_PB_CODE, digest2)
      }
      static createV1(code2, digest2) {
        return CID.create(1, code2, digest2)
      }
      static decode(bytes2) {
        const [cid2, remainder] = CID.decodeFirst(bytes2)
        if (remainder.length) {
          throw new Error('Incorrect length')
        }
        return cid2
      }
      static decodeFirst(bytes2) {
        const specs = CID.inspectBytes(bytes2)
        const prefixSize = specs.size - specs.multihashSize
        const multihashBytes = coerce2(
          bytes2.subarray(prefixSize, prefixSize + specs.multihashSize)
        )
        if (multihashBytes.byteLength !== specs.multihashSize) {
          throw new Error('Incorrect length')
        }
        const digestBytes = multihashBytes.subarray(
          specs.multihashSize - specs.digestSize
        )
        const digest2 = new Digest(
          specs.multihashCode,
          specs.digestSize,
          digestBytes,
          multihashBytes
        )
        const cid2 =
          specs.version === 0
            ? CID.createV0(digest2)
            : CID.createV1(specs.codec, digest2)
        return [cid2, bytes2.subarray(specs.size)]
      }
      static inspectBytes(initialBytes) {
        let offset = 0
        const next = () => {
          const [i, length2] = decode2(initialBytes.subarray(offset))
          offset += length2
          return i
        }
        let version2 = next()
        let codec = DAG_PB_CODE
        if (version2 === 18) {
          version2 = 0
          offset = 0
        } else if (version2 === 1) {
          codec = next()
        }
        if (version2 !== 0 && version2 !== 1) {
          throw new RangeError(`Invalid CID version ${version2}`)
        }
        const prefixSize = offset
        const multihashCode = next()
        const digestSize = next()
        const size = offset + digestSize
        const multihashSize = size - prefixSize
        return {
          version: version2,
          codec,
          multihashCode,
          digestSize,
          multihashSize,
          size
        }
      }
      static parse(source, base3) {
        const [prefix, bytes2] = parseCIDtoBytes(source, base3)
        const cid2 = CID.decode(bytes2)
        cid2._baseCache.set(prefix, source)
        return cid2
      }
    }
    var parseCIDtoBytes = (source, base3) => {
      switch (source[0]) {
        case 'Q': {
          const decoder2 = base3 || base58btc
          return [
            base58btc.prefix,
            decoder2.decode(`${base58btc.prefix}${source}`)
          ]
        }
        case base58btc.prefix: {
          const decoder2 = base3 || base58btc
          return [base58btc.prefix, decoder2.decode(source)]
        }
        case base32.prefix: {
          const decoder2 = base3 || base32
          return [base32.prefix, decoder2.decode(source)]
        }
        default: {
          if (base3 == null) {
            throw Error(
              'To parse non base32 or base58btc encoded CID multibase decoder must be provided'
            )
          }
          return [source[0], base3.decode(source)]
        }
      }
    }
    var toStringV0 = (bytes2, cache, base3) => {
      const { prefix } = base3
      if (prefix !== base58btc.prefix) {
        throw Error(`Cannot string encode V0 in ${base3.name} encoding`)
      }
      const cid2 = cache.get(prefix)
      if (cid2 == null) {
        const cid3 = base3.encode(bytes2).slice(1)
        cache.set(prefix, cid3)
        return cid3
      } else {
        return cid2
      }
    }
    var toStringV1 = (bytes2, cache, base3) => {
      const { prefix } = base3
      const cid2 = cache.get(prefix)
      if (cid2 == null) {
        const cid3 = base3.encode(bytes2)
        cache.set(prefix, cid3)
        return cid3
      } else {
        return cid2
      }
    }
    var DAG_PB_CODE = 112
    var SHA_256_CODE = 18
    var encodeCID = (version2, code2, multihash) => {
      const codeOffset = encodingLength(version2)
      const hashOffset = codeOffset + encodingLength(code2)
      const bytes2 = new Uint8Array(hashOffset + multihash.byteLength)
      encodeTo(version2, bytes2, 0)
      encodeTo(code2, bytes2, codeOffset)
      bytes2.set(multihash, hashOffset)
      return bytes2
    }
    var cidSymbol = Symbol.for('@ipld/js-cid/CID')
    var readonly = {
      writable: false,
      configurable: false,
      enumerable: true
    }
    var hidden = {
      writable: false,
      enumerable: false,
      configurable: false
    }
    var version = '0.0.0-dev'
    var deprecate = (range, message) => {
      if (range.test(version)) {
        console.warn(message)
      } else {
        throw new Error(message)
      }
    }
    var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js
    var identity_exports = {}
    __export(identity_exports, {
      identity: () => identity
    })
    var identity = from({
      prefix: '\0',
      name: 'identity',
      encode: (buf) => toString(buf),
      decode: (str) => fromString(str)
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js
    var base2_exports = {}
    __export(base2_exports, {
      base2: () => base2
    })
    var base2 = rfc4648({
      prefix: '0',
      name: 'base2',
      alphabet: '01',
      bitsPerChar: 1
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js
    var base8_exports = {}
    __export(base8_exports, {
      base8: () => base8
    })
    var base8 = rfc4648({
      prefix: '7',
      name: 'base8',
      alphabet: '01234567',
      bitsPerChar: 3
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js
    var base10_exports = {}
    __export(base10_exports, {
      base10: () => base10
    })
    var base10 = baseX({
      prefix: '9',
      name: 'base10',
      alphabet: '0123456789'
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js
    var base16_exports = {}
    __export(base16_exports, {
      base16: () => base16,
      base16upper: () => base16upper
    })
    var base16 = rfc4648({
      prefix: 'f',
      name: 'base16',
      alphabet: '0123456789abcdef',
      bitsPerChar: 4
    })
    var base16upper = rfc4648({
      prefix: 'F',
      name: 'base16upper',
      alphabet: '0123456789ABCDEF',
      bitsPerChar: 4
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js
    var base36_exports = {}
    __export(base36_exports, {
      base36: () => base36,
      base36upper: () => base36upper
    })
    var base36 = baseX({
      prefix: 'k',
      name: 'base36',
      alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
    })
    var base36upper = baseX({
      prefix: 'K',
      name: 'base36upper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js
    var base64_exports = {}
    __export(base64_exports, {
      base64: () => base64,
      base64pad: () => base64pad,
      base64url: () => base64url,
      base64urlpad: () => base64urlpad
    })
    var base64 = rfc4648({
      prefix: 'm',
      name: 'base64',
      alphabet:
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
      bitsPerChar: 6
    })
    var base64pad = rfc4648({
      prefix: 'M',
      name: 'base64pad',
      alphabet:
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
      bitsPerChar: 6
    })
    var base64url = rfc4648({
      prefix: 'u',
      name: 'base64url',
      alphabet:
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
      bitsPerChar: 6
    })
    var base64urlpad = rfc4648({
      prefix: 'U',
      name: 'base64urlpad',
      alphabet:
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
      bitsPerChar: 6
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js
    var base256emoji_exports = {}
    __export(base256emoji_exports, {
      base256emoji: () => base256emoji
    })
    var alphabet = Array.from(
      '\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}'
    )
    var alphabetBytesToChars = alphabet.reduce((p, c, i) => {
      p[i] = c
      return p
    }, [])
    var alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
      p[c.codePointAt(0)] = i
      return p
    }, [])
    function encode3(data) {
      return data.reduce((p, c) => {
        p += alphabetBytesToChars[c]
        return p
      }, '')
    }
    function decode5(str) {
      const byts = []
      for (const char of str) {
        const byt = alphabetCharsToBytes[char.codePointAt(0)]
        if (byt === void 0) {
          throw new Error(`Non-base256emoji character: ${char}`)
        }
        byts.push(byt)
      }
      return new Uint8Array(byts)
    }
    var base256emoji = from({
      prefix: '\u{1F680}',
      name: 'base256emoji',
      encode: encode3,
      decode: decode5
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js
    var sha2_browser_exports = {}
    __export(sha2_browser_exports, {
      sha256: () => sha256,
      sha512: () => sha512
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js
    var from2 = ({ name: name2, code: code2, encode: encode5 }) =>
      new Hasher(name2, code2, encode5)
    var Hasher = class {
      constructor(name2, code2, encode5) {
        this.name = name2
        this.code = code2
        this.encode = encode5
      }
      digest(input) {
        if (input instanceof Uint8Array) {
          const result = this.encode(input)
          return result instanceof Uint8Array
            ? create(this.code, result)
            : result.then((digest2) => create(this.code, digest2))
        } else {
          throw Error('Unknown type, must be binary type')
        }
      }
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js
    var sha = (name2) => async (data) =>
      new Uint8Array(await crypto.subtle.digest(name2, data))
    var sha256 = from2({
      name: 'sha2-256',
      code: 18,
      encode: sha('SHA-256')
    })
    var sha512 = from2({
      name: 'sha2-512',
      code: 19,
      encode: sha('SHA-512')
    })

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js
    var identity_exports2 = {}
    __export(identity_exports2, {
      identity: () => identity2
    })
    var code = 0
    var name = 'identity'
    var encode4 = coerce2
    var digest = (input) => create(code, encode4(input))
    var identity2 = {
      code,
      name,
      encode: encode4,
      digest
    }

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js
    var textEncoder = new TextEncoder()
    var textDecoder = new TextDecoder()

    // ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js
    var bases = {
      ...identity_exports,
      ...base2_exports,
      ...base8_exports,
      ...base10_exports,
      ...base16_exports,
      ...base32_exports,
      ...base36_exports,
      ...base58_exports,
      ...base64_exports,
      ...base256emoji_exports
    }
    var hashes = {
      ...sha2_browser_exports,
      ...identity_exports2
    }

    // ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/util/bases.js
    function createCodec(name2, prefix, encode5, decode6) {
      return {
        name: name2,
        prefix,
        encoder: {
          name: name2,
          prefix,
          encode: encode5
        },
        decoder: { decode: decode6 }
      }
    }
    var string = createCodec(
      'utf8',
      'u',
      (buf) => {
        const decoder2 = new TextDecoder('utf8')
        return 'u' + decoder2.decode(buf)
      },
      (str) => {
        const encoder2 = new TextEncoder()
        return encoder2.encode(str.substring(1))
      }
    )
    var ascii = createCodec(
      'ascii',
      'a',
      (buf) => {
        let string3 = 'a'
        for (let i = 0; i < buf.length; i++) {
          string3 += String.fromCharCode(buf[i])
        }
        return string3
      },
      (str) => {
        str = str.substring(1)
        const buf = new Uint8Array(str.length)
        for (let i = 0; i < str.length; i++) {
          buf[i] = str.charCodeAt(i)
        }
        return buf
      }
    )
    var BASES = {
      utf8: string,
      'utf-8': string,
      hex: bases.base16,
      latin1: ascii,
      ascii,
      binary: ascii,
      ...bases
    }
    var bases_default = BASES

    // ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/from-string.js
    function fromString2(string3, encoding = 'utf8') {
      const base3 = bases_default[encoding]
      if (!base3) {
        throw new Error(`Unsupported encoding "${encoding}"`)
      }
      return base3.decoder.decode(`${base3.prefix}${string3}`)
    }

    // ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/to-string.js
    function toString2(array2, encoding = 'utf8') {
      const base3 = bases_default[encoding]
      if (!base3) {
        throw new Error(`Unsupported encoding "${encoding}"`)
      }
      return base3.encoder.encode(array2).substring(1)
    }

    // ../common-web/src/ipld.ts
    var jsonToIpld = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => jsonToIpld(item))
      }
      if (val && typeof val === 'object') {
        if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {
          return CID.parse(val['$link'])
        }
        if (
          typeof val['$bytes'] === 'string' &&
          Object.keys(val).length === 1
        ) {
          return fromString2(val['$bytes'], 'base64')
        }
        const toReturn = {}
        for (const key of Object.keys(val)) {
          toReturn[key] = jsonToIpld(val[key])
        }
        return toReturn
      }
      return val
    }
    var ipldToJson = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => ipldToJson(item))
      }
      if (val && typeof val === 'object') {
        if (val instanceof Uint8Array) {
          return {
            $bytes: toString2(val, 'base64')
          }
        }
        if (CID.asCID(val)) {
          return {
            $link: val.toString()
          }
        }
        const toReturn = {}
        for (const key of Object.keys(val)) {
          toReturn[key] = ipldToJson(val[key])
        }
        return toReturn
      }
      return val
    }

    // ../common-web/src/types.ts
    var cidSchema = z
      .any()
      .refine((obj) => CID.asCID(obj) !== null, {
        message: 'Not a CID'
      })
      .transform((obj) => CID.asCID(obj))
    var schema = {
      cid: cidSchema,
      bytes: z.instanceof(Uint8Array),
      string: z.string(),
      array: z.array(z.unknown()),
      map: z.record(z.string(), z.unknown()),
      unknown: z.unknown()
    }
    var def = {
      cid: {
        name: 'cid',
        schema: schema.cid
      },
      bytes: {
        name: 'bytes',
        schema: schema.bytes
      },
      string: {
        name: 'string',
        schema: schema.string
      },
      map: {
        name: 'map',
        schema: schema.map
      },
      unknown: {
        name: 'unknown',
        schema: schema.unknown
      }
    }

    // ../common-web/src/times.ts
    var SECOND = 1e3
    var MINUTE = SECOND * 60
    var HOUR = MINUTE * 60
    var DAY = HOUR * 24

    // ../common-web/src/strings.ts
    var import_graphemer = __toESM(require_lib())
    var utf8Len = (str) => {
      return new TextEncoder().encode(str).byteLength
    }
    var graphemeLen = (str) => {
      const splitter = new import_graphemer.default()
      return splitter.countGraphemes(str)
    }
    var parseLanguage = (langTag) => {
      const parsed = langTag.match(bcp47Regexp)
      if (!parsed?.groups) return null
      const parts = parsed.groups
      return {
        grandfathered: parts.grandfathered,
        language: parts.language,
        extlang: parts.extlang,
        script: parts.script,
        region: parts.region,
        variant: parts.variant,
        extension: parts.extension,
        privateUse: parts.privateUseA || parts.privateUseB
      }
    }
    var validateLanguage = (langTag) => {
      return bcp47Regexp.test(langTag)
    }
    var bcp47Regexp =
      /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/

    // ../common-web/src/did-doc.ts
    var isValidDidDoc = (doc) => {
      return didDocument.safeParse(doc).success
    }
    var getDid = (doc) => {
      const id = doc.id
      if (typeof id !== 'string') {
        throw new Error('No `id` on document')
      }
      return id
    }
    var getPdsEndpoint = (doc) => {
      return getServiceEndpoint(doc, {
        id: '#atproto_pds',
        type: 'AtprotoPersonalDataServer'
      })
    }
    var getServiceEndpoint = (doc, opts) => {
      const did2 = getDid(doc)
      let services = doc.service
      if (!services) return void 0
      if (typeof services !== 'object') return void 0
      if (!Array.isArray(services)) {
        services = [services]
      }
      const found = services.find(
        (service2) =>
          service2.id === opts.id || service2.id === `${did2}${opts.id}`
      )
      if (!found) return void 0
      if (found.type !== opts.type) {
        return void 0
      }
      if (typeof found.serviceEndpoint !== 'string') {
        return void 0
      }
      return validateUrl(found.serviceEndpoint)
    }
    var validateUrl = (urlStr) => {
      let url
      try {
        url = new URL(urlStr)
      } catch {
        return void 0
      }
      if (!['http:', 'https:'].includes(url.protocol)) {
        return void 0
      } else if (!url.hostname) {
        return void 0
      } else {
        return urlStr
      }
    }
    var verificationMethod = z.object({
      id: z.string(),
      type: z.string(),
      controller: z.string(),
      publicKeyMultibase: z.string().optional()
    })
    var service = z.object({
      id: z.string(),
      type: z.string(),
      serviceEndpoint: z.union([z.string(), z.record(z.unknown())])
    })
    var didDocument = z.object({
      id: z.string(),
      alsoKnownAs: z.array(z.string()).optional(),
      verificationMethod: z.array(verificationMethod).optional(),
      service: z.array(service).optional()
    })

    // ../lexicon/src/validators/formats.ts
    var import_iso_datestring_validator = __toESM(require_dist())
    function datetime(path, value) {
      try {
        if (!(0, import_iso_datestring_validator.isValidISODateString)(value)) {
          throw new Error()
        }
      } catch {
        return {
          success: false,
          error: new ValidationError(
            `${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`
          )
        }
      }
      return { success: true, value }
    }
    function uri(path, value) {
      const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null
      if (!isUri) {
        return {
          success: false,
          error: new ValidationError(`${path} must be a uri`)
        }
      }
      return { success: true, value }
    }
    function atUri(path, value) {
      try {
        ensureValidAtUri(value)
      } catch {
        return {
          success: false,
          error: new ValidationError(`${path} must be a valid at-uri`)
        }
      }
      return { success: true, value }
    }
    function did(path, value) {
      try {
        ensureValidDid(value)
      } catch {
        return {
          success: false,
          error: new ValidationError(`${path} must be a valid did`)
        }
      }
      return { success: true, value }
    }
    function handle(path, value) {
      try {
        ensureValidHandle(value)
      } catch {
        return {
          success: false,
          error: new ValidationError(`${path} must be a valid handle`)
        }
      }
      return { success: true, value }
    }
    function atIdentifier(path, value) {
      const isDid = did(path, value)
      if (!isDid.success) {
        const isHandle2 = handle(path, value)
        if (!isHandle2.success) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must be a valid did or a handle`
            )
          }
        }
      }
      return { success: true, value }
    }
    function nsid(path, value) {
      try {
        ensureValidNsid(value)
      } catch {
        return {
          success: false,
          error: new ValidationError(`${path} must be a valid nsid`)
        }
      }
      return { success: true, value }
    }
    function cid(path, value) {
      try {
        CID.parse(value)
      } catch {
        return {
          success: false,
          error: new ValidationError(`${path} must be a cid string`)
        }
      }
      return { success: true, value }
    }
    function language(path, value) {
      if (validateLanguage(value)) {
        return { success: true, value }
      }
      return {
        success: false,
        error: new ValidationError(
          `${path} must be a well-formed BCP 47 language tag`
        )
      }
    }

    // ../lexicon/src/validators/primitives.ts
    function validate(lexicons2, path, def2, value) {
      switch (def2.type) {
        case 'boolean':
          return boolean(lexicons2, path, def2, value)
        case 'integer':
          return integer(lexicons2, path, def2, value)
        case 'string':
          return string2(lexicons2, path, def2, value)
        case 'bytes':
          return bytes(lexicons2, path, def2, value)
        case 'cid-link':
          return cidLink(lexicons2, path, def2, value)
        case 'unknown':
          return unknown(lexicons2, path, def2, value)
        default:
          return {
            success: false,
            error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)
          }
      }
    }
    function boolean(lexicons2, path, def2, value) {
      def2 = def2
      const type = typeof value
      if (type === 'undefined') {
        if (typeof def2.default === 'boolean') {
          return { success: true, value: def2.default }
        }
        return {
          success: false,
          error: new ValidationError(`${path} must be a boolean`)
        }
      } else if (type !== 'boolean') {
        return {
          success: false,
          error: new ValidationError(`${path} must be a boolean`)
        }
      }
      if (typeof def2.const === 'boolean') {
        if (value !== def2.const) {
          return {
            success: false,
            error: new ValidationError(`${path} must be ${def2.const}`)
          }
        }
      }
      return { success: true, value }
    }
    function integer(lexicons2, path, def2, value) {
      def2 = def2
      const type = typeof value
      if (type === 'undefined') {
        if (typeof def2.default === 'number') {
          return { success: true, value: def2.default }
        }
        return {
          success: false,
          error: new ValidationError(`${path} must be an integer`)
        }
      } else if (!Number.isInteger(value)) {
        return {
          success: false,
          error: new ValidationError(`${path} must be an integer`)
        }
      }
      if (typeof def2.const === 'number') {
        if (value !== def2.const) {
          return {
            success: false,
            error: new ValidationError(`${path} must be ${def2.const}`)
          }
        }
      }
      if (Array.isArray(def2.enum)) {
        if (!def2.enum.includes(value)) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must be one of (${def2.enum.join('|')})`
            )
          }
        }
      }
      if (typeof def2.maximum === 'number') {
        if (value > def2.maximum) {
          return {
            success: false,
            error: new ValidationError(
              `${path} can not be greater than ${def2.maximum}`
            )
          }
        }
      }
      if (typeof def2.minimum === 'number') {
        if (value < def2.minimum) {
          return {
            success: false,
            error: new ValidationError(
              `${path} can not be less than ${def2.minimum}`
            )
          }
        }
      }
      return { success: true, value }
    }
    function string2(lexicons2, path, def2, value) {
      def2 = def2
      if (typeof value === 'undefined') {
        if (typeof def2.default === 'string') {
          return { success: true, value: def2.default }
        }
        return {
          success: false,
          error: new ValidationError(`${path} must be a string`)
        }
      } else if (typeof value !== 'string') {
        return {
          success: false,
          error: new ValidationError(`${path} must be a string`)
        }
      }
      if (typeof def2.const === 'string') {
        if (value !== def2.const) {
          return {
            success: false,
            error: new ValidationError(`${path} must be ${def2.const}`)
          }
        }
      }
      if (Array.isArray(def2.enum)) {
        if (!def2.enum.includes(value)) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must be one of (${def2.enum.join('|')})`
            )
          }
        }
      }
      if (typeof def2.maxLength === 'number') {
        if (utf8Len(value) > def2.maxLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be longer than ${def2.maxLength} characters`
            )
          }
        }
      }
      if (typeof def2.minLength === 'number') {
        if (utf8Len(value) < def2.minLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be shorter than ${def2.minLength} characters`
            )
          }
        }
      }
      if (typeof def2.maxGraphemes === 'number') {
        if (graphemeLen(value) > def2.maxGraphemes) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be longer than ${def2.maxGraphemes} graphemes`
            )
          }
        }
      }
      if (typeof def2.minGraphemes === 'number') {
        if (graphemeLen(value) < def2.minGraphemes) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be shorter than ${def2.minGraphemes} graphemes`
            )
          }
        }
      }
      if (typeof def2.format === 'string') {
        switch (def2.format) {
          case 'datetime':
            return datetime(path, value)
          case 'uri':
            return uri(path, value)
          case 'at-uri':
            return atUri(path, value)
          case 'did':
            return did(path, value)
          case 'handle':
            return handle(path, value)
          case 'at-identifier':
            return atIdentifier(path, value)
          case 'nsid':
            return nsid(path, value)
          case 'cid':
            return cid(path, value)
          case 'language':
            return language(path, value)
        }
      }
      return { success: true, value }
    }
    function bytes(lexicons2, path, def2, value) {
      def2 = def2
      if (!value || !(value instanceof Uint8Array)) {
        return {
          success: false,
          error: new ValidationError(`${path} must be a byte array`)
        }
      }
      if (typeof def2.maxLength === 'number') {
        if (value.byteLength > def2.maxLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be larger than ${def2.maxLength} bytes`
            )
          }
        }
      }
      if (typeof def2.minLength === 'number') {
        if (value.byteLength < def2.minLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not be smaller than ${def2.minLength} bytes`
            )
          }
        }
      }
      return { success: true, value }
    }
    function cidLink(lexicons2, path, def2, value) {
      if (CID.asCID(value) === null) {
        return {
          success: false,
          error: new ValidationError(`${path} must be a CID`)
        }
      }
      return { success: true, value }
    }
    function unknown(lexicons2, path, def2, value) {
      if (!value || typeof value !== 'object') {
        return {
          success: false,
          error: new ValidationError(`${path} must be an object`)
        }
      }
      return { success: true, value }
    }

    // ../lexicon/src/blob-refs.ts
    var typedJsonBlobRef = z
      .object({
        $type: z.literal('blob'),
        ref: schema.cid,
        mimeType: z.string(),
        size: z.number()
      })
      .strict()
    var untypedJsonBlobRef = z
      .object({
        cid: z.string(),
        mimeType: z.string()
      })
      .strict()
    var jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef])
    var BlobRef = class {
      constructor(ref, mimeType, size, original) {
        this.ref = ref
        this.mimeType = mimeType
        this.size = size
        this.original = original ?? {
          $type: 'blob',
          ref,
          mimeType,
          size
        }
      }
      static asBlobRef(obj) {
        if (check_exports.is(obj, jsonBlobRef)) {
          return BlobRef.fromJsonRef(obj)
        }
        return null
      }
      static fromJsonRef(json) {
        if (check_exports.is(json, typedJsonBlobRef)) {
          return new BlobRef(json.ref, json.mimeType, json.size)
        } else {
          return new BlobRef(CID.parse(json.cid), json.mimeType, -1, json)
        }
      }
      ipld() {
        return {
          $type: 'blob',
          ref: this.ref,
          mimeType: this.mimeType,
          size: this.size
        }
      }
      toJSON() {
        return ipldToJson(this.ipld())
      }
    }

    // ../lexicon/src/validators/blob.ts
    function blob(lexicons2, path, def2, value) {
      if (!value || !(value instanceof BlobRef)) {
        return {
          success: false,
          error: new ValidationError(`${path} should be a blob ref`)
        }
      }
      return { success: true, value }
    }

    // ../lexicon/src/validators/complex.ts
    function validate2(lexicons2, path, def2, value) {
      switch (def2.type) {
        case 'boolean':
          return boolean(lexicons2, path, def2, value)
        case 'integer':
          return integer(lexicons2, path, def2, value)
        case 'string':
          return string2(lexicons2, path, def2, value)
        case 'bytes':
          return bytes(lexicons2, path, def2, value)
        case 'cid-link':
          return cidLink(lexicons2, path, def2, value)
        case 'unknown':
          return unknown(lexicons2, path, def2, value)
        case 'object':
          return object(lexicons2, path, def2, value)
        case 'array':
          return array(lexicons2, path, def2, value)
        case 'blob':
          return blob(lexicons2, path, def2, value)
        default:
          return {
            success: false,
            error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)
          }
      }
    }
    function array(lexicons2, path, def2, value) {
      if (!Array.isArray(value)) {
        return {
          success: false,
          error: new ValidationError(`${path} must be an array`)
        }
      }
      if (typeof def2.maxLength === 'number') {
        if (value.length > def2.maxLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not have more than ${def2.maxLength} elements`
            )
          }
        }
      }
      if (typeof def2.minLength === 'number') {
        if (value.length < def2.minLength) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must not have fewer than ${def2.minLength} elements`
            )
          }
        }
      }
      const itemsDef = def2.items
      for (let i = 0; i < value.length; i++) {
        const itemValue = value[i]
        const itemPath = `${path}/${i}`
        const res = validateOneOf(lexicons2, itemPath, itemsDef, itemValue)
        if (!res.success) {
          return res
        }
      }
      return { success: true, value }
    }
    function object(lexicons2, path, def2, value) {
      def2 = def2
      if (!value || typeof value !== 'object') {
        return {
          success: false,
          error: new ValidationError(`${path} must be an object`)
        }
      }
      const requiredProps = new Set(def2.required)
      const nullableProps = new Set(def2.nullable)
      let resultValue = value
      if (typeof def2.properties === 'object') {
        for (const key in def2.properties) {
          if (value[key] === null && nullableProps.has(key)) {
            continue
          }
          const propDef = def2.properties[key]
          const propPath = `${path}/${key}`
          const validated = validateOneOf(
            lexicons2,
            propPath,
            propDef,
            value[key]
          )
          const propValue = validated.success ? validated.value : value[key]
          const propIsUndefined = typeof propValue === 'undefined'
          if (propIsUndefined && requiredProps.has(key)) {
            return {
              success: false,
              error: new ValidationError(
                `${path} must have the property "${key}"`
              )
            }
          } else if (!propIsUndefined && !validated.success) {
            return validated
          }
          if (propValue !== value[key]) {
            if (resultValue === value) {
              resultValue = { ...value }
            }
            resultValue[key] = propValue
          }
        }
      }
      return { success: true, value: resultValue }
    }

    // ../lexicon/src/util.ts
    function toLexUri(str, baseUri) {
      if (str.split('#').length > 2) {
        throw new Error('Uri can only have one hash segment')
      }
      if (str.startsWith('lex:')) {
        return str
      }
      if (str.startsWith('#')) {
        if (!baseUri) {
          throw new Error(`Unable to resolve uri without anchor: ${str}`)
        }
        return `${baseUri}${str}`
      }
      return `lex:${str}`
    }
    function validateOneOf(lexicons2, path, def2, value, mustBeObj = false) {
      let error
      let concreteDefs
      if (def2.type === 'union') {
        if (!isDiscriminatedObject(value)) {
          return {
            success: false,
            error: new ValidationError(
              `${path} must be an object which includes the "$type" property`
            )
          }
        }
        if (!refsContainType(def2.refs, value.$type)) {
          if (def2.closed) {
            return {
              success: false,
              error: new ValidationError(
                `${path} $type must be one of ${def2.refs.join(', ')}`
              )
            }
          }
          return { success: true, value }
        } else {
          concreteDefs = toConcreteTypes(lexicons2, {
            type: 'ref',
            ref: value.$type
          })
        }
      } else {
        concreteDefs = toConcreteTypes(lexicons2, def2)
      }
      for (const concreteDef of concreteDefs) {
        const result = mustBeObj
          ? object(lexicons2, path, concreteDef, value)
          : validate2(lexicons2, path, concreteDef, value)
        if (result.success) {
          return result
        }
        error ?? (error = result.error)
      }
      if (concreteDefs.length > 1) {
        return {
          success: false,
          error: new ValidationError(
            `${path} did not match any of the expected definitions`
          )
        }
      }
      return { success: false, error }
    }
    function assertValidOneOf(lexicons2, path, def2, value, mustBeObj = false) {
      const res = validateOneOf(lexicons2, path, def2, value, mustBeObj)
      if (!res.success) throw res.error
      return res.value
    }
    function toConcreteTypes(lexicons2, def2) {
      if (def2.type === 'ref') {
        return [lexicons2.getDefOrThrow(def2.ref)]
      } else if (def2.type === 'union') {
        return def2.refs.map((ref) => lexicons2.getDefOrThrow(ref)).flat()
      } else {
        return [def2]
      }
    }
    function requiredPropertiesRefinement(object2, ctx) {
      if (object2.required === void 0) {
        return
      }
      if (!Array.isArray(object2.required)) {
        ctx.addIssue({
          code: z.ZodIssueCode.invalid_type,
          received: typeof object2.required,
          expected: 'array'
        })
        return
      }
      if (object2.properties === void 0) {
        if (object2.required.length > 0) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: `Required fields defined but no properties defined`
          })
        }
        return
      }
      for (const field of object2.required) {
        if (object2.properties[field] === void 0) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: `Required field "${field}" not defined`
          })
        }
      }
    }
    var refsContainType = (refs, type) => {
      const lexUri = toLexUri(type)
      if (refs.includes(lexUri)) {
        return true
      }
      if (lexUri.endsWith('#main')) {
        return refs.includes(lexUri.replace('#main', ''))
      } else {
        return refs.includes(lexUri + '#main')
      }
    }

    // ../lexicon/src/types.ts
    var lexBoolean = z
      .object({
        type: z.literal('boolean'),
        description: z.string().optional(),
        default: z.boolean().optional(),
        const: z.boolean().optional()
      })
      .strict()
    var lexInteger = z
      .object({
        type: z.literal('integer'),
        description: z.string().optional(),
        default: z.number().int().optional(),
        minimum: z.number().int().optional(),
        maximum: z.number().int().optional(),
        enum: z.number().int().array().optional(),
        const: z.number().int().optional()
      })
      .strict()
    var lexStringFormat = z.enum([
      'datetime',
      'uri',
      'at-uri',
      'did',
      'handle',
      'at-identifier',
      'nsid',
      'cid',
      'language'
    ])
    var lexString = z
      .object({
        type: z.literal('string'),
        format: lexStringFormat.optional(),
        description: z.string().optional(),
        default: z.string().optional(),
        minLength: z.number().int().optional(),
        maxLength: z.number().int().optional(),
        minGraphemes: z.number().int().optional(),
        maxGraphemes: z.number().int().optional(),
        enum: z.string().array().optional(),
        const: z.string().optional(),
        knownValues: z.string().array().optional()
      })
      .strict()
    var lexUnknown = z
      .object({
        type: z.literal('unknown'),
        description: z.string().optional()
      })
      .strict()
    var lexPrimitive = z.discriminatedUnion('type', [
      lexBoolean,
      lexInteger,
      lexString,
      lexUnknown
    ])
    var lexBytes = z
      .object({
        type: z.literal('bytes'),
        description: z.string().optional(),
        maxLength: z.number().optional(),
        minLength: z.number().optional()
      })
      .strict()
    var lexCidLink = z
      .object({
        type: z.literal('cid-link'),
        description: z.string().optional()
      })
      .strict()
    var lexIpldType = z.discriminatedUnion('type', [lexBytes, lexCidLink])
    var lexRef = z
      .object({
        type: z.literal('ref'),
        description: z.string().optional(),
        ref: z.string()
      })
      .strict()
    var lexRefUnion = z
      .object({
        type: z.literal('union'),
        description: z.string().optional(),
        refs: z.string().array(),
        closed: z.boolean().optional()
      })
      .strict()
    var lexRefVariant = z.discriminatedUnion('type', [lexRef, lexRefUnion])
    var lexBlob = z
      .object({
        type: z.literal('blob'),
        description: z.string().optional(),
        accept: z.string().array().optional(),
        maxSize: z.number().optional()
      })
      .strict()
    var lexArray = z
      .object({
        type: z.literal('array'),
        description: z.string().optional(),
        items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),
        minLength: z.number().int().optional(),
        maxLength: z.number().int().optional()
      })
      .strict()
    var lexPrimitiveArray = lexArray.merge(
      z
        .object({
          items: lexPrimitive
        })
        .strict()
    )
    var lexToken = z
      .object({
        type: z.literal('token'),
        description: z.string().optional()
      })
      .strict()
    var lexObject = z
      .object({
        type: z.literal('object'),
        description: z.string().optional(),
        required: z.string().array().optional(),
        nullable: z.string().array().optional(),
        properties: z.record(
          z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive])
        )
      })
      .strict()
      .superRefine(requiredPropertiesRefinement)
    var lexXrpcParameters = z
      .object({
        type: z.literal('params'),
        description: z.string().optional(),
        required: z.string().array().optional(),
        properties: z.record(z.union([lexPrimitive, lexPrimitiveArray]))
      })
      .strict()
      .superRefine(requiredPropertiesRefinement)
    var lexXrpcBody = z
      .object({
        description: z.string().optional(),
        encoding: z.string(),
        schema: z.union([lexRefVariant, lexObject]).optional()
      })
      .strict()
    var lexXrpcSubscriptionMessage = z
      .object({
        description: z.string().optional(),
        schema: z.union([lexRefVariant, lexObject]).optional()
      })
      .strict()
    var lexXrpcError = z
      .object({
        name: z.string(),
        description: z.string().optional()
      })
      .strict()
    var lexXrpcQuery = z
      .object({
        type: z.literal('query'),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        output: lexXrpcBody.optional(),
        errors: lexXrpcError.array().optional()
      })
      .strict()
    var lexXrpcProcedure = z
      .object({
        type: z.literal('procedure'),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        input: lexXrpcBody.optional(),
        output: lexXrpcBody.optional(),
        errors: lexXrpcError.array().optional()
      })
      .strict()
    var lexXrpcSubscription = z
      .object({
        type: z.literal('subscription'),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        message: lexXrpcSubscriptionMessage.optional(),
        errors: lexXrpcError.array().optional()
      })
      .strict()
    var lexRecord = z
      .object({
        type: z.literal('record'),
        description: z.string().optional(),
        key: z.string().optional(),
        record: lexObject
      })
      .strict()
    var lexUserType = z.custom(
      (val) => {
        if (!val || typeof val !== 'object') {
          return
        }
        if (val['type'] === void 0) {
          return
        }
        switch (val['type']) {
          case 'record':
            return lexRecord.parse(val)
          case 'query':
            return lexXrpcQuery.parse(val)
          case 'procedure':
            return lexXrpcProcedure.parse(val)
          case 'subscription':
            return lexXrpcSubscription.parse(val)
          case 'blob':
            return lexBlob.parse(val)
          case 'array':
            return lexArray.parse(val)
          case 'token':
            return lexToken.parse(val)
          case 'object':
            return lexObject.parse(val)
          case 'boolean':
            return lexBoolean.parse(val)
          case 'integer':
            return lexInteger.parse(val)
          case 'string':
            return lexString.parse(val)
          case 'bytes':
            return lexBytes.parse(val)
          case 'cid-link':
            return lexCidLink.parse(val)
          case 'unknown':
            return lexUnknown.parse(val)
        }
      },
      (val) => {
        if (!val || typeof val !== 'object') {
          return {
            message: 'Must be an object',
            fatal: true
          }
        }
        if (val['type'] === void 0) {
          return {
            message: 'Must have a type',
            fatal: true
          }
        }
        return {
          message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
          fatal: true
        }
      }
    )
    var lexiconDoc = z
      .object({
        lexicon: z.literal(1),
        id: z.string().refine((v) => NSID.isValid(v), {
          message: 'Must be a valid NSID'
        }),
        revision: z.number().optional(),
        description: z.string().optional(),
        defs: z.record(lexUserType)
      })
      .strict()
      .superRefine((doc, ctx) => {
        for (const defId in doc.defs) {
          const def2 = doc.defs[defId]
          if (
            defId !== 'main' &&
            (def2.type === 'record' ||
              def2.type === 'procedure' ||
              def2.type === 'query' ||
              def2.type === 'subscription')
          ) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: `Records, procedures, queries, and subscriptions must be the main definition.`
            })
          }
        }
      })
    function isObj(obj) {
      return obj !== null && typeof obj === 'object'
    }
    function hasProp(data, prop) {
      return prop in data
    }
    var discriminatedObject = z.object({ $type: z.string() })
    function isDiscriminatedObject(value) {
      return discriminatedObject.safeParse(value).success
    }
    var ValidationError = class extends Error {}
    var InvalidLexiconError = class extends Error {}
    var LexiconDefNotFoundError = class extends Error {}

    // ../lexicon/src/validators/xrpc.ts
    function params(lexicons2, path, def2, val) {
      const value = val && typeof val === 'object' ? val : {}
      const requiredProps = new Set(def2.required ?? [])
      let resultValue = value
      if (typeof def2.properties === 'object') {
        for (const key in def2.properties) {
          const propDef = def2.properties[key]
          const validated =
            propDef.type === 'array'
              ? array(lexicons2, key, propDef, value[key])
              : validate(lexicons2, key, propDef, value[key])
          const propValue = validated.success ? validated.value : value[key]
          const propIsUndefined = typeof propValue === 'undefined'
          if (propIsUndefined && requiredProps.has(key)) {
            return {
              success: false,
              error: new ValidationError(
                `${path} must have the property "${key}"`
              )
            }
          } else if (!propIsUndefined && !validated.success) {
            return validated
          }
          if (propValue !== value[key]) {
            if (resultValue === value) {
              resultValue = { ...value }
            }
            resultValue[key] = propValue
          }
        }
      }
      return { success: true, value: resultValue }
    }

    // ../lexicon/src/validation.ts
    function assertValidRecord(lexicons2, def2, value) {
      const res = object(lexicons2, 'Record', def2.record, value)
      if (!res.success) throw res.error
      return res.value
    }
    function assertValidXrpcParams(lexicons2, def2, value) {
      if (def2.parameters) {
        const res = params(lexicons2, 'Params', def2.parameters, value)
        if (!res.success) throw res.error
        return res.value
      }
    }
    function assertValidXrpcInput(lexicons2, def2, value) {
      if (def2.input?.schema) {
        return assertValidOneOf(
          lexicons2,
          'Input',
          def2.input.schema,
          value,
          true
        )
      }
    }
    function assertValidXrpcOutput(lexicons2, def2, value) {
      if (def2.output?.schema) {
        return assertValidOneOf(
          lexicons2,
          'Output',
          def2.output.schema,
          value,
          true
        )
      }
    }
    function assertValidXrpcMessage(lexicons2, def2, value) {
      if (def2.message?.schema) {
        return assertValidOneOf(
          lexicons2,
          'Message',
          def2.message.schema,
          value,
          true
        )
      }
    }

    // ../lexicon/src/lexicons.ts
    var Lexicons = class {
      constructor(docs) {
        this.docs = /* @__PURE__ */ new Map()
        this.defs = /* @__PURE__ */ new Map()
        if (docs?.length) {
          for (const doc of docs) {
            this.add(doc)
          }
        }
      }
      add(doc) {
        const uri2 = toLexUri(doc.id)
        if (this.docs.has(uri2)) {
          throw new Error(`${uri2} has already been registered`)
        }
        resolveRefUris(doc, uri2)
        this.docs.set(uri2, doc)
        for (const [defUri, def2] of iterDefs(doc)) {
          this.defs.set(defUri, def2)
        }
      }
      remove(uri2) {
        uri2 = toLexUri(uri2)
        const doc = this.docs.get(uri2)
        if (!doc) {
          throw new Error(`Unable to remove "${uri2}": does not exist`)
        }
        for (const [defUri, _def] of iterDefs(doc)) {
          this.defs.delete(defUri)
        }
        this.docs.delete(uri2)
      }
      get(uri2) {
        uri2 = toLexUri(uri2)
        return this.docs.get(uri2)
      }
      getDef(uri2) {
        uri2 = toLexUri(uri2)
        return this.defs.get(uri2)
      }
      getDefOrThrow(uri2, types) {
        const def2 = this.getDef(uri2)
        if (!def2) {
          throw new LexiconDefNotFoundError(`Lexicon not found: ${uri2}`)
        }
        if (types && !types.includes(def2.type)) {
          throw new InvalidLexiconError(
            `Not a ${types.join(' or ')} lexicon: ${uri2}`
          )
        }
        return def2
      }
      validate(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, ['record', 'object'])
        if (!isObj(value)) {
          throw new ValidationError(`Value must be an object`)
        }
        if (def2.type === 'record') {
          return object(this, 'Record', def2.record, value)
        } else if (def2.type === 'object') {
          return object(this, 'Object', def2, value)
        } else {
          throw new InvalidLexiconError('Definition must be a record or object')
        }
      }
      assertValidRecord(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, ['record'])
        if (!isObj(value)) {
          throw new ValidationError(`Record must be an object`)
        }
        if (!hasProp(value, '$type') || typeof value.$type !== 'string') {
          throw new ValidationError(`Record/$type must be a string`)
        }
        const $type = value.$type || ''
        if (toLexUri($type) !== lexUri) {
          throw new ValidationError(
            `Invalid $type: must be ${lexUri}, got ${$type}`
          )
        }
        return assertValidRecord(this, def2, value)
      }
      assertValidXrpcParams(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, [
          'query',
          'procedure',
          'subscription'
        ])
        return assertValidXrpcParams(this, def2, value)
      }
      assertValidXrpcInput(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, ['procedure'])
        return assertValidXrpcInput(this, def2, value)
      }
      assertValidXrpcOutput(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, ['query', 'procedure'])
        return assertValidXrpcOutput(this, def2, value)
      }
      assertValidXrpcMessage(lexUri, value) {
        lexUri = toLexUri(lexUri)
        const def2 = this.getDefOrThrow(lexUri, ['subscription'])
        return assertValidXrpcMessage(this, def2, value)
      }
      resolveLexUri(lexUri, ref) {
        lexUri = toLexUri(lexUri)
        return toLexUri(ref, lexUri)
      }
    }
    function* iterDefs(doc) {
      for (const defId in doc.defs) {
        yield [`lex:${doc.id}#${defId}`, doc.defs[defId]]
        if (defId === 'main') {
          yield [`lex:${doc.id}`, doc.defs[defId]]
        }
      }
    }
    function resolveRefUris(obj, baseUri) {
      for (const k in obj) {
        if (obj.type === 'ref') {
          obj.ref = toLexUri(obj.ref, baseUri)
        } else if (obj.type === 'union') {
          obj.refs = obj.refs.map((ref) => toLexUri(ref, baseUri))
        } else if (Array.isArray(obj[k])) {
          obj[k] = obj[k].map((item) => {
            if (typeof item === 'string') {
              return item.startsWith('#') ? toLexUri(item, baseUri) : item
            } else if (item && typeof item === 'object') {
              return resolveRefUris(item, baseUri)
            }
            return item
          })
        } else if (obj[k] && typeof obj[k] === 'object') {
          obj[k] = resolveRefUris(obj[k], baseUri)
        }
      }
      return obj
    }

    // ../lexicon/src/serialize.ts
    var lexToIpld = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => lexToIpld(item))
      }
      if (val && typeof val === 'object') {
        if (val instanceof BlobRef) {
          return val.original
        }
        if (CID.asCID(val) || val instanceof Uint8Array) {
          return val
        }
        const toReturn = {}
        for (const key of Object.keys(val)) {
          toReturn[key] = lexToIpld(val[key])
        }
        return toReturn
      }
      return val
    }
    var ipldToLex = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => ipldToLex(item))
      }
      if (val && typeof val === 'object') {
        if (
          (val['$type'] === 'blob' ||
            (typeof val['cid'] === 'string' &&
              typeof val['mimeType'] === 'string')) &&
          check_exports.is(val, jsonBlobRef)
        ) {
          return BlobRef.fromJsonRef(val)
        }
        if (CID.asCID(val) || val instanceof Uint8Array) {
          return val
        }
        const toReturn = {}
        for (const key of Object.keys(val)) {
          toReturn[key] = ipldToLex(val[key])
        }
        return toReturn
      }
      return val
    }
    var lexToJson = (val) => {
      return ipldToJson(lexToIpld(val))
    }
    var stringifyLex = (val) => {
      return JSON.stringify(lexToJson(val))
    }
    var jsonToLex = (val) => {
      return ipldToLex(jsonToIpld(val))
    }
    var jsonStringToLex = (val) => {
      return jsonToLex(JSON.parse(val))
    }

    // ../xrpc/src/types.ts
    var errorResponseBody = z.object({
      error: z.string().optional(),
      message: z.string().optional()
    })
    var ResponseType = /* @__PURE__ */ ((ResponseType2) => {
      ResponseType2[(ResponseType2['Unknown'] = 1)] = 'Unknown'
      ResponseType2[(ResponseType2['InvalidResponse'] = 2)] = 'InvalidResponse'
      ResponseType2[(ResponseType2['Success'] = 200)] = 'Success'
      ResponseType2[(ResponseType2['InvalidRequest'] = 400)] = 'InvalidRequest'
      ResponseType2[(ResponseType2['AuthRequired'] = 401)] = 'AuthRequired'
      ResponseType2[(ResponseType2['Forbidden'] = 403)] = 'Forbidden'
      ResponseType2[(ResponseType2['XRPCNotSupported'] = 404)] =
        'XRPCNotSupported'
      ResponseType2[(ResponseType2['PayloadTooLarge'] = 413)] =
        'PayloadTooLarge'
      ResponseType2[(ResponseType2['RateLimitExceeded'] = 429)] =
        'RateLimitExceeded'
      ResponseType2[(ResponseType2['InternalServerError'] = 500)] =
        'InternalServerError'
      ResponseType2[(ResponseType2['MethodNotImplemented'] = 501)] =
        'MethodNotImplemented'
      ResponseType2[(ResponseType2['UpstreamFailure'] = 502)] =
        'UpstreamFailure'
      ResponseType2[(ResponseType2['NotEnoughResources'] = 503)] =
        'NotEnoughResources'
      ResponseType2[(ResponseType2['UpstreamTimeout'] = 504)] =
        'UpstreamTimeout'
      return ResponseType2
    })(ResponseType || {})
    var ResponseTypeNames = {
      [2 /* InvalidResponse */]: 'InvalidResponse',
      [200 /* Success */]: 'Success',
      [400 /* InvalidRequest */]: 'InvalidRequest',
      [401 /* AuthRequired */]: 'AuthenticationRequired',
      [403 /* Forbidden */]: 'Forbidden',
      [404 /* XRPCNotSupported */]: 'XRPCNotSupported',
      [413 /* PayloadTooLarge */]: 'PayloadTooLarge',
      [429 /* RateLimitExceeded */]: 'RateLimitExceeded',
      [500 /* InternalServerError */]: 'InternalServerError',
      [501 /* MethodNotImplemented */]: 'MethodNotImplemented',
      [502 /* UpstreamFailure */]: 'UpstreamFailure',
      [503 /* NotEnoughResources */]: 'NotEnoughResources',
      [504 /* UpstreamTimeout */]: 'UpstreamTimeout'
    }
    var ResponseTypeStrings = {
      [2 /* InvalidResponse */]: 'Invalid Response',
      [200 /* Success */]: 'Success',
      [400 /* InvalidRequest */]: 'Invalid Request',
      [401 /* AuthRequired */]: 'Authentication Required',
      [403 /* Forbidden */]: 'Forbidden',
      [404 /* XRPCNotSupported */]: 'XRPC Not Supported',
      [413 /* PayloadTooLarge */]: 'Payload Too Large',
      [429 /* RateLimitExceeded */]: 'Rate Limit Exceeded',
      [500 /* InternalServerError */]: 'Internal Server Error',
      [501 /* MethodNotImplemented */]: 'Method Not Implemented',
      [502 /* UpstreamFailure */]: 'Upstream Failure',
      [503 /* NotEnoughResources */]: 'Not Enough Resources',
      [504 /* UpstreamTimeout */]: 'Upstream Timeout'
    }
    var XRPCResponse = class {
      constructor(data, headers) {
        this.data = data
        this.headers = headers
        this.success = true
      }
    }
    var XRPCError = class extends Error {
      constructor(status, error, message, headers) {
        super(message || error || ResponseTypeStrings[status])
        this.status = status
        this.error = error
        this.success = false
        if (!this.error) {
          this.error = ResponseTypeNames[status]
        }
        this.headers = headers
      }
    }
    var XRPCInvalidResponseError = class extends XRPCError {
      constructor(lexiconNsid, validationError, responseBody) {
        super(
          2 /* InvalidResponse */,
          ResponseTypeStrings[2 /* InvalidResponse */],
          `The server gave an invalid response and may be out of date.`
        )
        this.lexiconNsid = lexiconNsid
        this.validationError = validationError
        this.responseBody = responseBody
      }
    }

    // ../xrpc/src/util.ts
    function getMethodSchemaHTTPMethod(schema2) {
      if (schema2.type === 'procedure') {
        return 'post'
      }
      return 'get'
    }
    function constructMethodCallUri(nsid2, schema2, serviceUri, params2) {
      const uri2 = new URL(serviceUri)
      uri2.pathname = `/xrpc/${nsid2}`
      if (params2) {
        for (const [key, value] of Object.entries(params2)) {
          const paramSchema = schema2.parameters?.properties?.[key]
          if (!paramSchema) {
            throw new Error(`Invalid query parameter: ${key}`)
          }
          if (value !== void 0) {
            if (paramSchema.type === 'array') {
              const vals = []
              vals.concat(value).forEach((val) => {
                uri2.searchParams.append(
                  key,
                  encodeQueryParam(paramSchema.items.type, val)
                )
              })
            } else {
              uri2.searchParams.set(
                key,
                encodeQueryParam(paramSchema.type, value)
              )
            }
          }
        }
      }
      return uri2.toString()
    }
    function encodeQueryParam(type, value) {
      if (type === 'string' || type === 'unknown') {
        return String(value)
      }
      if (type === 'float') {
        return String(Number(value))
      } else if (type === 'integer') {
        return String(Number(value) | 0)
      } else if (type === 'boolean') {
        return value ? 'true' : 'false'
      } else if (type === 'datetime') {
        if (value instanceof Date) {
          return value.toISOString()
        }
        return String(value)
      }
      throw new Error(`Unsupported query param type: ${type}`)
    }
    function normalizeHeaders(headers) {
      const normalized = {}
      for (const [header, value] of Object.entries(headers)) {
        normalized[header.toLowerCase()] = value
      }
      return normalized
    }
    function constructMethodCallHeaders(schema2, data, opts) {
      const headers = opts?.headers || {}
      if (schema2.type === 'procedure') {
        if (opts?.encoding) {
          headers['Content-Type'] = opts.encoding
        }
        if (data && typeof data === 'object') {
          if (!headers['Content-Type']) {
            headers['Content-Type'] = 'application/json'
          }
        }
      }
      return headers
    }
    function encodeMethodCallBody(headers, data) {
      if (!headers['content-type'] || typeof data === 'undefined') {
        return void 0
      }
      if (data instanceof ArrayBuffer) {
        return data
      }
      if (headers['content-type'].startsWith('text/')) {
        return new TextEncoder().encode(data.toString())
      }
      if (headers['content-type'].startsWith('application/json')) {
        return new TextEncoder().encode(stringifyLex(data))
      }
      return data
    }
    function httpResponseCodeToEnum(status) {
      let resCode
      if (status in ResponseType) {
        resCode = status
      } else if (status >= 100 && status < 200) {
        resCode = 404 /* XRPCNotSupported */
      } else if (status >= 200 && status < 300) {
        resCode = 200 /* Success */
      } else if (status >= 300 && status < 400) {
        resCode = 404 /* XRPCNotSupported */
      } else if (status >= 400 && status < 500) {
        resCode = 400 /* InvalidRequest */
      } else {
        resCode = 500 /* InternalServerError */
      }
      return resCode
    }
    function httpResponseBodyParse(mimeType, data) {
      if (mimeType) {
        if (mimeType.includes('application/json') && data?.byteLength) {
          try {
            const str = new TextDecoder().decode(data)
            return jsonStringToLex(str)
          } catch (e) {
            throw new XRPCError(
              2 /* InvalidResponse */,
              `Failed to parse response body: ${String(e)}`
            )
          }
        }
        if (mimeType.startsWith('text/') && data?.byteLength) {
          try {
            return new TextDecoder().decode(data)
          } catch (e) {
            throw new XRPCError(
              2 /* InvalidResponse */,
              `Failed to parse response body: ${String(e)}`
            )
          }
        }
      }
      if (data instanceof ArrayBuffer) {
        return new Uint8Array(data)
      }
      return data
    }

    // ../xrpc/src/client.ts
    var Client = class {
      constructor() {
        this.fetch = defaultFetchHandler
        this.lex = new Lexicons()
      }
      async call(serviceUri, methodNsid, params2, data, opts) {
        return this.service(serviceUri).call(methodNsid, params2, data, opts)
      }
      service(serviceUri) {
        return new ServiceClient(this, serviceUri)
      }
      addLexicon(doc) {
        this.lex.add(doc)
      }
      addLexicons(docs) {
        for (const doc of docs) {
          this.addLexicon(doc)
        }
      }
      removeLexicon(uri2) {
        this.lex.remove(uri2)
      }
    }
    var ServiceClient = class {
      constructor(baseClient, serviceUri) {
        this.headers = {}
        this.baseClient = baseClient
        this.uri =
          typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri
      }
      setHeader(key, value) {
        this.headers[key] = value
      }
      unsetHeader(key) {
        delete this.headers[key]
      }
      async call(methodNsid, params2, data, opts) {
        const def2 = this.baseClient.lex.getDefOrThrow(methodNsid)
        if (!def2 || (def2.type !== 'query' && def2.type !== 'procedure')) {
          throw new Error(
            `Invalid lexicon: ${methodNsid}. Must be a query or procedure.`
          )
        }
        const httpMethod = getMethodSchemaHTTPMethod(def2)
        const httpUri = constructMethodCallUri(
          methodNsid,
          def2,
          this.uri,
          params2
        )
        const httpHeaders = constructMethodCallHeaders(def2, data, {
          headers: {
            ...this.headers,
            ...opts?.headers
          },
          encoding: opts?.encoding
        })
        const res = await this.baseClient.fetch(
          httpUri,
          httpMethod,
          httpHeaders,
          data
        )
        const resCode = httpResponseCodeToEnum(res.status)
        if (resCode === 200 /* Success */) {
          try {
            this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body)
          } catch (e) {
            if (e instanceof ValidationError) {
              throw new XRPCInvalidResponseError(methodNsid, e, res.body)
            } else {
              throw e
            }
          }
          return new XRPCResponse(res.body, res.headers)
        } else {
          if (res.body && isErrorResponseBody(res.body)) {
            throw new XRPCError(
              resCode,
              res.body.error,
              res.body.message,
              res.headers
            )
          } else {
            throw new XRPCError(resCode)
          }
        }
      }
    }
    async function defaultFetchHandler(
      httpUri,
      httpMethod,
      httpHeaders,
      httpReqBody
    ) {
      try {
        const headers = normalizeHeaders(httpHeaders)
        const reqInit = {
          method: httpMethod,
          headers,
          body: encodeMethodCallBody(headers, httpReqBody),
          duplex: 'half'
        }
        const res = await fetch(httpUri, reqInit)
        const resBody = await res.arrayBuffer()
        return {
          status: res.status,
          headers: Object.fromEntries(res.headers.entries()),
          body: httpResponseBodyParse(res.headers.get('content-type'), resBody)
        }
      } catch (e) {
        throw new XRPCError(1 /* Unknown */, String(e))
      }
    }
    function isErrorResponseBody(v) {
      return errorResponseBody.safeParse(v).success
    }

    // ../xrpc/src/index.ts
    var defaultInst = new Client()

    // src/client/lexicons.ts
    var schemaDict = {
      ComAtprotoAdminDefs: {
        lexicon: 1,
        id: 'com.atproto.admin.defs',
        defs: {
          statusAttr: {
            type: 'object',
            required: ['applied'],
            properties: {
              applied: {
                type: 'boolean'
              },
              ref: {
                type: 'string'
              }
            }
          },
          modEventView: {
            type: 'object',
            required: [
              'id',
              'event',
              'subject',
              'subjectBlobCids',
              'createdBy',
              'createdAt'
            ],
            properties: {
              id: {
                type: 'integer'
              },
              event: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#modEventTakedown',
                  'lex:com.atproto.admin.defs#modEventReverseTakedown',
                  'lex:com.atproto.admin.defs#modEventComment',
                  'lex:com.atproto.admin.defs#modEventReport',
                  'lex:com.atproto.admin.defs#modEventLabel',
                  'lex:com.atproto.admin.defs#modEventAcknowledge',
                  'lex:com.atproto.admin.defs#modEventEscalate',
                  'lex:com.atproto.admin.defs#modEventMute',
                  'lex:com.atproto.admin.defs#modEventEmail'
                ]
              },
              subject: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#repoRef',
                  'lex:com.atproto.repo.strongRef'
                ]
              },
              subjectBlobCids: {
                type: 'array',
                items: {
                  type: 'string'
                }
              },
              createdBy: {
                type: 'string',
                format: 'did'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              creatorHandle: {
                type: 'string'
              },
              subjectHandle: {
                type: 'string'
              }
            }
          },
          modEventViewDetail: {
            type: 'object',
            required: [
              'id',
              'event',
              'subject',
              'subjectBlobs',
              'createdBy',
              'createdAt'
            ],
            properties: {
              id: {
                type: 'integer'
              },
              event: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#modEventTakedown',
                  'lex:com.atproto.admin.defs#modEventReverseTakedown',
                  'lex:com.atproto.admin.defs#modEventComment',
                  'lex:com.atproto.admin.defs#modEventReport',
                  'lex:com.atproto.admin.defs#modEventLabel',
                  'lex:com.atproto.admin.defs#modEventAcknowledge',
                  'lex:com.atproto.admin.defs#modEventEscalate',
                  'lex:com.atproto.admin.defs#modEventMute'
                ]
              },
              subject: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#repoView',
                  'lex:com.atproto.admin.defs#repoViewNotFound',
                  'lex:com.atproto.admin.defs#recordView',
                  'lex:com.atproto.admin.defs#recordViewNotFound'
                ]
              },
              subjectBlobs: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.admin.defs#blobView'
                }
              },
              createdBy: {
                type: 'string',
                format: 'did'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          reportView: {
            type: 'object',
            required: [
              'id',
              'reasonType',
              'subject',
              'reportedBy',
              'createdAt',
              'resolvedByActionIds'
            ],
            properties: {
              id: {
                type: 'integer'
              },
              reasonType: {
                type: 'ref',
                ref: 'lex:com.atproto.moderation.defs#reasonType'
              },
              comment: {
                type: 'string'
              },
              subjectRepoHandle: {
                type: 'string'
              },
              subject: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#repoRef',
                  'lex:com.atproto.repo.strongRef'
                ]
              },
              reportedBy: {
                type: 'string',
                format: 'did'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              resolvedByActionIds: {
                type: 'array',
                items: {
                  type: 'integer'
                }
              }
            }
          },
          subjectStatusView: {
            type: 'object',
            required: [
              'id',
              'subject',
              'createdAt',
              'updatedAt',
              'reviewState'
            ],
            properties: {
              id: {
                type: 'integer'
              },
              subject: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#repoRef',
                  'lex:com.atproto.repo.strongRef'
                ]
              },
              subjectBlobCids: {
                type: 'array',
                items: {
                  type: 'string',
                  format: 'cid'
                }
              },
              subjectRepoHandle: {
                type: 'string'
              },
              updatedAt: {
                type: 'string',
                format: 'datetime',
                description:
                  'Timestamp referencing when the last update was made to the moderation status of the subject'
              },
              createdAt: {
                type: 'string',
                format: 'datetime',
                description:
                  'Timestamp referencing the first moderation status impacting event was emitted on the subject'
              },
              reviewState: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#subjectReviewState'
              },
              comment: {
                type: 'string',
                description: 'Sticky comment on the subject.'
              },
              muteUntil: {
                type: 'string',
                format: 'datetime'
              },
              lastReviewedBy: {
                type: 'string',
                format: 'did'
              },
              lastReviewedAt: {
                type: 'string',
                format: 'datetime'
              },
              lastReportedAt: {
                type: 'string',
                format: 'datetime'
              },
              takendown: {
                type: 'boolean'
              },
              suspendUntil: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          reportViewDetail: {
            type: 'object',
            required: [
              'id',
              'reasonType',
              'subject',
              'reportedBy',
              'createdAt',
              'resolvedByActions'
            ],
            properties: {
              id: {
                type: 'integer'
              },
              reasonType: {
                type: 'ref',
                ref: 'lex:com.atproto.moderation.defs#reasonType'
              },
              comment: {
                type: 'string'
              },
              subject: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#repoView',
                  'lex:com.atproto.admin.defs#repoViewNotFound',
                  'lex:com.atproto.admin.defs#recordView',
                  'lex:com.atproto.admin.defs#recordViewNotFound'
                ]
              },
              subjectStatus: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#subjectStatusView'
              },
              reportedBy: {
                type: 'string',
                format: 'did'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              resolvedByActions: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.admin.defs#modEventView'
                }
              }
            }
          },
          repoView: {
            type: 'object',
            required: [
              'did',
              'handle',
              'relatedRecords',
              'indexedAt',
              'moderation'
            ],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              email: {
                type: 'string'
              },
              relatedRecords: {
                type: 'array',
                items: {
                  type: 'unknown'
                }
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              moderation: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#moderation'
              },
              invitedBy: {
                type: 'ref',
                ref: 'lex:com.atproto.server.defs#inviteCode'
              },
              invitesDisabled: {
                type: 'boolean'
              },
              inviteNote: {
                type: 'string'
              }
            }
          },
          repoViewDetail: {
            type: 'object',
            required: [
              'did',
              'handle',
              'relatedRecords',
              'indexedAt',
              'moderation'
            ],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              email: {
                type: 'string'
              },
              relatedRecords: {
                type: 'array',
                items: {
                  type: 'unknown'
                }
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              moderation: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#moderationDetail'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              },
              invitedBy: {
                type: 'ref',
                ref: 'lex:com.atproto.server.defs#inviteCode'
              },
              invites: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.server.defs#inviteCode'
                }
              },
              invitesDisabled: {
                type: 'boolean'
              },
              inviteNote: {
                type: 'string'
              },
              emailConfirmedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          accountView: {
            type: 'object',
            required: ['did', 'handle', 'indexedAt'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              email: {
                type: 'string'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              invitedBy: {
                type: 'ref',
                ref: 'lex:com.atproto.server.defs#inviteCode'
              },
              invites: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.server.defs#inviteCode'
                }
              },
              invitesDisabled: {
                type: 'boolean'
              },
              emailConfirmedAt: {
                type: 'string',
                format: 'datetime'
              },
              inviteNote: {
                type: 'string'
              }
            }
          },
          repoViewNotFound: {
            type: 'object',
            required: ['did'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              }
            }
          },
          repoRef: {
            type: 'object',
            required: ['did'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              }
            }
          },
          repoBlobRef: {
            type: 'object',
            required: ['did', 'cid'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              recordUri: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          recordView: {
            type: 'object',
            required: [
              'uri',
              'cid',
              'value',
              'blobCids',
              'indexedAt',
              'moderation',
              'repo'
            ],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              value: {
                type: 'unknown'
              },
              blobCids: {
                type: 'array',
                items: {
                  type: 'string',
                  format: 'cid'
                }
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              moderation: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#moderation'
              },
              repo: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#repoView'
              }
            }
          },
          recordViewDetail: {
            type: 'object',
            required: [
              'uri',
              'cid',
              'value',
              'blobs',
              'indexedAt',
              'moderation',
              'repo'
            ],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              value: {
                type: 'unknown'
              },
              blobs: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.admin.defs#blobView'
                }
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              moderation: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#moderationDetail'
              },
              repo: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#repoView'
              }
            }
          },
          recordViewNotFound: {
            type: 'object',
            required: ['uri'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          moderation: {
            type: 'object',
            properties: {
              subjectStatus: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#subjectStatusView'
              }
            }
          },
          moderationDetail: {
            type: 'object',
            properties: {
              subjectStatus: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#subjectStatusView'
              }
            }
          },
          blobView: {
            type: 'object',
            required: ['cid', 'mimeType', 'size', 'createdAt'],
            properties: {
              cid: {
                type: 'string',
                format: 'cid'
              },
              mimeType: {
                type: 'string'
              },
              size: {
                type: 'integer'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              details: {
                type: 'union',
                refs: [
                  'lex:com.atproto.admin.defs#imageDetails',
                  'lex:com.atproto.admin.defs#videoDetails'
                ]
              },
              moderation: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#moderation'
              }
            }
          },
          imageDetails: {
            type: 'object',
            required: ['width', 'height'],
            properties: {
              width: {
                type: 'integer'
              },
              height: {
                type: 'integer'
              }
            }
          },
          videoDetails: {
            type: 'object',
            required: ['width', 'height', 'length'],
            properties: {
              width: {
                type: 'integer'
              },
              height: {
                type: 'integer'
              },
              length: {
                type: 'integer'
              }
            }
          },
          subjectReviewState: {
            type: 'string',
            knownValues: [
              'lex:com.atproto.admin.defs#reviewOpen',
              'lex:com.atproto.admin.defs#reviewEscalated',
              'lex:com.atproto.admin.defs#reviewClosed'
            ]
          },
          reviewOpen: {
            type: 'token',
            description:
              'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator'
          },
          reviewEscalated: {
            type: 'token',
            description:
              'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator'
          },
          reviewClosed: {
            type: 'token',
            description:
              'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator'
          },
          modEventTakedown: {
            type: 'object',
            description: 'Take down a subject permanently or temporarily',
            properties: {
              comment: {
                type: 'string'
              },
              durationInHours: {
                type: 'integer',
                description:
                  'Indicates how long the takedown should be in effect before automatically expiring.'
              }
            }
          },
          modEventReverseTakedown: {
            type: 'object',
            description: 'Revert take down action on a subject',
            properties: {
              comment: {
                type: 'string',
                description: 'Describe reasoning behind the reversal.'
              }
            }
          },
          modEventComment: {
            type: 'object',
            description: 'Add a comment to a subject',
            required: ['comment'],
            properties: {
              comment: {
                type: 'string'
              },
              sticky: {
                type: 'boolean',
                description: 'Make the comment persistent on the subject'
              }
            }
          },
          modEventReport: {
            type: 'object',
            description: 'Report a subject',
            required: ['reportType'],
            properties: {
              comment: {
                type: 'string'
              },
              reportType: {
                type: 'ref',
                ref: 'lex:com.atproto.moderation.defs#reasonType'
              }
            }
          },
          modEventLabel: {
            type: 'object',
            description: 'Apply/Negate labels on a subject',
            required: ['createLabelVals', 'negateLabelVals'],
            properties: {
              comment: {
                type: 'string'
              },
              createLabelVals: {
                type: 'array',
                items: {
                  type: 'string'
                }
              },
              negateLabelVals: {
                type: 'array',
                items: {
                  type: 'string'
                }
              }
            }
          },
          modEventAcknowledge: {
            type: 'object',
            properties: {
              comment: {
                type: 'string'
              }
            }
          },
          modEventEscalate: {
            type: 'object',
            properties: {
              comment: {
                type: 'string'
              }
            }
          },
          modEventMute: {
            type: 'object',
            description: 'Mute incoming reports on a subject',
            required: ['durationInHours'],
            properties: {
              comment: {
                type: 'string'
              },
              durationInHours: {
                type: 'integer',
                description:
                  'Indicates how long the subject should remain muted.'
              }
            }
          },
          modEventUnmute: {
            type: 'object',
            description: 'Unmute action on a subject',
            properties: {
              comment: {
                type: 'string',
                description: 'Describe reasoning behind the reversal.'
              }
            }
          },
          modEventEmail: {
            type: 'object',
            description: 'Keep a log of outgoing email to a user',
            required: ['subjectLine'],
            properties: {
              subjectLine: {
                type: 'string',
                description: 'The subject line of the email sent to the user.'
              }
            }
          }
        }
      },
      ComAtprotoAdminDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.admin.deleteAccount',
        defs: {
          main: {
            type: 'procedure',
            description: 'Delete a user account as an administrator.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['did'],
                properties: {
                  did: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminDisableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.disableAccountInvites',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Disable an account from receiving new invite codes, but does not invalidate existing codes.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['account'],
                properties: {
                  account: {
                    type: 'string',
                    format: 'did'
                  },
                  note: {
                    type: 'string',
                    description: 'Optional reason for disabled invites.'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminDisableInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.disableInviteCodes',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Disable some set of codes and/or all codes associated with a set of users.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                properties: {
                  codes: {
                    type: 'array',
                    items: {
                      type: 'string'
                    }
                  },
                  accounts: {
                    type: 'array',
                    items: {
                      type: 'string'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminEmitModerationEvent: {
        lexicon: 1,
        id: 'com.atproto.admin.emitModerationEvent',
        defs: {
          main: {
            type: 'procedure',
            description: 'Take a moderation action on an actor.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['event', 'subject', 'createdBy'],
                properties: {
                  event: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#modEventTakedown',
                      'lex:com.atproto.admin.defs#modEventAcknowledge',
                      'lex:com.atproto.admin.defs#modEventEscalate',
                      'lex:com.atproto.admin.defs#modEventComment',
                      'lex:com.atproto.admin.defs#modEventLabel',
                      'lex:com.atproto.admin.defs#modEventReport',
                      'lex:com.atproto.admin.defs#modEventMute',
                      'lex:com.atproto.admin.defs#modEventReverseTakedown',
                      'lex:com.atproto.admin.defs#modEventUnmute',
                      'lex:com.atproto.admin.defs#modEventEmail'
                    ]
                  },
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef'
                    ]
                  },
                  subjectBlobCids: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'cid'
                    }
                  },
                  createdBy: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#modEventView'
              }
            },
            errors: [
              {
                name: 'SubjectHasAction'
              }
            ]
          }
        }
      },
      ComAtprotoAdminEnableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.enableAccountInvites',
        defs: {
          main: {
            type: 'procedure',
            description:
              "Re-enable an account's ability to receive invite codes.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['account'],
                properties: {
                  account: {
                    type: 'string',
                    format: 'did'
                  },
                  note: {
                    type: 'string',
                    description: 'Optional reason for enabled invites.'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminGetAccountInfo: {
        lexicon: 1,
        id: 'com.atproto.admin.getAccountInfo',
        defs: {
          main: {
            type: 'query',
            description: 'Get details about an account.',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#accountView'
              }
            }
          }
        }
      },
      ComAtprotoAdminGetInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.getInviteCodes',
        defs: {
          main: {
            type: 'query',
            description: 'Get an admin view of invite codes.',
            parameters: {
              type: 'params',
              properties: {
                sort: {
                  type: 'string',
                  knownValues: ['recent', 'usage'],
                  default: 'recent'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 500,
                  default: 100
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['codes'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  codes: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.server.defs#inviteCode'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminGetModerationEvent: {
        lexicon: 1,
        id: 'com.atproto.admin.getModerationEvent',
        defs: {
          main: {
            type: 'query',
            description: 'Get details about a moderation event.',
            parameters: {
              type: 'params',
              required: ['id'],
              properties: {
                id: {
                  type: 'integer'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#modEventViewDetail'
              }
            }
          }
        }
      },
      ComAtprotoAdminGetRecord: {
        lexicon: 1,
        id: 'com.atproto.admin.getRecord',
        defs: {
          main: {
            type: 'query',
            description: 'Get details about a record.',
            parameters: {
              type: 'params',
              required: ['uri'],
              properties: {
                uri: {
                  type: 'string',
                  format: 'at-uri'
                },
                cid: {
                  type: 'string',
                  format: 'cid'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#recordViewDetail'
              }
            },
            errors: [
              {
                name: 'RecordNotFound'
              }
            ]
          }
        }
      },
      ComAtprotoAdminGetRepo: {
        lexicon: 1,
        id: 'com.atproto.admin.getRepo',
        defs: {
          main: {
            type: 'query',
            description: 'Get details about a repository.',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.admin.defs#repoViewDetail'
              }
            },
            errors: [
              {
                name: 'RepoNotFound'
              }
            ]
          }
        }
      },
      ComAtprotoAdminGetSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.getSubjectStatus',
        defs: {
          main: {
            type: 'query',
            description:
              'Get the service-specific admin status of a subject (account, record, or blob).',
            parameters: {
              type: 'params',
              properties: {
                did: {
                  type: 'string',
                  format: 'did'
                },
                uri: {
                  type: 'string',
                  format: 'at-uri'
                },
                blob: {
                  type: 'string',
                  format: 'cid'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subject'],
                properties: {
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef',
                      'lex:com.atproto.admin.defs#repoBlobRef'
                    ]
                  },
                  takedown: {
                    type: 'ref',
                    ref: 'lex:com.atproto.admin.defs#statusAttr'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminQueryModerationEvents: {
        lexicon: 1,
        id: 'com.atproto.admin.queryModerationEvents',
        defs: {
          main: {
            type: 'query',
            description: 'List moderation events related to a subject.',
            parameters: {
              type: 'params',
              properties: {
                types: {
                  type: 'array',
                  items: {
                    type: 'string'
                  },
                  description:
                    'The types of events (fully qualified string in the format of com.atproto.admin#modEvent<name>) to filter by. If not specified, all events are returned.'
                },
                createdBy: {
                  type: 'string',
                  format: 'did'
                },
                sortDirection: {
                  type: 'string',
                  default: 'desc',
                  enum: ['asc', 'desc'],
                  description:
                    'Sort direction for the events. Defaults to descending order of created at timestamp.'
                },
                subject: {
                  type: 'string',
                  format: 'uri'
                },
                includeAllUserRecords: {
                  type: 'boolean',
                  default: false,
                  description:
                    'If true, events on all record types (posts, lists, profile etc.) owned by the did are returned'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['events'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  events: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.admin.defs#modEventView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminQueryModerationStatuses: {
        lexicon: 1,
        id: 'com.atproto.admin.queryModerationStatuses',
        defs: {
          main: {
            type: 'query',
            description:
              'View moderation statuses of subjects (record or repo).',
            parameters: {
              type: 'params',
              properties: {
                subject: {
                  type: 'string',
                  format: 'uri'
                },
                comment: {
                  type: 'string',
                  description: 'Search subjects by keyword from comments'
                },
                reportedAfter: {
                  type: 'string',
                  format: 'datetime',
                  description:
                    'Search subjects reported after a given timestamp'
                },
                reportedBefore: {
                  type: 'string',
                  format: 'datetime',
                  description:
                    'Search subjects reported before a given timestamp'
                },
                reviewedAfter: {
                  type: 'string',
                  format: 'datetime',
                  description:
                    'Search subjects reviewed after a given timestamp'
                },
                reviewedBefore: {
                  type: 'string',
                  format: 'datetime',
                  description:
                    'Search subjects reviewed before a given timestamp'
                },
                includeMuted: {
                  type: 'boolean',
                  description:
                    "By default, we don't include muted subjects in the results. Set this to true to include them."
                },
                reviewState: {
                  type: 'string',
                  description:
                    'Specify when fetching subjects in a certain state'
                },
                ignoreSubjects: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'uri'
                  }
                },
                lastReviewedBy: {
                  type: 'string',
                  format: 'did',
                  description:
                    'Get all subject statuses that were reviewed by a specific moderator'
                },
                sortField: {
                  type: 'string',
                  default: 'lastReportedAt',
                  enum: ['lastReviewedAt', 'lastReportedAt']
                },
                sortDirection: {
                  type: 'string',
                  default: 'desc',
                  enum: ['asc', 'desc']
                },
                takendown: {
                  type: 'boolean',
                  description: 'Get subjects that were taken down'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subjectStatuses'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  subjectStatuses: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.admin.defs#subjectStatusView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminSearchRepos: {
        lexicon: 1,
        id: 'com.atproto.admin.searchRepos',
        defs: {
          main: {
            type: 'query',
            description: 'Find repositories based on a search term.',
            parameters: {
              type: 'params',
              properties: {
                term: {
                  type: 'string',
                  description: "DEPRECATED: use 'q' instead"
                },
                q: {
                  type: 'string'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repos'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  repos: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.admin.defs#repoView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminSendEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.sendEmail',
        defs: {
          main: {
            type: 'procedure',
            description: "Send email to a user's account email address.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['recipientDid', 'content', 'senderDid'],
                properties: {
                  recipientDid: {
                    type: 'string',
                    format: 'did'
                  },
                  content: {
                    type: 'string'
                  },
                  subject: {
                    type: 'string'
                  },
                  senderDid: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['sent'],
                properties: {
                  sent: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateAccountEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountEmail',
        defs: {
          main: {
            type: 'procedure',
            description: "Administrative action to update an account's email.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['account', 'email'],
                properties: {
                  account: {
                    type: 'string',
                    format: 'at-identifier',
                    description: 'The handle or DID of the repo.'
                  },
                  email: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateAccountHandle: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountHandle',
        defs: {
          main: {
            type: 'procedure',
            description: "Administrative action to update an account's handle.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['did', 'handle'],
                properties: {
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.updateSubjectStatus',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Update the service-specific admin status of a subject (account, record, or blob).',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subject'],
                properties: {
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef',
                      'lex:com.atproto.admin.defs#repoBlobRef'
                    ]
                  },
                  takedown: {
                    type: 'ref',
                    ref: 'lex:com.atproto.admin.defs#statusAttr'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subject'],
                properties: {
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef',
                      'lex:com.atproto.admin.defs#repoBlobRef'
                    ]
                  },
                  takedown: {
                    type: 'ref',
                    ref: 'lex:com.atproto.admin.defs#statusAttr'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentityResolveHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.resolveHandle',
        defs: {
          main: {
            type: 'query',
            description: 'Provides the DID of a repo.',
            parameters: {
              type: 'params',
              required: ['handle'],
              properties: {
                handle: {
                  type: 'string',
                  format: 'handle',
                  description: 'The handle to resolve.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['did'],
                properties: {
                  did: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentityUpdateHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.updateHandle',
        defs: {
          main: {
            type: 'procedure',
            description: 'Updates the handle of the account.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['handle'],
                properties: {
                  handle: {
                    type: 'string',
                    format: 'handle'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoLabelDefs: {
        lexicon: 1,
        id: 'com.atproto.label.defs',
        defs: {
          label: {
            type: 'object',
            description:
              'Metadata tag on an atproto resource (eg, repo or record).',
            required: ['src', 'uri', 'val', 'cts'],
            properties: {
              src: {
                type: 'string',
                format: 'did',
                description: 'DID of the actor who created this label.'
              },
              uri: {
                type: 'string',
                format: 'uri',
                description:
                  'AT URI of the record, repository (account), or other resource that this label applies to.'
              },
              cid: {
                type: 'string',
                format: 'cid',
                description:
                  "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
              },
              val: {
                type: 'string',
                maxLength: 128,
                description:
                  'The short string name of the value or type of this label.'
              },
              neg: {
                type: 'boolean',
                description:
                  'If true, this is a negation label, overwriting a previous label.'
              },
              cts: {
                type: 'string',
                format: 'datetime',
                description: 'Timestamp when this label was created.'
              }
            }
          },
          selfLabels: {
            type: 'object',
            description:
              'Metadata tags on an atproto record, published by the author within the record.',
            required: ['values'],
            properties: {
              values: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#selfLabel'
                },
                maxLength: 10
              }
            }
          },
          selfLabel: {
            type: 'object',
            description:
              'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',
            required: ['val'],
            properties: {
              val: {
                type: 'string',
                maxLength: 128,
                description:
                  'The short string name of the value or type of this label.'
              }
            }
          }
        }
      },
      ComAtprotoLabelQueryLabels: {
        lexicon: 1,
        id: 'com.atproto.label.queryLabels',
        defs: {
          main: {
            type: 'query',
            description: 'Find labels relevant to the provided URI patterns.',
            parameters: {
              type: 'params',
              required: ['uriPatterns'],
              properties: {
                uriPatterns: {
                  type: 'array',
                  items: {
                    type: 'string'
                  },
                  description:
                    "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                },
                sources: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'did'
                  },
                  description:
                    'Optional list of label sources (DIDs) to filter on.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 250,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['labels'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  labels: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.label.defs#label'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoLabelSubscribeLabels: {
        lexicon: 1,
        id: 'com.atproto.label.subscribeLabels',
        defs: {
          main: {
            type: 'subscription',
            description: 'Subscribe to label updates.',
            parameters: {
              type: 'params',
              properties: {
                cursor: {
                  type: 'integer',
                  description: 'The last known event to backfill from.'
                }
              }
            },
            message: {
              schema: {
                type: 'union',
                refs: [
                  'lex:com.atproto.label.subscribeLabels#labels',
                  'lex:com.atproto.label.subscribeLabels#info'
                ]
              }
            },
            errors: [
              {
                name: 'FutureCursor'
              }
            ]
          },
          labels: {
            type: 'object',
            required: ['seq', 'labels'],
            properties: {
              seq: {
                type: 'integer'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              }
            }
          },
          info: {
            type: 'object',
            required: ['name'],
            properties: {
              name: {
                type: 'string',
                knownValues: ['OutdatedCursor']
              },
              message: {
                type: 'string'
              }
            }
          }
        }
      },
      ComAtprotoModerationCreateReport: {
        lexicon: 1,
        id: 'com.atproto.moderation.createReport',
        defs: {
          main: {
            type: 'procedure',
            description: 'Report a repo or a record.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['reasonType', 'subject'],
                properties: {
                  reasonType: {
                    type: 'ref',
                    ref: 'lex:com.atproto.moderation.defs#reasonType'
                  },
                  reason: {
                    type: 'string'
                  },
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef'
                    ]
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: [
                  'id',
                  'reasonType',
                  'subject',
                  'reportedBy',
                  'createdAt'
                ],
                properties: {
                  id: {
                    type: 'integer'
                  },
                  reasonType: {
                    type: 'ref',
                    ref: 'lex:com.atproto.moderation.defs#reasonType'
                  },
                  reason: {
                    type: 'string',
                    maxGraphemes: 2e3,
                    maxLength: 2e4
                  },
                  subject: {
                    type: 'union',
                    refs: [
                      'lex:com.atproto.admin.defs#repoRef',
                      'lex:com.atproto.repo.strongRef'
                    ]
                  },
                  reportedBy: {
                    type: 'string',
                    format: 'did'
                  },
                  createdAt: {
                    type: 'string',
                    format: 'datetime'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoModerationDefs: {
        lexicon: 1,
        id: 'com.atproto.moderation.defs',
        defs: {
          reasonType: {
            type: 'string',
            knownValues: [
              'com.atproto.moderation.defs#reasonSpam',
              'com.atproto.moderation.defs#reasonViolation',
              'com.atproto.moderation.defs#reasonMisleading',
              'com.atproto.moderation.defs#reasonSexual',
              'com.atproto.moderation.defs#reasonRude',
              'com.atproto.moderation.defs#reasonOther'
            ]
          },
          reasonSpam: {
            type: 'token',
            description: 'Spam: frequent unwanted promotion, replies, mentions'
          },
          reasonViolation: {
            type: 'token',
            description:
              'Direct violation of server rules, laws, terms of service'
          },
          reasonMisleading: {
            type: 'token',
            description: 'Misleading identity, affiliation, or content'
          },
          reasonSexual: {
            type: 'token',
            description: 'Unwanted or mislabeled sexual content'
          },
          reasonRude: {
            type: 'token',
            description:
              'Rude, harassing, explicit, or otherwise unwelcoming behavior'
          },
          reasonOther: {
            type: 'token',
            description:
              'Other: reports not falling under another report category'
          }
        }
      },
      ComAtprotoRepoApplyWrites: {
        lexicon: 1,
        id: 'com.atproto.repo.applyWrites',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Apply a batch transaction of creates, updates, and deletes.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repo', 'writes'],
                properties: {
                  repo: {
                    type: 'string',
                    format: 'at-identifier',
                    description: 'The handle or DID of the repo.'
                  },
                  validate: {
                    type: 'boolean',
                    default: true,
                    description: 'Flag for validating the records.'
                  },
                  writes: {
                    type: 'array',
                    items: {
                      type: 'union',
                      refs: [
                        'lex:com.atproto.repo.applyWrites#create',
                        'lex:com.atproto.repo.applyWrites#update',
                        'lex:com.atproto.repo.applyWrites#delete'
                      ],
                      closed: true
                    }
                  },
                  swapCommit: {
                    type: 'string',
                    format: 'cid'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidSwap'
              }
            ]
          },
          create: {
            type: 'object',
            description: 'Create a new record.',
            required: ['collection', 'value'],
            properties: {
              collection: {
                type: 'string',
                format: 'nsid'
              },
              rkey: {
                type: 'string',
                maxLength: 15
              },
              value: {
                type: 'unknown'
              }
            }
          },
          update: {
            type: 'object',
            description: 'Update an existing record.',
            required: ['collection', 'rkey', 'value'],
            properties: {
              collection: {
                type: 'string',
                format: 'nsid'
              },
              rkey: {
                type: 'string'
              },
              value: {
                type: 'unknown'
              }
            }
          },
          delete: {
            type: 'object',
            description: 'Delete an existing record.',
            required: ['collection', 'rkey'],
            properties: {
              collection: {
                type: 'string',
                format: 'nsid'
              },
              rkey: {
                type: 'string'
              }
            }
          }
        }
      },
      ComAtprotoRepoCreateRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.createRecord',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create a new record.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repo', 'collection', 'record'],
                properties: {
                  repo: {
                    type: 'string',
                    format: 'at-identifier',
                    description: 'The handle or DID of the repo.'
                  },
                  collection: {
                    type: 'string',
                    format: 'nsid',
                    description: 'The NSID of the record collection.'
                  },
                  rkey: {
                    type: 'string',
                    description: 'The key of the record.',
                    maxLength: 15
                  },
                  validate: {
                    type: 'boolean',
                    default: true,
                    description: 'Flag for validating the record.'
                  },
                  record: {
                    type: 'unknown',
                    description: 'The record to create.'
                  },
                  swapCommit: {
                    type: 'string',
                    format: 'cid',
                    description:
                      'Compare and swap with the previous commit by CID.'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['uri', 'cid'],
                properties: {
                  uri: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  cid: {
                    type: 'string',
                    format: 'cid'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidSwap'
              }
            ]
          }
        }
      },
      ComAtprotoRepoDeleteRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.deleteRecord',
        defs: {
          main: {
            type: 'procedure',
            description: "Delete a record, or ensure it doesn't exist.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repo', 'collection', 'rkey'],
                properties: {
                  repo: {
                    type: 'string',
                    format: 'at-identifier',
                    description: 'The handle or DID of the repo.'
                  },
                  collection: {
                    type: 'string',
                    format: 'nsid',
                    description: 'The NSID of the record collection.'
                  },
                  rkey: {
                    type: 'string',
                    description: 'The key of the record.'
                  },
                  swapRecord: {
                    type: 'string',
                    format: 'cid',
                    description:
                      'Compare and swap with the previous record by CID.'
                  },
                  swapCommit: {
                    type: 'string',
                    format: 'cid',
                    description:
                      'Compare and swap with the previous commit by CID.'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidSwap'
              }
            ]
          }
        }
      },
      ComAtprotoRepoDescribeRepo: {
        lexicon: 1,
        id: 'com.atproto.repo.describeRepo',
        defs: {
          main: {
            type: 'query',
            description:
              'Get information about the repo, including the list of collections.',
            parameters: {
              type: 'params',
              required: ['repo'],
              properties: {
                repo: {
                  type: 'string',
                  format: 'at-identifier',
                  description: 'The handle or DID of the repo.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: [
                  'handle',
                  'did',
                  'didDoc',
                  'collections',
                  'handleIsCorrect'
                ],
                properties: {
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  didDoc: {
                    type: 'unknown'
                  },
                  collections: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'nsid'
                    }
                  },
                  handleIsCorrect: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoRepoGetRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.getRecord',
        defs: {
          main: {
            type: 'query',
            description: 'Get a record.',
            parameters: {
              type: 'params',
              required: ['repo', 'collection', 'rkey'],
              properties: {
                repo: {
                  type: 'string',
                  format: 'at-identifier',
                  description: 'The handle or DID of the repo.'
                },
                collection: {
                  type: 'string',
                  format: 'nsid',
                  description: 'The NSID of the record collection.'
                },
                rkey: {
                  type: 'string',
                  description: 'The key of the record.'
                },
                cid: {
                  type: 'string',
                  format: 'cid',
                  description:
                    'The CID of the version of the record. If not specified, then return the most recent version.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['uri', 'value'],
                properties: {
                  uri: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  cid: {
                    type: 'string',
                    format: 'cid'
                  },
                  value: {
                    type: 'unknown'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoRepoListRecords: {
        lexicon: 1,
        id: 'com.atproto.repo.listRecords',
        defs: {
          main: {
            type: 'query',
            description: 'List a range of records in a collection.',
            parameters: {
              type: 'params',
              required: ['repo', 'collection'],
              properties: {
                repo: {
                  type: 'string',
                  format: 'at-identifier',
                  description: 'The handle or DID of the repo.'
                },
                collection: {
                  type: 'string',
                  format: 'nsid',
                  description: 'The NSID of the record type.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50,
                  description: 'The number of records to return.'
                },
                cursor: {
                  type: 'string'
                },
                rkeyStart: {
                  type: 'string',
                  description:
                    'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)'
                },
                rkeyEnd: {
                  type: 'string',
                  description:
                    'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)'
                },
                reverse: {
                  type: 'boolean',
                  description:
                    'Flag to reverse the order of the returned records.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['records'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  records: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.repo.listRecords#record'
                    }
                  }
                }
              }
            }
          },
          record: {
            type: 'object',
            required: ['uri', 'cid', 'value'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              value: {
                type: 'unknown'
              }
            }
          }
        }
      },
      ComAtprotoRepoPutRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.putRecord',
        defs: {
          main: {
            type: 'procedure',
            description: 'Write a record, creating or updating it as needed.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repo', 'collection', 'rkey', 'record'],
                nullable: ['swapRecord'],
                properties: {
                  repo: {
                    type: 'string',
                    format: 'at-identifier',
                    description: 'The handle or DID of the repo.'
                  },
                  collection: {
                    type: 'string',
                    format: 'nsid',
                    description: 'The NSID of the record collection.'
                  },
                  rkey: {
                    type: 'string',
                    description: 'The key of the record.',
                    maxLength: 15
                  },
                  validate: {
                    type: 'boolean',
                    default: true,
                    description: 'Flag for validating the record.'
                  },
                  record: {
                    type: 'unknown',
                    description: 'The record to write.'
                  },
                  swapRecord: {
                    type: 'string',
                    format: 'cid',
                    description:
                      'Compare and swap with the previous record by CID.'
                  },
                  swapCommit: {
                    type: 'string',
                    format: 'cid',
                    description:
                      'Compare and swap with the previous commit by CID.'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['uri', 'cid'],
                properties: {
                  uri: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  cid: {
                    type: 'string',
                    format: 'cid'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidSwap'
              }
            ]
          }
        }
      },
      ComAtprotoRepoStrongRef: {
        lexicon: 1,
        id: 'com.atproto.repo.strongRef',
        description: 'A URI with a content-hash fingerprint.',
        defs: {
          main: {
            type: 'object',
            required: ['uri', 'cid'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              }
            }
          }
        }
      },
      ComAtprotoRepoUploadBlob: {
        lexicon: 1,
        id: 'com.atproto.repo.uploadBlob',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Upload a new blob to be added to repo in a later request.',
            input: {
              encoding: '*/*'
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['blob'],
                properties: {
                  blob: {
                    type: 'blob'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerConfirmEmail: {
        lexicon: 1,
        id: 'com.atproto.server.confirmEmail',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['email', 'token'],
                properties: {
                  email: {
                    type: 'string'
                  },
                  token: {
                    type: 'string'
                  }
                }
              }
            },
            errors: [
              {
                name: 'AccountNotFound'
              },
              {
                name: 'ExpiredToken'
              },
              {
                name: 'InvalidToken'
              },
              {
                name: 'InvalidEmail'
              }
            ]
          }
        }
      },
      ComAtprotoServerCreateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.createAccount',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create an account.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['handle'],
                properties: {
                  email: {
                    type: 'string'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  inviteCode: {
                    type: 'string'
                  },
                  password: {
                    type: 'string'
                  },
                  recoveryKey: {
                    type: 'string'
                  },
                  plcOp: {
                    type: 'unknown'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
                properties: {
                  accessJwt: {
                    type: 'string'
                  },
                  refreshJwt: {
                    type: 'string'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  didDoc: {
                    type: 'unknown'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidHandle'
              },
              {
                name: 'InvalidPassword'
              },
              {
                name: 'InvalidInviteCode'
              },
              {
                name: 'HandleNotAvailable'
              },
              {
                name: 'UnsupportedDomain'
              },
              {
                name: 'UnresolvableDid'
              },
              {
                name: 'IncompatibleDidDoc'
              }
            ]
          }
        }
      },
      ComAtprotoServerCreateAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.createAppPassword',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create an App Password.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['name'],
                properties: {
                  name: {
                    type: 'string'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:com.atproto.server.createAppPassword#appPassword'
              }
            },
            errors: [
              {
                name: 'AccountTakedown'
              }
            ]
          },
          appPassword: {
            type: 'object',
            required: ['name', 'password', 'createdAt'],
            properties: {
              name: {
                type: 'string'
              },
              password: {
                type: 'string'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          }
        }
      },
      ComAtprotoServerCreateInviteCode: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCode',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create an invite code.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['useCount'],
                properties: {
                  useCount: {
                    type: 'integer'
                  },
                  forAccount: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['code'],
                properties: {
                  code: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerCreateInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCodes',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create invite codes.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['codeCount', 'useCount'],
                properties: {
                  codeCount: {
                    type: 'integer',
                    default: 1
                  },
                  useCount: {
                    type: 'integer'
                  },
                  forAccounts: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'did'
                    }
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['codes'],
                properties: {
                  codes: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.server.createInviteCodes#accountCodes'
                    }
                  }
                }
              }
            }
          },
          accountCodes: {
            type: 'object',
            required: ['account', 'codes'],
            properties: {
              account: {
                type: 'string'
              },
              codes: {
                type: 'array',
                items: {
                  type: 'string'
                }
              }
            }
          }
        }
      },
      ComAtprotoServerCreateSession: {
        lexicon: 1,
        id: 'com.atproto.server.createSession',
        defs: {
          main: {
            type: 'procedure',
            description: 'Create an authentication session.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['identifier', 'password'],
                properties: {
                  identifier: {
                    type: 'string',
                    description:
                      'Handle or other identifier supported by the server for the authenticating user.'
                  },
                  password: {
                    type: 'string'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
                properties: {
                  accessJwt: {
                    type: 'string'
                  },
                  refreshJwt: {
                    type: 'string'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  didDoc: {
                    type: 'unknown'
                  },
                  email: {
                    type: 'string'
                  },
                  emailConfirmed: {
                    type: 'boolean'
                  }
                }
              }
            },
            errors: [
              {
                name: 'AccountTakedown'
              }
            ]
          }
        }
      },
      ComAtprotoServerDefs: {
        lexicon: 1,
        id: 'com.atproto.server.defs',
        defs: {
          inviteCode: {
            type: 'object',
            required: [
              'code',
              'available',
              'disabled',
              'forAccount',
              'createdBy',
              'createdAt',
              'uses'
            ],
            properties: {
              code: {
                type: 'string'
              },
              available: {
                type: 'integer'
              },
              disabled: {
                type: 'boolean'
              },
              forAccount: {
                type: 'string'
              },
              createdBy: {
                type: 'string'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              uses: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.server.defs#inviteCodeUse'
                }
              }
            }
          },
          inviteCodeUse: {
            type: 'object',
            required: ['usedBy', 'usedAt'],
            properties: {
              usedBy: {
                type: 'string',
                format: 'did'
              },
              usedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          }
        }
      },
      ComAtprotoServerDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.server.deleteAccount',
        defs: {
          main: {
            type: 'procedure',
            description: "Delete an actor's account with a token and password.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['did', 'password', 'token'],
                properties: {
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  password: {
                    type: 'string'
                  },
                  token: {
                    type: 'string'
                  }
                }
              }
            },
            errors: [
              {
                name: 'ExpiredToken'
              },
              {
                name: 'InvalidToken'
              }
            ]
          }
        }
      },
      ComAtprotoServerDeleteSession: {
        lexicon: 1,
        id: 'com.atproto.server.deleteSession',
        defs: {
          main: {
            type: 'procedure',
            description: 'Delete the current session.'
          }
        }
      },
      ComAtprotoServerDescribeServer: {
        lexicon: 1,
        id: 'com.atproto.server.describeServer',
        defs: {
          main: {
            type: 'query',
            description:
              "Get a document describing the service's accounts configuration.",
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['availableUserDomains'],
                properties: {
                  inviteCodeRequired: {
                    type: 'boolean'
                  },
                  availableUserDomains: {
                    type: 'array',
                    items: {
                      type: 'string'
                    }
                  },
                  links: {
                    type: 'ref',
                    ref: 'lex:com.atproto.server.describeServer#links'
                  }
                }
              }
            }
          },
          links: {
            type: 'object',
            properties: {
              privacyPolicy: {
                type: 'string'
              },
              termsOfService: {
                type: 'string'
              }
            }
          }
        }
      },
      ComAtprotoServerGetAccountInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.getAccountInviteCodes',
        defs: {
          main: {
            type: 'query',
            description: 'Get all invite codes for a given account.',
            parameters: {
              type: 'params',
              properties: {
                includeUsed: {
                  type: 'boolean',
                  default: true
                },
                createAvailable: {
                  type: 'boolean',
                  default: true
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['codes'],
                properties: {
                  codes: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.server.defs#inviteCode'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'DuplicateCreate'
              }
            ]
          }
        }
      },
      ComAtprotoServerGetSession: {
        lexicon: 1,
        id: 'com.atproto.server.getSession',
        defs: {
          main: {
            type: 'query',
            description: 'Get information about the current session.',
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['handle', 'did'],
                properties: {
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  email: {
                    type: 'string'
                  },
                  emailConfirmed: {
                    type: 'boolean'
                  },
                  didDoc: {
                    type: 'unknown'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerListAppPasswords: {
        lexicon: 1,
        id: 'com.atproto.server.listAppPasswords',
        defs: {
          main: {
            type: 'query',
            description: 'List all App Passwords.',
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['passwords'],
                properties: {
                  passwords: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.server.listAppPasswords#appPassword'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'AccountTakedown'
              }
            ]
          },
          appPassword: {
            type: 'object',
            required: ['name', 'createdAt'],
            properties: {
              name: {
                type: 'string'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          }
        }
      },
      ComAtprotoServerRefreshSession: {
        lexicon: 1,
        id: 'com.atproto.server.refreshSession',
        defs: {
          main: {
            type: 'procedure',
            description: 'Refresh an authentication session.',
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
                properties: {
                  accessJwt: {
                    type: 'string'
                  },
                  refreshJwt: {
                    type: 'string'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  didDoc: {
                    type: 'unknown'
                  }
                }
              }
            },
            errors: [
              {
                name: 'AccountTakedown'
              }
            ]
          }
        }
      },
      ComAtprotoServerRequestAccountDelete: {
        lexicon: 1,
        id: 'com.atproto.server.requestAccountDelete',
        defs: {
          main: {
            type: 'procedure',
            description: 'Initiate a user account deletion via email.'
          }
        }
      },
      ComAtprotoServerRequestEmailConfirmation: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailConfirmation',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Request an email with a code to confirm ownership of email.'
          }
        }
      },
      ComAtprotoServerRequestEmailUpdate: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailUpdate',
        defs: {
          main: {
            type: 'procedure',
            description: 'Request a token in order to update email.',
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['tokenRequired'],
                properties: {
                  tokenRequired: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerRequestPasswordReset: {
        lexicon: 1,
        id: 'com.atproto.server.requestPasswordReset',
        defs: {
          main: {
            type: 'procedure',
            description: 'Initiate a user account password reset via email.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['email'],
                properties: {
                  email: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerReserveSigningKey: {
        lexicon: 1,
        id: 'com.atproto.server.reserveSigningKey',
        defs: {
          main: {
            type: 'procedure',
            description: 'Reserve a repo signing key for account creation.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                properties: {
                  did: {
                    type: 'string',
                    description: 'The did to reserve a new did:key for'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['signingKey'],
                properties: {
                  signingKey: {
                    type: 'string',
                    description: 'Public signing key in the form of a did:key.'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerResetPassword: {
        lexicon: 1,
        id: 'com.atproto.server.resetPassword',
        defs: {
          main: {
            type: 'procedure',
            description: 'Reset a user account password using a token.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['token', 'password'],
                properties: {
                  token: {
                    type: 'string'
                  },
                  password: {
                    type: 'string'
                  }
                }
              }
            },
            errors: [
              {
                name: 'ExpiredToken'
              },
              {
                name: 'InvalidToken'
              }
            ]
          }
        }
      },
      ComAtprotoServerRevokeAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.revokeAppPassword',
        defs: {
          main: {
            type: 'procedure',
            description: 'Revoke an App Password by name.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['name'],
                properties: {
                  name: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerUpdateEmail: {
        lexicon: 1,
        id: 'com.atproto.server.updateEmail',
        defs: {
          main: {
            type: 'procedure',
            description: "Update an account's email.",
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['email'],
                properties: {
                  email: {
                    type: 'string'
                  },
                  token: {
                    type: 'string',
                    description:
                      "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                  }
                }
              }
            },
            errors: [
              {
                name: 'ExpiredToken'
              },
              {
                name: 'InvalidToken'
              },
              {
                name: 'TokenRequired'
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetBlob: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlob',
        defs: {
          main: {
            type: 'query',
            description: 'Get a blob associated with a given repo.',
            parameters: {
              type: 'params',
              required: ['did', 'cid'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                },
                cid: {
                  type: 'string',
                  format: 'cid',
                  description: 'The CID of the blob to fetch'
                }
              }
            },
            output: {
              encoding: '*/*'
            }
          }
        }
      },
      ComAtprotoSyncGetBlocks: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlocks',
        defs: {
          main: {
            type: 'query',
            description: 'Get blocks from a given repo.',
            parameters: {
              type: 'params',
              required: ['did', 'cids'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                },
                cids: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'cid'
                  }
                }
              }
            },
            output: {
              encoding: 'application/vnd.ipld.car'
            }
          }
        }
      },
      ComAtprotoSyncGetCheckout: {
        lexicon: 1,
        id: 'com.atproto.sync.getCheckout',
        defs: {
          main: {
            type: 'query',
            description:
              'DEPRECATED - please use com.atproto.sync.getRepo instead',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                }
              }
            },
            output: {
              encoding: 'application/vnd.ipld.car'
            }
          }
        }
      },
      ComAtprotoSyncGetHead: {
        lexicon: 1,
        id: 'com.atproto.sync.getHead',
        defs: {
          main: {
            type: 'query',
            description:
              'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['root'],
                properties: {
                  root: {
                    type: 'string',
                    format: 'cid'
                  }
                }
              }
            },
            errors: [
              {
                name: 'HeadNotFound'
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetLatestCommit: {
        lexicon: 1,
        id: 'com.atproto.sync.getLatestCommit',
        defs: {
          main: {
            type: 'query',
            description: 'Get the current commit CID & revision of the repo.',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['cid', 'rev'],
                properties: {
                  cid: {
                    type: 'string',
                    format: 'cid'
                  },
                  rev: {
                    type: 'string'
                  }
                }
              }
            },
            errors: [
              {
                name: 'RepoNotFound'
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetRecord: {
        lexicon: 1,
        id: 'com.atproto.sync.getRecord',
        defs: {
          main: {
            type: 'query',
            description:
              'Get blocks needed for existence or non-existence of record.',
            parameters: {
              type: 'params',
              required: ['did', 'collection', 'rkey'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                },
                collection: {
                  type: 'string',
                  format: 'nsid'
                },
                rkey: {
                  type: 'string'
                },
                commit: {
                  type: 'string',
                  format: 'cid',
                  description: 'An optional past commit CID.'
                }
              }
            },
            output: {
              encoding: 'application/vnd.ipld.car'
            }
          }
        }
      },
      ComAtprotoSyncGetRepo: {
        lexicon: 1,
        id: 'com.atproto.sync.getRepo',
        defs: {
          main: {
            type: 'query',
            description:
              "Gets the DID's repo, optionally catching up from a specific revision.",
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                },
                since: {
                  type: 'string',
                  description: 'The revision of the repo to catch up from.'
                }
              }
            },
            output: {
              encoding: 'application/vnd.ipld.car'
            }
          }
        }
      },
      ComAtprotoSyncListBlobs: {
        lexicon: 1,
        id: 'com.atproto.sync.listBlobs',
        defs: {
          main: {
            type: 'query',
            description: 'List blob CIDs since some revision.',
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                },
                since: {
                  type: 'string',
                  description:
                    'Optional revision of the repo to list blobs since.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 1e3,
                  default: 500
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['cids'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  cids: {
                    type: 'array',
                    items: {
                      type: 'string',
                      format: 'cid'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoSyncListRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.listRepos',
        defs: {
          main: {
            type: 'query',
            description: 'List DIDs and root CIDs of hosted repos.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 1e3,
                  default: 500
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['repos'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  repos: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.sync.listRepos#repo'
                    }
                  }
                }
              }
            }
          },
          repo: {
            type: 'object',
            required: ['did', 'head', 'rev'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              head: {
                type: 'string',
                format: 'cid'
              },
              rev: {
                type: 'string'
              }
            }
          }
        }
      },
      ComAtprotoSyncNotifyOfUpdate: {
        lexicon: 1,
        id: 'com.atproto.sync.notifyOfUpdate',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Notify a crawling service of a recent update; often when a long break between updates causes the connection with the crawling service to break.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['hostname'],
                properties: {
                  hostname: {
                    type: 'string',
                    description:
                      'Hostname of the service that is notifying of update.'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoSyncRequestCrawl: {
        lexicon: 1,
        id: 'com.atproto.sync.requestCrawl',
        defs: {
          main: {
            type: 'procedure',
            description:
              'Request a service to persistently crawl hosted repos.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['hostname'],
                properties: {
                  hostname: {
                    type: 'string',
                    description:
                      'Hostname of the service that is requesting to be crawled.'
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoSyncSubscribeRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.subscribeRepos',
        defs: {
          main: {
            type: 'subscription',
            description: 'Subscribe to repo updates.',
            parameters: {
              type: 'params',
              properties: {
                cursor: {
                  type: 'integer',
                  description: 'The last known event to backfill from.'
                }
              }
            },
            message: {
              schema: {
                type: 'union',
                refs: [
                  'lex:com.atproto.sync.subscribeRepos#commit',
                  'lex:com.atproto.sync.subscribeRepos#handle',
                  'lex:com.atproto.sync.subscribeRepos#migrate',
                  'lex:com.atproto.sync.subscribeRepos#tombstone',
                  'lex:com.atproto.sync.subscribeRepos#info'
                ]
              }
            },
            errors: [
              {
                name: 'FutureCursor'
              },
              {
                name: 'ConsumerTooSlow'
              }
            ]
          },
          commit: {
            type: 'object',
            required: [
              'seq',
              'rebase',
              'tooBig',
              'repo',
              'commit',
              'rev',
              'since',
              'blocks',
              'ops',
              'blobs',
              'time'
            ],
            nullable: ['prev', 'since'],
            properties: {
              seq: {
                type: 'integer'
              },
              rebase: {
                type: 'boolean'
              },
              tooBig: {
                type: 'boolean'
              },
              repo: {
                type: 'string',
                format: 'did'
              },
              commit: {
                type: 'cid-link'
              },
              prev: {
                type: 'cid-link'
              },
              rev: {
                type: 'string',
                description: 'The rev of the emitted commit.'
              },
              since: {
                type: 'string',
                description:
                  'The rev of the last emitted commit from this repo.'
              },
              blocks: {
                type: 'bytes',
                description: 'CAR file containing relevant blocks.',
                maxLength: 1e6
              },
              ops: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.sync.subscribeRepos#repoOp'
                },
                maxLength: 200
              },
              blobs: {
                type: 'array',
                items: {
                  type: 'cid-link'
                }
              },
              time: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          handle: {
            type: 'object',
            required: ['seq', 'did', 'handle', 'time'],
            properties: {
              seq: {
                type: 'integer'
              },
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              time: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          migrate: {
            type: 'object',
            required: ['seq', 'did', 'migrateTo', 'time'],
            nullable: ['migrateTo'],
            properties: {
              seq: {
                type: 'integer'
              },
              did: {
                type: 'string',
                format: 'did'
              },
              migrateTo: {
                type: 'string'
              },
              time: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          tombstone: {
            type: 'object',
            required: ['seq', 'did', 'time'],
            properties: {
              seq: {
                type: 'integer'
              },
              did: {
                type: 'string',
                format: 'did'
              },
              time: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          info: {
            type: 'object',
            required: ['name'],
            properties: {
              name: {
                type: 'string',
                knownValues: ['OutdatedCursor']
              },
              message: {
                type: 'string'
              }
            }
          },
          repoOp: {
            type: 'object',
            description:
              "A repo operation, ie a write of a single record. For creates and updates, CID is the record's CID as of this operation. For deletes, it's null.",
            required: ['action', 'path', 'cid'],
            nullable: ['cid'],
            properties: {
              action: {
                type: 'string',
                knownValues: ['create', 'update', 'delete']
              },
              path: {
                type: 'string'
              },
              cid: {
                type: 'cid-link'
              }
            }
          }
        }
      },
      ComAtprotoTempFetchLabels: {
        lexicon: 1,
        id: 'com.atproto.temp.fetchLabels',
        defs: {
          main: {
            type: 'query',
            description:
              'Fetch all labels from a labeler created after a certain date.',
            parameters: {
              type: 'params',
              properties: {
                since: {
                  type: 'integer'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 250,
                  default: 50
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['labels'],
                properties: {
                  labels: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:com.atproto.label.defs#label'
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoTempImportRepo: {
        lexicon: 1,
        id: 'com.atproto.temp.importRepo',
        defs: {
          main: {
            type: 'procedure',
            description:
              "Gets the did's repo, optionally catching up from a specific revision.",
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                }
              }
            },
            input: {
              encoding: 'application/vnd.ipld.car'
            },
            output: {
              encoding: 'text/plain'
            }
          }
        }
      },
      ComAtprotoTempPushBlob: {
        lexicon: 1,
        id: 'com.atproto.temp.pushBlob',
        defs: {
          main: {
            type: 'procedure',
            description:
              "Gets the did's repo, optionally catching up from a specific revision.",
            parameters: {
              type: 'params',
              required: ['did'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did',
                  description: 'The DID of the repo.'
                }
              }
            },
            input: {
              encoding: '*/*'
            }
          }
        }
      },
      ComAtprotoTempTransferAccount: {
        lexicon: 1,
        id: 'com.atproto.temp.transferAccount',
        defs: {
          main: {
            type: 'procedure',
            description: 'Transfer an account.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['handle', 'did', 'plcOp'],
                properties: {
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  plcOp: {
                    type: 'unknown'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['accessJwt', 'refreshJwt', 'handle', 'did'],
                properties: {
                  accessJwt: {
                    type: 'string'
                  },
                  refreshJwt: {
                    type: 'string'
                  },
                  handle: {
                    type: 'string',
                    format: 'handle'
                  },
                  did: {
                    type: 'string',
                    format: 'did'
                  }
                }
              }
            },
            errors: [
              {
                name: 'InvalidHandle'
              },
              {
                name: 'InvalidPassword'
              },
              {
                name: 'InvalidInviteCode'
              },
              {
                name: 'HandleNotAvailable'
              },
              {
                name: 'UnsupportedDomain'
              },
              {
                name: 'UnresolvableDid'
              },
              {
                name: 'IncompatibleDidDoc'
              }
            ]
          }
        }
      },
      AppBskyActorDefs: {
        lexicon: 1,
        id: 'app.bsky.actor.defs',
        description: 'A reference to an actor in the network.',
        defs: {
          profileViewBasic: {
            type: 'object',
            required: ['did', 'handle'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              displayName: {
                type: 'string',
                maxGraphemes: 64,
                maxLength: 640
              },
              avatar: {
                type: 'string'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#viewerState'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              }
            }
          },
          profileView: {
            type: 'object',
            required: ['did', 'handle'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              displayName: {
                type: 'string',
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: 'string',
                maxGraphemes: 256,
                maxLength: 2560
              },
              avatar: {
                type: 'string'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#viewerState'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              }
            }
          },
          profileViewDetailed: {
            type: 'object',
            required: ['did', 'handle'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              handle: {
                type: 'string',
                format: 'handle'
              },
              displayName: {
                type: 'string',
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: 'string',
                maxGraphemes: 256,
                maxLength: 2560
              },
              avatar: {
                type: 'string'
              },
              banner: {
                type: 'string'
              },
              followersCount: {
                type: 'integer'
              },
              followsCount: {
                type: 'integer'
              },
              postsCount: {
                type: 'integer'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#viewerState'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              }
            }
          },
          viewerState: {
            type: 'object',
            properties: {
              muted: {
                type: 'boolean'
              },
              mutedByList: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listViewBasic'
              },
              blockedBy: {
                type: 'boolean'
              },
              blocking: {
                type: 'string',
                format: 'at-uri'
              },
              blockingByList: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listViewBasic'
              },
              following: {
                type: 'string',
                format: 'at-uri'
              },
              followedBy: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          preferences: {
            type: 'array',
            items: {
              type: 'union',
              refs: [
                'lex:app.bsky.actor.defs#adultContentPref',
                'lex:app.bsky.actor.defs#contentLabelPref',
                'lex:app.bsky.actor.defs#savedFeedsPref',
                'lex:app.bsky.actor.defs#personalDetailsPref',
                'lex:app.bsky.actor.defs#feedViewPref',
                'lex:app.bsky.actor.defs#threadViewPref'
              ]
            }
          },
          adultContentPref: {
            type: 'object',
            required: ['enabled'],
            properties: {
              enabled: {
                type: 'boolean',
                default: false
              }
            }
          },
          contentLabelPref: {
            type: 'object',
            required: ['label', 'visibility'],
            properties: {
              label: {
                type: 'string'
              },
              visibility: {
                type: 'string',
                knownValues: ['show', 'warn', 'hide']
              }
            }
          },
          savedFeedsPref: {
            type: 'object',
            required: ['pinned', 'saved'],
            properties: {
              pinned: {
                type: 'array',
                items: {
                  type: 'string',
                  format: 'at-uri'
                }
              },
              saved: {
                type: 'array',
                items: {
                  type: 'string',
                  format: 'at-uri'
                }
              }
            }
          },
          personalDetailsPref: {
            type: 'object',
            properties: {
              birthDate: {
                type: 'string',
                format: 'datetime',
                description: 'The birth date of account owner.'
              }
            }
          },
          feedViewPref: {
            type: 'object',
            required: ['feed'],
            properties: {
              feed: {
                type: 'string',
                description:
                  'The URI of the feed, or an identifier which describes the feed.'
              },
              hideReplies: {
                type: 'boolean',
                description: 'Hide replies in the feed.'
              },
              hideRepliesByUnfollowed: {
                type: 'boolean',
                description:
                  'Hide replies in the feed if they are not by followed users.'
              },
              hideRepliesByLikeCount: {
                type: 'integer',
                description:
                  'Hide replies in the feed if they do not have this number of likes.'
              },
              hideReposts: {
                type: 'boolean',
                description: 'Hide reposts in the feed.'
              },
              hideQuotePosts: {
                type: 'boolean',
                description: 'Hide quote posts in the feed.'
              }
            }
          },
          threadViewPref: {
            type: 'object',
            properties: {
              sort: {
                type: 'string',
                description: 'Sorting mode for threads.',
                knownValues: ['oldest', 'newest', 'most-likes', 'random']
              },
              prioritizeFollowedUsers: {
                type: 'boolean',
                description: 'Show followed users at the top of all replies.'
              }
            }
          }
        }
      },
      AppBskyActorGetPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.getPreferences',
        defs: {
          main: {
            type: 'query',
            description: 'Get private preferences attached to the account.',
            parameters: {
              type: 'params',
              properties: {}
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['preferences'],
                properties: {
                  preferences: {
                    type: 'ref',
                    ref: 'lex:app.bsky.actor.defs#preferences'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorGetProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfile',
        defs: {
          main: {
            type: 'query',
            description: 'Get detailed profile view of an actor.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
              }
            }
          }
        }
      },
      AppBskyActorGetProfiles: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfiles',
        defs: {
          main: {
            type: 'query',
            description: 'Get detailed profile views of multiple actors.',
            parameters: {
              type: 'params',
              required: ['actors'],
              properties: {
                actors: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'at-identifier'
                  },
                  maxLength: 25
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['profiles'],
                properties: {
                  profiles: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorGetSuggestions: {
        lexicon: 1,
        id: 'app.bsky.actor.getSuggestions',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of suggested actors, used for discovery.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actors'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  actors: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.profile',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a profile.',
            key: 'literal:self',
            record: {
              type: 'object',
              properties: {
                displayName: {
                  type: 'string',
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: 'string',
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: 'blob',
                  accept: ['image/png', 'image/jpeg'],
                  maxSize: 1e6
                },
                banner: {
                  type: 'blob',
                  accept: ['image/png', 'image/jpeg'],
                  maxSize: 1e6
                },
                labels: {
                  type: 'union',
                  refs: ['lex:com.atproto.label.defs#selfLabels']
                }
              }
            }
          }
        }
      },
      AppBskyActorPutPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.putPreferences',
        defs: {
          main: {
            type: 'procedure',
            description: 'Set the private preferences attached to the account.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['preferences'],
                properties: {
                  preferences: {
                    type: 'ref',
                    ref: 'lex:app.bsky.actor.defs#preferences'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorSearchActors: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActors',
        defs: {
          main: {
            type: 'query',
            description: 'Find actors (profiles) matching search criteria.',
            parameters: {
              type: 'params',
              properties: {
                term: {
                  type: 'string',
                  description: "DEPRECATED: use 'q' instead."
                },
                q: {
                  type: 'string',
                  description:
                    'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actors'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  actors: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorSearchActorsTypeahead: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActorsTypeahead',
        defs: {
          main: {
            type: 'query',
            description: 'Find actor suggestions for a prefix search term.',
            parameters: {
              type: 'params',
              properties: {
                term: {
                  type: 'string',
                  description: "DEPRECATED: use 'q' instead."
                },
                q: {
                  type: 'string',
                  description: 'Search query prefix; not a full query string.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 10
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actors'],
                properties: {
                  actors: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyEmbedExternal: {
        lexicon: 1,
        id: 'app.bsky.embed.external',
        description:
          'A representation of some externally linked content, embedded in another form of content.',
        defs: {
          main: {
            type: 'object',
            required: ['external'],
            properties: {
              external: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.external#external'
              }
            }
          },
          external: {
            type: 'object',
            required: ['uri', 'title', 'description'],
            properties: {
              uri: {
                type: 'string',
                format: 'uri'
              },
              title: {
                type: 'string'
              },
              description: {
                type: 'string'
              },
              thumb: {
                type: 'blob',
                accept: ['image/*'],
                maxSize: 1e6
              }
            }
          },
          view: {
            type: 'object',
            required: ['external'],
            properties: {
              external: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.external#viewExternal'
              }
            }
          },
          viewExternal: {
            type: 'object',
            required: ['uri', 'title', 'description'],
            properties: {
              uri: {
                type: 'string',
                format: 'uri'
              },
              title: {
                type: 'string'
              },
              description: {
                type: 'string'
              },
              thumb: {
                type: 'string'
              }
            }
          }
        }
      },
      AppBskyEmbedImages: {
        lexicon: 1,
        id: 'app.bsky.embed.images',
        description: 'A set of images embedded in some other form of content.',
        defs: {
          main: {
            type: 'object',
            required: ['images'],
            properties: {
              images: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:app.bsky.embed.images#image'
                },
                maxLength: 4
              }
            }
          },
          image: {
            type: 'object',
            required: ['image', 'alt'],
            properties: {
              image: {
                type: 'blob',
                accept: ['image/*'],
                maxSize: 1e6
              },
              alt: {
                type: 'string'
              },
              aspectRatio: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.images#aspectRatio'
              }
            }
          },
          aspectRatio: {
            type: 'object',
            description:
              'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',
            required: ['width', 'height'],
            properties: {
              width: {
                type: 'integer',
                minimum: 1
              },
              height: {
                type: 'integer',
                minimum: 1
              }
            }
          },
          view: {
            type: 'object',
            required: ['images'],
            properties: {
              images: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:app.bsky.embed.images#viewImage'
                },
                maxLength: 4
              }
            }
          },
          viewImage: {
            type: 'object',
            required: ['thumb', 'fullsize', 'alt'],
            properties: {
              thumb: {
                type: 'string'
              },
              fullsize: {
                type: 'string'
              },
              alt: {
                type: 'string'
              },
              aspectRatio: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.images#aspectRatio'
              }
            }
          }
        }
      },
      AppBskyEmbedRecord: {
        lexicon: 1,
        id: 'app.bsky.embed.record',
        description:
          'A representation of a record embedded in another form of content.',
        defs: {
          main: {
            type: 'object',
            required: ['record'],
            properties: {
              record: {
                type: 'ref',
                ref: 'lex:com.atproto.repo.strongRef'
              }
            }
          },
          view: {
            type: 'object',
            required: ['record'],
            properties: {
              record: {
                type: 'union',
                refs: [
                  'lex:app.bsky.embed.record#viewRecord',
                  'lex:app.bsky.embed.record#viewNotFound',
                  'lex:app.bsky.embed.record#viewBlocked',
                  'lex:app.bsky.feed.defs#generatorView',
                  'lex:app.bsky.graph.defs#listView'
                ]
              }
            }
          },
          viewRecord: {
            type: 'object',
            required: ['uri', 'cid', 'author', 'value', 'indexedAt'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              author: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileViewBasic'
              },
              value: {
                type: 'unknown'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              },
              embeds: {
                type: 'array',
                items: {
                  type: 'union',
                  refs: [
                    'lex:app.bsky.embed.images#view',
                    'lex:app.bsky.embed.external#view',
                    'lex:app.bsky.embed.record#view',
                    'lex:app.bsky.embed.recordWithMedia#view'
                  ]
                }
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          viewNotFound: {
            type: 'object',
            required: ['uri', 'notFound'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              notFound: {
                type: 'boolean',
                const: true
              }
            }
          },
          viewBlocked: {
            type: 'object',
            required: ['uri', 'blocked', 'author'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              blocked: {
                type: 'boolean',
                const: true
              },
              author: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#blockedAuthor'
              }
            }
          }
        }
      },
      AppBskyEmbedRecordWithMedia: {
        lexicon: 1,
        id: 'app.bsky.embed.recordWithMedia',
        description:
          'A representation of a record embedded in another form of content, alongside other compatible embeds.',
        defs: {
          main: {
            type: 'object',
            required: ['record', 'media'],
            properties: {
              record: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.record'
              },
              media: {
                type: 'union',
                refs: [
                  'lex:app.bsky.embed.images',
                  'lex:app.bsky.embed.external'
                ]
              }
            }
          },
          view: {
            type: 'object',
            required: ['record', 'media'],
            properties: {
              record: {
                type: 'ref',
                ref: 'lex:app.bsky.embed.record#view'
              },
              media: {
                type: 'union',
                refs: [
                  'lex:app.bsky.embed.images#view',
                  'lex:app.bsky.embed.external#view'
                ]
              }
            }
          }
        }
      },
      AppBskyFeedDefs: {
        lexicon: 1,
        id: 'app.bsky.feed.defs',
        defs: {
          postView: {
            type: 'object',
            required: ['uri', 'cid', 'author', 'record', 'indexedAt'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              author: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileViewBasic'
              },
              record: {
                type: 'unknown'
              },
              embed: {
                type: 'union',
                refs: [
                  'lex:app.bsky.embed.images#view',
                  'lex:app.bsky.embed.external#view',
                  'lex:app.bsky.embed.record#view',
                  'lex:app.bsky.embed.recordWithMedia#view'
                ]
              },
              replyCount: {
                type: 'integer'
              },
              repostCount: {
                type: 'integer'
              },
              likeCount: {
                type: 'integer'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#viewerState'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              },
              threadgate: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#threadgateView'
              }
            }
          },
          viewerState: {
            type: 'object',
            properties: {
              repost: {
                type: 'string',
                format: 'at-uri'
              },
              like: {
                type: 'string',
                format: 'at-uri'
              },
              replyDisabled: {
                type: 'boolean'
              }
            }
          },
          feedViewPost: {
            type: 'object',
            required: ['post'],
            properties: {
              post: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#postView'
              },
              reply: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#replyRef'
              },
              reason: {
                type: 'union',
                refs: ['lex:app.bsky.feed.defs#reasonRepost']
              }
            }
          },
          replyRef: {
            type: 'object',
            required: ['root', 'parent'],
            properties: {
              root: {
                type: 'union',
                refs: [
                  'lex:app.bsky.feed.defs#postView',
                  'lex:app.bsky.feed.defs#notFoundPost',
                  'lex:app.bsky.feed.defs#blockedPost'
                ]
              },
              parent: {
                type: 'union',
                refs: [
                  'lex:app.bsky.feed.defs#postView',
                  'lex:app.bsky.feed.defs#notFoundPost',
                  'lex:app.bsky.feed.defs#blockedPost'
                ]
              }
            }
          },
          reasonRepost: {
            type: 'object',
            required: ['by', 'indexedAt'],
            properties: {
              by: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileViewBasic'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          threadViewPost: {
            type: 'object',
            required: ['post'],
            properties: {
              post: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#postView'
              },
              parent: {
                type: 'union',
                refs: [
                  'lex:app.bsky.feed.defs#threadViewPost',
                  'lex:app.bsky.feed.defs#notFoundPost',
                  'lex:app.bsky.feed.defs#blockedPost'
                ]
              },
              replies: {
                type: 'array',
                items: {
                  type: 'union',
                  refs: [
                    'lex:app.bsky.feed.defs#threadViewPost',
                    'lex:app.bsky.feed.defs#notFoundPost',
                    'lex:app.bsky.feed.defs#blockedPost'
                  ]
                }
              }
            }
          },
          notFoundPost: {
            type: 'object',
            required: ['uri', 'notFound'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              notFound: {
                type: 'boolean',
                const: true
              }
            }
          },
          blockedPost: {
            type: 'object',
            required: ['uri', 'blocked', 'author'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              blocked: {
                type: 'boolean',
                const: true
              },
              author: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#blockedAuthor'
              }
            }
          },
          blockedAuthor: {
            type: 'object',
            required: ['did'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#viewerState'
              }
            }
          },
          generatorView: {
            type: 'object',
            required: [
              'uri',
              'cid',
              'did',
              'creator',
              'displayName',
              'indexedAt'
            ],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              did: {
                type: 'string',
                format: 'did'
              },
              creator: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileView'
              },
              displayName: {
                type: 'string'
              },
              description: {
                type: 'string',
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:app.bsky.richtext.facet'
                }
              },
              avatar: {
                type: 'string'
              },
              likeCount: {
                type: 'integer',
                minimum: 0
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.defs#generatorViewerState'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          generatorViewerState: {
            type: 'object',
            properties: {
              like: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          skeletonFeedPost: {
            type: 'object',
            required: ['post'],
            properties: {
              post: {
                type: 'string',
                format: 'at-uri'
              },
              reason: {
                type: 'union',
                refs: ['lex:app.bsky.feed.defs#skeletonReasonRepost']
              }
            }
          },
          skeletonReasonRepost: {
            type: 'object',
            required: ['repost'],
            properties: {
              repost: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          threadgateView: {
            type: 'object',
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              record: {
                type: 'unknown'
              },
              lists: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:app.bsky.graph.defs#listViewBasic'
                }
              }
            }
          }
        }
      },
      AppBskyFeedDescribeFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.describeFeedGenerator',
        defs: {
          main: {
            type: 'query',
            description:
              'Get information about a feed generator, including policies and offered feed URIs.',
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['did', 'feeds'],
                properties: {
                  did: {
                    type: 'string',
                    format: 'did'
                  },
                  feeds: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.describeFeedGenerator#feed'
                    }
                  },
                  links: {
                    type: 'ref',
                    ref: 'lex:app.bsky.feed.describeFeedGenerator#links'
                  }
                }
              }
            }
          },
          feed: {
            type: 'object',
            required: ['uri'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          links: {
            type: 'object',
            properties: {
              privacyPolicy: {
                type: 'string'
              },
              termsOfService: {
                type: 'string'
              }
            }
          }
        }
      },
      AppBskyFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.generator',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of the existence of a feed generator.',
            key: 'any',
            record: {
              type: 'object',
              required: ['did', 'displayName', 'createdAt'],
              properties: {
                did: {
                  type: 'string',
                  format: 'did'
                },
                displayName: {
                  type: 'string',
                  maxGraphemes: 24,
                  maxLength: 240
                },
                description: {
                  type: 'string',
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: 'array',
                  items: {
                    type: 'ref',
                    ref: 'lex:app.bsky.richtext.facet'
                  }
                },
                avatar: {
                  type: 'blob',
                  accept: ['image/png', 'image/jpeg'],
                  maxSize: 1e6
                },
                labels: {
                  type: 'union',
                  refs: ['lex:com.atproto.label.defs#selfLabels']
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetActorFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorFeeds',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of feeds created by the actor.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feeds'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feeds: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#generatorView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetActorLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorLikes',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of posts liked by an actor.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'BlockedActor'
              },
              {
                name: 'BlockedByActor'
              }
            ]
          }
        }
      },
      AppBskyFeedGetAuthorFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getAuthorFeed',
        defs: {
          main: {
            type: 'query',
            description: "Get a view of an actor's feed.",
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                },
                filter: {
                  type: 'string',
                  knownValues: [
                    'posts_with_replies',
                    'posts_no_replies',
                    'posts_with_media',
                    'posts_and_author_threads'
                  ],
                  default: 'posts_with_replies'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'BlockedActor'
              },
              {
                name: 'BlockedByActor'
              }
            ]
          }
        }
      },
      AppBskyFeedGetFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeed',
        defs: {
          main: {
            type: 'query',
            description:
              "Get a hydrated feed from an actor's selected feed generator.",
            parameters: {
              type: 'params',
              required: ['feed'],
              properties: {
                feed: {
                  type: 'string',
                  format: 'at-uri'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'UnknownFeed'
              }
            ]
          }
        }
      },
      AppBskyFeedGetFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerator',
        defs: {
          main: {
            type: 'query',
            description: 'Get information about a feed generator.',
            parameters: {
              type: 'params',
              required: ['feed'],
              properties: {
                feed: {
                  type: 'string',
                  format: 'at-uri'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['view', 'isOnline', 'isValid'],
                properties: {
                  view: {
                    type: 'ref',
                    ref: 'lex:app.bsky.feed.defs#generatorView'
                  },
                  isOnline: {
                    type: 'boolean'
                  },
                  isValid: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerators',
        defs: {
          main: {
            type: 'query',
            description: 'Get information about a list of feed generators.',
            parameters: {
              type: 'params',
              required: ['feeds'],
              properties: {
                feeds: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'at-uri'
                  }
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feeds'],
                properties: {
                  feeds: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#generatorView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetFeedSkeleton: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedSkeleton',
        defs: {
          main: {
            type: 'query',
            description:
              'Get a skeleton of a feed provided by a feed generator.',
            parameters: {
              type: 'params',
              required: ['feed'],
              properties: {
                feed: {
                  type: 'string',
                  format: 'at-uri'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#skeletonFeedPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'UnknownFeed'
              }
            ]
          }
        }
      },
      AppBskyFeedGetLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getLikes',
        defs: {
          main: {
            type: 'query',
            description: 'Get the list of likes.',
            parameters: {
              type: 'params',
              required: ['uri'],
              properties: {
                uri: {
                  type: 'string',
                  format: 'at-uri'
                },
                cid: {
                  type: 'string',
                  format: 'cid'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['uri', 'likes'],
                properties: {
                  uri: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  cid: {
                    type: 'string',
                    format: 'cid'
                  },
                  cursor: {
                    type: 'string'
                  },
                  likes: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.getLikes#like'
                    }
                  }
                }
              }
            }
          },
          like: {
            type: 'object',
            required: ['indexedAt', 'createdAt', 'actor'],
            properties: {
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              createdAt: {
                type: 'string',
                format: 'datetime'
              },
              actor: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileView'
              }
            }
          }
        }
      },
      AppBskyFeedGetListFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getListFeed',
        defs: {
          main: {
            type: 'query',
            description: 'Get a view of a recent posts from actors in a list.',
            parameters: {
              type: 'params',
              required: ['list'],
              properties: {
                list: {
                  type: 'string',
                  format: 'at-uri'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'UnknownList'
              }
            ]
          }
        }
      },
      AppBskyFeedGetPostThread: {
        lexicon: 1,
        id: 'app.bsky.feed.getPostThread',
        defs: {
          main: {
            type: 'query',
            description: 'Get posts in a thread.',
            parameters: {
              type: 'params',
              required: ['uri'],
              properties: {
                uri: {
                  type: 'string',
                  format: 'at-uri'
                },
                depth: {
                  type: 'integer',
                  default: 6,
                  minimum: 0,
                  maximum: 1e3
                },
                parentHeight: {
                  type: 'integer',
                  default: 80,
                  minimum: 0,
                  maximum: 1e3
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['thread'],
                properties: {
                  thread: {
                    type: 'union',
                    refs: [
                      'lex:app.bsky.feed.defs#threadViewPost',
                      'lex:app.bsky.feed.defs#notFoundPost',
                      'lex:app.bsky.feed.defs#blockedPost'
                    ]
                  }
                }
              }
            },
            errors: [
              {
                name: 'NotFound'
              }
            ]
          }
        }
      },
      AppBskyFeedGetPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.getPosts',
        defs: {
          main: {
            type: 'query',
            description: "Get a view of an actor's feed.",
            parameters: {
              type: 'params',
              required: ['uris'],
              properties: {
                uris: {
                  type: 'array',
                  items: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  maxLength: 25
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['posts'],
                properties: {
                  posts: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#postView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetRepostedBy: {
        lexicon: 1,
        id: 'app.bsky.feed.getRepostedBy',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of reposts.',
            parameters: {
              type: 'params',
              required: ['uri'],
              properties: {
                uri: {
                  type: 'string',
                  format: 'at-uri'
                },
                cid: {
                  type: 'string',
                  format: 'cid'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['uri', 'repostedBy'],
                properties: {
                  uri: {
                    type: 'string',
                    format: 'at-uri'
                  },
                  cid: {
                    type: 'string',
                    format: 'cid'
                  },
                  cursor: {
                    type: 'string'
                  },
                  repostedBy: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetSuggestedFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getSuggestedFeeds',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of suggested feeds for the viewer.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feeds'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feeds: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#generatorView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetTimeline: {
        lexicon: 1,
        id: 'app.bsky.feed.getTimeline',
        defs: {
          main: {
            type: 'query',
            description: "Get a view of the actor's home timeline.",
            parameters: {
              type: 'params',
              properties: {
                algorithm: {
                  type: 'string'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedLike: {
        lexicon: 1,
        id: 'app.bsky.feed.like',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a like.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'createdAt'],
              properties: {
                subject: {
                  type: 'ref',
                  ref: 'lex:com.atproto.repo.strongRef'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyFeedPost: {
        lexicon: 1,
        id: 'app.bsky.feed.post',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a post.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['text', 'createdAt'],
              properties: {
                text: {
                  type: 'string',
                  maxLength: 3e3,
                  maxGraphemes: 300
                },
                entities: {
                  type: 'array',
                  description:
                    'Deprecated: replaced by app.bsky.richtext.facet.',
                  items: {
                    type: 'ref',
                    ref: 'lex:app.bsky.feed.post#entity'
                  }
                },
                facets: {
                  type: 'array',
                  items: {
                    type: 'ref',
                    ref: 'lex:app.bsky.richtext.facet'
                  }
                },
                reply: {
                  type: 'ref',
                  ref: 'lex:app.bsky.feed.post#replyRef'
                },
                embed: {
                  type: 'union',
                  refs: [
                    'lex:app.bsky.embed.images',
                    'lex:app.bsky.embed.external',
                    'lex:app.bsky.embed.record',
                    'lex:app.bsky.embed.recordWithMedia'
                  ]
                },
                langs: {
                  type: 'array',
                  maxLength: 3,
                  items: {
                    type: 'string',
                    format: 'language'
                  }
                },
                labels: {
                  type: 'union',
                  refs: ['lex:com.atproto.label.defs#selfLabels']
                },
                tags: {
                  type: 'array',
                  maxLength: 8,
                  items: {
                    type: 'string',
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description:
                    'Additional non-inline tags describing this post.'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          },
          replyRef: {
            type: 'object',
            required: ['root', 'parent'],
            properties: {
              root: {
                type: 'ref',
                ref: 'lex:com.atproto.repo.strongRef'
              },
              parent: {
                type: 'ref',
                ref: 'lex:com.atproto.repo.strongRef'
              }
            }
          },
          entity: {
            type: 'object',
            description: 'Deprecated: use facets instead.',
            required: ['index', 'type', 'value'],
            properties: {
              index: {
                type: 'ref',
                ref: 'lex:app.bsky.feed.post#textSlice'
              },
              type: {
                type: 'string',
                description: "Expected values are 'mention' and 'link'."
              },
              value: {
                type: 'string'
              }
            }
          },
          textSlice: {
            type: 'object',
            description:
              'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',
            required: ['start', 'end'],
            properties: {
              start: {
                type: 'integer',
                minimum: 0
              },
              end: {
                type: 'integer',
                minimum: 0
              }
            }
          }
        }
      },
      AppBskyFeedRepost: {
        lexicon: 1,
        id: 'app.bsky.feed.repost',
        defs: {
          main: {
            description: 'A declaration of a repost.',
            type: 'record',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'createdAt'],
              properties: {
                subject: {
                  type: 'ref',
                  ref: 'lex:com.atproto.repo.strongRef'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyFeedSearchPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.searchPosts',
        defs: {
          main: {
            type: 'query',
            description: 'Find posts matching search criteria.',
            parameters: {
              type: 'params',
              required: ['q'],
              properties: {
                q: {
                  type: 'string',
                  description:
                    'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: 'string',
                  description:
                    'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['posts'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  hitsTotal: {
                    type: 'integer',
                    description:
                      'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                  },
                  posts: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#postView'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'BadQueryString'
              }
            ]
          }
        }
      },
      AppBskyFeedThreadgate: {
        lexicon: 1,
        id: 'app.bsky.feed.threadgate',
        defs: {
          main: {
            type: 'record',
            key: 'tid',
            description:
              "Defines interaction gating rules for a thread. The rkey of the threadgate record should match the rkey of the thread's root post.",
            record: {
              type: 'object',
              required: ['post', 'createdAt'],
              properties: {
                post: {
                  type: 'string',
                  format: 'at-uri'
                },
                allow: {
                  type: 'array',
                  maxLength: 5,
                  items: {
                    type: 'union',
                    refs: [
                      'lex:app.bsky.feed.threadgate#mentionRule',
                      'lex:app.bsky.feed.threadgate#followingRule',
                      'lex:app.bsky.feed.threadgate#listRule'
                    ]
                  }
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          },
          mentionRule: {
            type: 'object',
            description: 'Allow replies from actors mentioned in your post.',
            properties: {}
          },
          followingRule: {
            type: 'object',
            description: 'Allow replies from actors you follow.',
            properties: {}
          },
          listRule: {
            type: 'object',
            description: 'Allow replies from actors on a list.',
            required: ['list'],
            properties: {
              list: {
                type: 'string',
                format: 'at-uri'
              }
            }
          }
        }
      },
      AppBskyGraphBlock: {
        lexicon: 1,
        id: 'app.bsky.graph.block',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a block.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'createdAt'],
              properties: {
                subject: {
                  type: 'string',
                  format: 'did'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyGraphDefs: {
        lexicon: 1,
        id: 'app.bsky.graph.defs',
        defs: {
          listViewBasic: {
            type: 'object',
            required: ['uri', 'cid', 'name', 'purpose'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              name: {
                type: 'string',
                maxLength: 64,
                minLength: 1
              },
              purpose: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listPurpose'
              },
              avatar: {
                type: 'string'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listViewerState'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          listView: {
            type: 'object',
            required: ['uri', 'cid', 'creator', 'name', 'purpose', 'indexedAt'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              creator: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileView'
              },
              name: {
                type: 'string',
                maxLength: 64,
                minLength: 1
              },
              purpose: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listPurpose'
              },
              description: {
                type: 'string',
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:app.bsky.richtext.facet'
                }
              },
              avatar: {
                type: 'string'
              },
              viewer: {
                type: 'ref',
                ref: 'lex:app.bsky.graph.defs#listViewerState'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              }
            }
          },
          listItemView: {
            type: 'object',
            required: ['uri', 'subject'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              subject: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileView'
              }
            }
          },
          listPurpose: {
            type: 'string',
            knownValues: [
              'app.bsky.graph.defs#modlist',
              'app.bsky.graph.defs#curatelist'
            ]
          },
          modlist: {
            type: 'token',
            description:
              'A list of actors to apply an aggregate moderation action (mute/block) on.'
          },
          curatelist: {
            type: 'token',
            description:
              'A list of actors used for curation purposes such as list feeds or interaction gating.'
          },
          listViewerState: {
            type: 'object',
            properties: {
              muted: {
                type: 'boolean'
              },
              blocked: {
                type: 'string',
                format: 'at-uri'
              }
            }
          }
        }
      },
      AppBskyGraphFollow: {
        lexicon: 1,
        id: 'app.bsky.graph.follow',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a social follow.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'createdAt'],
              properties: {
                subject: {
                  type: 'string',
                  format: 'did'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getBlocks',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of who the actor is blocking.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['blocks'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  blocks: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetFollowers: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollowers',
        defs: {
          main: {
            type: 'query',
            description: "Get a list of an actor's followers.",
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subject', 'followers'],
                properties: {
                  subject: {
                    type: 'ref',
                    ref: 'lex:app.bsky.actor.defs#profileView'
                  },
                  cursor: {
                    type: 'string'
                  },
                  followers: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetFollows: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollows',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of who the actor follows.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['subject', 'follows'],
                properties: {
                  subject: {
                    type: 'ref',
                    ref: 'lex:app.bsky.actor.defs#profileView'
                  },
                  cursor: {
                    type: 'string'
                  },
                  follows: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetList: {
        lexicon: 1,
        id: 'app.bsky.graph.getList',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of actors.',
            parameters: {
              type: 'params',
              required: ['list'],
              properties: {
                list: {
                  type: 'string',
                  format: 'at-uri'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['list', 'items'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  list: {
                    type: 'ref',
                    ref: 'lex:app.bsky.graph.defs#listView'
                  },
                  items: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.graph.defs#listItemView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetListBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getListBlocks',
        defs: {
          main: {
            type: 'query',
            description: 'Get lists that the actor is blocking.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['lists'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  lists: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.graph.defs#listView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetListMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getListMutes',
        defs: {
          main: {
            type: 'query',
            description: 'Get lists that the actor is muting.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['lists'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  lists: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.graph.defs#listView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetLists: {
        lexicon: 1,
        id: 'app.bsky.graph.getLists',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of lists that belong to an actor.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['lists'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  lists: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.graph.defs#listView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getMutes',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of who the actor mutes.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['mutes'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  mutes: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetSuggestedFollowsByActor: {
        lexicon: 1,
        id: 'app.bsky.graph.getSuggestedFollowsByActor',
        defs: {
          main: {
            type: 'query',
            description: 'Get suggested follows related to a given actor.',
            parameters: {
              type: 'params',
              required: ['actor'],
              properties: {
                actor: {
                  type: 'string',
                  format: 'at-identifier'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['suggestions'],
                properties: {
                  suggestions: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphList: {
        lexicon: 1,
        id: 'app.bsky.graph.list',
        defs: {
          main: {
            type: 'record',
            description: 'A declaration of a list of actors.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['name', 'purpose', 'createdAt'],
              properties: {
                purpose: {
                  type: 'ref',
                  ref: 'lex:app.bsky.graph.defs#listPurpose'
                },
                name: {
                  type: 'string',
                  maxLength: 64,
                  minLength: 1
                },
                description: {
                  type: 'string',
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: 'array',
                  items: {
                    type: 'ref',
                    ref: 'lex:app.bsky.richtext.facet'
                  }
                },
                avatar: {
                  type: 'blob',
                  accept: ['image/png', 'image/jpeg'],
                  maxSize: 1e6
                },
                labels: {
                  type: 'union',
                  refs: ['lex:com.atproto.label.defs#selfLabels']
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyGraphListblock: {
        lexicon: 1,
        id: 'app.bsky.graph.listblock',
        defs: {
          main: {
            type: 'record',
            description: 'A block of an entire list of actors.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'createdAt'],
              properties: {
                subject: {
                  type: 'string',
                  format: 'at-uri'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyGraphListitem: {
        lexicon: 1,
        id: 'app.bsky.graph.listitem',
        defs: {
          main: {
            type: 'record',
            description: 'An item under a declared list of actors.',
            key: 'tid',
            record: {
              type: 'object',
              required: ['subject', 'list', 'createdAt'],
              properties: {
                subject: {
                  type: 'string',
                  format: 'did'
                },
                list: {
                  type: 'string',
                  format: 'at-uri'
                },
                createdAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            }
          }
        }
      },
      AppBskyGraphMuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActor',
        defs: {
          main: {
            type: 'procedure',
            description: 'Mute an actor by DID or handle.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actor'],
                properties: {
                  actor: {
                    type: 'string',
                    format: 'at-identifier'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphMuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActorList',
        defs: {
          main: {
            type: 'procedure',
            description: 'Mute a list of actors.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['list'],
                properties: {
                  list: {
                    type: 'string',
                    format: 'at-uri'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphUnmuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActor',
        defs: {
          main: {
            type: 'procedure',
            description: 'Unmute an actor by DID or handle.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actor'],
                properties: {
                  actor: {
                    type: 'string',
                    format: 'at-identifier'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphUnmuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActorList',
        defs: {
          main: {
            type: 'procedure',
            description: 'Unmute a list of actors.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['list'],
                properties: {
                  list: {
                    type: 'string',
                    format: 'at-uri'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationGetUnreadCount: {
        lexicon: 1,
        id: 'app.bsky.notification.getUnreadCount',
        defs: {
          main: {
            type: 'query',
            description: 'Get the count of unread notifications.',
            parameters: {
              type: 'params',
              properties: {
                seenAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['count'],
                properties: {
                  count: {
                    type: 'integer'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationListNotifications: {
        lexicon: 1,
        id: 'app.bsky.notification.listNotifications',
        defs: {
          main: {
            type: 'query',
            description: 'Get a list of notifications.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                },
                seenAt: {
                  type: 'string',
                  format: 'datetime'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['notifications'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  notifications: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.notification.listNotifications#notification'
                    }
                  },
                  seenAt: {
                    type: 'string',
                    format: 'datetime'
                  }
                }
              }
            }
          },
          notification: {
            type: 'object',
            required: [
              'uri',
              'cid',
              'author',
              'reason',
              'record',
              'isRead',
              'indexedAt'
            ],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              },
              cid: {
                type: 'string',
                format: 'cid'
              },
              author: {
                type: 'ref',
                ref: 'lex:app.bsky.actor.defs#profileView'
              },
              reason: {
                type: 'string',
                description:
                  "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
                knownValues: [
                  'like',
                  'repost',
                  'follow',
                  'mention',
                  'reply',
                  'quote'
                ]
              },
              reasonSubject: {
                type: 'string',
                format: 'at-uri'
              },
              record: {
                type: 'unknown'
              },
              isRead: {
                type: 'boolean'
              },
              indexedAt: {
                type: 'string',
                format: 'datetime'
              },
              labels: {
                type: 'array',
                items: {
                  type: 'ref',
                  ref: 'lex:com.atproto.label.defs#label'
                }
              }
            }
          }
        }
      },
      AppBskyNotificationRegisterPush: {
        lexicon: 1,
        id: 'app.bsky.notification.registerPush',
        defs: {
          main: {
            type: 'procedure',
            description: 'Register for push notifications with a service.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['serviceDid', 'token', 'platform', 'appId'],
                properties: {
                  serviceDid: {
                    type: 'string',
                    format: 'did'
                  },
                  token: {
                    type: 'string'
                  },
                  platform: {
                    type: 'string',
                    knownValues: ['ios', 'android', 'web']
                  },
                  appId: {
                    type: 'string'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationUpdateSeen: {
        lexicon: 1,
        id: 'app.bsky.notification.updateSeen',
        defs: {
          main: {
            type: 'procedure',
            description: 'Notify server that the user has seen notifications.',
            input: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['seenAt'],
                properties: {
                  seenAt: {
                    type: 'string',
                    format: 'datetime'
                  }
                }
              }
            }
          }
        }
      },
      AppBskyRichtextFacet: {
        lexicon: 1,
        id: 'app.bsky.richtext.facet',
        defs: {
          main: {
            type: 'object',
            required: ['index', 'features'],
            properties: {
              index: {
                type: 'ref',
                ref: 'lex:app.bsky.richtext.facet#byteSlice'
              },
              features: {
                type: 'array',
                items: {
                  type: 'union',
                  refs: [
                    'lex:app.bsky.richtext.facet#mention',
                    'lex:app.bsky.richtext.facet#link',
                    'lex:app.bsky.richtext.facet#tag'
                  ]
                }
              }
            }
          },
          mention: {
            type: 'object',
            description: 'A facet feature for actor mentions.',
            required: ['did'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              }
            }
          },
          link: {
            type: 'object',
            description: 'A facet feature for links.',
            required: ['uri'],
            properties: {
              uri: {
                type: 'string',
                format: 'uri'
              }
            }
          },
          tag: {
            type: 'object',
            description: 'A hashtag.',
            required: ['tag'],
            properties: {
              tag: {
                type: 'string',
                maxLength: 640,
                maxGraphemes: 64
              }
            }
          },
          byteSlice: {
            type: 'object',
            description:
              'A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.',
            required: ['byteStart', 'byteEnd'],
            properties: {
              byteStart: {
                type: 'integer',
                minimum: 0
              },
              byteEnd: {
                type: 'integer',
                minimum: 0
              }
            }
          }
        }
      },
      AppBskyUnspeccedDefs: {
        lexicon: 1,
        id: 'app.bsky.unspecced.defs',
        defs: {
          skeletonSearchPost: {
            type: 'object',
            required: ['uri'],
            properties: {
              uri: {
                type: 'string',
                format: 'at-uri'
              }
            }
          },
          skeletonSearchActor: {
            type: 'object',
            required: ['did'],
            properties: {
              did: {
                type: 'string',
                format: 'did'
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetPopular: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getPopular',
        defs: {
          main: {
            type: 'query',
            description:
              'DEPRECATED: will be removed soon. Use a feed generator alternative.',
            parameters: {
              type: 'params',
              properties: {
                includeNsfw: {
                  type: 'boolean',
                  default: false
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#feedViewPost'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getPopularFeedGenerators',
        defs: {
          main: {
            type: 'query',
            description:
              'An unspecced view of globally popular feed generators.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                },
                query: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feeds'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feeds: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#generatorView'
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetTimelineSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTimelineSkeleton',
        defs: {
          main: {
            type: 'query',
            description:
              'DEPRECATED: a skeleton of a timeline. Unspecced and will be unavailable soon.',
            parameters: {
              type: 'params',
              properties: {
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: 'string'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['feed'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  feed: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.feed.defs#skeletonFeedPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'UnknownFeed'
              }
            ]
          }
        }
      },
      AppBskyUnspeccedSearchActorsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchActorsSkeleton',
        defs: {
          main: {
            type: 'query',
            description:
              'Backend Actors (profile) search, returns only skeleton.',
            parameters: {
              type: 'params',
              required: ['q'],
              properties: {
                q: {
                  type: 'string',
                  description:
                    'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.'
                },
                typeahead: {
                  type: 'boolean',
                  description: "If true, acts as fast/simple 'typeahead' query."
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: 'string',
                  description:
                    'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['actors'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  hitsTotal: {
                    type: 'integer',
                    description:
                      'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                  },
                  actors: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'BadQueryString'
              }
            ]
          }
        }
      },
      AppBskyUnspeccedSearchPostsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchPostsSkeleton',
        defs: {
          main: {
            type: 'query',
            description: 'Backend Posts search, returns only skeleton',
            parameters: {
              type: 'params',
              required: ['q'],
              properties: {
                q: {
                  type: 'string',
                  description:
                    'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                },
                limit: {
                  type: 'integer',
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: 'string',
                  description:
                    'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                }
              }
            },
            output: {
              encoding: 'application/json',
              schema: {
                type: 'object',
                required: ['posts'],
                properties: {
                  cursor: {
                    type: 'string'
                  },
                  hitsTotal: {
                    type: 'integer',
                    description:
                      'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                  },
                  posts: {
                    type: 'array',
                    items: {
                      type: 'ref',
                      ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost'
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: 'BadQueryString'
              }
            ]
          }
        }
      }
    }
    var schemas = Object.values(schemaDict)
    var lexicons = new Lexicons(schemas)

    // src/client/types/com/atproto/admin/deleteAccount.ts
    var deleteAccount_exports = {}
    __export(deleteAccount_exports, {
      toKnownErr: () => toKnownErr
    })
    function toKnownErr(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/disableAccountInvites.ts
    var disableAccountInvites_exports = {}
    __export(disableAccountInvites_exports, {
      toKnownErr: () => toKnownErr2
    })
    function toKnownErr2(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/disableInviteCodes.ts
    var disableInviteCodes_exports = {}
    __export(disableInviteCodes_exports, {
      toKnownErr: () => toKnownErr3
    })
    function toKnownErr3(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/emitModerationEvent.ts
    var emitModerationEvent_exports = {}
    __export(emitModerationEvent_exports, {
      SubjectHasActionError: () => SubjectHasActionError,
      toKnownErr: () => toKnownErr4
    })
    var SubjectHasActionError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr4(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e)
      }
      return e
    }

    // src/client/types/com/atproto/admin/enableAccountInvites.ts
    var enableAccountInvites_exports = {}
    __export(enableAccountInvites_exports, {
      toKnownErr: () => toKnownErr5
    })
    function toKnownErr5(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/getAccountInfo.ts
    var getAccountInfo_exports = {}
    __export(getAccountInfo_exports, {
      toKnownErr: () => toKnownErr6
    })
    function toKnownErr6(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/getInviteCodes.ts
    var getInviteCodes_exports = {}
    __export(getInviteCodes_exports, {
      toKnownErr: () => toKnownErr7
    })
    function toKnownErr7(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/getModerationEvent.ts
    var getModerationEvent_exports = {}
    __export(getModerationEvent_exports, {
      toKnownErr: () => toKnownErr8
    })
    function toKnownErr8(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/getRecord.ts
    var getRecord_exports = {}
    __export(getRecord_exports, {
      RecordNotFoundError: () => RecordNotFoundError,
      toKnownErr: () => toKnownErr9
    })
    var RecordNotFoundError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr9(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e)
      }
      return e
    }

    // src/client/types/com/atproto/admin/getRepo.ts
    var getRepo_exports = {}
    __export(getRepo_exports, {
      RepoNotFoundError: () => RepoNotFoundError,
      toKnownErr: () => toKnownErr10
    })
    var RepoNotFoundError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr10(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e)
      }
      return e
    }

    // src/client/types/com/atproto/admin/getSubjectStatus.ts
    var getSubjectStatus_exports = {}
    __export(getSubjectStatus_exports, {
      toKnownErr: () => toKnownErr11
    })
    function toKnownErr11(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/queryModerationEvents.ts
    var queryModerationEvents_exports = {}
    __export(queryModerationEvents_exports, {
      toKnownErr: () => toKnownErr12
    })
    function toKnownErr12(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/queryModerationStatuses.ts
    var queryModerationStatuses_exports = {}
    __export(queryModerationStatuses_exports, {
      toKnownErr: () => toKnownErr13
    })
    function toKnownErr13(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/searchRepos.ts
    var searchRepos_exports = {}
    __export(searchRepos_exports, {
      toKnownErr: () => toKnownErr14
    })
    function toKnownErr14(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/sendEmail.ts
    var sendEmail_exports = {}
    __export(sendEmail_exports, {
      toKnownErr: () => toKnownErr15
    })
    function toKnownErr15(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/updateAccountEmail.ts
    var updateAccountEmail_exports = {}
    __export(updateAccountEmail_exports, {
      toKnownErr: () => toKnownErr16
    })
    function toKnownErr16(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/updateAccountHandle.ts
    var updateAccountHandle_exports = {}
    __export(updateAccountHandle_exports, {
      toKnownErr: () => toKnownErr17
    })
    function toKnownErr17(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/admin/updateSubjectStatus.ts
    var updateSubjectStatus_exports = {}
    __export(updateSubjectStatus_exports, {
      toKnownErr: () => toKnownErr18
    })
    function toKnownErr18(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/identity/resolveHandle.ts
    var resolveHandle_exports = {}
    __export(resolveHandle_exports, {
      toKnownErr: () => toKnownErr19
    })
    function toKnownErr19(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/identity/updateHandle.ts
    var updateHandle_exports = {}
    __export(updateHandle_exports, {
      toKnownErr: () => toKnownErr20
    })
    function toKnownErr20(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/label/queryLabels.ts
    var queryLabels_exports = {}
    __export(queryLabels_exports, {
      toKnownErr: () => toKnownErr21
    })
    function toKnownErr21(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/moderation/createReport.ts
    var createReport_exports = {}
    __export(createReport_exports, {
      toKnownErr: () => toKnownErr22
    })
    function toKnownErr22(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/repo/applyWrites.ts
    var applyWrites_exports = {}
    __export(applyWrites_exports, {
      InvalidSwapError: () => InvalidSwapError,
      isCreate: () => isCreate,
      isDelete: () => isDelete,
      isUpdate: () => isUpdate,
      toKnownErr: () => toKnownErr23,
      validateCreate: () => validateCreate,
      validateDelete: () => validateDelete,
      validateUpdate: () => validateUpdate
    })

    // src/client/util.ts
    function isObj2(v) {
      return typeof v === 'object' && v !== null
    }
    function hasProp2(data, prop) {
      return prop in data
    }

    // src/client/types/com/atproto/repo/applyWrites.ts
    var InvalidSwapError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr23(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e)
      }
      return e
    }
    function isCreate(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.repo.applyWrites#create'
      )
    }
    function validateCreate(v) {
      return lexicons.validate('com.atproto.repo.applyWrites#create', v)
    }
    function isUpdate(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.repo.applyWrites#update'
      )
    }
    function validateUpdate(v) {
      return lexicons.validate('com.atproto.repo.applyWrites#update', v)
    }
    function isDelete(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.repo.applyWrites#delete'
      )
    }
    function validateDelete(v) {
      return lexicons.validate('com.atproto.repo.applyWrites#delete', v)
    }

    // src/client/types/com/atproto/repo/createRecord.ts
    var createRecord_exports = {}
    __export(createRecord_exports, {
      InvalidSwapError: () => InvalidSwapError2,
      toKnownErr: () => toKnownErr24
    })
    var InvalidSwapError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr24(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError2(e)
      }
      return e
    }

    // src/client/types/com/atproto/repo/deleteRecord.ts
    var deleteRecord_exports = {}
    __export(deleteRecord_exports, {
      InvalidSwapError: () => InvalidSwapError3,
      toKnownErr: () => toKnownErr25
    })
    var InvalidSwapError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr25(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError3(e)
      }
      return e
    }

    // src/client/types/com/atproto/repo/describeRepo.ts
    var describeRepo_exports = {}
    __export(describeRepo_exports, {
      toKnownErr: () => toKnownErr26
    })
    function toKnownErr26(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/repo/getRecord.ts
    var getRecord_exports2 = {}
    __export(getRecord_exports2, {
      toKnownErr: () => toKnownErr27
    })
    function toKnownErr27(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/repo/listRecords.ts
    var listRecords_exports = {}
    __export(listRecords_exports, {
      isRecord: () => isRecord,
      toKnownErr: () => toKnownErr28,
      validateRecord: () => validateRecord
    })
    function toKnownErr28(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isRecord(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.repo.listRecords#record'
      )
    }
    function validateRecord(v) {
      return lexicons.validate('com.atproto.repo.listRecords#record', v)
    }

    // src/client/types/com/atproto/repo/putRecord.ts
    var putRecord_exports = {}
    __export(putRecord_exports, {
      InvalidSwapError: () => InvalidSwapError4,
      toKnownErr: () => toKnownErr29
    })
    var InvalidSwapError4 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr29(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError4(e)
      }
      return e
    }

    // src/client/types/com/atproto/repo/uploadBlob.ts
    var uploadBlob_exports = {}
    __export(uploadBlob_exports, {
      toKnownErr: () => toKnownErr30
    })
    function toKnownErr30(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/confirmEmail.ts
    var confirmEmail_exports = {}
    __export(confirmEmail_exports, {
      AccountNotFoundError: () => AccountNotFoundError,
      ExpiredTokenError: () => ExpiredTokenError,
      InvalidEmailError: () => InvalidEmailError,
      InvalidTokenError: () => InvalidTokenError,
      toKnownErr: () => toKnownErr31
    })
    var AccountNotFoundError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var ExpiredTokenError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidTokenError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidEmailError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr31(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'AccountNotFound') return new AccountNotFoundError(e)
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)
        if (e.error === 'InvalidToken') return new InvalidTokenError(e)
        if (e.error === 'InvalidEmail') return new InvalidEmailError(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/createAccount.ts
    var createAccount_exports = {}
    __export(createAccount_exports, {
      HandleNotAvailableError: () => HandleNotAvailableError,
      IncompatibleDidDocError: () => IncompatibleDidDocError,
      InvalidHandleError: () => InvalidHandleError2,
      InvalidInviteCodeError: () => InvalidInviteCodeError,
      InvalidPasswordError: () => InvalidPasswordError,
      UnresolvableDidError: () => UnresolvableDidError,
      UnsupportedDomainError: () => UnsupportedDomainError,
      toKnownErr: () => toKnownErr32
    })
    var InvalidHandleError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidPasswordError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidInviteCodeError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var HandleNotAvailableError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var UnsupportedDomainError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var UnresolvableDidError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var IncompatibleDidDocError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr32(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidHandle') return new InvalidHandleError2(e)
        if (e.error === 'InvalidPassword') return new InvalidPasswordError(e)
        if (e.error === 'InvalidInviteCode')
          return new InvalidInviteCodeError(e)
        if (e.error === 'HandleNotAvailable')
          return new HandleNotAvailableError(e)
        if (e.error === 'UnsupportedDomain')
          return new UnsupportedDomainError(e)
        if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e)
        if (e.error === 'IncompatibleDidDoc')
          return new IncompatibleDidDocError(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/createAppPassword.ts
    var createAppPassword_exports = {}
    __export(createAppPassword_exports, {
      AccountTakedownError: () => AccountTakedownError,
      isAppPassword: () => isAppPassword,
      toKnownErr: () => toKnownErr33,
      validateAppPassword: () => validateAppPassword
    })
    var AccountTakedownError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr33(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e)
      }
      return e
    }
    function isAppPassword(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.createAppPassword#appPassword'
      )
    }
    function validateAppPassword(v) {
      return lexicons.validate(
        'com.atproto.server.createAppPassword#appPassword',
        v
      )
    }

    // src/client/types/com/atproto/server/createInviteCode.ts
    var createInviteCode_exports = {}
    __export(createInviteCode_exports, {
      toKnownErr: () => toKnownErr34
    })
    function toKnownErr34(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/createInviteCodes.ts
    var createInviteCodes_exports = {}
    __export(createInviteCodes_exports, {
      isAccountCodes: () => isAccountCodes,
      toKnownErr: () => toKnownErr35,
      validateAccountCodes: () => validateAccountCodes
    })
    function toKnownErr35(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isAccountCodes(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.createInviteCodes#accountCodes'
      )
    }
    function validateAccountCodes(v) {
      return lexicons.validate(
        'com.atproto.server.createInviteCodes#accountCodes',
        v
      )
    }

    // src/client/types/com/atproto/server/createSession.ts
    var createSession_exports = {}
    __export(createSession_exports, {
      AccountTakedownError: () => AccountTakedownError2,
      toKnownErr: () => toKnownErr36
    })
    var AccountTakedownError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr36(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError2(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/deleteAccount.ts
    var deleteAccount_exports2 = {}
    __export(deleteAccount_exports2, {
      ExpiredTokenError: () => ExpiredTokenError2,
      InvalidTokenError: () => InvalidTokenError2,
      toKnownErr: () => toKnownErr37
    })
    var ExpiredTokenError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidTokenError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr37(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError2(e)
        if (e.error === 'InvalidToken') return new InvalidTokenError2(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/deleteSession.ts
    var deleteSession_exports = {}
    __export(deleteSession_exports, {
      toKnownErr: () => toKnownErr38
    })
    function toKnownErr38(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/describeServer.ts
    var describeServer_exports = {}
    __export(describeServer_exports, {
      isLinks: () => isLinks,
      toKnownErr: () => toKnownErr39,
      validateLinks: () => validateLinks
    })
    function toKnownErr39(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isLinks(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.describeServer#links'
      )
    }
    function validateLinks(v) {
      return lexicons.validate('com.atproto.server.describeServer#links', v)
    }

    // src/client/types/com/atproto/server/getAccountInviteCodes.ts
    var getAccountInviteCodes_exports = {}
    __export(getAccountInviteCodes_exports, {
      DuplicateCreateError: () => DuplicateCreateError,
      toKnownErr: () => toKnownErr40
    })
    var DuplicateCreateError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr40(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/getSession.ts
    var getSession_exports = {}
    __export(getSession_exports, {
      toKnownErr: () => toKnownErr41
    })
    function toKnownErr41(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/listAppPasswords.ts
    var listAppPasswords_exports = {}
    __export(listAppPasswords_exports, {
      AccountTakedownError: () => AccountTakedownError3,
      isAppPassword: () => isAppPassword2,
      toKnownErr: () => toKnownErr42,
      validateAppPassword: () => validateAppPassword2
    })
    var AccountTakedownError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr42(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError3(e)
      }
      return e
    }
    function isAppPassword2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.listAppPasswords#appPassword'
      )
    }
    function validateAppPassword2(v) {
      return lexicons.validate(
        'com.atproto.server.listAppPasswords#appPassword',
        v
      )
    }

    // src/client/types/com/atproto/server/refreshSession.ts
    var refreshSession_exports = {}
    __export(refreshSession_exports, {
      AccountTakedownError: () => AccountTakedownError4,
      toKnownErr: () => toKnownErr43
    })
    var AccountTakedownError4 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr43(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError4(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/requestAccountDelete.ts
    var requestAccountDelete_exports = {}
    __export(requestAccountDelete_exports, {
      toKnownErr: () => toKnownErr44
    })
    function toKnownErr44(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/requestEmailConfirmation.ts
    var requestEmailConfirmation_exports = {}
    __export(requestEmailConfirmation_exports, {
      toKnownErr: () => toKnownErr45
    })
    function toKnownErr45(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/requestEmailUpdate.ts
    var requestEmailUpdate_exports = {}
    __export(requestEmailUpdate_exports, {
      toKnownErr: () => toKnownErr46
    })
    function toKnownErr46(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/requestPasswordReset.ts
    var requestPasswordReset_exports = {}
    __export(requestPasswordReset_exports, {
      toKnownErr: () => toKnownErr47
    })
    function toKnownErr47(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/reserveSigningKey.ts
    var reserveSigningKey_exports = {}
    __export(reserveSigningKey_exports, {
      toKnownErr: () => toKnownErr48
    })
    function toKnownErr48(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/resetPassword.ts
    var resetPassword_exports = {}
    __export(resetPassword_exports, {
      ExpiredTokenError: () => ExpiredTokenError3,
      InvalidTokenError: () => InvalidTokenError3,
      toKnownErr: () => toKnownErr49
    })
    var ExpiredTokenError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidTokenError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr49(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError3(e)
        if (e.error === 'InvalidToken') return new InvalidTokenError3(e)
      }
      return e
    }

    // src/client/types/com/atproto/server/revokeAppPassword.ts
    var revokeAppPassword_exports = {}
    __export(revokeAppPassword_exports, {
      toKnownErr: () => toKnownErr50
    })
    function toKnownErr50(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/server/updateEmail.ts
    var updateEmail_exports = {}
    __export(updateEmail_exports, {
      ExpiredTokenError: () => ExpiredTokenError4,
      InvalidTokenError: () => InvalidTokenError4,
      TokenRequiredError: () => TokenRequiredError,
      toKnownErr: () => toKnownErr51
    })
    var ExpiredTokenError4 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidTokenError4 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var TokenRequiredError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr51(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError4(e)
        if (e.error === 'InvalidToken') return new InvalidTokenError4(e)
        if (e.error === 'TokenRequired') return new TokenRequiredError(e)
      }
      return e
    }

    // src/client/types/com/atproto/sync/getBlob.ts
    var getBlob_exports = {}
    __export(getBlob_exports, {
      toKnownErr: () => toKnownErr52
    })
    function toKnownErr52(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/getBlocks.ts
    var getBlocks_exports = {}
    __export(getBlocks_exports, {
      toKnownErr: () => toKnownErr53
    })
    function toKnownErr53(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/getCheckout.ts
    var getCheckout_exports = {}
    __export(getCheckout_exports, {
      toKnownErr: () => toKnownErr54
    })
    function toKnownErr54(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/getHead.ts
    var getHead_exports = {}
    __export(getHead_exports, {
      HeadNotFoundError: () => HeadNotFoundError,
      toKnownErr: () => toKnownErr55
    })
    var HeadNotFoundError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr55(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'HeadNotFound') return new HeadNotFoundError(e)
      }
      return e
    }

    // src/client/types/com/atproto/sync/getLatestCommit.ts
    var getLatestCommit_exports = {}
    __export(getLatestCommit_exports, {
      RepoNotFoundError: () => RepoNotFoundError2,
      toKnownErr: () => toKnownErr56
    })
    var RepoNotFoundError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr56(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError2(e)
      }
      return e
    }

    // src/client/types/com/atproto/sync/getRecord.ts
    var getRecord_exports3 = {}
    __export(getRecord_exports3, {
      toKnownErr: () => toKnownErr57
    })
    function toKnownErr57(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/getRepo.ts
    var getRepo_exports2 = {}
    __export(getRepo_exports2, {
      toKnownErr: () => toKnownErr58
    })
    function toKnownErr58(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/listBlobs.ts
    var listBlobs_exports = {}
    __export(listBlobs_exports, {
      toKnownErr: () => toKnownErr59
    })
    function toKnownErr59(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/listRepos.ts
    var listRepos_exports = {}
    __export(listRepos_exports, {
      isRepo: () => isRepo,
      toKnownErr: () => toKnownErr60,
      validateRepo: () => validateRepo
    })
    function toKnownErr60(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isRepo(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.listRepos#repo'
      )
    }
    function validateRepo(v) {
      return lexicons.validate('com.atproto.sync.listRepos#repo', v)
    }

    // src/client/types/com/atproto/sync/notifyOfUpdate.ts
    var notifyOfUpdate_exports = {}
    __export(notifyOfUpdate_exports, {
      toKnownErr: () => toKnownErr61
    })
    function toKnownErr61(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/sync/requestCrawl.ts
    var requestCrawl_exports = {}
    __export(requestCrawl_exports, {
      toKnownErr: () => toKnownErr62
    })
    function toKnownErr62(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/temp/fetchLabels.ts
    var fetchLabels_exports = {}
    __export(fetchLabels_exports, {
      toKnownErr: () => toKnownErr63
    })
    function toKnownErr63(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/temp/importRepo.ts
    var importRepo_exports = {}
    __export(importRepo_exports, {
      toKnownErr: () => toKnownErr64
    })
    function toKnownErr64(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/temp/pushBlob.ts
    var pushBlob_exports = {}
    __export(pushBlob_exports, {
      toKnownErr: () => toKnownErr65
    })
    function toKnownErr65(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/com/atproto/temp/transferAccount.ts
    var transferAccount_exports = {}
    __export(transferAccount_exports, {
      HandleNotAvailableError: () => HandleNotAvailableError2,
      IncompatibleDidDocError: () => IncompatibleDidDocError2,
      InvalidHandleError: () => InvalidHandleError3,
      InvalidInviteCodeError: () => InvalidInviteCodeError2,
      InvalidPasswordError: () => InvalidPasswordError2,
      UnresolvableDidError: () => UnresolvableDidError2,
      UnsupportedDomainError: () => UnsupportedDomainError2,
      toKnownErr: () => toKnownErr66
    })
    var InvalidHandleError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidPasswordError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var InvalidInviteCodeError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var HandleNotAvailableError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var UnsupportedDomainError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var UnresolvableDidError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var IncompatibleDidDocError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr66(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'InvalidHandle') return new InvalidHandleError3(e)
        if (e.error === 'InvalidPassword') return new InvalidPasswordError2(e)
        if (e.error === 'InvalidInviteCode')
          return new InvalidInviteCodeError2(e)
        if (e.error === 'HandleNotAvailable')
          return new HandleNotAvailableError2(e)
        if (e.error === 'UnsupportedDomain')
          return new UnsupportedDomainError2(e)
        if (e.error === 'UnresolvableDid') return new UnresolvableDidError2(e)
        if (e.error === 'IncompatibleDidDoc')
          return new IncompatibleDidDocError2(e)
      }
      return e
    }

    // src/client/types/app/bsky/actor/getPreferences.ts
    var getPreferences_exports = {}
    __export(getPreferences_exports, {
      toKnownErr: () => toKnownErr67
    })
    function toKnownErr67(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/getProfile.ts
    var getProfile_exports = {}
    __export(getProfile_exports, {
      toKnownErr: () => toKnownErr68
    })
    function toKnownErr68(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/getProfiles.ts
    var getProfiles_exports = {}
    __export(getProfiles_exports, {
      toKnownErr: () => toKnownErr69
    })
    function toKnownErr69(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/getSuggestions.ts
    var getSuggestions_exports = {}
    __export(getSuggestions_exports, {
      toKnownErr: () => toKnownErr70
    })
    function toKnownErr70(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/putPreferences.ts
    var putPreferences_exports = {}
    __export(putPreferences_exports, {
      toKnownErr: () => toKnownErr71
    })
    function toKnownErr71(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/searchActors.ts
    var searchActors_exports = {}
    __export(searchActors_exports, {
      toKnownErr: () => toKnownErr72
    })
    function toKnownErr72(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/actor/searchActorsTypeahead.ts
    var searchActorsTypeahead_exports = {}
    __export(searchActorsTypeahead_exports, {
      toKnownErr: () => toKnownErr73
    })
    function toKnownErr73(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/describeFeedGenerator.ts
    var describeFeedGenerator_exports = {}
    __export(describeFeedGenerator_exports, {
      isFeed: () => isFeed,
      isLinks: () => isLinks2,
      toKnownErr: () => toKnownErr74,
      validateFeed: () => validateFeed,
      validateLinks: () => validateLinks2
    })
    function toKnownErr74(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isFeed(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.describeFeedGenerator#feed'
      )
    }
    function validateFeed(v) {
      return lexicons.validate('app.bsky.feed.describeFeedGenerator#feed', v)
    }
    function isLinks2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.describeFeedGenerator#links'
      )
    }
    function validateLinks2(v) {
      return lexicons.validate('app.bsky.feed.describeFeedGenerator#links', v)
    }

    // src/client/types/app/bsky/feed/getActorFeeds.ts
    var getActorFeeds_exports = {}
    __export(getActorFeeds_exports, {
      toKnownErr: () => toKnownErr75
    })
    function toKnownErr75(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getActorLikes.ts
    var getActorLikes_exports = {}
    __export(getActorLikes_exports, {
      BlockedActorError: () => BlockedActorError,
      BlockedByActorError: () => BlockedByActorError,
      toKnownErr: () => toKnownErr76
    })
    var BlockedActorError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var BlockedByActorError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr76(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError(e)
        if (e.error === 'BlockedByActor') return new BlockedByActorError(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getAuthorFeed.ts
    var getAuthorFeed_exports = {}
    __export(getAuthorFeed_exports, {
      BlockedActorError: () => BlockedActorError2,
      BlockedByActorError: () => BlockedByActorError2,
      toKnownErr: () => toKnownErr77
    })
    var BlockedActorError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    var BlockedByActorError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr77(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError2(e)
        if (e.error === 'BlockedByActor') return new BlockedByActorError2(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getFeed.ts
    var getFeed_exports = {}
    __export(getFeed_exports, {
      UnknownFeedError: () => UnknownFeedError,
      toKnownErr: () => toKnownErr78
    })
    var UnknownFeedError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr78(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getFeedGenerator.ts
    var getFeedGenerator_exports = {}
    __export(getFeedGenerator_exports, {
      toKnownErr: () => toKnownErr79
    })
    function toKnownErr79(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getFeedGenerators.ts
    var getFeedGenerators_exports = {}
    __export(getFeedGenerators_exports, {
      toKnownErr: () => toKnownErr80
    })
    function toKnownErr80(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getFeedSkeleton.ts
    var getFeedSkeleton_exports = {}
    __export(getFeedSkeleton_exports, {
      UnknownFeedError: () => UnknownFeedError2,
      toKnownErr: () => toKnownErr81
    })
    var UnknownFeedError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr81(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError2(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getLikes.ts
    var getLikes_exports = {}
    __export(getLikes_exports, {
      isLike: () => isLike,
      toKnownErr: () => toKnownErr82,
      validateLike: () => validateLike
    })
    function toKnownErr82(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isLike(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.getLikes#like'
      )
    }
    function validateLike(v) {
      return lexicons.validate('app.bsky.feed.getLikes#like', v)
    }

    // src/client/types/app/bsky/feed/getListFeed.ts
    var getListFeed_exports = {}
    __export(getListFeed_exports, {
      UnknownListError: () => UnknownListError,
      toKnownErr: () => toKnownErr83
    })
    var UnknownListError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr83(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'UnknownList') return new UnknownListError(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getPostThread.ts
    var getPostThread_exports = {}
    __export(getPostThread_exports, {
      NotFoundError: () => NotFoundError,
      toKnownErr: () => toKnownErr84
    })
    var NotFoundError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr84(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'NotFound') return new NotFoundError(e)
      }
      return e
    }

    // src/client/types/app/bsky/feed/getPosts.ts
    var getPosts_exports = {}
    __export(getPosts_exports, {
      toKnownErr: () => toKnownErr85
    })
    function toKnownErr85(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getRepostedBy.ts
    var getRepostedBy_exports = {}
    __export(getRepostedBy_exports, {
      toKnownErr: () => toKnownErr86
    })
    function toKnownErr86(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getSuggestedFeeds.ts
    var getSuggestedFeeds_exports = {}
    __export(getSuggestedFeeds_exports, {
      toKnownErr: () => toKnownErr87
    })
    function toKnownErr87(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/getTimeline.ts
    var getTimeline_exports = {}
    __export(getTimeline_exports, {
      toKnownErr: () => toKnownErr88
    })
    function toKnownErr88(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/feed/searchPosts.ts
    var searchPosts_exports = {}
    __export(searchPosts_exports, {
      BadQueryStringError: () => BadQueryStringError,
      toKnownErr: () => toKnownErr89
    })
    var BadQueryStringError = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr89(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e)
      }
      return e
    }

    // src/client/types/app/bsky/graph/getBlocks.ts
    var getBlocks_exports2 = {}
    __export(getBlocks_exports2, {
      toKnownErr: () => toKnownErr90
    })
    function toKnownErr90(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getFollowers.ts
    var getFollowers_exports = {}
    __export(getFollowers_exports, {
      toKnownErr: () => toKnownErr91
    })
    function toKnownErr91(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getFollows.ts
    var getFollows_exports = {}
    __export(getFollows_exports, {
      toKnownErr: () => toKnownErr92
    })
    function toKnownErr92(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getList.ts
    var getList_exports = {}
    __export(getList_exports, {
      toKnownErr: () => toKnownErr93
    })
    function toKnownErr93(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getListBlocks.ts
    var getListBlocks_exports = {}
    __export(getListBlocks_exports, {
      toKnownErr: () => toKnownErr94
    })
    function toKnownErr94(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getListMutes.ts
    var getListMutes_exports = {}
    __export(getListMutes_exports, {
      toKnownErr: () => toKnownErr95
    })
    function toKnownErr95(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getLists.ts
    var getLists_exports = {}
    __export(getLists_exports, {
      toKnownErr: () => toKnownErr96
    })
    function toKnownErr96(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getMutes.ts
    var getMutes_exports = {}
    __export(getMutes_exports, {
      toKnownErr: () => toKnownErr97
    })
    function toKnownErr97(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/getSuggestedFollowsByActor.ts
    var getSuggestedFollowsByActor_exports = {}
    __export(getSuggestedFollowsByActor_exports, {
      toKnownErr: () => toKnownErr98
    })
    function toKnownErr98(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/muteActor.ts
    var muteActor_exports = {}
    __export(muteActor_exports, {
      toKnownErr: () => toKnownErr99
    })
    function toKnownErr99(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/muteActorList.ts
    var muteActorList_exports = {}
    __export(muteActorList_exports, {
      toKnownErr: () => toKnownErr100
    })
    function toKnownErr100(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/unmuteActor.ts
    var unmuteActor_exports = {}
    __export(unmuteActor_exports, {
      toKnownErr: () => toKnownErr101
    })
    function toKnownErr101(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/graph/unmuteActorList.ts
    var unmuteActorList_exports = {}
    __export(unmuteActorList_exports, {
      toKnownErr: () => toKnownErr102
    })
    function toKnownErr102(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/notification/getUnreadCount.ts
    var getUnreadCount_exports = {}
    __export(getUnreadCount_exports, {
      toKnownErr: () => toKnownErr103
    })
    function toKnownErr103(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/notification/listNotifications.ts
    var listNotifications_exports = {}
    __export(listNotifications_exports, {
      isNotification: () => isNotification,
      toKnownErr: () => toKnownErr104,
      validateNotification: () => validateNotification
    })
    function toKnownErr104(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }
    function isNotification(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.notification.listNotifications#notification'
      )
    }
    function validateNotification(v) {
      return lexicons.validate(
        'app.bsky.notification.listNotifications#notification',
        v
      )
    }

    // src/client/types/app/bsky/notification/registerPush.ts
    var registerPush_exports = {}
    __export(registerPush_exports, {
      toKnownErr: () => toKnownErr105
    })
    function toKnownErr105(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/notification/updateSeen.ts
    var updateSeen_exports = {}
    __export(updateSeen_exports, {
      toKnownErr: () => toKnownErr106
    })
    function toKnownErr106(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/unspecced/getPopular.ts
    var getPopular_exports = {}
    __export(getPopular_exports, {
      toKnownErr: () => toKnownErr107
    })
    function toKnownErr107(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/unspecced/getPopularFeedGenerators.ts
    var getPopularFeedGenerators_exports = {}
    __export(getPopularFeedGenerators_exports, {
      toKnownErr: () => toKnownErr108
    })
    function toKnownErr108(e) {
      if (e instanceof XRPCError) {
      }
      return e
    }

    // src/client/types/app/bsky/unspecced/getTimelineSkeleton.ts
    var getTimelineSkeleton_exports = {}
    __export(getTimelineSkeleton_exports, {
      UnknownFeedError: () => UnknownFeedError3,
      toKnownErr: () => toKnownErr109
    })
    var UnknownFeedError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr109(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError3(e)
      }
      return e
    }

    // src/client/types/app/bsky/unspecced/searchActorsSkeleton.ts
    var searchActorsSkeleton_exports = {}
    __export(searchActorsSkeleton_exports, {
      BadQueryStringError: () => BadQueryStringError2,
      toKnownErr: () => toKnownErr110
    })
    var BadQueryStringError2 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr110(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError2(e)
      }
      return e
    }

    // src/client/types/app/bsky/unspecced/searchPostsSkeleton.ts
    var searchPostsSkeleton_exports = {}
    __export(searchPostsSkeleton_exports, {
      BadQueryStringError: () => BadQueryStringError3,
      toKnownErr: () => toKnownErr111
    })
    var BadQueryStringError3 = class extends XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers)
      }
    }
    function toKnownErr111(e) {
      if (e instanceof XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError3(e)
      }
      return e
    }

    // src/client/types/com/atproto/admin/defs.ts
    var defs_exports = {}
    __export(defs_exports, {
      REVIEWCLOSED: () => REVIEWCLOSED,
      REVIEWESCALATED: () => REVIEWESCALATED,
      REVIEWOPEN: () => REVIEWOPEN,
      isAccountView: () => isAccountView,
      isBlobView: () => isBlobView,
      isImageDetails: () => isImageDetails,
      isModEventAcknowledge: () => isModEventAcknowledge,
      isModEventComment: () => isModEventComment,
      isModEventEmail: () => isModEventEmail,
      isModEventEscalate: () => isModEventEscalate,
      isModEventLabel: () => isModEventLabel,
      isModEventMute: () => isModEventMute,
      isModEventReport: () => isModEventReport,
      isModEventReverseTakedown: () => isModEventReverseTakedown,
      isModEventTakedown: () => isModEventTakedown,
      isModEventUnmute: () => isModEventUnmute,
      isModEventView: () => isModEventView,
      isModEventViewDetail: () => isModEventViewDetail,
      isModeration: () => isModeration,
      isModerationDetail: () => isModerationDetail,
      isRecordView: () => isRecordView,
      isRecordViewDetail: () => isRecordViewDetail,
      isRecordViewNotFound: () => isRecordViewNotFound,
      isRepoBlobRef: () => isRepoBlobRef,
      isRepoRef: () => isRepoRef,
      isRepoView: () => isRepoView,
      isRepoViewDetail: () => isRepoViewDetail,
      isRepoViewNotFound: () => isRepoViewNotFound,
      isReportView: () => isReportView,
      isReportViewDetail: () => isReportViewDetail,
      isStatusAttr: () => isStatusAttr,
      isSubjectStatusView: () => isSubjectStatusView,
      isVideoDetails: () => isVideoDetails,
      validateAccountView: () => validateAccountView,
      validateBlobView: () => validateBlobView,
      validateImageDetails: () => validateImageDetails,
      validateModEventAcknowledge: () => validateModEventAcknowledge,
      validateModEventComment: () => validateModEventComment,
      validateModEventEmail: () => validateModEventEmail,
      validateModEventEscalate: () => validateModEventEscalate,
      validateModEventLabel: () => validateModEventLabel,
      validateModEventMute: () => validateModEventMute,
      validateModEventReport: () => validateModEventReport,
      validateModEventReverseTakedown: () => validateModEventReverseTakedown,
      validateModEventTakedown: () => validateModEventTakedown,
      validateModEventUnmute: () => validateModEventUnmute,
      validateModEventView: () => validateModEventView,
      validateModEventViewDetail: () => validateModEventViewDetail,
      validateModeration: () => validateModeration,
      validateModerationDetail: () => validateModerationDetail,
      validateRecordView: () => validateRecordView,
      validateRecordViewDetail: () => validateRecordViewDetail,
      validateRecordViewNotFound: () => validateRecordViewNotFound,
      validateRepoBlobRef: () => validateRepoBlobRef,
      validateRepoRef: () => validateRepoRef,
      validateRepoView: () => validateRepoView,
      validateRepoViewDetail: () => validateRepoViewDetail,
      validateRepoViewNotFound: () => validateRepoViewNotFound,
      validateReportView: () => validateReportView,
      validateReportViewDetail: () => validateReportViewDetail,
      validateStatusAttr: () => validateStatusAttr,
      validateSubjectStatusView: () => validateSubjectStatusView,
      validateVideoDetails: () => validateVideoDetails
    })
    function isStatusAttr(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#statusAttr'
      )
    }
    function validateStatusAttr(v) {
      return lexicons.validate('com.atproto.admin.defs#statusAttr', v)
    }
    function isModEventView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventView'
      )
    }
    function validateModEventView(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventView', v)
    }
    function isModEventViewDetail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventViewDetail'
      )
    }
    function validateModEventViewDetail(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventViewDetail', v)
    }
    function isReportView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#reportView'
      )
    }
    function validateReportView(v) {
      return lexicons.validate('com.atproto.admin.defs#reportView', v)
    }
    function isSubjectStatusView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#subjectStatusView'
      )
    }
    function validateSubjectStatusView(v) {
      return lexicons.validate('com.atproto.admin.defs#subjectStatusView', v)
    }
    function isReportViewDetail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#reportViewDetail'
      )
    }
    function validateReportViewDetail(v) {
      return lexicons.validate('com.atproto.admin.defs#reportViewDetail', v)
    }
    function isRepoView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#repoView'
      )
    }
    function validateRepoView(v) {
      return lexicons.validate('com.atproto.admin.defs#repoView', v)
    }
    function isRepoViewDetail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#repoViewDetail'
      )
    }
    function validateRepoViewDetail(v) {
      return lexicons.validate('com.atproto.admin.defs#repoViewDetail', v)
    }
    function isAccountView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#accountView'
      )
    }
    function validateAccountView(v) {
      return lexicons.validate('com.atproto.admin.defs#accountView', v)
    }
    function isRepoViewNotFound(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#repoViewNotFound'
      )
    }
    function validateRepoViewNotFound(v) {
      return lexicons.validate('com.atproto.admin.defs#repoViewNotFound', v)
    }
    function isRepoRef(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#repoRef'
      )
    }
    function validateRepoRef(v) {
      return lexicons.validate('com.atproto.admin.defs#repoRef', v)
    }
    function isRepoBlobRef(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#repoBlobRef'
      )
    }
    function validateRepoBlobRef(v) {
      return lexicons.validate('com.atproto.admin.defs#repoBlobRef', v)
    }
    function isRecordView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#recordView'
      )
    }
    function validateRecordView(v) {
      return lexicons.validate('com.atproto.admin.defs#recordView', v)
    }
    function isRecordViewDetail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#recordViewDetail'
      )
    }
    function validateRecordViewDetail(v) {
      return lexicons.validate('com.atproto.admin.defs#recordViewDetail', v)
    }
    function isRecordViewNotFound(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#recordViewNotFound'
      )
    }
    function validateRecordViewNotFound(v) {
      return lexicons.validate('com.atproto.admin.defs#recordViewNotFound', v)
    }
    function isModeration(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#moderation'
      )
    }
    function validateModeration(v) {
      return lexicons.validate('com.atproto.admin.defs#moderation', v)
    }
    function isModerationDetail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#moderationDetail'
      )
    }
    function validateModerationDetail(v) {
      return lexicons.validate('com.atproto.admin.defs#moderationDetail', v)
    }
    function isBlobView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#blobView'
      )
    }
    function validateBlobView(v) {
      return lexicons.validate('com.atproto.admin.defs#blobView', v)
    }
    function isImageDetails(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#imageDetails'
      )
    }
    function validateImageDetails(v) {
      return lexicons.validate('com.atproto.admin.defs#imageDetails', v)
    }
    function isVideoDetails(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#videoDetails'
      )
    }
    function validateVideoDetails(v) {
      return lexicons.validate('com.atproto.admin.defs#videoDetails', v)
    }
    var REVIEWOPEN = 'com.atproto.admin.defs#reviewOpen'
    var REVIEWESCALATED = 'com.atproto.admin.defs#reviewEscalated'
    var REVIEWCLOSED = 'com.atproto.admin.defs#reviewClosed'
    function isModEventTakedown(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventTakedown'
      )
    }
    function validateModEventTakedown(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventTakedown', v)
    }
    function isModEventReverseTakedown(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventReverseTakedown'
      )
    }
    function validateModEventReverseTakedown(v) {
      return lexicons.validate(
        'com.atproto.admin.defs#modEventReverseTakedown',
        v
      )
    }
    function isModEventComment(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventComment'
      )
    }
    function validateModEventComment(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventComment', v)
    }
    function isModEventReport(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventReport'
      )
    }
    function validateModEventReport(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventReport', v)
    }
    function isModEventLabel(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventLabel'
      )
    }
    function validateModEventLabel(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventLabel', v)
    }
    function isModEventAcknowledge(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventAcknowledge'
      )
    }
    function validateModEventAcknowledge(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventAcknowledge', v)
    }
    function isModEventEscalate(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventEscalate'
      )
    }
    function validateModEventEscalate(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventEscalate', v)
    }
    function isModEventMute(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventMute'
      )
    }
    function validateModEventMute(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventMute', v)
    }
    function isModEventUnmute(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventUnmute'
      )
    }
    function validateModEventUnmute(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventUnmute', v)
    }
    function isModEventEmail(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.admin.defs#modEventEmail'
      )
    }
    function validateModEventEmail(v) {
      return lexicons.validate('com.atproto.admin.defs#modEventEmail', v)
    }

    // src/client/types/com/atproto/label/defs.ts
    var defs_exports2 = {}
    __export(defs_exports2, {
      isLabel: () => isLabel,
      isSelfLabel: () => isSelfLabel,
      isSelfLabels: () => isSelfLabels,
      validateLabel: () => validateLabel,
      validateSelfLabel: () => validateSelfLabel,
      validateSelfLabels: () => validateSelfLabels
    })
    function isLabel(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.label.defs#label'
      )
    }
    function validateLabel(v) {
      return lexicons.validate('com.atproto.label.defs#label', v)
    }
    function isSelfLabels(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.label.defs#selfLabels'
      )
    }
    function validateSelfLabels(v) {
      return lexicons.validate('com.atproto.label.defs#selfLabels', v)
    }
    function isSelfLabel(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.label.defs#selfLabel'
      )
    }
    function validateSelfLabel(v) {
      return lexicons.validate('com.atproto.label.defs#selfLabel', v)
    }

    // src/client/types/com/atproto/label/subscribeLabels.ts
    var subscribeLabels_exports = {}
    __export(subscribeLabels_exports, {
      isInfo: () => isInfo,
      isLabels: () => isLabels,
      validateInfo: () => validateInfo,
      validateLabels: () => validateLabels
    })
    function isLabels(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.label.subscribeLabels#labels'
      )
    }
    function validateLabels(v) {
      return lexicons.validate('com.atproto.label.subscribeLabels#labels', v)
    }
    function isInfo(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.label.subscribeLabels#info'
      )
    }
    function validateInfo(v) {
      return lexicons.validate('com.atproto.label.subscribeLabels#info', v)
    }

    // src/client/types/com/atproto/moderation/defs.ts
    var defs_exports3 = {}
    __export(defs_exports3, {
      REASONMISLEADING: () => REASONMISLEADING,
      REASONOTHER: () => REASONOTHER,
      REASONRUDE: () => REASONRUDE,
      REASONSEXUAL: () => REASONSEXUAL,
      REASONSPAM: () => REASONSPAM,
      REASONVIOLATION: () => REASONVIOLATION
    })
    var REASONSPAM = 'com.atproto.moderation.defs#reasonSpam'
    var REASONVIOLATION = 'com.atproto.moderation.defs#reasonViolation'
    var REASONMISLEADING = 'com.atproto.moderation.defs#reasonMisleading'
    var REASONSEXUAL = 'com.atproto.moderation.defs#reasonSexual'
    var REASONRUDE = 'com.atproto.moderation.defs#reasonRude'
    var REASONOTHER = 'com.atproto.moderation.defs#reasonOther'

    // src/client/types/com/atproto/repo/strongRef.ts
    var strongRef_exports = {}
    __export(strongRef_exports, {
      isMain: () => isMain,
      validateMain: () => validateMain
    })
    function isMain(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'com.atproto.repo.strongRef#main' ||
          v.$type === 'com.atproto.repo.strongRef')
      )
    }
    function validateMain(v) {
      return lexicons.validate('com.atproto.repo.strongRef#main', v)
    }

    // src/client/types/com/atproto/server/defs.ts
    var defs_exports4 = {}
    __export(defs_exports4, {
      isInviteCode: () => isInviteCode,
      isInviteCodeUse: () => isInviteCodeUse,
      validateInviteCode: () => validateInviteCode,
      validateInviteCodeUse: () => validateInviteCodeUse
    })
    function isInviteCode(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.defs#inviteCode'
      )
    }
    function validateInviteCode(v) {
      return lexicons.validate('com.atproto.server.defs#inviteCode', v)
    }
    function isInviteCodeUse(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.server.defs#inviteCodeUse'
      )
    }
    function validateInviteCodeUse(v) {
      return lexicons.validate('com.atproto.server.defs#inviteCodeUse', v)
    }

    // src/client/types/com/atproto/sync/subscribeRepos.ts
    var subscribeRepos_exports = {}
    __export(subscribeRepos_exports, {
      isCommit: () => isCommit,
      isHandle: () => isHandle,
      isInfo: () => isInfo2,
      isMigrate: () => isMigrate,
      isRepoOp: () => isRepoOp,
      isTombstone: () => isTombstone,
      validateCommit: () => validateCommit,
      validateHandle: () => validateHandle,
      validateInfo: () => validateInfo2,
      validateMigrate: () => validateMigrate,
      validateRepoOp: () => validateRepoOp,
      validateTombstone: () => validateTombstone
    })
    function isCommit(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#commit'
      )
    }
    function validateCommit(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#commit', v)
    }
    function isHandle(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#handle'
      )
    }
    function validateHandle(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#handle', v)
    }
    function isMigrate(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#migrate'
      )
    }
    function validateMigrate(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v)
    }
    function isTombstone(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#tombstone'
      )
    }
    function validateTombstone(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v)
    }
    function isInfo2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#info'
      )
    }
    function validateInfo2(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#info', v)
    }
    function isRepoOp(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'com.atproto.sync.subscribeRepos#repoOp'
      )
    }
    function validateRepoOp(v) {
      return lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v)
    }

    // src/client/types/app/bsky/actor/defs.ts
    var defs_exports5 = {}
    __export(defs_exports5, {
      isAdultContentPref: () => isAdultContentPref,
      isContentLabelPref: () => isContentLabelPref,
      isFeedViewPref: () => isFeedViewPref,
      isPersonalDetailsPref: () => isPersonalDetailsPref,
      isProfileView: () => isProfileView,
      isProfileViewBasic: () => isProfileViewBasic,
      isProfileViewDetailed: () => isProfileViewDetailed,
      isSavedFeedsPref: () => isSavedFeedsPref,
      isThreadViewPref: () => isThreadViewPref,
      isViewerState: () => isViewerState,
      validateAdultContentPref: () => validateAdultContentPref,
      validateContentLabelPref: () => validateContentLabelPref,
      validateFeedViewPref: () => validateFeedViewPref,
      validatePersonalDetailsPref: () => validatePersonalDetailsPref,
      validateProfileView: () => validateProfileView,
      validateProfileViewBasic: () => validateProfileViewBasic,
      validateProfileViewDetailed: () => validateProfileViewDetailed,
      validateSavedFeedsPref: () => validateSavedFeedsPref,
      validateThreadViewPref: () => validateThreadViewPref,
      validateViewerState: () => validateViewerState
    })
    function isProfileViewBasic(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#profileViewBasic'
      )
    }
    function validateProfileViewBasic(v) {
      return lexicons.validate('app.bsky.actor.defs#profileViewBasic', v)
    }
    function isProfileView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#profileView'
      )
    }
    function validateProfileView(v) {
      return lexicons.validate('app.bsky.actor.defs#profileView', v)
    }
    function isProfileViewDetailed(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#profileViewDetailed'
      )
    }
    function validateProfileViewDetailed(v) {
      return lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v)
    }
    function isViewerState(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#viewerState'
      )
    }
    function validateViewerState(v) {
      return lexicons.validate('app.bsky.actor.defs#viewerState', v)
    }
    function isAdultContentPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#adultContentPref'
      )
    }
    function validateAdultContentPref(v) {
      return lexicons.validate('app.bsky.actor.defs#adultContentPref', v)
    }
    function isContentLabelPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#contentLabelPref'
      )
    }
    function validateContentLabelPref(v) {
      return lexicons.validate('app.bsky.actor.defs#contentLabelPref', v)
    }
    function isSavedFeedsPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#savedFeedsPref'
      )
    }
    function validateSavedFeedsPref(v) {
      return lexicons.validate('app.bsky.actor.defs#savedFeedsPref', v)
    }
    function isPersonalDetailsPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#personalDetailsPref'
      )
    }
    function validatePersonalDetailsPref(v) {
      return lexicons.validate('app.bsky.actor.defs#personalDetailsPref', v)
    }
    function isFeedViewPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#feedViewPref'
      )
    }
    function validateFeedViewPref(v) {
      return lexicons.validate('app.bsky.actor.defs#feedViewPref', v)
    }
    function isThreadViewPref(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.actor.defs#threadViewPref'
      )
    }
    function validateThreadViewPref(v) {
      return lexicons.validate('app.bsky.actor.defs#threadViewPref', v)
    }

    // src/client/types/app/bsky/actor/profile.ts
    var profile_exports = {}
    __export(profile_exports, {
      isRecord: () => isRecord2,
      validateRecord: () => validateRecord2
    })
    function isRecord2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.actor.profile#main' ||
          v.$type === 'app.bsky.actor.profile')
      )
    }
    function validateRecord2(v) {
      return lexicons.validate('app.bsky.actor.profile#main', v)
    }

    // src/client/types/app/bsky/embed/external.ts
    var external_exports = {}
    __export(external_exports, {
      isExternal: () => isExternal,
      isMain: () => isMain2,
      isView: () => isView,
      isViewExternal: () => isViewExternal,
      validateExternal: () => validateExternal,
      validateMain: () => validateMain2,
      validateView: () => validateView,
      validateViewExternal: () => validateViewExternal
    })
    function isMain2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.embed.external#main' ||
          v.$type === 'app.bsky.embed.external')
      )
    }
    function validateMain2(v) {
      return lexicons.validate('app.bsky.embed.external#main', v)
    }
    function isExternal(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.external#external'
      )
    }
    function validateExternal(v) {
      return lexicons.validate('app.bsky.embed.external#external', v)
    }
    function isView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.external#view'
      )
    }
    function validateView(v) {
      return lexicons.validate('app.bsky.embed.external#view', v)
    }
    function isViewExternal(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.external#viewExternal'
      )
    }
    function validateViewExternal(v) {
      return lexicons.validate('app.bsky.embed.external#viewExternal', v)
    }

    // src/client/types/app/bsky/embed/images.ts
    var images_exports = {}
    __export(images_exports, {
      isAspectRatio: () => isAspectRatio,
      isImage: () => isImage,
      isMain: () => isMain3,
      isView: () => isView2,
      isViewImage: () => isViewImage,
      validateAspectRatio: () => validateAspectRatio,
      validateImage: () => validateImage,
      validateMain: () => validateMain3,
      validateView: () => validateView2,
      validateViewImage: () => validateViewImage
    })
    function isMain3(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.embed.images#main' ||
          v.$type === 'app.bsky.embed.images')
      )
    }
    function validateMain3(v) {
      return lexicons.validate('app.bsky.embed.images#main', v)
    }
    function isImage(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.images#image'
      )
    }
    function validateImage(v) {
      return lexicons.validate('app.bsky.embed.images#image', v)
    }
    function isAspectRatio(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.images#aspectRatio'
      )
    }
    function validateAspectRatio(v) {
      return lexicons.validate('app.bsky.embed.images#aspectRatio', v)
    }
    function isView2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.images#view'
      )
    }
    function validateView2(v) {
      return lexicons.validate('app.bsky.embed.images#view', v)
    }
    function isViewImage(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.images#viewImage'
      )
    }
    function validateViewImage(v) {
      return lexicons.validate('app.bsky.embed.images#viewImage', v)
    }

    // src/client/types/app/bsky/embed/record.ts
    var record_exports = {}
    __export(record_exports, {
      isMain: () => isMain4,
      isView: () => isView3,
      isViewBlocked: () => isViewBlocked,
      isViewNotFound: () => isViewNotFound,
      isViewRecord: () => isViewRecord,
      validateMain: () => validateMain4,
      validateView: () => validateView3,
      validateViewBlocked: () => validateViewBlocked,
      validateViewNotFound: () => validateViewNotFound,
      validateViewRecord: () => validateViewRecord
    })
    function isMain4(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.embed.record#main' ||
          v.$type === 'app.bsky.embed.record')
      )
    }
    function validateMain4(v) {
      return lexicons.validate('app.bsky.embed.record#main', v)
    }
    function isView3(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.record#view'
      )
    }
    function validateView3(v) {
      return lexicons.validate('app.bsky.embed.record#view', v)
    }
    function isViewRecord(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.record#viewRecord'
      )
    }
    function validateViewRecord(v) {
      return lexicons.validate('app.bsky.embed.record#viewRecord', v)
    }
    function isViewNotFound(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.record#viewNotFound'
      )
    }
    function validateViewNotFound(v) {
      return lexicons.validate('app.bsky.embed.record#viewNotFound', v)
    }
    function isViewBlocked(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.record#viewBlocked'
      )
    }
    function validateViewBlocked(v) {
      return lexicons.validate('app.bsky.embed.record#viewBlocked', v)
    }

    // src/client/types/app/bsky/embed/recordWithMedia.ts
    var recordWithMedia_exports = {}
    __export(recordWithMedia_exports, {
      isMain: () => isMain5,
      isView: () => isView4,
      validateMain: () => validateMain5,
      validateView: () => validateView4
    })
    function isMain5(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.embed.recordWithMedia#main' ||
          v.$type === 'app.bsky.embed.recordWithMedia')
      )
    }
    function validateMain5(v) {
      return lexicons.validate('app.bsky.embed.recordWithMedia#main', v)
    }
    function isView4(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.embed.recordWithMedia#view'
      )
    }
    function validateView4(v) {
      return lexicons.validate('app.bsky.embed.recordWithMedia#view', v)
    }

    // src/client/types/app/bsky/feed/defs.ts
    var defs_exports6 = {}
    __export(defs_exports6, {
      isBlockedAuthor: () => isBlockedAuthor,
      isBlockedPost: () => isBlockedPost,
      isFeedViewPost: () => isFeedViewPost,
      isGeneratorView: () => isGeneratorView,
      isGeneratorViewerState: () => isGeneratorViewerState,
      isNotFoundPost: () => isNotFoundPost,
      isPostView: () => isPostView,
      isReasonRepost: () => isReasonRepost,
      isReplyRef: () => isReplyRef,
      isSkeletonFeedPost: () => isSkeletonFeedPost,
      isSkeletonReasonRepost: () => isSkeletonReasonRepost,
      isThreadViewPost: () => isThreadViewPost,
      isThreadgateView: () => isThreadgateView,
      isViewerState: () => isViewerState2,
      validateBlockedAuthor: () => validateBlockedAuthor,
      validateBlockedPost: () => validateBlockedPost,
      validateFeedViewPost: () => validateFeedViewPost,
      validateGeneratorView: () => validateGeneratorView,
      validateGeneratorViewerState: () => validateGeneratorViewerState,
      validateNotFoundPost: () => validateNotFoundPost,
      validatePostView: () => validatePostView,
      validateReasonRepost: () => validateReasonRepost,
      validateReplyRef: () => validateReplyRef,
      validateSkeletonFeedPost: () => validateSkeletonFeedPost,
      validateSkeletonReasonRepost: () => validateSkeletonReasonRepost,
      validateThreadViewPost: () => validateThreadViewPost,
      validateThreadgateView: () => validateThreadgateView,
      validateViewerState: () => validateViewerState2
    })
    function isPostView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#postView'
      )
    }
    function validatePostView(v) {
      return lexicons.validate('app.bsky.feed.defs#postView', v)
    }
    function isViewerState2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#viewerState'
      )
    }
    function validateViewerState2(v) {
      return lexicons.validate('app.bsky.feed.defs#viewerState', v)
    }
    function isFeedViewPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#feedViewPost'
      )
    }
    function validateFeedViewPost(v) {
      return lexicons.validate('app.bsky.feed.defs#feedViewPost', v)
    }
    function isReplyRef(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#replyRef'
      )
    }
    function validateReplyRef(v) {
      return lexicons.validate('app.bsky.feed.defs#replyRef', v)
    }
    function isReasonRepost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#reasonRepost'
      )
    }
    function validateReasonRepost(v) {
      return lexicons.validate('app.bsky.feed.defs#reasonRepost', v)
    }
    function isThreadViewPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#threadViewPost'
      )
    }
    function validateThreadViewPost(v) {
      return lexicons.validate('app.bsky.feed.defs#threadViewPost', v)
    }
    function isNotFoundPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#notFoundPost'
      )
    }
    function validateNotFoundPost(v) {
      return lexicons.validate('app.bsky.feed.defs#notFoundPost', v)
    }
    function isBlockedPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#blockedPost'
      )
    }
    function validateBlockedPost(v) {
      return lexicons.validate('app.bsky.feed.defs#blockedPost', v)
    }
    function isBlockedAuthor(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#blockedAuthor'
      )
    }
    function validateBlockedAuthor(v) {
      return lexicons.validate('app.bsky.feed.defs#blockedAuthor', v)
    }
    function isGeneratorView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#generatorView'
      )
    }
    function validateGeneratorView(v) {
      return lexicons.validate('app.bsky.feed.defs#generatorView', v)
    }
    function isGeneratorViewerState(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#generatorViewerState'
      )
    }
    function validateGeneratorViewerState(v) {
      return lexicons.validate('app.bsky.feed.defs#generatorViewerState', v)
    }
    function isSkeletonFeedPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#skeletonFeedPost'
      )
    }
    function validateSkeletonFeedPost(v) {
      return lexicons.validate('app.bsky.feed.defs#skeletonFeedPost', v)
    }
    function isSkeletonReasonRepost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#skeletonReasonRepost'
      )
    }
    function validateSkeletonReasonRepost(v) {
      return lexicons.validate('app.bsky.feed.defs#skeletonReasonRepost', v)
    }
    function isThreadgateView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.defs#threadgateView'
      )
    }
    function validateThreadgateView(v) {
      return lexicons.validate('app.bsky.feed.defs#threadgateView', v)
    }

    // src/client/types/app/bsky/feed/generator.ts
    var generator_exports = {}
    __export(generator_exports, {
      isRecord: () => isRecord3,
      validateRecord: () => validateRecord3
    })
    function isRecord3(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.feed.generator#main' ||
          v.$type === 'app.bsky.feed.generator')
      )
    }
    function validateRecord3(v) {
      return lexicons.validate('app.bsky.feed.generator#main', v)
    }

    // src/client/types/app/bsky/feed/like.ts
    var like_exports = {}
    __export(like_exports, {
      isRecord: () => isRecord4,
      validateRecord: () => validateRecord4
    })
    function isRecord4(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.feed.like#main' ||
          v.$type === 'app.bsky.feed.like')
      )
    }
    function validateRecord4(v) {
      return lexicons.validate('app.bsky.feed.like#main', v)
    }

    // src/client/types/app/bsky/feed/post.ts
    var post_exports = {}
    __export(post_exports, {
      isEntity: () => isEntity,
      isRecord: () => isRecord5,
      isReplyRef: () => isReplyRef2,
      isTextSlice: () => isTextSlice,
      validateEntity: () => validateEntity,
      validateRecord: () => validateRecord5,
      validateReplyRef: () => validateReplyRef2,
      validateTextSlice: () => validateTextSlice
    })
    function isRecord5(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.feed.post#main' ||
          v.$type === 'app.bsky.feed.post')
      )
    }
    function validateRecord5(v) {
      return lexicons.validate('app.bsky.feed.post#main', v)
    }
    function isReplyRef2(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.post#replyRef'
      )
    }
    function validateReplyRef2(v) {
      return lexicons.validate('app.bsky.feed.post#replyRef', v)
    }
    function isEntity(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.post#entity'
      )
    }
    function validateEntity(v) {
      return lexicons.validate('app.bsky.feed.post#entity', v)
    }
    function isTextSlice(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.post#textSlice'
      )
    }
    function validateTextSlice(v) {
      return lexicons.validate('app.bsky.feed.post#textSlice', v)
    }

    // src/client/types/app/bsky/feed/repost.ts
    var repost_exports = {}
    __export(repost_exports, {
      isRecord: () => isRecord6,
      validateRecord: () => validateRecord6
    })
    function isRecord6(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.feed.repost#main' ||
          v.$type === 'app.bsky.feed.repost')
      )
    }
    function validateRecord6(v) {
      return lexicons.validate('app.bsky.feed.repost#main', v)
    }

    // src/client/types/app/bsky/feed/threadgate.ts
    var threadgate_exports = {}
    __export(threadgate_exports, {
      isFollowingRule: () => isFollowingRule,
      isListRule: () => isListRule,
      isMentionRule: () => isMentionRule,
      isRecord: () => isRecord7,
      validateFollowingRule: () => validateFollowingRule,
      validateListRule: () => validateListRule,
      validateMentionRule: () => validateMentionRule,
      validateRecord: () => validateRecord7
    })
    function isRecord7(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.feed.threadgate#main' ||
          v.$type === 'app.bsky.feed.threadgate')
      )
    }
    function validateRecord7(v) {
      return lexicons.validate('app.bsky.feed.threadgate#main', v)
    }
    function isMentionRule(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.threadgate#mentionRule'
      )
    }
    function validateMentionRule(v) {
      return lexicons.validate('app.bsky.feed.threadgate#mentionRule', v)
    }
    function isFollowingRule(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.threadgate#followingRule'
      )
    }
    function validateFollowingRule(v) {
      return lexicons.validate('app.bsky.feed.threadgate#followingRule', v)
    }
    function isListRule(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.feed.threadgate#listRule'
      )
    }
    function validateListRule(v) {
      return lexicons.validate('app.bsky.feed.threadgate#listRule', v)
    }

    // src/client/types/app/bsky/graph/block.ts
    var block_exports = {}
    __export(block_exports, {
      isRecord: () => isRecord8,
      validateRecord: () => validateRecord8
    })
    function isRecord8(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.graph.block#main' ||
          v.$type === 'app.bsky.graph.block')
      )
    }
    function validateRecord8(v) {
      return lexicons.validate('app.bsky.graph.block#main', v)
    }

    // src/client/types/app/bsky/graph/defs.ts
    var defs_exports7 = {}
    __export(defs_exports7, {
      CURATELIST: () => CURATELIST,
      MODLIST: () => MODLIST,
      isListItemView: () => isListItemView,
      isListView: () => isListView,
      isListViewBasic: () => isListViewBasic,
      isListViewerState: () => isListViewerState,
      validateListItemView: () => validateListItemView,
      validateListView: () => validateListView,
      validateListViewBasic: () => validateListViewBasic,
      validateListViewerState: () => validateListViewerState
    })
    function isListViewBasic(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.graph.defs#listViewBasic'
      )
    }
    function validateListViewBasic(v) {
      return lexicons.validate('app.bsky.graph.defs#listViewBasic', v)
    }
    function isListView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.graph.defs#listView'
      )
    }
    function validateListView(v) {
      return lexicons.validate('app.bsky.graph.defs#listView', v)
    }
    function isListItemView(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.graph.defs#listItemView'
      )
    }
    function validateListItemView(v) {
      return lexicons.validate('app.bsky.graph.defs#listItemView', v)
    }
    var MODLIST = 'app.bsky.graph.defs#modlist'
    var CURATELIST = 'app.bsky.graph.defs#curatelist'
    function isListViewerState(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.graph.defs#listViewerState'
      )
    }
    function validateListViewerState(v) {
      return lexicons.validate('app.bsky.graph.defs#listViewerState', v)
    }

    // src/client/types/app/bsky/graph/follow.ts
    var follow_exports = {}
    __export(follow_exports, {
      isRecord: () => isRecord9,
      validateRecord: () => validateRecord9
    })
    function isRecord9(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.graph.follow#main' ||
          v.$type === 'app.bsky.graph.follow')
      )
    }
    function validateRecord9(v) {
      return lexicons.validate('app.bsky.graph.follow#main', v)
    }

    // src/client/types/app/bsky/graph/list.ts
    var list_exports = {}
    __export(list_exports, {
      isRecord: () => isRecord10,
      validateRecord: () => validateRecord10
    })
    function isRecord10(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.graph.list#main' ||
          v.$type === 'app.bsky.graph.list')
      )
    }
    function validateRecord10(v) {
      return lexicons.validate('app.bsky.graph.list#main', v)
    }

    // src/client/types/app/bsky/graph/listblock.ts
    var listblock_exports = {}
    __export(listblock_exports, {
      isRecord: () => isRecord11,
      validateRecord: () => validateRecord11
    })
    function isRecord11(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.graph.listblock#main' ||
          v.$type === 'app.bsky.graph.listblock')
      )
    }
    function validateRecord11(v) {
      return lexicons.validate('app.bsky.graph.listblock#main', v)
    }

    // src/client/types/app/bsky/graph/listitem.ts
    var listitem_exports = {}
    __export(listitem_exports, {
      isRecord: () => isRecord12,
      validateRecord: () => validateRecord12
    })
    function isRecord12(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.graph.listitem#main' ||
          v.$type === 'app.bsky.graph.listitem')
      )
    }
    function validateRecord12(v) {
      return lexicons.validate('app.bsky.graph.listitem#main', v)
    }

    // src/client/types/app/bsky/richtext/facet.ts
    var facet_exports = {}
    __export(facet_exports, {
      isByteSlice: () => isByteSlice,
      isLink: () => isLink,
      isMain: () => isMain6,
      isMention: () => isMention,
      isTag: () => isTag,
      validateByteSlice: () => validateByteSlice,
      validateLink: () => validateLink,
      validateMain: () => validateMain6,
      validateMention: () => validateMention,
      validateTag: () => validateTag
    })
    function isMain6(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        (v.$type === 'app.bsky.richtext.facet#main' ||
          v.$type === 'app.bsky.richtext.facet')
      )
    }
    function validateMain6(v) {
      return lexicons.validate('app.bsky.richtext.facet#main', v)
    }
    function isMention(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.richtext.facet#mention'
      )
    }
    function validateMention(v) {
      return lexicons.validate('app.bsky.richtext.facet#mention', v)
    }
    function isLink(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.richtext.facet#link'
      )
    }
    function validateLink(v) {
      return lexicons.validate('app.bsky.richtext.facet#link', v)
    }
    function isTag(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.richtext.facet#tag'
      )
    }
    function validateTag(v) {
      return lexicons.validate('app.bsky.richtext.facet#tag', v)
    }
    function isByteSlice(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.richtext.facet#byteSlice'
      )
    }
    function validateByteSlice(v) {
      return lexicons.validate('app.bsky.richtext.facet#byteSlice', v)
    }

    // src/client/types/app/bsky/unspecced/defs.ts
    var defs_exports8 = {}
    __export(defs_exports8, {
      isSkeletonSearchActor: () => isSkeletonSearchActor,
      isSkeletonSearchPost: () => isSkeletonSearchPost,
      validateSkeletonSearchActor: () => validateSkeletonSearchActor,
      validateSkeletonSearchPost: () => validateSkeletonSearchPost
    })
    function isSkeletonSearchPost(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.unspecced.defs#skeletonSearchPost'
      )
    }
    function validateSkeletonSearchPost(v) {
      return lexicons.validate('app.bsky.unspecced.defs#skeletonSearchPost', v)
    }
    function isSkeletonSearchActor(v) {
      return (
        isObj2(v) &&
        hasProp2(v, '$type') &&
        v.$type === 'app.bsky.unspecced.defs#skeletonSearchActor'
      )
    }
    function validateSkeletonSearchActor(v) {
      return lexicons.validate('app.bsky.unspecced.defs#skeletonSearchActor', v)
    }

    // src/client/index.ts
    var COM_ATPROTO_ADMIN = {
      DefsReviewOpen: 'com.atproto.admin.defs#reviewOpen',
      DefsReviewEscalated: 'com.atproto.admin.defs#reviewEscalated',
      DefsReviewClosed: 'com.atproto.admin.defs#reviewClosed'
    }
    var COM_ATPROTO_MODERATION = {
      DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
      DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
      DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
      DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
      DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
      DefsReasonOther: 'com.atproto.moderation.defs#reasonOther'
    }
    var APP_BSKY_GRAPH = {
      DefsModlist: 'app.bsky.graph.defs#modlist',
      DefsCuratelist: 'app.bsky.graph.defs#curatelist'
    }
    var AtpBaseClient = class {
      constructor() {
        this.xrpc = new Client()
        this.xrpc.addLexicons(schemas)
      }
      service(serviceUri) {
        return new AtpServiceClient(this, this.xrpc.service(serviceUri))
      }
    }
    var AtpServiceClient = class {
      constructor(baseClient, xrpcService) {
        this._baseClient = baseClient
        this.xrpc = xrpcService
        this.com = new ComNS(this)
        this.app = new AppNS(this)
      }
      setHeader(key, value) {
        this.xrpc.setHeader(key, value)
      }
    }
    var ComNS = class {
      constructor(service2) {
        this._service = service2
        this.atproto = new AtprotoNS(service2)
      }
    }
    var AtprotoNS = class {
      constructor(service2) {
        this._service = service2
        this.admin = new AdminNS(service2)
        this.identity = new IdentityNS(service2)
        this.label = new LabelNS(service2)
        this.moderation = new ModerationNS(service2)
        this.repo = new RepoNS(service2)
        this.server = new ServerNS(service2)
        this.sync = new SyncNS(service2)
        this.temp = new TempNS(service2)
      }
    }
    var AdminNS = class {
      constructor(service2) {
        this._service = service2
      }
      deleteAccount(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.deleteAccount', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr(e)
          })
      }
      disableAccountInvites(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr2(e)
          })
      }
      disableInviteCodes(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr3(e)
          })
      }
      emitModerationEvent(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.emitModerationEvent', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr4(e)
          })
      }
      enableAccountInvites(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr5(e)
          })
      }
      getAccountInfo(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getAccountInfo', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr6(e)
          })
      }
      getInviteCodes(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getInviteCodes', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr7(e)
          })
      }
      getModerationEvent(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getModerationEvent', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr8(e)
          })
      }
      getRecord(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getRecord', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr9(e)
          })
      }
      getRepo(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getRepo', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr10(e)
          })
      }
      getSubjectStatus(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.getSubjectStatus', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr11(e)
          })
      }
      queryModerationEvents(params2, opts) {
        return this._service.xrpc
          .call(
            'com.atproto.admin.queryModerationEvents',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr12(e)
          })
      }
      queryModerationStatuses(params2, opts) {
        return this._service.xrpc
          .call(
            'com.atproto.admin.queryModerationStatuses',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr13(e)
          })
      }
      searchRepos(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.searchRepos', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr14(e)
          })
      }
      sendEmail(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.sendEmail', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr15(e)
          })
      }
      updateAccountEmail(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr16(e)
          })
      }
      updateAccountHandle(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr17(e)
          })
      }
      updateSubjectStatus(data, opts) {
        return this._service.xrpc
          .call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr18(e)
          })
      }
    }
    var IdentityNS = class {
      constructor(service2) {
        this._service = service2
      }
      resolveHandle(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.identity.resolveHandle', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr19(e)
          })
      }
      updateHandle(data, opts) {
        return this._service.xrpc
          .call('com.atproto.identity.updateHandle', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr20(e)
          })
      }
    }
    var LabelNS = class {
      constructor(service2) {
        this._service = service2
      }
      queryLabels(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.label.queryLabels', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr21(e)
          })
      }
    }
    var ModerationNS = class {
      constructor(service2) {
        this._service = service2
      }
      createReport(data, opts) {
        return this._service.xrpc
          .call('com.atproto.moderation.createReport', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr22(e)
          })
      }
    }
    var RepoNS = class {
      constructor(service2) {
        this._service = service2
      }
      applyWrites(data, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.applyWrites', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr23(e)
          })
      }
      createRecord(data, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.createRecord', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr24(e)
          })
      }
      deleteRecord(data, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.deleteRecord', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr25(e)
          })
      }
      describeRepo(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.describeRepo', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr26(e)
          })
      }
      getRecord(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.getRecord', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr27(e)
          })
      }
      listRecords(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.listRecords', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr28(e)
          })
      }
      putRecord(data, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.putRecord', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr29(e)
          })
      }
      uploadBlob(data, opts) {
        return this._service.xrpc
          .call('com.atproto.repo.uploadBlob', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr30(e)
          })
      }
    }
    var ServerNS = class {
      constructor(service2) {
        this._service = service2
      }
      confirmEmail(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.confirmEmail', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr31(e)
          })
      }
      createAccount(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.createAccount', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr32(e)
          })
      }
      createAppPassword(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.createAppPassword', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr33(e)
          })
      }
      createInviteCode(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.createInviteCode', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr34(e)
          })
      }
      createInviteCodes(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.createInviteCodes', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr35(e)
          })
      }
      createSession(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.createSession', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr36(e)
          })
      }
      deleteAccount(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.deleteAccount', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr37(e)
          })
      }
      deleteSession(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.deleteSession', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr38(e)
          })
      }
      describeServer(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.server.describeServer', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr39(e)
          })
      }
      getAccountInviteCodes(params2, opts) {
        return this._service.xrpc
          .call(
            'com.atproto.server.getAccountInviteCodes',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr40(e)
          })
      }
      getSession(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.server.getSession', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr41(e)
          })
      }
      listAppPasswords(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.server.listAppPasswords', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr42(e)
          })
      }
      refreshSession(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.refreshSession', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr43(e)
          })
      }
      requestAccountDelete(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr44(e)
          })
      }
      requestEmailConfirmation(data, opts) {
        return this._service.xrpc
          .call(
            'com.atproto.server.requestEmailConfirmation',
            opts?.qp,
            data,
            opts
          )
          .catch((e) => {
            throw toKnownErr45(e)
          })
      }
      requestEmailUpdate(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr46(e)
          })
      }
      requestPasswordReset(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr47(e)
          })
      }
      reserveSigningKey(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr48(e)
          })
      }
      resetPassword(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.resetPassword', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr49(e)
          })
      }
      revokeAppPassword(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr50(e)
          })
      }
      updateEmail(data, opts) {
        return this._service.xrpc
          .call('com.atproto.server.updateEmail', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr51(e)
          })
      }
    }
    var SyncNS = class {
      constructor(service2) {
        this._service = service2
      }
      getBlob(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getBlob', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr52(e)
          })
      }
      getBlocks(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getBlocks', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr53(e)
          })
      }
      getCheckout(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getCheckout', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr54(e)
          })
      }
      getHead(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getHead', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr55(e)
          })
      }
      getLatestCommit(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getLatestCommit', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr56(e)
          })
      }
      getRecord(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getRecord', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr57(e)
          })
      }
      getRepo(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.getRepo', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr58(e)
          })
      }
      listBlobs(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.listBlobs', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr59(e)
          })
      }
      listRepos(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.listRepos', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr60(e)
          })
      }
      notifyOfUpdate(data, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr61(e)
          })
      }
      requestCrawl(data, opts) {
        return this._service.xrpc
          .call('com.atproto.sync.requestCrawl', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr62(e)
          })
      }
    }
    var TempNS = class {
      constructor(service2) {
        this._service = service2
      }
      fetchLabels(params2, opts) {
        return this._service.xrpc
          .call('com.atproto.temp.fetchLabels', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr63(e)
          })
      }
      importRepo(data, opts) {
        return this._service.xrpc
          .call('com.atproto.temp.importRepo', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr64(e)
          })
      }
      pushBlob(data, opts) {
        return this._service.xrpc
          .call('com.atproto.temp.pushBlob', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr65(e)
          })
      }
      transferAccount(data, opts) {
        return this._service.xrpc
          .call('com.atproto.temp.transferAccount', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr66(e)
          })
      }
    }
    var AppNS = class {
      constructor(service2) {
        this._service = service2
        this.bsky = new BskyNS(service2)
      }
    }
    var BskyNS = class {
      constructor(service2) {
        this._service = service2
        this.actor = new ActorNS(service2)
        this.embed = new EmbedNS(service2)
        this.feed = new FeedNS(service2)
        this.graph = new GraphNS(service2)
        this.notification = new NotificationNS(service2)
        this.richtext = new RichtextNS(service2)
        this.unspecced = new UnspeccedNS(service2)
      }
    }
    var ActorNS = class {
      constructor(service2) {
        this._service = service2
        this.profile = new ProfileRecord(service2)
      }
      getPreferences(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.getPreferences', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr67(e)
          })
      }
      getProfile(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.getProfile', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr68(e)
          })
      }
      getProfiles(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.getProfiles', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr69(e)
          })
      }
      getSuggestions(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.getSuggestions', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr70(e)
          })
      }
      putPreferences(data, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.putPreferences', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr71(e)
          })
      }
      searchActors(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.searchActors', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr72(e)
          })
      }
      searchActorsTypeahead(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.actor.searchActorsTypeahead', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr73(e)
          })
      }
    }
    var ProfileRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.actor.profile',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.actor.profile',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.actor.profile'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          {
            collection: 'app.bsky.actor.profile',
            rkey: 'self',
            ...params2,
            record
          },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.actor.profile', ...params2 },
          { headers }
        )
      }
    }
    var EmbedNS = class {
      constructor(service2) {
        this._service = service2
      }
    }
    var FeedNS = class {
      constructor(service2) {
        this._service = service2
        this.generator = new GeneratorRecord(service2)
        this.like = new LikeRecord(service2)
        this.post = new PostRecord(service2)
        this.repost = new RepostRecord(service2)
        this.threadgate = new ThreadgateRecord(service2)
      }
      describeFeedGenerator(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.describeFeedGenerator', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr74(e)
          })
      }
      getActorFeeds(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getActorFeeds', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr75(e)
          })
      }
      getActorLikes(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getActorLikes', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr76(e)
          })
      }
      getAuthorFeed(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getAuthorFeed', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr77(e)
          })
      }
      getFeed(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getFeed', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr78(e)
          })
      }
      getFeedGenerator(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getFeedGenerator', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr79(e)
          })
      }
      getFeedGenerators(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getFeedGenerators', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr80(e)
          })
      }
      getFeedSkeleton(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getFeedSkeleton', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr81(e)
          })
      }
      getLikes(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getLikes', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr82(e)
          })
      }
      getListFeed(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getListFeed', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr83(e)
          })
      }
      getPostThread(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getPostThread', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr84(e)
          })
      }
      getPosts(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getPosts', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr85(e)
          })
      }
      getRepostedBy(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getRepostedBy', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr86(e)
          })
      }
      getSuggestedFeeds(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getSuggestedFeeds', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr87(e)
          })
      }
      getTimeline(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.getTimeline', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr88(e)
          })
      }
      searchPosts(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.feed.searchPosts', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr89(e)
          })
      }
    }
    var GeneratorRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.feed.generator',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.feed.generator',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.feed.generator'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.feed.generator', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.feed.generator', ...params2 },
          { headers }
        )
      }
    }
    var LikeRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.feed.like',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.feed.like',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.feed.like'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.feed.like', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.feed.like', ...params2 },
          { headers }
        )
      }
    }
    var PostRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.feed.post',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.feed.post',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.feed.post'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.feed.post', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.feed.post', ...params2 },
          { headers }
        )
      }
    }
    var RepostRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.feed.repost',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.feed.repost',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.feed.repost'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.feed.repost', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.feed.repost', ...params2 },
          { headers }
        )
      }
    }
    var ThreadgateRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.feed.threadgate',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.feed.threadgate',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.feed.threadgate'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.feed.threadgate', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.feed.threadgate', ...params2 },
          { headers }
        )
      }
    }
    var GraphNS = class {
      constructor(service2) {
        this._service = service2
        this.block = new BlockRecord(service2)
        this.follow = new FollowRecord(service2)
        this.list = new ListRecord(service2)
        this.listblock = new ListblockRecord(service2)
        this.listitem = new ListitemRecord(service2)
      }
      getBlocks(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getBlocks', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr90(e)
          })
      }
      getFollowers(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getFollowers', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr91(e)
          })
      }
      getFollows(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getFollows', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr92(e)
          })
      }
      getList(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getList', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr93(e)
          })
      }
      getListBlocks(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getListBlocks', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr94(e)
          })
      }
      getListMutes(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getListMutes', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr95(e)
          })
      }
      getLists(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getLists', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr96(e)
          })
      }
      getMutes(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.getMutes', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr97(e)
          })
      }
      getSuggestedFollowsByActor(params2, opts) {
        return this._service.xrpc
          .call(
            'app.bsky.graph.getSuggestedFollowsByActor',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr98(e)
          })
      }
      muteActor(data, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.muteActor', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr99(e)
          })
      }
      muteActorList(data, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.muteActorList', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr100(e)
          })
      }
      unmuteActor(data, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.unmuteActor', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr101(e)
          })
      }
      unmuteActorList(data, opts) {
        return this._service.xrpc
          .call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr102(e)
          })
      }
    }
    var BlockRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.graph.block',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.graph.block',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.graph.block'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.graph.block', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.graph.block', ...params2 },
          { headers }
        )
      }
    }
    var FollowRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.graph.follow',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.graph.follow',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.graph.follow'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.graph.follow', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.graph.follow', ...params2 },
          { headers }
        )
      }
    }
    var ListRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.graph.list',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.graph.list',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.graph.list'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.graph.list', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.graph.list', ...params2 },
          { headers }
        )
      }
    }
    var ListblockRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.graph.listblock',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.graph.listblock',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.graph.listblock'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.graph.listblock', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.graph.listblock', ...params2 },
          { headers }
        )
      }
    }
    var ListitemRecord = class {
      constructor(service2) {
        this._service = service2
      }
      async list(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.listRecords',
          {
            collection: 'app.bsky.graph.listitem',
            ...params2
          }
        )
        return res.data
      }
      async get(params2) {
        const res = await this._service.xrpc.call(
          'com.atproto.repo.getRecord',
          {
            collection: 'app.bsky.graph.listitem',
            ...params2
          }
        )
        return res.data
      }
      async create(params2, record, headers) {
        record.$type = 'app.bsky.graph.listitem'
        const res = await this._service.xrpc.call(
          'com.atproto.repo.createRecord',
          void 0,
          { collection: 'app.bsky.graph.listitem', ...params2, record },
          { encoding: 'application/json', headers }
        )
        return res.data
      }
      async delete(params2, headers) {
        await this._service.xrpc.call(
          'com.atproto.repo.deleteRecord',
          void 0,
          { collection: 'app.bsky.graph.listitem', ...params2 },
          { headers }
        )
      }
    }
    var NotificationNS = class {
      constructor(service2) {
        this._service = service2
      }
      getUnreadCount(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.notification.getUnreadCount', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr103(e)
          })
      }
      listNotifications(params2, opts) {
        return this._service.xrpc
          .call(
            'app.bsky.notification.listNotifications',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr104(e)
          })
      }
      registerPush(data, opts) {
        return this._service.xrpc
          .call('app.bsky.notification.registerPush', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr105(e)
          })
      }
      updateSeen(data, opts) {
        return this._service.xrpc
          .call('app.bsky.notification.updateSeen', opts?.qp, data, opts)
          .catch((e) => {
            throw toKnownErr106(e)
          })
      }
    }
    var RichtextNS = class {
      constructor(service2) {
        this._service = service2
      }
    }
    var UnspeccedNS = class {
      constructor(service2) {
        this._service = service2
      }
      getPopular(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.unspecced.getPopular', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr107(e)
          })
      }
      getPopularFeedGenerators(params2, opts) {
        return this._service.xrpc
          .call(
            'app.bsky.unspecced.getPopularFeedGenerators',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr108(e)
          })
      }
      getTimelineSkeleton(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.unspecced.getTimelineSkeleton', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr109(e)
          })
      }
      searchActorsSkeleton(params2, opts) {
        return this._service.xrpc
          .call(
            'app.bsky.unspecced.searchActorsSkeleton',
            params2,
            void 0,
            opts
          )
          .catch((e) => {
            throw toKnownErr110(e)
          })
      }
      searchPostsSkeleton(params2, opts) {
        return this._service.xrpc
          .call('app.bsky.unspecced.searchPostsSkeleton', params2, void 0, opts)
          .catch((e) => {
            throw toKnownErr111(e)
          })
      }
    }

    // src/agent.ts
    var REFRESH_SESSION = 'com.atproto.server.refreshSession'
    var _AtpAgent = class {
      constructor(opts) {
        this.uploadBlob = (data, opts) =>
          this.api.com.atproto.repo.uploadBlob(data, opts)
        this.resolveHandle = (params2, opts) =>
          this.api.com.atproto.identity.resolveHandle(params2, opts)
        this.updateHandle = (data, opts) =>
          this.api.com.atproto.identity.updateHandle(data, opts)
        this.createModerationReport = (data, opts) =>
          this.api.com.atproto.moderation.createReport(data, opts)
        this.service =
          opts.service instanceof URL ? opts.service : new URL(opts.service)
        this._persistSession = opts.persistSession
        this._baseClient = new AtpBaseClient()
        this._baseClient.xrpc.fetch = this._fetch.bind(this)
        this.api = this._baseClient.service(opts.service)
      }
      get com() {
        return this.api.com
      }
      static configure(opts) {
        _AtpAgent.fetch = opts.fetch
      }
      get hasSession() {
        return !!this.session
      }
      setPersistSessionHandler(handler) {
        this._persistSession = handler
      }
      async createAccount(opts) {
        try {
          const res = await this.api.com.atproto.server.createAccount({
            handle: opts.handle,
            password: opts.password,
            email: opts.email,
            inviteCode: opts.inviteCode
          })
          this.session = {
            accessJwt: res.data.accessJwt,
            refreshJwt: res.data.refreshJwt,
            handle: res.data.handle,
            did: res.data.did,
            email: opts.email,
            emailConfirmed: false
          }
          this._updateApiEndpoint(res.data.didDoc)
          return res
        } catch (e) {
          this.session = void 0
          throw e
        } finally {
          if (this.session) {
            this._persistSession?.('create', this.session)
          } else {
            this._persistSession?.('create-failed', void 0)
          }
        }
      }
      async login(opts) {
        try {
          const res = await this.api.com.atproto.server.createSession({
            identifier: opts.identifier,
            password: opts.password
          })
          this.session = {
            accessJwt: res.data.accessJwt,
            refreshJwt: res.data.refreshJwt,
            handle: res.data.handle,
            did: res.data.did,
            email: res.data.email,
            emailConfirmed: res.data.emailConfirmed
          }
          this._updateApiEndpoint(res.data.didDoc)
          return res
        } catch (e) {
          this.session = void 0
          throw e
        } finally {
          if (this.session) {
            this._persistSession?.('create', this.session)
          } else {
            this._persistSession?.('create-failed', void 0)
          }
        }
      }
      async resumeSession(session) {
        try {
          this.session = session
          const res = await this.api.com.atproto.server.getSession()
          if (!res.success || res.data.did !== this.session.did) {
            throw new Error('Invalid session')
          }
          this.session.email = res.data.email
          this.session.handle = res.data.handle
          this.session.emailConfirmed = res.data.emailConfirmed
          this._updateApiEndpoint(res.data.didDoc)
          return res
        } catch (e) {
          this.session = void 0
          throw e
        } finally {
          if (this.session) {
            this._persistSession?.('create', this.session)
          } else {
            this._persistSession?.('create-failed', void 0)
          }
        }
      }
      _addAuthHeader(reqHeaders) {
        if (!reqHeaders.authorization && this.session?.accessJwt) {
          return {
            ...reqHeaders,
            authorization: `Bearer ${this.session.accessJwt}`
          }
        }
        return reqHeaders
      }
      async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
        if (!_AtpAgent.fetch) {
          throw new Error('AtpAgent fetch() method not configured')
        }
        await this._refreshSessionPromise
        let res = await _AtpAgent.fetch(
          reqUri,
          reqMethod,
          this._addAuthHeader(reqHeaders),
          reqBody
        )
        if (
          isErrorResponse(res, ['ExpiredToken']) &&
          this.session?.refreshJwt
        ) {
          await this._refreshSession()
          res = await _AtpAgent.fetch(
            reqUri,
            reqMethod,
            this._addAuthHeader(reqHeaders),
            reqBody
          )
        }
        return res
      }
      async _refreshSession() {
        if (this._refreshSessionPromise) {
          return this._refreshSessionPromise
        }
        this._refreshSessionPromise = this._refreshSessionInner()
        try {
          await this._refreshSessionPromise
        } finally {
          this._refreshSessionPromise = void 0
        }
      }
      async _refreshSessionInner() {
        if (!_AtpAgent.fetch) {
          throw new Error('AtpAgent fetch() method not configured')
        }
        if (!this.session?.refreshJwt) {
          return
        }
        const url = new URL((this.pdsUrl || this.service).origin)
        url.pathname = `/xrpc/${REFRESH_SESSION}`
        const res = await _AtpAgent.fetch(
          url.toString(),
          'POST',
          {
            authorization: `Bearer ${this.session.refreshJwt}`
          },
          void 0
        )
        if (isErrorResponse(res, ['ExpiredToken', 'InvalidToken'])) {
          this.session = void 0
          this._persistSession?.('expired', void 0)
        } else if (isNewSessionObject(this._baseClient, res.body)) {
          this.session = {
            ...(this.session || {}),
            accessJwt: res.body.accessJwt,
            refreshJwt: res.body.refreshJwt,
            handle: res.body.handle,
            did: res.body.did
          }
          this._updateApiEndpoint(res.body.didDoc)
          this._persistSession?.('update', this.session)
        }
      }
      _updateApiEndpoint(didDoc) {
        if (isValidDidDoc(didDoc)) {
          const endpoint = getPdsEndpoint(didDoc)
          this.pdsUrl = endpoint ? new URL(endpoint) : void 0
        }
        this.api.xrpc.uri = this.pdsUrl || this.service
      }
    }
    var AtpAgent = _AtpAgent
    AtpAgent.fetch = defaultFetchHandler
    function isErrorObject(v) {
      return errorResponseBody.safeParse(v).success
    }
    function isErrorResponse(res, errorNames) {
      if (res.status !== 400) {
        return false
      }
      if (!isErrorObject(res.body)) {
        return false
      }
      return (
        typeof res.body.error === 'string' &&
        errorNames.includes(res.body.error)
      )
    }
    function isNewSessionObject(client, v) {
      try {
        client.xrpc.lex.assertValidXrpcOutput(
          'com.atproto.server.refreshSession',
          v
        )
        return true
      } catch {
        return false
      }
    }

    // src/rich-text/unicode.ts
    var encoder = new TextEncoder()
    var decoder = new TextDecoder()
    var UnicodeString = class {
      constructor(utf16) {
        this.utf16 = utf16
        this.utf8 = encoder.encode(utf16)
      }
      get length() {
        return this.utf8.byteLength
      }
      get graphemeLength() {
        if (!this._graphemeLen) {
          this._graphemeLen = graphemeLen(this.utf16)
        }
        return this._graphemeLen
      }
      slice(start, end) {
        return decoder.decode(this.utf8.slice(start, end))
      }
      utf16IndexToUtf8Index(i) {
        return encoder.encode(this.utf16.slice(0, i)).byteLength
      }
      toString() {
        return this.utf16
      }
    }

    // src/rich-text/sanitization.ts
    var EXCESS_SPACE_RE =
      /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/
    var REPLACEMENT_STR = '\n\n'
    function sanitizeRichText(richText, opts) {
      if (opts.cleanNewlines) {
        richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR)
      }
      return richText
    }
    function clean(richText, targetRegexp, replacementString) {
      richText = richText.clone()
      let match = richText.unicodeText.utf16.match(targetRegexp)
      while (match && typeof match.index !== 'undefined') {
        const oldText = richText.unicodeText
        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(
          match.index
        )
        const removeEndIndex =
          removeStartIndex + new UnicodeString(match[0]).length
        richText.delete(removeStartIndex, removeEndIndex)
        if (richText.unicodeText.utf16 === oldText.utf16) {
          break
        }
        richText.insert(removeStartIndex, replacementString)
        match = richText.unicodeText.utf16.match(targetRegexp)
      }
      return richText
    }

    // ../../node_modules/.pnpm/tlds@1.234.0/node_modules/tlds/index.json
    var tlds_default = [
      'aaa',
      'aarp',
      'abarth',
      'abb',
      'abbott',
      'abbvie',
      'abc',
      'able',
      'abogado',
      'abudhabi',
      'ac',
      'academy',
      'accenture',
      'accountant',
      'accountants',
      'aco',
      'actor',
      'ad',
      'ads',
      'adult',
      'ae',
      'aeg',
      'aero',
      'aetna',
      'af',
      'afl',
      'africa',
      'ag',
      'agakhan',
      'agency',
      'ai',
      'aig',
      'airbus',
      'airforce',
      'airtel',
      'akdn',
      'al',
      'alfaromeo',
      'alibaba',
      'alipay',
      'allfinanz',
      'allstate',
      'ally',
      'alsace',
      'alstom',
      'am',
      'amazon',
      'americanexpress',
      'americanfamily',
      'amex',
      'amfam',
      'amica',
      'amsterdam',
      'analytics',
      'android',
      'anquan',
      'anz',
      'ao',
      'aol',
      'apartments',
      'app',
      'apple',
      'aq',
      'aquarelle',
      'ar',
      'arab',
      'aramco',
      'archi',
      'army',
      'arpa',
      'art',
      'arte',
      'as',
      'asda',
      'asia',
      'associates',
      'at',
      'athleta',
      'attorney',
      'au',
      'auction',
      'audi',
      'audible',
      'audio',
      'auspost',
      'author',
      'auto',
      'autos',
      'avianca',
      'aw',
      'aws',
      'ax',
      'axa',
      'az',
      'azure',
      'ba',
      'baby',
      'baidu',
      'banamex',
      'bananarepublic',
      'band',
      'bank',
      'bar',
      'barcelona',
      'barclaycard',
      'barclays',
      'barefoot',
      'bargains',
      'baseball',
      'basketball',
      'bauhaus',
      'bayern',
      'bb',
      'bbc',
      'bbt',
      'bbva',
      'bcg',
      'bcn',
      'bd',
      'be',
      'beats',
      'beauty',
      'beer',
      'bentley',
      'berlin',
      'best',
      'bestbuy',
      'bet',
      'bf',
      'bg',
      'bh',
      'bharti',
      'bi',
      'bible',
      'bid',
      'bike',
      'bing',
      'bingo',
      'bio',
      'biz',
      'bj',
      'black',
      'blackfriday',
      'blockbuster',
      'blog',
      'bloomberg',
      'blue',
      'bm',
      'bms',
      'bmw',
      'bn',
      'bnpparibas',
      'bo',
      'boats',
      'boehringer',
      'bofa',
      'bom',
      'bond',
      'boo',
      'book',
      'booking',
      'bosch',
      'bostik',
      'boston',
      'bot',
      'boutique',
      'box',
      'br',
      'bradesco',
      'bridgestone',
      'broadway',
      'broker',
      'brother',
      'brussels',
      'bs',
      'bt',
      'build',
      'builders',
      'business',
      'buy',
      'buzz',
      'bv',
      'bw',
      'by',
      'bz',
      'bzh',
      'ca',
      'cab',
      'cafe',
      'cal',
      'call',
      'calvinklein',
      'cam',
      'camera',
      'camp',
      'canon',
      'capetown',
      'capital',
      'capitalone',
      'car',
      'caravan',
      'cards',
      'care',
      'career',
      'careers',
      'cars',
      'casa',
      'case',
      'cash',
      'casino',
      'cat',
      'catering',
      'catholic',
      'cba',
      'cbn',
      'cbre',
      'cbs',
      'cc',
      'cd',
      'center',
      'ceo',
      'cern',
      'cf',
      'cfa',
      'cfd',
      'cg',
      'ch',
      'chanel',
      'channel',
      'charity',
      'chase',
      'chat',
      'cheap',
      'chintai',
      'christmas',
      'chrome',
      'church',
      'ci',
      'cipriani',
      'circle',
      'cisco',
      'citadel',
      'citi',
      'citic',
      'city',
      'cityeats',
      'ck',
      'cl',
      'claims',
      'cleaning',
      'click',
      'clinic',
      'clinique',
      'clothing',
      'cloud',
      'club',
      'clubmed',
      'cm',
      'cn',
      'co',
      'coach',
      'codes',
      'coffee',
      'college',
      'cologne',
      'com',
      'comcast',
      'commbank',
      'community',
      'company',
      'compare',
      'computer',
      'comsec',
      'condos',
      'construction',
      'consulting',
      'contact',
      'contractors',
      'cooking',
      'cookingchannel',
      'cool',
      'coop',
      'corsica',
      'country',
      'coupon',
      'coupons',
      'courses',
      'cpa',
      'cr',
      'credit',
      'creditcard',
      'creditunion',
      'cricket',
      'crown',
      'crs',
      'cruise',
      'cruises',
      'cu',
      'cuisinella',
      'cv',
      'cw',
      'cx',
      'cy',
      'cymru',
      'cyou',
      'cz',
      'dabur',
      'dad',
      'dance',
      'data',
      'date',
      'dating',
      'datsun',
      'day',
      'dclk',
      'dds',
      'de',
      'deal',
      'dealer',
      'deals',
      'degree',
      'delivery',
      'dell',
      'deloitte',
      'delta',
      'democrat',
      'dental',
      'dentist',
      'desi',
      'design',
      'dev',
      'dhl',
      'diamonds',
      'diet',
      'digital',
      'direct',
      'directory',
      'discount',
      'discover',
      'dish',
      'diy',
      'dj',
      'dk',
      'dm',
      'dnp',
      'do',
      'docs',
      'doctor',
      'dog',
      'domains',
      'dot',
      'download',
      'drive',
      'dtv',
      'dubai',
      'dunlop',
      'dupont',
      'durban',
      'dvag',
      'dvr',
      'dz',
      'earth',
      'eat',
      'ec',
      'eco',
      'edeka',
      'edu',
      'education',
      'ee',
      'eg',
      'email',
      'emerck',
      'energy',
      'engineer',
      'engineering',
      'enterprises',
      'epson',
      'equipment',
      'er',
      'ericsson',
      'erni',
      'es',
      'esq',
      'estate',
      'et',
      'etisalat',
      'eu',
      'eurovision',
      'eus',
      'events',
      'exchange',
      'expert',
      'exposed',
      'express',
      'extraspace',
      'fage',
      'fail',
      'fairwinds',
      'faith',
      'family',
      'fan',
      'fans',
      'farm',
      'farmers',
      'fashion',
      'fast',
      'fedex',
      'feedback',
      'ferrari',
      'ferrero',
      'fi',
      'fiat',
      'fidelity',
      'fido',
      'film',
      'final',
      'finance',
      'financial',
      'fire',
      'firestone',
      'firmdale',
      'fish',
      'fishing',
      'fit',
      'fitness',
      'fj',
      'fk',
      'flickr',
      'flights',
      'flir',
      'florist',
      'flowers',
      'fly',
      'fm',
      'fo',
      'foo',
      'food',
      'foodnetwork',
      'football',
      'ford',
      'forex',
      'forsale',
      'forum',
      'foundation',
      'fox',
      'fr',
      'free',
      'fresenius',
      'frl',
      'frogans',
      'frontdoor',
      'frontier',
      'ftr',
      'fujitsu',
      'fun',
      'fund',
      'furniture',
      'futbol',
      'fyi',
      'ga',
      'gal',
      'gallery',
      'gallo',
      'gallup',
      'game',
      'games',
      'gap',
      'garden',
      'gay',
      'gb',
      'gbiz',
      'gd',
      'gdn',
      'ge',
      'gea',
      'gent',
      'genting',
      'george',
      'gf',
      'gg',
      'ggee',
      'gh',
      'gi',
      'gift',
      'gifts',
      'gives',
      'giving',
      'gl',
      'glass',
      'gle',
      'global',
      'globo',
      'gm',
      'gmail',
      'gmbh',
      'gmo',
      'gmx',
      'gn',
      'godaddy',
      'gold',
      'goldpoint',
      'golf',
      'goo',
      'goodyear',
      'goog',
      'google',
      'gop',
      'got',
      'gov',
      'gp',
      'gq',
      'gr',
      'grainger',
      'graphics',
      'gratis',
      'green',
      'gripe',
      'grocery',
      'group',
      'gs',
      'gt',
      'gu',
      'guardian',
      'gucci',
      'guge',
      'guide',
      'guitars',
      'guru',
      'gw',
      'gy',
      'hair',
      'hamburg',
      'hangout',
      'haus',
      'hbo',
      'hdfc',
      'hdfcbank',
      'health',
      'healthcare',
      'help',
      'helsinki',
      'here',
      'hermes',
      'hgtv',
      'hiphop',
      'hisamitsu',
      'hitachi',
      'hiv',
      'hk',
      'hkt',
      'hm',
      'hn',
      'hockey',
      'holdings',
      'holiday',
      'homedepot',
      'homegoods',
      'homes',
      'homesense',
      'honda',
      'horse',
      'hospital',
      'host',
      'hosting',
      'hot',
      'hoteles',
      'hotels',
      'hotmail',
      'house',
      'how',
      'hr',
      'hsbc',
      'ht',
      'hu',
      'hughes',
      'hyatt',
      'hyundai',
      'ibm',
      'icbc',
      'ice',
      'icu',
      'id',
      'ie',
      'ieee',
      'ifm',
      'ikano',
      'il',
      'im',
      'imamat',
      'imdb',
      'immo',
      'immobilien',
      'in',
      'inc',
      'industries',
      'infiniti',
      'info',
      'ing',
      'ink',
      'institute',
      'insurance',
      'insure',
      'int',
      'international',
      'intuit',
      'investments',
      'io',
      'ipiranga',
      'iq',
      'ir',
      'irish',
      'is',
      'ismaili',
      'ist',
      'istanbul',
      'it',
      'itau',
      'itv',
      'jaguar',
      'java',
      'jcb',
      'je',
      'jeep',
      'jetzt',
      'jewelry',
      'jio',
      'jll',
      'jm',
      'jmp',
      'jnj',
      'jo',
      'jobs',
      'joburg',
      'jot',
      'joy',
      'jp',
      'jpmorgan',
      'jprs',
      'juegos',
      'juniper',
      'kaufen',
      'kddi',
      'ke',
      'kerryhotels',
      'kerrylogistics',
      'kerryproperties',
      'kfh',
      'kg',
      'kh',
      'ki',
      'kia',
      'kids',
      'kim',
      'kinder',
      'kindle',
      'kitchen',
      'kiwi',
      'km',
      'kn',
      'koeln',
      'komatsu',
      'kosher',
      'kp',
      'kpmg',
      'kpn',
      'kr',
      'krd',
      'kred',
      'kuokgroup',
      'kw',
      'ky',
      'kyoto',
      'kz',
      'la',
      'lacaixa',
      'lamborghini',
      'lamer',
      'lancaster',
      'lancia',
      'land',
      'landrover',
      'lanxess',
      'lasalle',
      'lat',
      'latino',
      'latrobe',
      'law',
      'lawyer',
      'lb',
      'lc',
      'lds',
      'lease',
      'leclerc',
      'lefrak',
      'legal',
      'lego',
      'lexus',
      'lgbt',
      'li',
      'lidl',
      'life',
      'lifeinsurance',
      'lifestyle',
      'lighting',
      'like',
      'lilly',
      'limited',
      'limo',
      'lincoln',
      'linde',
      'link',
      'lipsy',
      'live',
      'living',
      'lk',
      'llc',
      'llp',
      'loan',
      'loans',
      'locker',
      'locus',
      'loft',
      'lol',
      'london',
      'lotte',
      'lotto',
      'love',
      'lpl',
      'lplfinancial',
      'lr',
      'ls',
      'lt',
      'ltd',
      'ltda',
      'lu',
      'lundbeck',
      'luxe',
      'luxury',
      'lv',
      'ly',
      'ma',
      'macys',
      'madrid',
      'maif',
      'maison',
      'makeup',
      'man',
      'management',
      'mango',
      'map',
      'market',
      'marketing',
      'markets',
      'marriott',
      'marshalls',
      'maserati',
      'mattel',
      'mba',
      'mc',
      'mckinsey',
      'md',
      'me',
      'med',
      'media',
      'meet',
      'melbourne',
      'meme',
      'memorial',
      'men',
      'menu',
      'merckmsd',
      'mg',
      'mh',
      'miami',
      'microsoft',
      'mil',
      'mini',
      'mint',
      'mit',
      'mitsubishi',
      'mk',
      'ml',
      'mlb',
      'mls',
      'mm',
      'mma',
      'mn',
      'mo',
      'mobi',
      'mobile',
      'moda',
      'moe',
      'moi',
      'mom',
      'monash',
      'money',
      'monster',
      'mormon',
      'mortgage',
      'moscow',
      'moto',
      'motorcycles',
      'mov',
      'movie',
      'mp',
      'mq',
      'mr',
      'ms',
      'msd',
      'mt',
      'mtn',
      'mtr',
      'mu',
      'museum',
      'music',
      'mutual',
      'mv',
      'mw',
      'mx',
      'my',
      'mz',
      'na',
      'nab',
      'nagoya',
      'name',
      'natura',
      'navy',
      'nba',
      'nc',
      'ne',
      'nec',
      'net',
      'netbank',
      'netflix',
      'network',
      'neustar',
      'new',
      'news',
      'next',
      'nextdirect',
      'nexus',
      'nf',
      'nfl',
      'ng',
      'ngo',
      'nhk',
      'ni',
      'nico',
      'nike',
      'nikon',
      'ninja',
      'nissan',
      'nissay',
      'nl',
      'no',
      'nokia',
      'northwesternmutual',
      'norton',
      'now',
      'nowruz',
      'nowtv',
      'np',
      'nr',
      'nra',
      'nrw',
      'ntt',
      'nu',
      'nyc',
      'nz',
      'obi',
      'observer',
      'office',
      'okinawa',
      'olayan',
      'olayangroup',
      'oldnavy',
      'ollo',
      'om',
      'omega',
      'one',
      'ong',
      'onl',
      'online',
      'ooo',
      'open',
      'oracle',
      'orange',
      'org',
      'organic',
      'origins',
      'osaka',
      'otsuka',
      'ott',
      'ovh',
      'pa',
      'page',
      'panasonic',
      'paris',
      'pars',
      'partners',
      'parts',
      'party',
      'passagens',
      'pay',
      'pccw',
      'pe',
      'pet',
      'pf',
      'pfizer',
      'pg',
      'ph',
      'pharmacy',
      'phd',
      'philips',
      'phone',
      'photo',
      'photography',
      'photos',
      'physio',
      'pics',
      'pictet',
      'pictures',
      'pid',
      'pin',
      'ping',
      'pink',
      'pioneer',
      'pizza',
      'pk',
      'pl',
      'place',
      'play',
      'playstation',
      'plumbing',
      'plus',
      'pm',
      'pn',
      'pnc',
      'pohl',
      'poker',
      'politie',
      'porn',
      'post',
      'pr',
      'pramerica',
      'praxi',
      'press',
      'prime',
      'pro',
      'prod',
      'productions',
      'prof',
      'progressive',
      'promo',
      'properties',
      'property',
      'protection',
      'pru',
      'prudential',
      'ps',
      'pt',
      'pub',
      'pw',
      'pwc',
      'py',
      'qa',
      'qpon',
      'quebec',
      'quest',
      'racing',
      'radio',
      're',
      'read',
      'realestate',
      'realtor',
      'realty',
      'recipes',
      'red',
      'redstone',
      'redumbrella',
      'rehab',
      'reise',
      'reisen',
      'reit',
      'reliance',
      'ren',
      'rent',
      'rentals',
      'repair',
      'report',
      'republican',
      'rest',
      'restaurant',
      'review',
      'reviews',
      'rexroth',
      'rich',
      'richardli',
      'ricoh',
      'ril',
      'rio',
      'rip',
      'ro',
      'rocher',
      'rocks',
      'rodeo',
      'rogers',
      'room',
      'rs',
      'rsvp',
      'ru',
      'rugby',
      'ruhr',
      'run',
      'rw',
      'rwe',
      'ryukyu',
      'sa',
      'saarland',
      'safe',
      'safety',
      'sakura',
      'sale',
      'salon',
      'samsclub',
      'samsung',
      'sandvik',
      'sandvikcoromant',
      'sanofi',
      'sap',
      'sarl',
      'sas',
      'save',
      'saxo',
      'sb',
      'sbi',
      'sbs',
      'sc',
      'sca',
      'scb',
      'schaeffler',
      'schmidt',
      'scholarships',
      'school',
      'schule',
      'schwarz',
      'science',
      'scot',
      'sd',
      'se',
      'search',
      'seat',
      'secure',
      'security',
      'seek',
      'select',
      'sener',
      'services',
      'ses',
      'seven',
      'sew',
      'sex',
      'sexy',
      'sfr',
      'sg',
      'sh',
      'shangrila',
      'sharp',
      'shaw',
      'shell',
      'shia',
      'shiksha',
      'shoes',
      'shop',
      'shopping',
      'shouji',
      'show',
      'showtime',
      'si',
      'silk',
      'sina',
      'singles',
      'site',
      'sj',
      'sk',
      'ski',
      'skin',
      'sky',
      'skype',
      'sl',
      'sling',
      'sm',
      'smart',
      'smile',
      'sn',
      'sncf',
      'so',
      'soccer',
      'social',
      'softbank',
      'software',
      'sohu',
      'solar',
      'solutions',
      'song',
      'sony',
      'soy',
      'spa',
      'space',
      'sport',
      'spot',
      'sr',
      'srl',
      'ss',
      'st',
      'stada',
      'staples',
      'star',
      'statebank',
      'statefarm',
      'stc',
      'stcgroup',
      'stockholm',
      'storage',
      'store',
      'stream',
      'studio',
      'study',
      'style',
      'su',
      'sucks',
      'supplies',
      'supply',
      'support',
      'surf',
      'surgery',
      'suzuki',
      'sv',
      'swatch',
      'swiss',
      'sx',
      'sy',
      'sydney',
      'systems',
      'sz',
      'tab',
      'taipei',
      'talk',
      'taobao',
      'target',
      'tatamotors',
      'tatar',
      'tattoo',
      'tax',
      'taxi',
      'tc',
      'tci',
      'td',
      'tdk',
      'team',
      'tech',
      'technology',
      'tel',
      'temasek',
      'tennis',
      'teva',
      'tf',
      'tg',
      'th',
      'thd',
      'theater',
      'theatre',
      'tiaa',
      'tickets',
      'tienda',
      'tiffany',
      'tips',
      'tires',
      'tirol',
      'tj',
      'tjmaxx',
      'tjx',
      'tk',
      'tkmaxx',
      'tl',
      'tm',
      'tmall',
      'tn',
      'to',
      'today',
      'tokyo',
      'tools',
      'top',
      'toray',
      'toshiba',
      'total',
      'tours',
      'town',
      'toyota',
      'toys',
      'tr',
      'trade',
      'trading',
      'training',
      'travel',
      'travelchannel',
      'travelers',
      'travelersinsurance',
      'trust',
      'trv',
      'tt',
      'tube',
      'tui',
      'tunes',
      'tushu',
      'tv',
      'tvs',
      'tw',
      'tz',
      'ua',
      'ubank',
      'ubs',
      'ug',
      'uk',
      'unicom',
      'university',
      'uno',
      'uol',
      'ups',
      'us',
      'uy',
      'uz',
      'va',
      'vacations',
      'vana',
      'vanguard',
      'vc',
      've',
      'vegas',
      'ventures',
      'verisign',
      'verm\xF6gensberater',
      'verm\xF6gensberatung',
      'versicherung',
      'vet',
      'vg',
      'vi',
      'viajes',
      'video',
      'vig',
      'viking',
      'villas',
      'vin',
      'vip',
      'virgin',
      'visa',
      'vision',
      'viva',
      'vivo',
      'vlaanderen',
      'vn',
      'vodka',
      'volkswagen',
      'volvo',
      'vote',
      'voting',
      'voto',
      'voyage',
      'vu',
      'vuelos',
      'wales',
      'walmart',
      'walter',
      'wang',
      'wanggou',
      'watch',
      'watches',
      'weather',
      'weatherchannel',
      'webcam',
      'weber',
      'website',
      'wed',
      'wedding',
      'weibo',
      'weir',
      'wf',
      'whoswho',
      'wien',
      'wiki',
      'williamhill',
      'win',
      'windows',
      'wine',
      'winners',
      'wme',
      'wolterskluwer',
      'woodside',
      'work',
      'works',
      'world',
      'wow',
      'ws',
      'wtc',
      'wtf',
      'xbox',
      'xerox',
      'xfinity',
      'xihuan',
      'xin',
      'xxx',
      'xyz',
      'yachts',
      'yahoo',
      'yamaxun',
      'yandex',
      'ye',
      'yodobashi',
      'yoga',
      'yokohama',
      'you',
      'youtube',
      'yt',
      'yun',
      'za',
      'zappos',
      'zara',
      'zero',
      'zip',
      'zm',
      'zone',
      'zuerich',
      'zw',
      '\u03B5\u03BB',
      '\u03B5\u03C5',
      '\u0431\u0433',
      '\u0431\u0435\u043B',
      '\u0434\u0435\u0442\u0438',
      '\u0435\u044E',
      '\u043A\u0430\u0442\u043E\u043B\u0438\u043A',
      '\u043A\u043E\u043C',
      '\u043C\u043A\u0434',
      '\u043C\u043E\u043D',
      '\u043C\u043E\u0441\u043A\u0432\u0430',
      '\u043E\u043D\u043B\u0430\u0439\u043D',
      '\u043E\u0440\u0433',
      '\u0440\u0443\u0441',
      '\u0440\u0444',
      '\u0441\u0430\u0439\u0442',
      '\u0441\u0440\u0431',
      '\u0443\u043A\u0440',
      '\u049B\u0430\u0437',
      '\u0570\u0561\u0575',
      '\u05D9\u05E9\u05E8\u05D0\u05DC',
      '\u05E7\u05D5\u05DD',
      '\u0627\u0628\u0648\u0638\u0628\u064A',
      '\u0627\u062A\u0635\u0627\u0644\u0627\u062A',
      '\u0627\u0631\u0627\u0645\u0643\u0648',
      '\u0627\u0644\u0627\u0631\u062F\u0646',
      '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',
      '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',
      '\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',
      '\u0627\u0644\u0639\u0644\u064A\u0627\u0646',
      '\u0627\u0644\u0645\u063A\u0631\u0628',
      '\u0627\u0645\u0627\u0631\u0627\u062A',
      '\u0627\u06CC\u0631\u0627\u0646',
      '\u0628\u0627\u0631\u062A',
      '\u0628\u0627\u0632\u0627\u0631',
      '\u0628\u064A\u062A\u0643',
      '\u0628\u06BE\u0627\u0631\u062A',
      '\u062A\u0648\u0646\u0633',
      '\u0633\u0648\u062F\u0627\u0646',
      '\u0633\u0648\u0631\u064A\u0629',
      '\u0634\u0628\u0643\u0629',
      '\u0639\u0631\u0627\u0642',
      '\u0639\u0631\u0628',
      '\u0639\u0645\u0627\u0646',
      '\u0641\u0644\u0633\u0637\u064A\u0646',
      '\u0642\u0637\u0631',
      '\u0643\u0627\u062B\u0648\u0644\u064A\u0643',
      '\u0643\u0648\u0645',
      '\u0645\u0635\u0631',
      '\u0645\u0644\u064A\u0633\u064A\u0627',
      '\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627',
      '\u0645\u0648\u0642\u0639',
      '\u0647\u0645\u0631\u0627\u0647',
      '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',
      '\u0680\u0627\u0631\u062A',
      '\u0915\u0949\u092E',
      '\u0928\u0947\u091F',
      '\u092D\u093E\u0930\u0924',
      '\u092D\u093E\u0930\u0924\u092E\u094D',
      '\u092D\u093E\u0930\u094B\u0924',
      '\u0938\u0902\u0917\u0920\u0928',
      '\u09AC\u09BE\u0982\u09B2\u09BE',
      '\u09AD\u09BE\u09B0\u09A4',
      '\u09AD\u09BE\u09F0\u09A4',
      '\u0A2D\u0A3E\u0A30\u0A24',
      '\u0AAD\u0ABE\u0AB0\u0AA4',
      '\u0B2D\u0B3E\u0B30\u0B24',
      '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',
      '\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8',
      '\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD',
      '\u0C2D\u0C3E\u0C30\u0C24\u0C4D',
      '\u0CAD\u0CBE\u0CB0\u0CA4',
      '\u0D2D\u0D3E\u0D30\u0D24\u0D02',
      '\u0DBD\u0D82\u0D9A\u0DCF',
      '\u0E04\u0E2D\u0E21',
      '\u0E44\u0E17\u0E22',
      '\u0EA5\u0EB2\u0EA7',
      '\u10D2\u10D4',
      '\u307F\u3093\u306A',
      '\u30A2\u30DE\u30BE\u30F3',
      '\u30AF\u30E9\u30A6\u30C9',
      '\u30B0\u30FC\u30B0\u30EB',
      '\u30B3\u30E0',
      '\u30B9\u30C8\u30A2',
      '\u30BB\u30FC\u30EB',
      '\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3',
      '\u30DD\u30A4\u30F3\u30C8',
      '\u4E16\u754C',
      '\u4E2D\u4FE1',
      '\u4E2D\u56FD',
      '\u4E2D\u570B',
      '\u4E2D\u6587\u7F51',
      '\u4E9A\u9A6C\u900A',
      '\u4F01\u4E1A',
      '\u4F5B\u5C71',
      '\u4FE1\u606F',
      '\u5065\u5EB7',
      '\u516B\u5366',
      '\u516C\u53F8',
      '\u516C\u76CA',
      '\u53F0\u6E7E',
      '\u53F0\u7063',
      '\u5546\u57CE',
      '\u5546\u5E97',
      '\u5546\u6807',
      '\u5609\u91CC',
      '\u5609\u91CC\u5927\u9152\u5E97',
      '\u5728\u7EBF',
      '\u5927\u62FF',
      '\u5929\u4E3B\u6559',
      '\u5A31\u4E50',
      '\u5BB6\u96FB',
      '\u5E7F\u4E1C',
      '\u5FAE\u535A',
      '\u6148\u5584',
      '\u6211\u7231\u4F60',
      '\u624B\u673A',
      '\u62DB\u8058',
      '\u653F\u52A1',
      '\u653F\u5E9C',
      '\u65B0\u52A0\u5761',
      '\u65B0\u95FB',
      '\u65F6\u5C1A',
      '\u66F8\u7C4D',
      '\u673A\u6784',
      '\u6DE1\u9A6C\u9521',
      '\u6E38\u620F',
      '\u6FB3\u9580',
      '\u70B9\u770B',
      '\u79FB\u52A8',
      '\u7EC4\u7EC7\u673A\u6784',
      '\u7F51\u5740',
      '\u7F51\u5E97',
      '\u7F51\u7AD9',
      '\u7F51\u7EDC',
      '\u8054\u901A',
      '\u8BFA\u57FA\u4E9A',
      '\u8C37\u6B4C',
      '\u8D2D\u7269',
      '\u901A\u8CA9',
      '\u96C6\u56E2',
      '\u96FB\u8A0A\u76C8\u79D1',
      '\u98DE\u5229\u6D66',
      '\u98DF\u54C1',
      '\u9910\u5385',
      '\u9999\u683C\u91CC\u62C9',
      '\u9999\u6E2F',
      '\uB2F7\uB137',
      '\uB2F7\uCEF4',
      '\uC0BC\uC131',
      '\uD55C\uAD6D'
    ]

    // src/rich-text/detection.ts
    function detectFacets(text) {
      let match
      const facets = []
      {
        const re = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g
        while ((match = re.exec(text.utf16))) {
          if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {
            continue
          }
          const start = text.utf16.indexOf(match[3], match.index) - 1
          facets.push({
            $type: 'app.bsky.richtext.facet',
            index: {
              byteStart: text.utf16IndexToUtf8Index(start),
              byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
            },
            features: [
              {
                $type: 'app.bsky.richtext.facet#mention',
                did: match[3]
              }
            ]
          })
        }
      }
      {
        const re =
          /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim
        while ((match = re.exec(text.utf16))) {
          let uri2 = match[2]
          if (!uri2.startsWith('http')) {
            const domain = match.groups?.domain
            if (!domain || !isValidDomain(domain)) {
              continue
            }
            uri2 = `https://${uri2}`
          }
          const start = text.utf16.indexOf(match[2], match.index)
          const index = { start, end: start + match[2].length }
          if (/[.,;:!?]$/.test(uri2)) {
            uri2 = uri2.slice(0, -1)
            index.end--
          }
          if (/[)]$/.test(uri2) && !uri2.includes('(')) {
            uri2 = uri2.slice(0, -1)
            index.end--
          }
          facets.push({
            index: {
              byteStart: text.utf16IndexToUtf8Index(index.start),
              byteEnd: text.utf16IndexToUtf8Index(index.end)
            },
            features: [
              {
                $type: 'app.bsky.richtext.facet#link',
                uri: uri2
              }
            ]
          })
        }
      }
      {
        const re = /(?:^|\s)(#[^\d\s]\S*)(?=\s)?/g
        while ((match = re.exec(text.utf16))) {
          let [tag] = match
          const hasLeadingSpace = /^\s/.test(tag)
          tag = tag.trim().replace(/\p{P}+$/gu, '')
          if (tag.length > 66) continue
          const index = match.index + (hasLeadingSpace ? 1 : 0)
          facets.push({
            index: {
              byteStart: text.utf16IndexToUtf8Index(index),
              byteEnd: text.utf16IndexToUtf8Index(index + tag.length)
            },
            features: [
              {
                $type: 'app.bsky.richtext.facet#tag',
                tag: tag.replace(/^#/, '')
              }
            ]
          })
        }
      }
      return facets.length > 0 ? facets : void 0
    }
    function isValidDomain(str) {
      return !!tlds_default.find((tld) => {
        const i = str.lastIndexOf(tld)
        if (i === -1) {
          return false
        }
        return str.charAt(i - 1) === '.' && i === str.length - tld.length
      })
    }

    // src/rich-text/rich-text.ts
    var RichTextSegment = class {
      constructor(text, facet) {
        this.text = text
        this.facet = facet
      }
      get link() {
        const link = this.facet?.features.find(facet_exports.isLink)
        if (facet_exports.isLink(link)) {
          return link
        }
        return void 0
      }
      isLink() {
        return !!this.link
      }
      get mention() {
        const mention = this.facet?.features.find(facet_exports.isMention)
        if (facet_exports.isMention(mention)) {
          return mention
        }
        return void 0
      }
      isMention() {
        return !!this.mention
      }
      get tag() {
        const tag = this.facet?.features.find(facet_exports.isTag)
        if (facet_exports.isTag(tag)) {
          return tag
        }
        return void 0
      }
      isTag() {
        return !!this.tag
      }
    }
    var RichText = class {
      constructor(props, opts) {
        this.unicodeText = new UnicodeString(props.text)
        this.facets = props.facets
        if (!this.facets?.length && props.entities?.length) {
          this.facets = entitiesToFacets(this.unicodeText, props.entities)
        }
        if (this.facets) {
          this.facets.sort(facetSort)
        }
        if (opts?.cleanNewlines) {
          sanitizeRichText(this, { cleanNewlines: true }).copyInto(this)
        }
      }
      get text() {
        return this.unicodeText.toString()
      }
      get length() {
        return this.unicodeText.length
      }
      get graphemeLength() {
        return this.unicodeText.graphemeLength
      }
      clone() {
        return new RichText({
          text: this.unicodeText.utf16,
          facets: cloneDeep(this.facets)
        })
      }
      copyInto(target) {
        target.unicodeText = this.unicodeText
        target.facets = cloneDeep(this.facets)
      }
      *segments() {
        const facets = this.facets || []
        if (!facets.length) {
          yield new RichTextSegment(this.unicodeText.utf16)
          return
        }
        let textCursor = 0
        let facetCursor = 0
        do {
          const currFacet = facets[facetCursor]
          if (textCursor < currFacet.index.byteStart) {
            yield new RichTextSegment(
              this.unicodeText.slice(textCursor, currFacet.index.byteStart)
            )
          } else if (textCursor > currFacet.index.byteStart) {
            facetCursor++
            continue
          }
          if (currFacet.index.byteStart < currFacet.index.byteEnd) {
            const subtext = this.unicodeText.slice(
              currFacet.index.byteStart,
              currFacet.index.byteEnd
            )
            if (!subtext.trim()) {
              yield new RichTextSegment(subtext)
            } else {
              yield new RichTextSegment(subtext, currFacet)
            }
          }
          textCursor = currFacet.index.byteEnd
          facetCursor++
        } while (facetCursor < facets.length)
        if (textCursor < this.unicodeText.length) {
          yield new RichTextSegment(
            this.unicodeText.slice(textCursor, this.unicodeText.length)
          )
        }
      }
      insert(insertIndex, insertText) {
        this.unicodeText = new UnicodeString(
          this.unicodeText.slice(0, insertIndex) +
            insertText +
            this.unicodeText.slice(insertIndex)
        )
        if (!this.facets?.length) {
          return this
        }
        const numCharsAdded = insertText.length
        for (const ent of this.facets) {
          if (insertIndex <= ent.index.byteStart) {
            ent.index.byteStart += numCharsAdded
            ent.index.byteEnd += numCharsAdded
          } else if (
            insertIndex >= ent.index.byteStart &&
            insertIndex < ent.index.byteEnd
          ) {
            ent.index.byteEnd += numCharsAdded
          }
        }
        return this
      }
      delete(removeStartIndex, removeEndIndex) {
        this.unicodeText = new UnicodeString(
          this.unicodeText.slice(0, removeStartIndex) +
            this.unicodeText.slice(removeEndIndex)
        )
        if (!this.facets?.length) {
          return this
        }
        const numCharsRemoved = removeEndIndex - removeStartIndex
        for (const ent of this.facets) {
          if (
            removeStartIndex <= ent.index.byteStart &&
            removeEndIndex >= ent.index.byteEnd
          ) {
            ent.index.byteStart = 0
            ent.index.byteEnd = 0
          } else if (removeStartIndex > ent.index.byteEnd) {
          } else if (
            removeStartIndex > ent.index.byteStart &&
            removeStartIndex <= ent.index.byteEnd &&
            removeEndIndex > ent.index.byteEnd
          ) {
            ent.index.byteEnd = removeStartIndex
          } else if (
            removeStartIndex >= ent.index.byteStart &&
            removeEndIndex <= ent.index.byteEnd
          ) {
            ent.index.byteEnd -= numCharsRemoved
          } else if (
            removeStartIndex < ent.index.byteStart &&
            removeEndIndex >= ent.index.byteStart &&
            removeEndIndex <= ent.index.byteEnd
          ) {
            ent.index.byteStart = removeStartIndex
            ent.index.byteEnd -= numCharsRemoved
          } else if (removeEndIndex < ent.index.byteStart) {
            ent.index.byteStart -= numCharsRemoved
            ent.index.byteEnd -= numCharsRemoved
          }
        }
        this.facets = this.facets.filter(
          (ent) => ent.index.byteStart < ent.index.byteEnd
        )
        return this
      }
      async detectFacets(agent) {
        this.facets = detectFacets(this.unicodeText)
        if (this.facets) {
          for (const facet of this.facets) {
            for (const feature of facet.features) {
              if (facet_exports.isMention(feature)) {
                const did2 = await agent
                  .resolveHandle({ handle: feature.did })
                  .catch((_) => void 0)
                  .then((res) => res?.data.did)
                feature.did = did2 || ''
              }
            }
          }
          this.facets.sort(facetSort)
        }
      }
      detectFacetsWithoutResolution() {
        this.facets = detectFacets(this.unicodeText)
        if (this.facets) {
          this.facets.sort(facetSort)
        }
      }
    }
    var facetSort = (a, b) => a.index.byteStart - b.index.byteStart
    function entitiesToFacets(text, entities) {
      const facets = []
      for (const ent of entities) {
        if (ent.type === 'link') {
          facets.push({
            $type: 'app.bsky.richtext.facet',
            index: {
              byteStart: text.utf16IndexToUtf8Index(ent.index.start),
              byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
              { $type: 'app.bsky.richtext.facet#link', uri: ent.value }
            ]
          })
        } else if (ent.type === 'mention') {
          facets.push({
            $type: 'app.bsky.richtext.facet',
            index: {
              byteStart: text.utf16IndexToUtf8Index(ent.index.start),
              byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
              { $type: 'app.bsky.richtext.facet#mention', did: ent.value }
            ]
          })
        }
      }
      return facets
    }
    function cloneDeep(v) {
      if (typeof v === 'undefined') {
        return v
      }
      return JSON.parse(JSON.stringify(v))
    }

    // src/moderation/types.ts
    var ModerationDecision = class {
      constructor(
        cause = void 0,
        alert = false,
        blur = false,
        blurMedia = false,
        filter = false,
        noOverride = false,
        additionalCauses = [],
        did2 = ''
      ) {
        this.cause = cause
        this.alert = alert
        this.blur = blur
        this.blurMedia = blurMedia
        this.filter = filter
        this.noOverride = noOverride
        this.additionalCauses = additionalCauses
        this.did = did2
      }
      static noop() {
        return new ModerationDecision()
      }
    }

    // src/moderation/const/labels.ts
    var LABELS = {
      '!hide': {
        id: '!hide',
        preferences: ['hide'],
        flags: ['no-override'],
        onwarn: 'blur',
        groupId: 'system',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Moderator Hide',
              description: 'Moderator has chosen to hide the content.'
            }
          },
          account: {
            en: {
              name: 'Content Blocked',
              description: 'This account has been hidden by the moderators.'
            }
          },
          content: {
            en: {
              name: 'Content Blocked',
              description: 'This content has been hidden by the moderators.'
            }
          }
        }
      },
      '!no-promote': {
        id: '!no-promote',
        preferences: ['hide'],
        flags: [],
        onwarn: null,
        groupId: 'system',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Moderator Filter',
              description:
                'Moderator has chosen to filter the content from feeds.'
            }
          },
          account: {
            en: {
              name: 'N/A',
              description: 'N/A'
            }
          },
          content: {
            en: {
              name: 'N/A',
              description: 'N/A'
            }
          }
        }
      },
      '!warn': {
        id: '!warn',
        preferences: ['warn'],
        flags: [],
        onwarn: 'blur',
        groupId: 'system',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Moderator Warn',
              description:
                'Moderator has chosen to set a general warning on the content.'
            }
          },
          account: {
            en: {
              name: 'Content Warning',
              description:
                'This account has received a general warning from moderators.'
            }
          },
          content: {
            en: {
              name: 'Content Warning',
              description:
                'This content has received a general warning from moderators.'
            }
          }
        }
      },
      '!no-unauthenticated': {
        id: '!no-unauthenticated',
        preferences: ['hide'],
        flags: ['no-override', 'unauthed'],
        onwarn: 'blur',
        groupId: 'system',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Sign-in Required',
              description:
                'This user has requested that their account only be shown to signed-in users.'
            }
          },
          account: {
            en: {
              name: 'Sign-in Required',
              description:
                'This user has requested that their account only be shown to signed-in users.'
            }
          },
          content: {
            en: {
              name: 'Sign-in Required',
              description:
                'This user has requested that their content only be shown to signed-in users.'
            }
          }
        }
      },
      'dmca-violation': {
        id: 'dmca-violation',
        preferences: ['hide'],
        flags: ['no-override'],
        onwarn: 'blur',
        groupId: 'legal',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Copyright Violation',
              description: 'The content has received a DMCA takedown request.'
            }
          },
          account: {
            en: {
              name: 'Copyright Violation',
              description:
                'This account has received a DMCA takedown request. It will be restored if the concerns can be resolved.'
            }
          },
          content: {
            en: {
              name: 'Copyright Violation',
              description:
                'This content has received a DMCA takedown request. It will be restored if the concerns can be resolved.'
            }
          }
        }
      },
      doxxing: {
        id: 'doxxing',
        preferences: ['hide'],
        flags: ['no-override'],
        onwarn: 'blur',
        groupId: 'legal',
        configurable: false,
        strings: {
          settings: {
            en: {
              name: 'Doxxing',
              description:
                'Information that reveals private information about someone which has been shared without the consent of the subject.'
            }
          },
          account: {
            en: {
              name: 'Doxxing',
              description:
                'This account has been reported to publish private information about someone without their consent. This report is currently under review.'
            }
          },
          content: {
            en: {
              name: 'Doxxing',
              description:
                'This content has been reported to include private information about someone without their consent.'
            }
          }
        }
      },
      porn: {
        id: 'porn',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'sexual',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Pornography',
              description:
                'Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes).'
            }
          },
          account: {
            en: {
              name: 'Adult Content',
              description:
                'This account contains imagery of full-frontal nudity or explicit sexual activity.'
            }
          },
          content: {
            en: {
              name: 'Adult Content',
              description:
                'This content contains imagery of full-frontal nudity or explicit sexual activity.'
            }
          }
        }
      },
      sexual: {
        id: 'sexual',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'sexual',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Sexually Suggestive',
              description:
                'Content that does not meet the level of "pornography", but is still sexual. Some common examples have been selfies and "hornyposting" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.'
            }
          },
          account: {
            en: {
              name: 'Suggestive Content',
              description:
                'This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.'
            }
          },
          content: {
            en: {
              name: 'Suggestive Content',
              description:
                'This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.'
            }
          }
        }
      },
      nudity: {
        id: 'nudity',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'sexual',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Nudity',
              description:
                'Nudity which is not sexual, or that is primarily "artistic" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. "Erotic photography" is likely to end up in sexual or porn.'
            }
          },
          account: {
            en: {
              name: 'Adult Content',
              description:
                'This account contains imagery which portrays nudity in a non-sexual or artistic setting.'
            }
          },
          content: {
            en: {
              name: 'Adult Content',
              description:
                'This content contains imagery which portrays nudity in a non-sexual or artistic setting.'
            }
          }
        }
      },
      nsfl: {
        id: 'nsfl',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'violence',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'NSFL',
              description: `"Not Suitable For Life." This includes graphic images like the infamous "goatse" (don't look it up).`
            }
          },
          account: {
            en: {
              name: 'Graphic Imagery (NSFL)',
              description:
                'This account contains graphic images which are often referred to as "Not Suitable For Life."'
            }
          },
          content: {
            en: {
              name: 'Graphic Imagery (NSFL)',
              description:
                'This content contains graphic images which are often referred to as "Not Suitable For Life."'
            }
          }
        }
      },
      corpse: {
        id: 'corpse',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'violence',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Corpse',
              description:
                'Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings.'
            }
          },
          account: {
            en: {
              name: 'Graphic Imagery (Corpse)',
              description:
                'This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.'
            }
          },
          content: {
            en: {
              name: 'Graphic Imagery (Corpse)',
              description:
                'This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.'
            }
          }
        }
      },
      gore: {
        id: 'gore',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'violence',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Gore',
              description:
                'Intended for shocking images, typically involving blood or visible wounds.'
            }
          },
          account: {
            en: {
              name: 'Graphic Imagery (Gore)',
              description:
                'This account contains shocking images involving blood or visible wounds.'
            }
          },
          content: {
            en: {
              name: 'Graphic Imagery (Gore)',
              description:
                'This content contains shocking images involving blood or visible wounds.'
            }
          }
        }
      },
      torture: {
        id: 'torture',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur',
        groupId: 'violence',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Torture',
              description:
                'Depictions of torture of a human or animal (animal cruelty).'
            }
          },
          account: {
            en: {
              name: 'Graphic Imagery (Torture)',
              description:
                'This account contains depictions of torture of a human or animal.'
            }
          },
          content: {
            en: {
              name: 'Graphic Imagery (Torture)',
              description:
                'This content contains depictions of torture of a human or animal.'
            }
          }
        }
      },
      'self-harm': {
        id: 'self-harm',
        preferences: ['ignore', 'warn', 'hide'],
        flags: ['adult'],
        onwarn: 'blur-media',
        groupId: 'violence',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Self-Harm',
              description:
                'A visual depiction (photo or figurative) of cutting, suicide, or similar.'
            }
          },
          account: {
            en: {
              name: 'Graphic Imagery (Self-Harm)',
              description:
                'This account includes depictions of cutting, suicide, or other forms of self-harm.'
            }
          },
          content: {
            en: {
              name: 'Graphic Imagery (Self-Harm)',
              description:
                'This content includes depictions of cutting, suicide, or other forms of self-harm.'
            }
          }
        }
      },
      'intolerant-race': {
        id: 'intolerant-race',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Racial Intolerance',
              description: 'Hateful or intolerant content related to race.'
            }
          },
          account: {
            en: {
              name: 'Intolerance (Racial)',
              description:
                'This account includes hateful or intolerant content related to race.'
            }
          },
          content: {
            en: {
              name: 'Intolerance (Racial)',
              description:
                'This content includes hateful or intolerant views related to race.'
            }
          }
        }
      },
      'intolerant-gender': {
        id: 'intolerant-gender',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Gender Intolerance',
              description:
                'Hateful or intolerant content related to gender or gender identity.'
            }
          },
          account: {
            en: {
              name: 'Intolerance (Gender)',
              description:
                'This account includes hateful or intolerant content related to gender or gender identity.'
            }
          },
          content: {
            en: {
              name: 'Intolerance (Gender)',
              description:
                'This content includes hateful or intolerant views related to gender or gender identity.'
            }
          }
        }
      },
      'intolerant-sexual-orientation': {
        id: 'intolerant-sexual-orientation',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Sexual Orientation Intolerance',
              description:
                'Hateful or intolerant content related to sexual preferences.'
            }
          },
          account: {
            en: {
              name: 'Intolerance (Orientation)',
              description:
                'This account includes hateful or intolerant content related to sexual preferences.'
            }
          },
          content: {
            en: {
              name: 'Intolerance (Orientation)',
              description:
                'This content includes hateful or intolerant views related to sexual preferences.'
            }
          }
        }
      },
      'intolerant-religion': {
        id: 'intolerant-religion',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Religious Intolerance',
              description:
                'Hateful or intolerant content related to religious views or practices.'
            }
          },
          account: {
            en: {
              name: 'Intolerance (Religious)',
              description:
                'This account includes hateful or intolerant content related to religious views or practices.'
            }
          },
          content: {
            en: {
              name: 'Intolerance (Religious)',
              description:
                'This content includes hateful or intolerant views related to religious views or practices.'
            }
          }
        }
      },
      intolerant: {
        id: 'intolerant',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Intolerance',
              description:
                'A catchall for hateful or intolerant content which is not covered elsewhere.'
            }
          },
          account: {
            en: {
              name: 'Intolerance',
              description:
                'This account includes hateful or intolerant content.'
            }
          },
          content: {
            en: {
              name: 'Intolerance',
              description: 'This content includes hateful or intolerant views.'
            }
          }
        }
      },
      'icon-intolerant': {
        id: 'icon-intolerant',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur-media',
        groupId: 'intolerance',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Intolerant Iconography',
              description:
                'Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc).'
            }
          },
          account: {
            en: {
              name: 'Intolerant Iconography',
              description:
                'This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.'
            }
          },
          content: {
            en: {
              name: 'Intolerant Iconography',
              description:
                'This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.'
            }
          }
        }
      },
      threat: {
        id: 'threat',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'rude',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Threats',
              description:
                'Statements or imagery published with the intent to threaten, intimidate, or harm.'
            }
          },
          account: {
            en: {
              name: 'Threats',
              description:
                'The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others.'
            }
          },
          content: {
            en: {
              name: 'Threats',
              description:
                'The moderators believe this content was published with the intent to threaten, intimidate, or harm others.'
            }
          }
        }
      },
      spoiler: {
        id: 'spoiler',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'curation',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Spoiler',
              description:
                'Discussion about film, TV, etc which gives away plot points.'
            }
          },
          account: {
            en: {
              name: 'Spoiler Warning',
              description:
                'This account contains discussion about film, TV, etc which gives away plot points.'
            }
          },
          content: {
            en: {
              name: 'Spoiler Warning',
              description:
                'This content contains discussion about film, TV, etc which gives away plot points.'
            }
          }
        }
      },
      spam: {
        id: 'spam',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'spam',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Spam',
              description:
                'Repeat, low-quality messages which are clearly not designed to add to a conversation or space.'
            }
          },
          account: {
            en: {
              name: 'Spam',
              description:
                'This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space.'
            }
          },
          content: {
            en: {
              name: 'Spam',
              description:
                'This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space.'
            }
          }
        }
      },
      'account-security': {
        id: 'account-security',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'misinfo',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Security Concerns',
              description:
                'Content designed to hijack user accounts such as a phishing attack.'
            }
          },
          account: {
            en: {
              name: 'Security Warning',
              description:
                'This account has published content designed to hijack user accounts such as a phishing attack.'
            }
          },
          content: {
            en: {
              name: 'Security Warning',
              description:
                'This content is designed to hijack user accounts such as a phishing attack.'
            }
          }
        }
      },
      'net-abuse': {
        id: 'net-abuse',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'blur',
        groupId: 'misinfo',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Network Attacks',
              description:
                'Content designed to attack network systems such as denial-of-service attacks.'
            }
          },
          account: {
            en: {
              name: 'Network Attack Warning',
              description:
                'This account has published content designed to attack network systems such as denial-of-service attacks.'
            }
          },
          content: {
            en: {
              name: 'Network Attack Warning',
              description:
                'This content is designed to attack network systems such as denial-of-service attacks.'
            }
          }
        }
      },
      impersonation: {
        id: 'impersonation',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'alert',
        groupId: 'misinfo',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Impersonation',
              description: 'Accounts which falsely assert some identity.'
            }
          },
          account: {
            en: {
              name: 'Impersonation Warning',
              description:
                'The moderators believe this account is lying about their identity.'
            }
          },
          content: {
            en: {
              name: 'Impersonation Warning',
              description:
                'The moderators believe this account is lying about their identity.'
            }
          }
        }
      },
      scam: {
        id: 'scam',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'alert',
        groupId: 'misinfo',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Scam',
              description: 'Fraudulent content.'
            }
          },
          account: {
            en: {
              name: 'Scam Warning',
              description:
                'The moderators believe this account publishes fraudulent content.'
            }
          },
          content: {
            en: {
              name: 'Scam Warning',
              description: 'The moderators believe this is fraudulent content.'
            }
          }
        }
      },
      misleading: {
        id: 'misleading',
        preferences: ['ignore', 'warn', 'hide'],
        flags: [],
        onwarn: 'alert',
        groupId: 'misinfo',
        configurable: true,
        strings: {
          settings: {
            en: {
              name: 'Misleading',
              description: 'Accounts which share misleading information.'
            }
          },
          account: {
            en: {
              name: 'Misleading',
              description:
                'The moderators believe this account is spreading misleading information.'
            }
          },
          content: {
            en: {
              name: 'Misleading',
              description:
                'The moderators believe this account is spreading misleading information.'
            }
          }
        }
      }
    }

    // src/moderation/accumulator.ts
    var ModerationCauseAccumulator = class {
      constructor() {
        this.did = ''
        this.causes = []
      }
      setDid(did2) {
        this.did = did2
      }
      addBlocking(blocking) {
        if (blocking) {
          this.causes.push({
            type: 'blocking',
            source: { type: 'user' },
            priority: 3
          })
        }
      }
      addBlockingByList(blockingByList) {
        if (blockingByList) {
          this.causes.push({
            type: 'blocking',
            source: { type: 'list', list: blockingByList },
            priority: 3
          })
        }
      }
      addBlockedBy(blockedBy) {
        if (blockedBy) {
          this.causes.push({
            type: 'blocked-by',
            source: { type: 'user' },
            priority: 4
          })
        }
      }
      addBlockOther(blockOther) {
        if (blockOther) {
          this.causes.push({
            type: 'block-other',
            source: { type: 'user' },
            priority: 4
          })
        }
      }
      addLabel(label, opts) {
        const labelDef = LABELS[label.val]
        if (!labelDef) {
          return
        }
        const isSelf = label.src === this.did
        const labeler = isSelf
          ? void 0
          : opts.labelers.find((s) => s.labeler.did === label.src)
        let labelPref = 'ignore'
        if (!labelDef.configurable) {
          labelPref = labelDef.preferences[0]
        } else if (
          labelDef.flags.includes('adult') &&
          !opts.adultContentEnabled
        ) {
          labelPref = 'hide'
        } else if (labeler?.labels[label.val]) {
          labelPref = labeler.labels[label.val]
        } else if (opts.labels[label.val]) {
          labelPref = opts.labels[label.val]
        }
        if (labelPref === 'ignore') {
          return
        }
        if (labelDef.flags.includes('unauthed') && !!opts.userDid) {
          return
        }
        let priority
        if (labelDef.flags.includes('no-override')) {
          priority = 1
        } else if (labelPref === 'hide') {
          priority = 2
        } else if (labelDef.onwarn === 'blur') {
          priority = 5
        } else if (labelDef.onwarn === 'blur-media') {
          priority = 7
        } else {
          priority = 8
        }
        this.causes.push({
          type: 'label',
          source:
            isSelf || !labeler
              ? { type: 'user' }
              : { type: 'labeler', labeler: labeler.labeler },
          label,
          labelDef,
          setting: labelPref,
          priority
        })
      }
      addMuted(muted) {
        if (muted) {
          this.causes.push({
            type: 'muted',
            source: { type: 'user' },
            priority: 6
          })
        }
      }
      addMutedByList(mutedByList) {
        if (mutedByList) {
          this.causes.push({
            type: 'muted',
            source: { type: 'list', list: mutedByList },
            priority: 6
          })
        }
      }
      finalizeDecision(opts) {
        const mod = new ModerationDecision()
        mod.did = this.did
        if (!this.causes.length) {
          return mod
        }
        this.causes.sort((a, b) => a.priority - b.priority)
        mod.cause = this.causes[0]
        mod.additionalCauses = this.causes.slice(1)
        if (
          mod.cause.type === 'blocking' ||
          mod.cause.type === 'blocked-by' ||
          mod.cause.type === 'block-other'
        ) {
          mod.filter = true
          mod.blur = true
          mod.noOverride = true
        } else if (mod.cause.type === 'muted') {
          mod.filter = true
          mod.blur = true
        } else if (mod.cause.type === 'label') {
          if (mod.cause.setting === 'hide') {
            mod.filter = true
          }
          switch (mod.cause.labelDef.onwarn) {
            case 'alert':
              mod.alert = true
              break
            case 'blur':
              mod.blur = true
              break
            case 'blur-media':
              mod.blurMedia = true
              break
            case null:
              break
          }
          if (mod.cause.labelDef.flags.includes('no-override')) {
            mod.noOverride = true
          } else if (
            mod.cause.labelDef.flags.includes('adult') &&
            !opts.adultContentEnabled
          ) {
            mod.noOverride = true
          }
        }
        return mod
      }
    }

    // src/moderation/subjects/account.ts
    function decideAccount(subject, opts) {
      const acc = new ModerationCauseAccumulator()
      acc.setDid(subject.did)
      if (subject.viewer?.muted) {
        if (subject.viewer?.mutedByList) {
          acc.addMutedByList(subject.viewer?.mutedByList)
        } else {
          acc.addMuted(subject.viewer?.muted)
        }
      }
      if (subject.viewer?.blocking) {
        if (subject.viewer?.blockingByList) {
          acc.addBlockingByList(subject.viewer?.blockingByList)
        } else {
          acc.addBlocking(subject.viewer?.blocking)
        }
      }
      acc.addBlockedBy(subject.viewer?.blockedBy)
      for (const label of filterAccountLabels(subject.labels)) {
        acc.addLabel(label, opts)
      }
      return acc.finalizeDecision(opts)
    }
    function filterAccountLabels(labels) {
      if (!labels) {
        return []
      }
      return labels.filter(
        (label) =>
          !label.uri.endsWith('/app.bsky.actor.profile/self') ||
          label.val === '!no-unauthenticated'
      )
    }

    // src/moderation/subjects/profile.ts
    function decideProfile(subject, opts) {
      const acc = new ModerationCauseAccumulator()
      acc.setDid(subject.did)
      for (const label of filterProfileLabels(subject.labels)) {
        acc.addLabel(label, opts)
      }
      return acc.finalizeDecision(opts)
    }
    function filterProfileLabels(labels) {
      if (!labels) {
        return []
      }
      return labels.filter((label) =>
        label.uri.endsWith('/app.bsky.actor.profile/self')
      )
    }

    // src/moderation/subjects/post.ts
    function decidePost(subject, opts) {
      const acc = new ModerationCauseAccumulator()
      acc.setDid(subject.author.did)
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel(label, opts)
        }
      }
      return acc.finalizeDecision(opts)
    }

    // src/moderation/subjects/quoted-post.ts
    function decideQuotedPost(subject, opts) {
      const acc = new ModerationCauseAccumulator()
      if (record_exports.isViewRecord(subject.record)) {
        acc.setDid(subject.record.author.did)
        if (subject.record.labels?.length) {
          for (const label of subject.record.labels) {
            acc.addLabel(label, opts)
          }
        }
      } else if (record_exports.isViewBlocked(subject.record)) {
        acc.setDid(subject.record.author.did)
        if (subject.record.author.viewer?.blocking) {
          acc.addBlocking(subject.record.author.viewer?.blocking)
        } else if (subject.record.author.viewer?.blockedBy) {
          acc.addBlockedBy(subject.record.author.viewer?.blockedBy)
        } else {
          acc.addBlockOther(true)
        }
      }
      return acc.finalizeDecision(opts)
    }
    function decideQuotedPostAccount(subject, opts) {
      if (record_exports.isViewRecord(subject.record)) {
        return decideAccount(subject.record.author, opts)
      }
      return ModerationDecision.noop()
    }
    function decideQuotedPostWithMedia(subject, opts) {
      const acc = new ModerationCauseAccumulator()
      if (record_exports.isViewRecord(subject.record.record)) {
        acc.setDid(subject.record.record.author.did)
        if (subject.record.record.labels?.length) {
          for (const label of subject.record.record.labels) {
            acc.addLabel(label, opts)
          }
        }
      } else if (record_exports.isViewBlocked(subject.record.record)) {
        acc.setDid(subject.record.record.author.did)
        if (subject.record.record.author.viewer?.blocking) {
          acc.addBlocking(subject.record.record.author.viewer?.blocking)
        } else if (subject.record.record.author.viewer?.blockedBy) {
          acc.addBlockedBy(subject.record.record.author.viewer?.blockedBy)
        } else {
          acc.addBlockOther(true)
        }
      }
      return acc.finalizeDecision(opts)
    }
    function decideQuotedPostWithMediaAccount(subject, opts) {
      if (record_exports.isViewRecord(subject.record.record)) {
        return decideAccount(subject.record.record.author, opts)
      }
      return ModerationDecision.noop()
    }

    // src/moderation/subjects/feed-generator.ts
    function decideFeedGenerator(_subject, _opts) {
      return ModerationDecision.noop()
    }

    // src/moderation/subjects/user-list.ts
    function decideUserList(_subject, _opts) {
      return ModerationDecision.noop()
    }

    // src/moderation/util.ts
    function takeHighestPriorityDecision(...decisions) {
      const filtered = decisions.filter((d) => !!d)
      if (filtered.length === 0) {
        return ModerationDecision.noop()
      }
      filtered.sort((a, b) => {
        if (a.cause && b.cause) {
          return a.cause.priority - b.cause.priority
        }
        if (a.cause) {
          return -1
        }
        if (b.cause) {
          return 1
        }
        return 0
      })
      return filtered[0]
    }
    function downgradeDecision(decision, to) {
      decision.filter = false
      decision.noOverride = false
      if (to === 'noop') {
        decision.blur = false
        decision.blurMedia = false
        decision.alert = false
        delete decision.cause
      } else if (to === 'alert') {
        decision.blur = false
        decision.blurMedia = false
        decision.alert = true
      }
    }
    function isModerationDecisionNoop(
      decision,
      { ignoreFilter } = { ignoreFilter: false }
    ) {
      if (!decision) {
        return true
      }
      if (decision.alert) {
        return false
      }
      if (decision.blur) {
        return false
      }
      if (decision.filter && !ignoreFilter) {
        return false
      }
      return true
    }
    function isQuotedPost(embed) {
      return Boolean(embed && record_exports.isView(embed))
    }
    function isQuotedPostWithMedia(embed) {
      return Boolean(embed && recordWithMedia_exports.isView(embed))
    }
    function toModerationUI(decision) {
      return {
        cause: decision.cause,
        filter: decision.filter,
        blur: decision.blur,
        alert: decision.alert,
        noOverride: decision.noOverride
      }
    }

    // src/moderation/index.ts
    function moderateProfile(subject, opts) {
      const account = decideAccount(subject, opts)
      const profile = decideProfile(subject, opts)
      if (account.blurMedia) {
        account.blur = true
      }
      profile.filter = false
      if (!isModerationDecisionNoop(account) && account.did === opts.userDid) {
        downgradeDecision(account, 'alert')
      }
      if (!isModerationDecisionNoop(profile) && profile.did === opts.userDid) {
        downgradeDecision(profile, 'alert')
      }
      let avatarBlur = false
      let avatarNoOverride = false
      if (
        (account.blur || account.blurMedia) &&
        account.cause?.type !== 'muted'
      ) {
        avatarBlur = true
        avatarNoOverride = account.noOverride || profile.noOverride
      } else if (profile.blur || profile.blurMedia) {
        avatarBlur = true
        avatarNoOverride = account.noOverride || profile.noOverride
      }
      if (
        account.cause?.type === 'blocking' ||
        account.cause?.type === 'blocked-by' ||
        account.cause?.type === 'muted'
      ) {
        account.blur = false
        account.noOverride = false
      }
      return {
        decisions: { account, profile },
        account:
          account.filter || account.blur || account.alert
            ? toModerationUI(account)
            : {},
        profile:
          profile.filter || profile.blur || profile.alert
            ? toModerationUI(profile)
            : {},
        avatar: {
          blur: avatarBlur,
          alert: account.alert || profile.alert,
          noOverride: avatarNoOverride
        }
      }
    }
    function moderatePost(subject, opts) {
      const post = decidePost(subject, opts)
      const account = decideAccount(subject.author, opts)
      const profile = decideProfile(subject.author, opts)
      let quote
      let quotedAccount
      if (isQuotedPost(subject.embed)) {
        quote = decideQuotedPost(subject.embed, opts)
        quotedAccount = decideQuotedPostAccount(subject.embed, opts)
      } else if (isQuotedPostWithMedia(subject.embed)) {
        quote = decideQuotedPostWithMedia(subject.embed, opts)
        quotedAccount = decideQuotedPostWithMediaAccount(subject.embed, opts)
      }
      if (quote?.blurMedia) {
        quote.blur = true
      }
      if (!isModerationDecisionNoop(post) && post.did === opts.userDid) {
        downgradeDecision(post, 'blur')
      }
      if (account.cause && account.did === opts.userDid) {
        downgradeDecision(account, 'noop')
      }
      if (profile.cause && profile.did === opts.userDid) {
        downgradeDecision(profile, 'noop')
      }
      if (
        quote &&
        !isModerationDecisionNoop(quote) &&
        quote.did === opts.userDid
      ) {
        downgradeDecision(quote, 'blur')
      }
      if (
        quotedAccount &&
        !isModerationDecisionNoop(quotedAccount) &&
        quotedAccount.did === opts.userDid
      ) {
        downgradeDecision(quotedAccount, 'noop')
      }
      const mergedForFeed = takeHighestPriorityDecision(
        post,
        account,
        quote,
        quotedAccount
      )
      const mergedForView = takeHighestPriorityDecision(post, account)
      const mergedQuote = takeHighestPriorityDecision(quote, quotedAccount)
      let blurAvatar = false
      if (
        (account.blur || account.blurMedia) &&
        account.cause?.type !== 'muted'
      ) {
        blurAvatar = true
      } else if (
        (profile.blur || profile.blurMedia) &&
        profile.cause?.type !== 'muted'
      ) {
        blurAvatar = true
      }
      return {
        decisions: { post, account, profile, quote, quotedAccount },
        content: {
          cause: !isModerationDecisionNoop(mergedForView)
            ? mergedForView.cause
            : mergedForFeed.filter
              ? mergedForFeed.cause
              : void 0,
          filter: mergedForFeed.filter,
          blur: mergedForView.blur,
          alert: mergedForView.alert,
          noOverride: mergedForView.noOverride
        },
        avatar: {
          blur: blurAvatar,
          alert: account.alert || profile.alert,
          noOverride: account.noOverride || profile.noOverride
        },
        embed: !isModerationDecisionNoop(mergedQuote, { ignoreFilter: true })
          ? {
              cause: mergedQuote.cause,
              blur: mergedQuote.blur,
              alert: mergedQuote.alert,
              noOverride: mergedQuote.noOverride
            }
          : account.blurMedia
            ? {
                cause: account.cause,
                blur: true,
                noOverride: account.noOverride
              }
            : post.blurMedia
              ? {
                  cause: post.cause,
                  blur: true,
                  noOverride: post.noOverride
                }
              : {}
      }
    }
    function moderateFeedGenerator(subject, opts) {
      const feedGenerator = decideFeedGenerator(subject, opts)
      const account = decideAccount(subject.creator, opts)
      const profile = decideProfile(subject.creator, opts)
      const merged = takeHighestPriorityDecision(feedGenerator, account)
      return {
        decisions: { feedGenerator, account, profile },
        content: {
          cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,
          filter: merged.filter,
          blur: merged.blur,
          alert: merged.alert,
          noOverride: merged.noOverride
        },
        avatar: {
          blur: account.blurMedia || profile.blurMedia,
          alert: account.alert,
          noOverride: account.noOverride || profile.noOverride
        }
      }
    }
    function moderateUserList(subject, opts) {
      const userList = decideUserList(subject, opts)
      const account = defs_exports5.isProfileViewBasic(subject.creator)
        ? decideAccount(subject.creator, opts)
        : ModerationDecision.noop()
      const profile = defs_exports5.isProfileViewBasic(subject.creator)
        ? decideProfile(subject.creator, opts)
        : ModerationDecision.noop()
      const merged = takeHighestPriorityDecision(userList, account)
      return {
        decisions: { userList, account, profile },
        content: {
          cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,
          filter: merged.filter,
          blur: merged.blur,
          alert: merged.alert,
          noOverride: merged.noOverride
        },
        avatar: {
          blur: account.blurMedia || profile.blurMedia,
          alert: account.alert,
          noOverride: account.noOverride || profile.noOverride
        }
      }
    }

    // src/moderation/const/label-groups.ts
    var LABEL_GROUPS = {
      system: {
        id: 'system',
        configurable: false,
        labels: [
          LABELS['!hide'],
          LABELS['!no-promote'],
          LABELS['!warn'],
          LABELS['!no-unauthenticated']
        ],
        strings: {
          settings: {
            en: {
              name: 'System',
              description: 'Moderator overrides for special cases.'
            }
          }
        }
      },
      legal: {
        id: 'legal',
        configurable: false,
        labels: [LABELS['dmca-violation'], LABELS['doxxing']],
        strings: {
          settings: {
            en: {
              name: 'Legal',
              description: 'Content removed for legal reasons.'
            }
          }
        }
      },
      sexual: {
        id: 'sexual',
        configurable: true,
        labels: [LABELS['porn'], LABELS['sexual'], LABELS['nudity']],
        strings: {
          settings: {
            en: {
              name: 'Adult Content',
              description: 'Content which is sexual in nature.'
            }
          }
        }
      },
      violence: {
        id: 'violence',
        configurable: true,
        labels: [
          LABELS['nsfl'],
          LABELS['corpse'],
          LABELS['gore'],
          LABELS['torture'],
          LABELS['self-harm']
        ],
        strings: {
          settings: {
            en: {
              name: 'Violence',
              description: 'Content which is violent or deeply disturbing.'
            }
          }
        }
      },
      intolerance: {
        id: 'intolerance',
        configurable: true,
        labels: [
          LABELS['intolerant-race'],
          LABELS['intolerant-gender'],
          LABELS['intolerant-sexual-orientation'],
          LABELS['intolerant-religion'],
          LABELS['intolerant'],
          LABELS['icon-intolerant']
        ],
        strings: {
          settings: {
            en: {
              name: 'Intolerance',
              description:
                'Content or behavior which is hateful or intolerant toward a group of people.'
            }
          }
        }
      },
      rude: {
        id: 'rude',
        configurable: true,
        labels: [LABELS['threat']],
        strings: {
          settings: {
            en: {
              name: 'Rude',
              description: 'Behavior which is rude toward other users.'
            }
          }
        }
      },
      curation: {
        id: 'curation',
        configurable: true,
        labels: [LABELS['spoiler']],
        strings: {
          settings: {
            en: {
              name: 'Curational',
              description:
                'Subjective moderation geared towards curating a more positive environment.'
            }
          }
        }
      },
      spam: {
        id: 'spam',
        configurable: true,
        labels: [LABELS['spam']],
        strings: {
          settings: {
            en: {
              name: 'Spam',
              description: "Content which doesn't add to the conversation."
            }
          }
        }
      },
      misinfo: {
        id: 'misinfo',
        configurable: true,
        labels: [
          LABELS['account-security'],
          LABELS['net-abuse'],
          LABELS['impersonation'],
          LABELS['scam'],
          LABELS['misleading']
        ],
        strings: {
          settings: {
            en: {
              name: 'Misinformation',
              description: 'Content which misleads or defrauds users.'
            }
          }
        }
      }
    }

    // src/bsky-agent.ts
    var FEED_VIEW_PREF_DEFAULTS = {
      hideReplies: false,
      hideRepliesByUnfollowed: false,
      hideRepliesByLikeCount: 0,
      hideReposts: false,
      hideQuotePosts: false
    }
    var THREAD_VIEW_PREF_DEFAULTS = {
      sort: 'oldest',
      prioritizeFollowedUsers: true
    }
    var BskyAgent = class extends AtpAgent {
      constructor() {
        super(...arguments)
        this.getTimeline = (params2, opts) =>
          this.api.app.bsky.feed.getTimeline(params2, opts)
        this.getAuthorFeed = (params2, opts) =>
          this.api.app.bsky.feed.getAuthorFeed(params2, opts)
        this.getActorLikes = (params2, opts) =>
          this.api.app.bsky.feed.getActorLikes(params2, opts)
        this.getPostThread = (params2, opts) =>
          this.api.app.bsky.feed.getPostThread(params2, opts)
        this.getPost = (params2) => this.api.app.bsky.feed.post.get(params2)
        this.getPosts = (params2, opts) =>
          this.api.app.bsky.feed.getPosts(params2, opts)
        this.getLikes = (params2, opts) =>
          this.api.app.bsky.feed.getLikes(params2, opts)
        this.getRepostedBy = (params2, opts) =>
          this.api.app.bsky.feed.getRepostedBy(params2, opts)
        this.getFollows = (params2, opts) =>
          this.api.app.bsky.graph.getFollows(params2, opts)
        this.getFollowers = (params2, opts) =>
          this.api.app.bsky.graph.getFollowers(params2, opts)
        this.getProfile = (params2, opts) =>
          this.api.app.bsky.actor.getProfile(params2, opts)
        this.getProfiles = (params2, opts) =>
          this.api.app.bsky.actor.getProfiles(params2, opts)
        this.getSuggestions = (params2, opts) =>
          this.api.app.bsky.actor.getSuggestions(params2, opts)
        this.searchActors = (params2, opts) =>
          this.api.app.bsky.actor.searchActors(params2, opts)
        this.searchActorsTypeahead = (params2, opts) =>
          this.api.app.bsky.actor.searchActorsTypeahead(params2, opts)
        this.listNotifications = (params2, opts) =>
          this.api.app.bsky.notification.listNotifications(params2, opts)
        this.countUnreadNotifications = (params2, opts) =>
          this.api.app.bsky.notification.getUnreadCount(params2, opts)
      }
      get app() {
        return this.api.app
      }
      async post(record) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        record.createdAt = record.createdAt || new Date().toISOString()
        return this.api.app.bsky.feed.post.create(
          { repo: this.session.did },
          record
        )
      }
      async deletePost(postUri) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        const postUrip = new AtUri(postUri)
        return await this.api.app.bsky.feed.post.delete({
          repo: postUrip.hostname,
          rkey: postUrip.rkey
        })
      }
      async like(uri2, cid2) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        return await this.api.app.bsky.feed.like.create(
          { repo: this.session.did },
          {
            subject: { uri: uri2, cid: cid2 },
            createdAt: new Date().toISOString()
          }
        )
      }
      async deleteLike(likeUri) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        const likeUrip = new AtUri(likeUri)
        return await this.api.app.bsky.feed.like.delete({
          repo: likeUrip.hostname,
          rkey: likeUrip.rkey
        })
      }
      async repost(uri2, cid2) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        return await this.api.app.bsky.feed.repost.create(
          { repo: this.session.did },
          {
            subject: { uri: uri2, cid: cid2 },
            createdAt: new Date().toISOString()
          }
        )
      }
      async deleteRepost(repostUri) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        const repostUrip = new AtUri(repostUri)
        return await this.api.app.bsky.feed.repost.delete({
          repo: repostUrip.hostname,
          rkey: repostUrip.rkey
        })
      }
      async follow(subjectDid) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        return await this.api.app.bsky.graph.follow.create(
          { repo: this.session.did },
          {
            subject: subjectDid,
            createdAt: new Date().toISOString()
          }
        )
      }
      async deleteFollow(followUri) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        const followUrip = new AtUri(followUri)
        return await this.api.app.bsky.graph.follow.delete({
          repo: followUrip.hostname,
          rkey: followUrip.rkey
        })
      }
      async upsertProfile(updateFn) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        let retriesRemaining = 5
        while (retriesRemaining >= 0) {
          const existing = await this.com.atproto.repo
            .getRecord({
              repo: this.session.did,
              collection: 'app.bsky.actor.profile',
              rkey: 'self'
            })
            .catch((_) => void 0)
          const updated = await updateFn(existing?.data.value)
          if (updated) {
            updated.$type = 'app.bsky.actor.profile'
          }
          const validation = profile_exports.validateRecord(updated)
          if (!validation.success) {
            throw validation.error
          }
          try {
            await this.com.atproto.repo.putRecord({
              repo: this.session.did,
              collection: 'app.bsky.actor.profile',
              rkey: 'self',
              record: updated,
              swapRecord: existing?.data.cid || null
            })
          } catch (e) {
            if (
              retriesRemaining > 0 &&
              e instanceof putRecord_exports.InvalidSwapError
            ) {
              retriesRemaining--
              continue
            } else {
              throw e
            }
          }
          break
        }
      }
      async mute(actor) {
        return this.api.app.bsky.graph.muteActor({ actor })
      }
      async unmute(actor) {
        return this.api.app.bsky.graph.unmuteActor({ actor })
      }
      async muteModList(uri2) {
        return this.api.app.bsky.graph.muteActorList({
          list: uri2
        })
      }
      async unmuteModList(uri2) {
        return this.api.app.bsky.graph.unmuteActorList({
          list: uri2
        })
      }
      async blockModList(uri2) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        return await this.api.app.bsky.graph.listblock.create(
          { repo: this.session.did },
          {
            subject: uri2,
            createdAt: new Date().toISOString()
          }
        )
      }
      async unblockModList(uri2) {
        if (!this.session) {
          throw new Error('Not logged in')
        }
        const listInfo = await this.api.app.bsky.graph.getList({
          list: uri2,
          limit: 1
        })
        if (!listInfo.data.list.viewer?.blocked) {
          return
        }
        const { rkey } = new AtUri(listInfo.data.list.viewer.blocked)
        return await this.api.app.bsky.graph.listblock.delete({
          repo: this.session.did,
          rkey
        })
      }
      async updateSeenNotifications(seenAt) {
        seenAt = seenAt || new Date().toISOString()
        return this.api.app.bsky.notification.updateSeen({
          seenAt
        })
      }
      async getPreferences() {
        const prefs = {
          feeds: {
            saved: void 0,
            pinned: void 0
          },
          feedViewPrefs: {
            home: {
              ...FEED_VIEW_PREF_DEFAULTS
            }
          },
          threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },
          adultContentEnabled: false,
          contentLabels: {},
          birthDate: void 0
        }
        const res = await this.app.bsky.actor.getPreferences({})
        for (const pref of res.data.preferences) {
          if (
            defs_exports5.isAdultContentPref(pref) &&
            defs_exports5.validateAdultContentPref(pref).success
          ) {
            prefs.adultContentEnabled = pref.enabled
          } else if (
            defs_exports5.isContentLabelPref(pref) &&
            defs_exports5.validateAdultContentPref(pref).success
          ) {
            let value = pref.visibility
            if (value === 'show') {
              value = 'ignore'
            }
            if (value === 'ignore' || value === 'warn' || value === 'hide') {
              prefs.contentLabels[pref.label] = value
            }
          } else if (
            defs_exports5.isSavedFeedsPref(pref) &&
            defs_exports5.validateSavedFeedsPref(pref).success
          ) {
            prefs.feeds.saved = pref.saved
            prefs.feeds.pinned = pref.pinned
          } else if (
            defs_exports5.isPersonalDetailsPref(pref) &&
            defs_exports5.validatePersonalDetailsPref(pref).success
          ) {
            if (pref.birthDate) {
              prefs.birthDate = new Date(pref.birthDate)
            }
          } else if (
            defs_exports5.isFeedViewPref(pref) &&
            defs_exports5.validateFeedViewPref(pref).success
          ) {
            const { $type, feed, ...v } = pref
            prefs.feedViewPrefs[pref.feed] = {
              ...FEED_VIEW_PREF_DEFAULTS,
              ...v
            }
          } else if (
            defs_exports5.isThreadViewPref(pref) &&
            defs_exports5.validateThreadViewPref(pref).success
          ) {
            const { $type, ...v } = pref
            prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v }
          }
        }
        return prefs
      }
      async setSavedFeeds(saved, pinned) {
        return updateFeedPreferences(this, () => ({
          saved,
          pinned
        }))
      }
      async addSavedFeed(v) {
        return updateFeedPreferences(this, (saved, pinned) => ({
          saved: [...saved.filter((uri2) => uri2 !== v), v],
          pinned
        }))
      }
      async removeSavedFeed(v) {
        return updateFeedPreferences(this, (saved, pinned) => ({
          saved: saved.filter((uri2) => uri2 !== v),
          pinned: pinned.filter((uri2) => uri2 !== v)
        }))
      }
      async addPinnedFeed(v) {
        return updateFeedPreferences(this, (saved, pinned) => ({
          saved: [...saved.filter((uri2) => uri2 !== v), v],
          pinned: [...pinned.filter((uri2) => uri2 !== v), v]
        }))
      }
      async removePinnedFeed(v) {
        return updateFeedPreferences(this, (saved, pinned) => ({
          saved,
          pinned: pinned.filter((uri2) => uri2 !== v)
        }))
      }
      async setAdultContentEnabled(v) {
        await updatePreferences(this, (prefs) => {
          let adultContentPref = prefs.findLast(
            (pref) =>
              defs_exports5.isAdultContentPref(pref) &&
              defs_exports5.validateAdultContentPref(pref).success
          )
          if (adultContentPref) {
            adultContentPref.enabled = v
          } else {
            adultContentPref = {
              $type: 'app.bsky.actor.defs#adultContentPref',
              enabled: v
            }
          }
          return prefs
            .filter((pref) => !defs_exports5.isAdultContentPref(pref))
            .concat([adultContentPref])
        })
      }
      async setContentLabelPref(key, value) {
        if (value === 'show') {
          value = 'ignore'
        }
        await updatePreferences(this, (prefs) => {
          let labelPref = prefs.findLast(
            (pref) =>
              defs_exports5.isContentLabelPref(pref) &&
              defs_exports5.validateAdultContentPref(pref).success &&
              pref.label === key
          )
          if (labelPref) {
            labelPref.visibility = value
          } else {
            labelPref = {
              $type: 'app.bsky.actor.defs#contentLabelPref',
              label: key,
              visibility: value
            }
          }
          return prefs
            .filter(
              (pref) =>
                !defs_exports5.isContentLabelPref(pref) || pref.label !== key
            )
            .concat([labelPref])
        })
      }
      async setPersonalDetails({ birthDate }) {
        birthDate =
          birthDate instanceof Date ? birthDate.toISOString() : birthDate
        await updatePreferences(this, (prefs) => {
          let personalDetailsPref = prefs.findLast(
            (pref) =>
              defs_exports5.isPersonalDetailsPref(pref) &&
              defs_exports5.validatePersonalDetailsPref(pref).success
          )
          if (personalDetailsPref) {
            personalDetailsPref.birthDate = birthDate
          } else {
            personalDetailsPref = {
              $type: 'app.bsky.actor.defs#personalDetailsPref',
              birthDate
            }
          }
          return prefs
            .filter((pref) => !defs_exports5.isPersonalDetailsPref(pref))
            .concat([personalDetailsPref])
        })
      }
      async setFeedViewPrefs(feed, pref) {
        await updatePreferences(this, (prefs) => {
          const existing = prefs.findLast(
            (pref2) =>
              defs_exports5.isFeedViewPref(pref2) &&
              defs_exports5.validateFeedViewPref(pref2).success &&
              pref2.feed === feed
          )
          if (existing) {
            pref = { ...existing, ...pref }
          }
          return prefs
            .filter(
              (p) => !defs_exports5.isFeedViewPref(pref) || p.feed !== feed
            )
            .concat([
              { ...pref, $type: 'app.bsky.actor.defs#feedViewPref', feed }
            ])
        })
      }
      async setThreadViewPrefs(pref) {
        await updatePreferences(this, (prefs) => {
          const existing = prefs.findLast(
            (pref2) =>
              defs_exports5.isThreadViewPref(pref2) &&
              defs_exports5.validateThreadViewPref(pref2).success
          )
          if (existing) {
            pref = { ...existing, ...pref }
          }
          return prefs
            .filter((p) => !defs_exports5.isThreadViewPref(p))
            .concat([{ ...pref, $type: 'app.bsky.actor.defs#threadViewPref' }])
        })
      }
    }
    async function updatePreferences(agent, cb) {
      const res = await agent.app.bsky.actor.getPreferences({})
      const newPrefs = cb(res.data.preferences)
      if (newPrefs === false) {
        return
      }
      await agent.app.bsky.actor.putPreferences({
        preferences: newPrefs
      })
    }
    async function updateFeedPreferences(agent, cb) {
      let res
      await updatePreferences(agent, (prefs) => {
        let feedsPref = prefs.findLast(
          (pref) =>
            defs_exports5.isSavedFeedsPref(pref) &&
            defs_exports5.validateSavedFeedsPref(pref).success
        )
        if (feedsPref) {
          res = cb(feedsPref.saved, feedsPref.pinned)
          feedsPref.saved = res.saved
          feedsPref.pinned = res.pinned
        } else {
          res = cb([], [])
          feedsPref = {
            $type: 'app.bsky.actor.defs#savedFeedsPref',
            saved: res.saved,
            pinned: res.pinned
          }
        }
        return prefs
          .filter((pref) => !defs_exports5.isSavedFeedsPref(pref))
          .concat([feedsPref])
      })
      return res
    }
    //# sourceMappingURL=index.js.map

    /***/
  },

  /***/ 7760: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    /*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

    if (!globalThis.DOMException) {
      try {
        const { MessageChannel } = __nccwpck_require__(1267),
          port = new MessageChannel().port1,
          ab = new ArrayBuffer()
        port.postMessage(ab, [ab, ab])
      } catch (err) {
        err.constructor.name === 'DOMException' &&
          (globalThis.DOMException = err.constructor)
      }
    }

    module.exports = globalThis.DOMException

    /***/
  },

  /***/ 4294: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    module.exports = __nccwpck_require__(4219)

    /***/
  },

  /***/ 4219: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    var net = __nccwpck_require__(1808)
    var tls = __nccwpck_require__(4404)
    var http = __nccwpck_require__(3685)
    var https = __nccwpck_require__(5687)
    var events = __nccwpck_require__(2361)
    var assert = __nccwpck_require__(9491)
    var util = __nccwpck_require__(3837)

    exports.httpOverHttp = httpOverHttp
    exports.httpsOverHttp = httpsOverHttp
    exports.httpOverHttps = httpOverHttps
    exports.httpsOverHttps = httpsOverHttps

    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options)
      agent.request = http.request
      return agent
    }

    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options)
      agent.request = http.request
      agent.createSocket = createSecureSocket
      agent.defaultPort = 443
      return agent
    }

    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options)
      agent.request = https.request
      return agent
    }

    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options)
      agent.request = https.request
      agent.createSocket = createSecureSocket
      agent.defaultPort = 443
      return agent
    }

    function TunnelingAgent(options) {
      var self = this
      self.options = options || {}
      self.proxyOptions = self.options.proxy || {}
      self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
      self.requests = []
      self.sockets = []

      self.on('free', function onFree(socket, host, port, localAddress) {
        var options = toOptions(host, port, localAddress)
        for (var i = 0, len = self.requests.length; i < len; ++i) {
          var pending = self.requests[i]
          if (pending.host === options.host && pending.port === options.port) {
            // Detect the request to connect same origin server,
            // reuse the connection.
            self.requests.splice(i, 1)
            pending.request.onSocket(socket)
            return
          }
        }
        socket.destroy()
        self.removeSocket(socket)
      })
    }
    util.inherits(TunnelingAgent, events.EventEmitter)

    TunnelingAgent.prototype.addRequest = function addRequest(
      req,
      host,
      port,
      localAddress
    ) {
      var self = this
      var options = mergeOptions(
        { request: req },
        self.options,
        toOptions(host, port, localAddress)
      )

      if (self.sockets.length >= this.maxSockets) {
        // We are over limit so we'll add it to the queue.
        self.requests.push(options)
        return
      }

      // If we are under maxSockets create a new one.
      self.createSocket(options, function (socket) {
        socket.on('free', onFree)
        socket.on('close', onCloseOrRemove)
        socket.on('agentRemove', onCloseOrRemove)
        req.onSocket(socket)

        function onFree() {
          self.emit('free', socket, options)
        }

        function onCloseOrRemove(err) {
          self.removeSocket(socket)
          socket.removeListener('free', onFree)
          socket.removeListener('close', onCloseOrRemove)
          socket.removeListener('agentRemove', onCloseOrRemove)
        }
      })
    }

    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self = this
      var placeholder = {}
      self.sockets.push(placeholder)

      var connectOptions = mergeOptions({}, self.proxyOptions, {
        method: 'CONNECT',
        path: options.host + ':' + options.port,
        agent: false,
        headers: {
          host: options.host + ':' + options.port
        }
      })
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {}
        connectOptions.headers['Proxy-Authorization'] =
          'Basic ' + new Buffer(connectOptions.proxyAuth).toString('base64')
      }

      debug('making CONNECT request')
      var connectReq = self.request(connectOptions)
      connectReq.useChunkedEncodingByDefault = false // for v0.6
      connectReq.once('response', onResponse) // for v0.6
      connectReq.once('upgrade', onUpgrade) // for v0.6
      connectReq.once('connect', onConnect) // for v0.7 or later
      connectReq.once('error', onError)
      connectReq.end()

      function onResponse(res) {
        // Very hacky. This is necessary to avoid http-parser leaks.
        res.upgrade = true
      }

      function onUpgrade(res, socket, head) {
        // Hacky.
        process.nextTick(function () {
          onConnect(res, socket, head)
        })
      }

      function onConnect(res, socket, head) {
        connectReq.removeAllListeners()
        socket.removeAllListeners()

        if (res.statusCode !== 200) {
          debug(
            'tunneling socket could not be established, statusCode=%d',
            res.statusCode
          )
          socket.destroy()
          var error = new Error(
            'tunneling socket could not be established, ' +
              'statusCode=' +
              res.statusCode
          )
          error.code = 'ECONNRESET'
          options.request.emit('error', error)
          self.removeSocket(placeholder)
          return
        }
        if (head.length > 0) {
          debug('got illegal response body from proxy')
          socket.destroy()
          var error = new Error('got illegal response body from proxy')
          error.code = 'ECONNRESET'
          options.request.emit('error', error)
          self.removeSocket(placeholder)
          return
        }
        debug('tunneling connection has established')
        self.sockets[self.sockets.indexOf(placeholder)] = socket
        return cb(socket)
      }

      function onError(cause) {
        connectReq.removeAllListeners()

        debug(
          'tunneling socket could not be established, cause=%s\n',
          cause.message,
          cause.stack
        )
        var error = new Error(
          'tunneling socket could not be established, ' +
            'cause=' +
            cause.message
        )
        error.code = 'ECONNRESET'
        options.request.emit('error', error)
        self.removeSocket(placeholder)
      }
    }

    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket)
      if (pos === -1) {
        return
      }
      this.sockets.splice(pos, 1)

      var pending = this.requests.shift()
      if (pending) {
        // If we have pending requests and a socket gets closed a new one
        // needs to be created to take over in the pool for the one that closed.
        this.createSocket(pending, function (socket) {
          pending.request.onSocket(socket)
        })
      }
    }

    function createSecureSocket(options, cb) {
      var self = this
      TunnelingAgent.prototype.createSocket.call(
        self,
        options,
        function (socket) {
          var hostHeader = options.request.getHeader('host')
          var tlsOptions = mergeOptions({}, self.options, {
            socket: socket,
            servername: hostHeader
              ? hostHeader.replace(/:.*$/, '')
              : options.host
          })

          // 0 is dummy port for v0.6
          var secureSocket = tls.connect(0, tlsOptions)
          self.sockets[self.sockets.indexOf(socket)] = secureSocket
          cb(secureSocket)
        }
      )
    }

    function toOptions(host, port, localAddress) {
      if (typeof host === 'string') {
        // since v0.10
        return {
          host: host,
          port: port,
          localAddress: localAddress
        }
      }
      return host // for v0.11 or later
    }

    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i]
        if (typeof overrides === 'object') {
          var keys = Object.keys(overrides)
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j]
            if (overrides[k] !== undefined) {
              target[k] = overrides[k]
            }
          }
        }
      }
      return target
    }

    var debug
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function () {
        var args = Array.prototype.slice.call(arguments)
        if (typeof args[0] === 'string') {
          args[0] = 'TUNNEL: ' + args[0]
        } else {
          args.unshift('TUNNEL:')
        }
        console.error.apply(console, args)
      }
    } else {
      debug = function () {}
    }
    exports.debug = debug // for test

    /***/
  },

  /***/ 1773: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const Client = __nccwpck_require__(3598)
    const Dispatcher = __nccwpck_require__(412)
    const errors = __nccwpck_require__(8045)
    const Pool = __nccwpck_require__(4634)
    const BalancedPool = __nccwpck_require__(7931)
    const Agent = __nccwpck_require__(7890)
    const util = __nccwpck_require__(3983)
    const { InvalidArgumentError } = errors
    const api = __nccwpck_require__(4059)
    const buildConnector = __nccwpck_require__(2067)
    const MockClient = __nccwpck_require__(8687)
    const MockAgent = __nccwpck_require__(6771)
    const MockPool = __nccwpck_require__(6193)
    const mockErrors = __nccwpck_require__(888)
    const ProxyAgent = __nccwpck_require__(7858)
    const { getGlobalDispatcher, setGlobalDispatcher } =
      __nccwpck_require__(1892)
    const DecoratorHandler = __nccwpck_require__(6930)
    const RedirectHandler = __nccwpck_require__(2860)
    const createRedirectInterceptor = __nccwpck_require__(8861)

    let hasCrypto
    try {
      __nccwpck_require__(6113)
      hasCrypto = true
    } catch {
      hasCrypto = false
    }

    Object.assign(Dispatcher.prototype, api)

    module.exports.Dispatcher = Dispatcher
    module.exports.Client = Client
    module.exports.Pool = Pool
    module.exports.BalancedPool = BalancedPool
    module.exports.Agent = Agent
    module.exports.ProxyAgent = ProxyAgent

    module.exports.DecoratorHandler = DecoratorHandler
    module.exports.RedirectHandler = RedirectHandler
    module.exports.createRedirectInterceptor = createRedirectInterceptor

    module.exports.buildConnector = buildConnector
    module.exports.errors = errors

    function makeDispatcher(fn) {
      return (url, opts, handler) => {
        if (typeof opts === 'function') {
          handler = opts
          opts = null
        }

        if (
          !url ||
          (typeof url !== 'string' &&
            typeof url !== 'object' &&
            !(url instanceof URL))
        ) {
          throw new InvalidArgumentError('invalid url')
        }

        if (opts != null && typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        if (opts && opts.path != null) {
          if (typeof opts.path !== 'string') {
            throw new InvalidArgumentError('invalid opts.path')
          }

          let path = opts.path
          if (!opts.path.startsWith('/')) {
            path = `/${path}`
          }

          url = new URL(util.parseOrigin(url).origin + path)
        } else {
          if (!opts) {
            opts = typeof url === 'object' ? url : {}
          }

          url = util.parseURL(url)
        }

        const { agent, dispatcher = getGlobalDispatcher() } = opts

        if (agent) {
          throw new InvalidArgumentError(
            'unsupported opts.agent. Did you mean opts.client?'
          )
        }

        return fn.call(
          dispatcher,
          {
            ...opts,
            origin: url.origin,
            path: url.search ? `${url.pathname}${url.search}` : url.pathname,
            method: opts.method || (opts.body ? 'PUT' : 'GET')
          },
          handler
        )
      }
    }

    module.exports.setGlobalDispatcher = setGlobalDispatcher
    module.exports.getGlobalDispatcher = getGlobalDispatcher

    if (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {
      let fetchImpl = null
      module.exports.fetch = async function fetch(resource) {
        if (!fetchImpl) {
          fetchImpl = __nccwpck_require__(4881).fetch
        }

        try {
          return await fetchImpl(...arguments)
        } catch (err) {
          if (typeof err === 'object') {
            Error.captureStackTrace(err, this)
          }

          throw err
        }
      }
      module.exports.Headers = __nccwpck_require__(554).Headers
      module.exports.Response = __nccwpck_require__(7823).Response
      module.exports.Request = __nccwpck_require__(8359).Request
      module.exports.FormData = __nccwpck_require__(2015).FormData
      module.exports.File = __nccwpck_require__(8511).File
      module.exports.FileReader = __nccwpck_require__(1446).FileReader

      const { setGlobalOrigin, getGlobalOrigin } = __nccwpck_require__(1246)

      module.exports.setGlobalOrigin = setGlobalOrigin
      module.exports.getGlobalOrigin = getGlobalOrigin

      const { CacheStorage } = __nccwpck_require__(7907)
      const { kConstruct } = __nccwpck_require__(9174)

      // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
      // in an older version of Node, it doesn't have any use without fetch.
      module.exports.caches = new CacheStorage(kConstruct)
    }

    if (util.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } =
        __nccwpck_require__(1724)

      module.exports.deleteCookie = deleteCookie
      module.exports.getCookies = getCookies
      module.exports.getSetCookies = getSetCookies
      module.exports.setCookie = setCookie

      const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

      module.exports.parseMIMEType = parseMIMEType
      module.exports.serializeAMimeType = serializeAMimeType
    }

    if (util.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = __nccwpck_require__(4284)

      module.exports.WebSocket = WebSocket
    }

    module.exports.request = makeDispatcher(api.request)
    module.exports.stream = makeDispatcher(api.stream)
    module.exports.pipeline = makeDispatcher(api.pipeline)
    module.exports.connect = makeDispatcher(api.connect)
    module.exports.upgrade = makeDispatcher(api.upgrade)

    module.exports.MockClient = MockClient
    module.exports.MockPool = MockPool
    module.exports.MockAgent = MockAgent
    module.exports.mockErrors = mockErrors

    /***/
  },

  /***/ 7890: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } =
      __nccwpck_require__(2785)
    const DispatcherBase = __nccwpck_require__(4839)
    const Pool = __nccwpck_require__(4634)
    const Client = __nccwpck_require__(3598)
    const util = __nccwpck_require__(3983)
    const createRedirectInterceptor = __nccwpck_require__(8861)
    const { WeakRef, FinalizationRegistry } = __nccwpck_require__(6436)()

    const kOnConnect = Symbol('onConnect')
    const kOnDisconnect = Symbol('onDisconnect')
    const kOnConnectionError = Symbol('onConnectionError')
    const kMaxRedirections = Symbol('maxRedirections')
    const kOnDrain = Symbol('onDrain')
    const kFactory = Symbol('factory')
    const kFinalizer = Symbol('finalizer')
    const kOptions = Symbol('options')

    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1
        ? new Client(origin, opts)
        : new Pool(origin, opts)
    }

    class Agent extends DispatcherBase {
      constructor({
        factory = defaultFactory,
        maxRedirections = 0,
        connect,
        ...options
      } = {}) {
        super()

        if (typeof factory !== 'function') {
          throw new InvalidArgumentError('factory must be a function.')
        }

        if (
          connect != null &&
          typeof connect !== 'function' &&
          typeof connect !== 'object'
        ) {
          throw new InvalidArgumentError(
            'connect must be a function or an object'
          )
        }

        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError(
            'maxRedirections must be a positive number'
          )
        }

        if (connect && typeof connect !== 'function') {
          connect = { ...connect }
        }

        this[kInterceptors] =
          options.interceptors &&
          options.interceptors.Agent &&
          Array.isArray(options.interceptors.Agent)
            ? options.interceptors.Agent
            : [createRedirectInterceptor({ maxRedirections })]

        this[kOptions] = { ...util.deepClone(options), connect }
        this[kOptions].interceptors = options.interceptors
          ? { ...options.interceptors }
          : undefined
        this[kMaxRedirections] = maxRedirections
        this[kFactory] = factory
        this[kClients] = new Map()
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */ (key) => {
            const ref = this[kClients].get(key)
            if (ref !== undefined && ref.deref() === undefined) {
              this[kClients].delete(key)
            }
          }
        )

        const agent = this

        this[kOnDrain] = (origin, targets) => {
          agent.emit('drain', origin, [agent, ...targets])
        }

        this[kOnConnect] = (origin, targets) => {
          agent.emit('connect', origin, [agent, ...targets])
        }

        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit('disconnect', origin, [agent, ...targets], err)
        }

        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit('connectionError', origin, [agent, ...targets], err)
        }
      }

      get [kRunning]() {
        let ret = 0
        for (const ref of this[kClients].values()) {
          const client = ref.deref()
          /* istanbul ignore next: gc is undeterministic */
          if (client) {
            ret += client[kRunning]
          }
        }
        return ret
      }

      [kDispatch](opts, handler) {
        let key
        if (
          opts.origin &&
          (typeof opts.origin === 'string' || opts.origin instanceof URL)
        ) {
          key = String(opts.origin)
        } else {
          throw new InvalidArgumentError(
            'opts.origin must be a non-empty string or URL.'
          )
        }

        const ref = this[kClients].get(key)

        let dispatcher = ref ? ref.deref() : null
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions])
            .on('drain', this[kOnDrain])
            .on('connect', this[kOnConnect])
            .on('disconnect', this[kOnDisconnect])
            .on('connectionError', this[kOnConnectionError])

          this[kClients].set(key, new WeakRef(dispatcher))
          this[kFinalizer].register(dispatcher, key)
        }

        return dispatcher.dispatch(opts, handler)
      }

      async [kClose]() {
        const closePromises = []
        for (const ref of this[kClients].values()) {
          const client = ref.deref()
          /* istanbul ignore else: gc is undeterministic */
          if (client) {
            closePromises.push(client.close())
          }
        }

        await Promise.all(closePromises)
      }

      async [kDestroy](err) {
        const destroyPromises = []
        for (const ref of this[kClients].values()) {
          const client = ref.deref()
          /* istanbul ignore else: gc is undeterministic */
          if (client) {
            destroyPromises.push(client.destroy(err))
          }
        }

        await Promise.all(destroyPromises)
      }
    }

    module.exports = Agent

    /***/
  },

  /***/ 7032: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { addAbortListener } = __nccwpck_require__(3983)
    const { RequestAbortedError } = __nccwpck_require__(8045)

    const kListener = Symbol('kListener')
    const kSignal = Symbol('kSignal')

    function abort(self) {
      if (self.abort) {
        self.abort()
      } else {
        self.onError(new RequestAbortedError())
      }
    }

    function addSignal(self, signal) {
      self[kSignal] = null
      self[kListener] = null

      if (!signal) {
        return
      }

      if (signal.aborted) {
        abort(self)
        return
      }

      self[kSignal] = signal
      self[kListener] = () => {
        abort(self)
      }

      addAbortListener(self[kSignal], self[kListener])
    }

    function removeSignal(self) {
      if (!self[kSignal]) {
        return
      }

      if ('removeEventListener' in self[kSignal]) {
        self[kSignal].removeEventListener('abort', self[kListener])
      } else {
        self[kSignal].removeListener('abort', self[kListener])
      }

      self[kSignal] = null
      self[kListener] = null
    }

    module.exports = {
      addSignal,
      removeSignal
    }

    /***/
  },

  /***/ 9744: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { AsyncResource } = __nccwpck_require__(852)
    const { InvalidArgumentError, RequestAbortedError, SocketError } =
      __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { addSignal, removeSignal } = __nccwpck_require__(7032)

    class ConnectHandler extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        if (typeof callback !== 'function') {
          throw new InvalidArgumentError('invalid callback')
        }

        const { signal, opaque, responseHeaders } = opts

        if (
          signal &&
          typeof signal.on !== 'function' &&
          typeof signal.addEventListener !== 'function'
        ) {
          throw new InvalidArgumentError(
            'signal must be an EventEmitter or EventTarget'
          )
        }

        super('UNDICI_CONNECT')

        this.opaque = opaque || null
        this.responseHeaders = responseHeaders || null
        this.callback = callback
        this.abort = null

        addSignal(this, signal)
      }

      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError()
        }

        this.abort = abort
        this.context = context
      }

      onHeaders() {
        throw new SocketError('bad connect', null)
      }

      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this

        removeSignal(this)

        this.callback = null

        let headers = rawHeaders
        // Indicates is an HTTP2Session
        if (headers != null) {
          headers =
            this.responseHeaders === 'raw'
              ? util.parseRawHeaders(rawHeaders)
              : util.parseHeaders(rawHeaders)
        }

        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context
        })
      }

      onError(err) {
        const { callback, opaque } = this

        removeSignal(this)

        if (callback) {
          this.callback = null
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque })
          })
        }
      }
    }

    function connect(opts, callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data)
          })
        })
      }

      try {
        const connectHandler = new ConnectHandler(opts, callback)
        this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)
      } catch (err) {
        if (typeof callback !== 'function') {
          throw err
        }
        const opaque = opts && opts.opaque
        queueMicrotask(() => callback(err, { opaque }))
      }
    }

    module.exports = connect

    /***/
  },

  /***/ 8752: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { Readable, Duplex, PassThrough } = __nccwpck_require__(2781)
    const {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { AsyncResource } = __nccwpck_require__(852)
    const { addSignal, removeSignal } = __nccwpck_require__(7032)
    const assert = __nccwpck_require__(9491)

    const kResume = Symbol('resume')

    class PipelineRequest extends Readable {
      constructor() {
        super({ autoDestroy: true })

        this[kResume] = null
      }

      _read() {
        const { [kResume]: resume } = this

        if (resume) {
          this[kResume] = null
          resume()
        }
      }

      _destroy(err, callback) {
        this._read()

        callback(err)
      }
    }

    class PipelineResponse extends Readable {
      constructor(resume) {
        super({ autoDestroy: true })
        this[kResume] = resume
      }

      _read() {
        this[kResume]()
      }

      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        callback(err)
      }
    }

    class PipelineHandler extends AsyncResource {
      constructor(opts, handler) {
        if (!opts || typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        if (typeof handler !== 'function') {
          throw new InvalidArgumentError('invalid handler')
        }

        const { signal, method, opaque, onInfo, responseHeaders } = opts

        if (
          signal &&
          typeof signal.on !== 'function' &&
          typeof signal.addEventListener !== 'function'
        ) {
          throw new InvalidArgumentError(
            'signal must be an EventEmitter or EventTarget'
          )
        }

        if (method === 'CONNECT') {
          throw new InvalidArgumentError('invalid method')
        }

        if (onInfo && typeof onInfo !== 'function') {
          throw new InvalidArgumentError('invalid onInfo callback')
        }

        super('UNDICI_PIPELINE')

        this.opaque = opaque || null
        this.responseHeaders = responseHeaders || null
        this.handler = handler
        this.abort = null
        this.context = null
        this.onInfo = onInfo || null

        this.req = new PipelineRequest().on('error', util.nop)

        this.ret = new Duplex({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: () => {
            const { body } = this

            if (body && body.resume) {
              body.resume()
            }
          },
          write: (chunk, encoding, callback) => {
            const { req } = this

            if (req.push(chunk, encoding) || req._readableState.destroyed) {
              callback()
            } else {
              req[kResume] = callback
            }
          },
          destroy: (err, callback) => {
            const { body, req, res, ret, abort } = this

            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError()
            }

            if (abort && err) {
              abort()
            }

            util.destroy(body, err)
            util.destroy(req, err)
            util.destroy(res, err)

            removeSignal(this)

            callback(err)
          }
        }).on('prefinish', () => {
          const { req } = this

          // Node < 15 does not call _final in same tick.
          req.push(null)
        })

        this.res = null

        addSignal(this, signal)
      }

      onConnect(abort, context) {
        const { ret, res } = this

        assert(!res, 'pipeline cannot be retried')

        if (ret.destroyed) {
          throw new RequestAbortedError()
        }

        this.abort = abort
        this.context = context
      }

      onHeaders(statusCode, rawHeaders, resume) {
        const { opaque, handler, context } = this

        if (statusCode < 200) {
          if (this.onInfo) {
            const headers =
              this.responseHeaders === 'raw'
                ? util.parseRawHeaders(rawHeaders)
                : util.parseHeaders(rawHeaders)
            this.onInfo({ statusCode, headers })
          }
          return
        }

        this.res = new PipelineResponse(resume)

        let body
        try {
          this.handler = null
          const headers =
            this.responseHeaders === 'raw'
              ? util.parseRawHeaders(rawHeaders)
              : util.parseHeaders(rawHeaders)
          body = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context
          })
        } catch (err) {
          this.res.on('error', util.nop)
          throw err
        }

        if (!body || typeof body.on !== 'function') {
          throw new InvalidReturnValueError('expected Readable')
        }

        body
          .on('data', (chunk) => {
            const { ret, body } = this

            if (!ret.push(chunk) && body.pause) {
              body.pause()
            }
          })
          .on('error', (err) => {
            const { ret } = this

            util.destroy(ret, err)
          })
          .on('end', () => {
            const { ret } = this

            ret.push(null)
          })
          .on('close', () => {
            const { ret } = this

            if (!ret._readableState.ended) {
              util.destroy(ret, new RequestAbortedError())
            }
          })

        this.body = body
      }

      onData(chunk) {
        const { res } = this
        return res.push(chunk)
      }

      onComplete(trailers) {
        const { res } = this
        res.push(null)
      }

      onError(err) {
        const { ret } = this
        this.handler = null
        util.destroy(ret, err)
      }
    }

    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler)
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)
        return pipelineHandler.ret
      } catch (err) {
        return new PassThrough().destroy(err)
      }
    }

    module.exports = pipeline

    /***/
  },

  /***/ 5448: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const Readable = __nccwpck_require__(3858)
    const { InvalidArgumentError, RequestAbortedError } =
      __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
    const { AsyncResource } = __nccwpck_require__(852)
    const { addSignal, removeSignal } = __nccwpck_require__(7032)

    class RequestHandler extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        const {
          signal,
          method,
          opaque,
          body,
          onInfo,
          responseHeaders,
          throwOnError,
          highWaterMark
        } = opts

        try {
          if (typeof callback !== 'function') {
            throw new InvalidArgumentError('invalid callback')
          }

          if (
            highWaterMark &&
            (typeof highWaterMark !== 'number' || highWaterMark < 0)
          ) {
            throw new InvalidArgumentError('invalid highWaterMark')
          }

          if (
            signal &&
            typeof signal.on !== 'function' &&
            typeof signal.addEventListener !== 'function'
          ) {
            throw new InvalidArgumentError(
              'signal must be an EventEmitter or EventTarget'
            )
          }

          if (method === 'CONNECT') {
            throw new InvalidArgumentError('invalid method')
          }

          if (onInfo && typeof onInfo !== 'function') {
            throw new InvalidArgumentError('invalid onInfo callback')
          }

          super('UNDICI_REQUEST')
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on('error', util.nop), err)
          }
          throw err
        }

        this.responseHeaders = responseHeaders || null
        this.opaque = opaque || null
        this.callback = callback
        this.res = null
        this.abort = null
        this.body = body
        this.trailers = {}
        this.context = null
        this.onInfo = onInfo || null
        this.throwOnError = throwOnError
        this.highWaterMark = highWaterMark

        if (util.isStream(body)) {
          body.on('error', (err) => {
            this.onError(err)
          })
        }

        addSignal(this, signal)
      }

      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError()
        }

        this.abort = abort
        this.context = context
      }

      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const {
          callback,
          opaque,
          abort,
          context,
          responseHeaders,
          highWaterMark
        } = this

        const headers =
          responseHeaders === 'raw'
            ? util.parseRawHeaders(rawHeaders)
            : util.parseHeaders(rawHeaders)

        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers })
          }
          return
        }

        const parsedHeaders =
          responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
        const contentType = parsedHeaders['content-type']
        const body = new Readable({ resume, abort, contentType, highWaterMark })

        this.callback = null
        this.res = body
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(getResolveErrorBodyCallback, null, {
              callback,
              body,
              contentType,
              statusCode,
              statusMessage,
              headers
            })
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body,
              context
            })
          }
        }
      }

      onData(chunk) {
        const { res } = this
        return res.push(chunk)
      }

      onComplete(trailers) {
        const { res } = this

        removeSignal(this)

        util.parseHeaders(trailers, this.trailers)

        res.push(null)
      }

      onError(err) {
        const { res, callback, body, opaque } = this

        removeSignal(this)

        if (callback) {
          // TODO: Does this need queueMicrotask?
          this.callback = null
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque })
          })
        }

        if (res) {
          this.res = null
          // Ensure all queued handlers are invoked before destroying res.
          queueMicrotask(() => {
            util.destroy(res, err)
          })
        }

        if (body) {
          this.body = null
          util.destroy(body, err)
        }
      }
    }

    function request(opts, callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          request.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data)
          })
        })
      }

      try {
        this.dispatch(opts, new RequestHandler(opts, callback))
      } catch (err) {
        if (typeof callback !== 'function') {
          throw err
        }
        const opaque = opts && opts.opaque
        queueMicrotask(() => callback(err, { opaque }))
      }
    }

    module.exports = request

    /***/
  },

  /***/ 5395: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { finished, PassThrough } = __nccwpck_require__(2781)
    const {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { getResolveErrorBodyCallback } = __nccwpck_require__(7474)
    const { AsyncResource } = __nccwpck_require__(852)
    const { addSignal, removeSignal } = __nccwpck_require__(7032)

    class StreamHandler extends AsyncResource {
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        const {
          signal,
          method,
          opaque,
          body,
          onInfo,
          responseHeaders,
          throwOnError
        } = opts

        try {
          if (typeof callback !== 'function') {
            throw new InvalidArgumentError('invalid callback')
          }

          if (typeof factory !== 'function') {
            throw new InvalidArgumentError('invalid factory')
          }

          if (
            signal &&
            typeof signal.on !== 'function' &&
            typeof signal.addEventListener !== 'function'
          ) {
            throw new InvalidArgumentError(
              'signal must be an EventEmitter or EventTarget'
            )
          }

          if (method === 'CONNECT') {
            throw new InvalidArgumentError('invalid method')
          }

          if (onInfo && typeof onInfo !== 'function') {
            throw new InvalidArgumentError('invalid onInfo callback')
          }

          super('UNDICI_STREAM')
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on('error', util.nop), err)
          }
          throw err
        }

        this.responseHeaders = responseHeaders || null
        this.opaque = opaque || null
        this.factory = factory
        this.callback = callback
        this.res = null
        this.abort = null
        this.context = null
        this.trailers = null
        this.body = body
        this.onInfo = onInfo || null
        this.throwOnError = throwOnError || false

        if (util.isStream(body)) {
          body.on('error', (err) => {
            this.onError(err)
          })
        }

        addSignal(this, signal)
      }

      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError()
        }

        this.abort = abort
        this.context = context
      }

      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory, opaque, context, callback, responseHeaders } = this

        const headers =
          responseHeaders === 'raw'
            ? util.parseRawHeaders(rawHeaders)
            : util.parseHeaders(rawHeaders)

        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers })
          }
          return
        }

        this.factory = null

        let res

        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders =
            responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
          const contentType = parsedHeaders['content-type']
          res = new PassThrough()

          this.callback = null
          this.runInAsyncScope(getResolveErrorBodyCallback, null, {
            callback,
            body: res,
            contentType,
            statusCode,
            statusMessage,
            headers
          })
        } else {
          if (factory === null) {
            return
          }

          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context
          })

          if (
            !res ||
            typeof res.write !== 'function' ||
            typeof res.end !== 'function' ||
            typeof res.on !== 'function'
          ) {
            throw new InvalidReturnValueError('expected Writable')
          }

          // TODO: Avoid finished. It registers an unnecessary amount of listeners.
          finished(res, { readable: false }, (err) => {
            const { callback, res, opaque, trailers, abort } = this

            this.res = null
            if (err || !res.readable) {
              util.destroy(res, err)
            }

            this.callback = null
            this.runInAsyncScope(callback, null, err || null, {
              opaque,
              trailers
            })

            if (err) {
              abort()
            }
          })
        }

        res.on('drain', resume)

        this.res = res

        const needDrain =
          res.writableNeedDrain !== undefined
            ? res.writableNeedDrain
            : res._writableState && res._writableState.needDrain

        return needDrain !== true
      }

      onData(chunk) {
        const { res } = this

        return res ? res.write(chunk) : true
      }

      onComplete(trailers) {
        const { res } = this

        removeSignal(this)

        if (!res) {
          return
        }

        this.trailers = util.parseHeaders(trailers)

        res.end()
      }

      onError(err) {
        const { res, callback, opaque, body } = this

        removeSignal(this)

        this.factory = null

        if (res) {
          this.res = null
          util.destroy(res, err)
        } else if (callback) {
          this.callback = null
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque })
          })
        }

        if (body) {
          this.body = null
          util.destroy(body, err)
        }
      }
    }

    function stream(opts, factory, callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve(data)
          })
        })
      }

      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback))
      } catch (err) {
        if (typeof callback !== 'function') {
          throw err
        }
        const opaque = opts && opts.opaque
        queueMicrotask(() => callback(err, { opaque }))
      }
    }

    module.exports = stream

    /***/
  },

  /***/ 6923: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { InvalidArgumentError, RequestAbortedError, SocketError } =
      __nccwpck_require__(8045)
    const { AsyncResource } = __nccwpck_require__(852)
    const util = __nccwpck_require__(3983)
    const { addSignal, removeSignal } = __nccwpck_require__(7032)
    const assert = __nccwpck_require__(9491)

    class UpgradeHandler extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== 'object') {
          throw new InvalidArgumentError('invalid opts')
        }

        if (typeof callback !== 'function') {
          throw new InvalidArgumentError('invalid callback')
        }

        const { signal, opaque, responseHeaders } = opts

        if (
          signal &&
          typeof signal.on !== 'function' &&
          typeof signal.addEventListener !== 'function'
        ) {
          throw new InvalidArgumentError(
            'signal must be an EventEmitter or EventTarget'
          )
        }

        super('UNDICI_UPGRADE')

        this.responseHeaders = responseHeaders || null
        this.opaque = opaque || null
        this.callback = callback
        this.abort = null
        this.context = null

        addSignal(this, signal)
      }

      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError()
        }

        this.abort = abort
        this.context = null
      }

      onHeaders() {
        throw new SocketError('bad upgrade', null)
      }

      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this

        assert.strictEqual(statusCode, 101)

        removeSignal(this)

        this.callback = null
        const headers =
          this.responseHeaders === 'raw'
            ? util.parseRawHeaders(rawHeaders)
            : util.parseHeaders(rawHeaders)
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context
        })
      }

      onError(err) {
        const { callback, opaque } = this

        removeSignal(this)

        if (callback) {
          this.callback = null
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque })
          })
        }
      }
    }

    function upgrade(opts, callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data)
          })
        })
      }

      try {
        const upgradeHandler = new UpgradeHandler(opts, callback)
        this.dispatch(
          {
            ...opts,
            method: opts.method || 'GET',
            upgrade: opts.protocol || 'Websocket'
          },
          upgradeHandler
        )
      } catch (err) {
        if (typeof callback !== 'function') {
          throw err
        }
        const opaque = opts && opts.opaque
        queueMicrotask(() => callback(err, { opaque }))
      }
    }

    module.exports = upgrade

    /***/
  },

  /***/ 4059: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    module.exports.request = __nccwpck_require__(5448)
    module.exports.stream = __nccwpck_require__(5395)
    module.exports.pipeline = __nccwpck_require__(8752)
    module.exports.upgrade = __nccwpck_require__(6923)
    module.exports.connect = __nccwpck_require__(9744)

    /***/
  },

  /***/ 3858: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // Ported from https://github.com/nodejs/undici/pull/907

    const assert = __nccwpck_require__(9491)
    const { Readable } = __nccwpck_require__(2781)
    const { RequestAbortedError, NotSupportedError, InvalidArgumentError } =
      __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { ReadableStreamFrom, toUSVString } = __nccwpck_require__(3983)

    let Blob

    const kConsume = Symbol('kConsume')
    const kReading = Symbol('kReading')
    const kBody = Symbol('kBody')
    const kAbort = Symbol('abort')
    const kContentType = Symbol('kContentType')

    module.exports = class BodyReadable extends Readable {
      constructor({
        resume,
        abort,
        contentType = '',
        highWaterMark = 64 * 1024 // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume,
          highWaterMark
        })

        this._readableState.dataEmitted = false

        this[kAbort] = abort
        this[kConsume] = null
        this[kBody] = null
        this[kContentType] = contentType

        // Is stream being consumed through Readable API?
        // This is an optimization so that we avoid checking
        // for 'data' and 'readable' listeners in the hot path
        // inside push().
        this[kReading] = false
      }

      destroy(err) {
        if (this.destroyed) {
          // Node < 16
          return this
        }

        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        if (err) {
          this[kAbort]()
        }

        return super.destroy(err)
      }

      emit(ev, ...args) {
        if (ev === 'data') {
          // Node < 16.7
          this._readableState.dataEmitted = true
        } else if (ev === 'error') {
          // Node < 16
          this._readableState.errorEmitted = true
        }
        return super.emit(ev, ...args)
      }

      on(ev, ...args) {
        if (ev === 'data' || ev === 'readable') {
          this[kReading] = true
        }
        return super.on(ev, ...args)
      }

      addListener(ev, ...args) {
        return this.on(ev, ...args)
      }

      off(ev, ...args) {
        const ret = super.off(ev, ...args)
        if (ev === 'data' || ev === 'readable') {
          this[kReading] =
            this.listenerCount('data') > 0 || this.listenerCount('readable') > 0
        }
        return ret
      }

      removeListener(ev, ...args) {
        return this.off(ev, ...args)
      }

      push(chunk) {
        if (this[kConsume] && chunk !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk)
          return this[kReading] ? super.push(chunk) : true
        }
        return super.push(chunk)
      }

      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, 'text')
      }

      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, 'json')
      }

      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, 'blob')
      }

      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, 'arrayBuffer')
      }

      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        // TODO: Implement.
        throw new NotSupportedError()
      }

      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util.isDisturbed(this)
      }

      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this)
          if (this[kConsume]) {
            // TODO: Is this the best way to force a lock?
            this[kBody].getReader() // Ensure stream is locked.
            assert(this[kBody].locked)
          }
        }
        return this[kBody]
      }

      async dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144
        const signal = opts && opts.signal
        const abortFn = () => {
          this.destroy()
        }
        let signalListenerCleanup
        if (signal) {
          if (typeof signal !== 'object' || !('aborted' in signal)) {
            throw new InvalidArgumentError('signal must be an AbortSignal')
          }
          util.throwIfAborted(signal)
          signalListenerCleanup = util.addAbortListener(signal, abortFn)
        }
        try {
          for await (const chunk of this) {
            util.throwIfAborted(signal)
            limit -= Buffer.byteLength(chunk)
            if (limit < 0) {
              return
            }
          }
        } catch {
          util.throwIfAborted(signal)
        } finally {
          if (typeof signalListenerCleanup === 'function') {
            signalListenerCleanup()
          } else if (signalListenerCleanup) {
            signalListenerCleanup[Symbol.dispose]()
          }
        }
      }
    }

    // https://streams.spec.whatwg.org/#readablestream-locked
    function isLocked(self) {
      // Consume is an implicit lock.
      return (self[kBody] && self[kBody].locked === true) || self[kConsume]
    }

    // https://fetch.spec.whatwg.org/#body-unusable
    function isUnusable(self) {
      return util.isDisturbed(self) || isLocked(self)
    }

    async function consume(stream, type) {
      if (isUnusable(stream)) {
        throw new TypeError('unusable')
      }

      assert(!stream[kConsume])

      return new Promise((resolve, reject) => {
        stream[kConsume] = {
          type,
          stream,
          resolve,
          reject,
          length: 0,
          body: []
        }

        stream
          .on('error', function (err) {
            consumeFinish(this[kConsume], err)
          })
          .on('close', function () {
            if (this[kConsume].body !== null) {
              consumeFinish(this[kConsume], new RequestAbortedError())
            }
          })

        process.nextTick(consumeStart, stream[kConsume])
      })
    }

    function consumeStart(consume) {
      if (consume.body === null) {
        return
      }

      const { _readableState: state } = consume.stream

      for (const chunk of state.buffer) {
        consumePush(consume, chunk)
      }

      if (state.endEmitted) {
        consumeEnd(this[kConsume])
      } else {
        consume.stream.on('end', function () {
          consumeEnd(this[kConsume])
        })
      }

      consume.stream.resume()

      while (consume.stream.read() != null) {
        // Loop
      }
    }

    function consumeEnd(consume) {
      const { type, body, resolve, stream, length } = consume

      try {
        if (type === 'text') {
          resolve(toUSVString(Buffer.concat(body)))
        } else if (type === 'json') {
          resolve(JSON.parse(Buffer.concat(body)))
        } else if (type === 'arrayBuffer') {
          const dst = new Uint8Array(length)

          let pos = 0
          for (const buf of body) {
            dst.set(buf, pos)
            pos += buf.byteLength
          }

          resolve(dst.buffer)
        } else if (type === 'blob') {
          if (!Blob) {
            Blob = __nccwpck_require__(4300).Blob
          }
          resolve(new Blob(body, { type: stream[kContentType] }))
        }

        consumeFinish(consume)
      } catch (err) {
        stream.destroy(err)
      }
    }

    function consumePush(consume, chunk) {
      consume.length += chunk.length
      consume.body.push(chunk)
    }

    function consumeFinish(consume, err) {
      if (consume.body === null) {
        return
      }

      if (err) {
        consume.reject(err)
      } else {
        consume.resolve()
      }

      consume.type = null
      consume.stream = null
      consume.resolve = null
      consume.reject = null
      consume.length = 0
      consume.body = null
    }

    /***/
  },

  /***/ 7474: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const assert = __nccwpck_require__(9491)
    const { ResponseStatusCodeError } = __nccwpck_require__(8045)
    const { toUSVString } = __nccwpck_require__(3983)

    async function getResolveErrorBodyCallback({
      callback,
      body,
      contentType,
      statusCode,
      statusMessage,
      headers
    }) {
      assert(body)

      let chunks = []
      let limit = 0

      for await (const chunk of body) {
        chunks.push(chunk)
        limit += chunk.length
        if (limit > 128 * 1024) {
          chunks = null
          break
        }
      }

      if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(
          callback,
          new ResponseStatusCodeError(
            `Response status code ${statusCode}${
              statusMessage ? `: ${statusMessage}` : ''
            }`,
            statusCode,
            headers
          )
        )
        return
      }

      try {
        if (contentType.startsWith('application/json')) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))
          process.nextTick(
            callback,
            new ResponseStatusCodeError(
              `Response status code ${statusCode}${
                statusMessage ? `: ${statusMessage}` : ''
              }`,
              statusCode,
              headers,
              payload
            )
          )
          return
        }

        if (contentType.startsWith('text/')) {
          const payload = toUSVString(Buffer.concat(chunks))
          process.nextTick(
            callback,
            new ResponseStatusCodeError(
              `Response status code ${statusCode}${
                statusMessage ? `: ${statusMessage}` : ''
              }`,
              statusCode,
              headers,
              payload
            )
          )
          return
        }
      } catch (err) {
        // Process in a fallback if error
      }

      process.nextTick(
        callback,
        new ResponseStatusCodeError(
          `Response status code ${statusCode}${
            statusMessage ? `: ${statusMessage}` : ''
          }`,
          statusCode,
          headers
        )
      )
    }

    module.exports = { getResolveErrorBodyCallback }

    /***/
  },

  /***/ 7931: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { BalancedPoolMissingUpstreamError, InvalidArgumentError } =
      __nccwpck_require__(8045)
    const {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = __nccwpck_require__(3198)
    const Pool = __nccwpck_require__(4634)
    const { kUrl, kInterceptors } = __nccwpck_require__(2785)
    const { parseOrigin } = __nccwpck_require__(3983)
    const kFactory = Symbol('factory')

    const kOptions = Symbol('options')
    const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')
    const kCurrentWeight = Symbol('kCurrentWeight')
    const kIndex = Symbol('kIndex')
    const kWeight = Symbol('kWeight')
    const kMaxWeightPerServer = Symbol('kMaxWeightPerServer')
    const kErrorPenalty = Symbol('kErrorPenalty')

    function getGreatestCommonDivisor(a, b) {
      if (b === 0) return a
      return getGreatestCommonDivisor(b, a % b)
    }

    function defaultFactory(origin, opts) {
      return new Pool(origin, opts)
    }

    class BalancedPool extends PoolBase {
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super()

        this[kOptions] = opts
        this[kIndex] = -1
        this[kCurrentWeight] = 0

        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15

        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams]
        }

        if (typeof factory !== 'function') {
          throw new InvalidArgumentError('factory must be a function.')
        }

        this[kInterceptors] =
          opts.interceptors &&
          opts.interceptors.BalancedPool &&
          Array.isArray(opts.interceptors.BalancedPool)
            ? opts.interceptors.BalancedPool
            : []
        this[kFactory] = factory

        for (const upstream of upstreams) {
          this.addUpstream(upstream)
        }
        this._updateBalancedPoolStats()
      }

      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin

        if (
          this[kClients].find(
            (pool) =>
              pool[kUrl].origin === upstreamOrigin &&
              pool.closed !== true &&
              pool.destroyed !== true
          )
        ) {
          return this
        }
        const pool = this[kFactory](
          upstreamOrigin,
          Object.assign({}, this[kOptions])
        )

        this[kAddClient](pool)
        pool.on('connect', () => {
          pool[kWeight] = Math.min(
            this[kMaxWeightPerServer],
            pool[kWeight] + this[kErrorPenalty]
          )
        })

        pool.on('connectionError', () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
          this._updateBalancedPoolStats()
        })

        pool.on('disconnect', (...args) => {
          const err = args[2]
          if (err && err.code === 'UND_ERR_SOCKET') {
            // decrease the weight of the pool.
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
            this._updateBalancedPoolStats()
          }
        })

        for (const client of this[kClients]) {
          client[kWeight] = this[kMaxWeightPerServer]
        }

        this._updateBalancedPoolStats()

        return this
      }

      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients]
          .map((p) => p[kWeight])
          .reduce(getGreatestCommonDivisor, 0)
      }

      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin

        const pool = this[kClients].find(
          (pool) =>
            pool[kUrl].origin === upstreamOrigin &&
            pool.closed !== true &&
            pool.destroyed !== true
        )

        if (pool) {
          this[kRemoveClient](pool)
        }

        return this
      }

      get upstreams() {
        return this[kClients]
          .filter(
            (dispatcher) =>
              dispatcher.closed !== true && dispatcher.destroyed !== true
          )
          .map((p) => p[kUrl].origin)
      }

      [kGetDispatcher]() {
        // We validate that pools is greater than 0,
        // otherwise we would have to wait until an upstream
        // is added, which might never happen.
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError()
        }

        const dispatcher = this[kClients].find(
          (dispatcher) =>
            !dispatcher[kNeedDrain] &&
            dispatcher.closed !== true &&
            dispatcher.destroyed !== true
        )

        if (!dispatcher) {
          return
        }

        const allClientsBusy = this[kClients]
          .map((pool) => pool[kNeedDrain])
          .reduce((a, b) => a && b, true)

        if (allClientsBusy) {
          return
        }

        let counter = 0

        let maxWeightIndex = this[kClients].findIndex(
          (pool) => !pool[kNeedDrain]
        )

        while (counter++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length
          const pool = this[kClients][this[kIndex]]

          // find pool index with the largest weight
          if (
            pool[kWeight] > this[kClients][maxWeightIndex][kWeight] &&
            !pool[kNeedDrain]
          ) {
            maxWeightIndex = this[kIndex]
          }

          // decrease the current weight every `this[kClients].length`.
          if (this[kIndex] === 0) {
            // Set the current weight to the next lower weight.
            this[kCurrentWeight] =
              this[kCurrentWeight] - this[kGreatestCommonDivisor]

            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer]
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool
          }
        }

        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]
        this[kIndex] = maxWeightIndex
        return this[kClients][maxWeightIndex]
      }
    }

    module.exports = BalancedPool

    /***/
  },

  /***/ 6101: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kConstruct } = __nccwpck_require__(9174)
    const { urlEquals, fieldValues: getFieldValues } = __nccwpck_require__(2396)
    const { kEnumerableProperty, isDisturbed } = __nccwpck_require__(3983)
    const { kHeadersList } = __nccwpck_require__(2785)
    const { webidl } = __nccwpck_require__(1744)
    const { Response, cloneResponse } = __nccwpck_require__(7823)
    const { Request } = __nccwpck_require__(8359)
    const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
    const { fetching } = __nccwpck_require__(4881)
    const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } =
      __nccwpck_require__(2538)
    const assert = __nccwpck_require__(9491)
    const { getGlobalDispatcher } = __nccwpck_require__(1892)

    /**
     * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
     * @typedef {Object} CacheBatchOperation
     * @property {'delete' | 'put'} type
     * @property {any} request
     * @property {any} response
     * @property {import('../../types/cache').CacheQueryOptions} options
     */

    /**
     * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
     * @typedef {[any, any][]} requestResponseList
     */

    class Cache {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList

      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor()
        }

        this.#relevantRequestResponseList = arguments[1]
      }

      async match(request, options = {}) {
        webidl.brandCheck(this, Cache)
        webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })

        request = webidl.converters.RequestInfo(request)
        options = webidl.converters.CacheQueryOptions(options)

        const p = await this.matchAll(request, options)

        if (p.length === 0) {
          return
        }

        return p[0]
      }

      async matchAll(request = undefined, options = {}) {
        webidl.brandCheck(this, Cache)

        if (request !== undefined)
          request = webidl.converters.RequestInfo(request)
        options = webidl.converters.CacheQueryOptions(options)

        // 1.
        let r = null

        // 2.
        if (request !== undefined) {
          if (request instanceof Request) {
            // 2.1.1
            r = request[kState]

            // 2.1.2
            if (r.method !== 'GET' && !options.ignoreMethod) {
              return []
            }
          } else if (typeof request === 'string') {
            // 2.2.1
            r = new Request(request)[kState]
          }
        }

        // 5.
        // 5.1
        const responses = []

        // 5.2
        if (request === undefined) {
          // 5.2.1
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1])
          }
        } else {
          // 5.3
          // 5.3.1
          const requestResponses = this.#queryCache(r, options)

          // 5.3.2
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1])
          }
        }

        // 5.4
        // We don't implement CORs so we don't need to loop over the responses, yay!

        // 5.5.1
        const responseList = []

        // 5.5.2
        for (const response of responses) {
          // 5.5.2.1
          const responseObject = new Response(response.body?.source ?? null)
          const body = responseObject[kState].body
          responseObject[kState] = response
          responseObject[kState].body = body
          responseObject[kHeaders][kHeadersList] = response.headersList
          responseObject[kHeaders][kGuard] = 'immutable'

          responseList.push(responseObject)
        }

        // 6.
        return Object.freeze(responseList)
      }

      async add(request) {
        webidl.brandCheck(this, Cache)
        webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })

        request = webidl.converters.RequestInfo(request)

        // 1.
        const requests = [request]

        // 2.
        const responseArrayPromise = this.addAll(requests)

        // 3.
        return await responseArrayPromise
      }

      async addAll(requests) {
        webidl.brandCheck(this, Cache)
        webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })

        requests = webidl.converters['sequence<RequestInfo>'](requests)

        // 1.
        const responsePromises = []

        // 2.
        const requestList = []

        // 3.
        for (const request of requests) {
          if (typeof request === 'string') {
            continue
          }

          // 3.1
          const r = request[kState]

          // 3.2
          if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
            throw webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Expected http/s scheme when method is not GET.'
            })
          }
        }

        // 4.
        /** @type {ReturnType<typeof fetching>[]} */
        const fetchControllers = []

        // 5.
        for (const request of requests) {
          // 5.1
          const r = new Request(request)[kState]

          // 5.2
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Expected http/s scheme.'
            })
          }

          // 5.4
          r.initiator = 'fetch'
          r.destination = 'subresource'

          // 5.5
          requestList.push(r)

          // 5.6
          const responsePromise = createDeferredPromise()

          // 5.7
          fetchControllers.push(
            fetching({
              request: r,
              dispatcher: getGlobalDispatcher(),
              processResponse(response) {
                // 1.
                if (
                  response.type === 'error' ||
                  response.status === 206 ||
                  response.status < 200 ||
                  response.status > 299
                ) {
                  responsePromise.reject(
                    webidl.errors.exception({
                      header: 'Cache.addAll',
                      message:
                        'Received an invalid status code or the request failed.'
                    })
                  )
                } else if (response.headersList.contains('vary')) {
                  // 2.
                  // 2.1
                  const fieldValues = getFieldValues(
                    response.headersList.get('vary')
                  )

                  // 2.2
                  for (const fieldValue of fieldValues) {
                    // 2.2.1
                    if (fieldValue === '*') {
                      responsePromise.reject(
                        webidl.errors.exception({
                          header: 'Cache.addAll',
                          message: 'invalid vary field value'
                        })
                      )

                      for (const controller of fetchControllers) {
                        controller.abort()
                      }

                      return
                    }
                  }
                }
              },
              processResponseEndOfBody(response) {
                // 1.
                if (response.aborted) {
                  responsePromise.reject(
                    new DOMException('aborted', 'AbortError')
                  )
                  return
                }

                // 2.
                responsePromise.resolve(response)
              }
            })
          )

          // 5.8
          responsePromises.push(responsePromise.promise)
        }

        // 6.
        const p = Promise.all(responsePromises)

        // 7.
        const responses = await p

        // 7.1
        const operations = []

        // 7.2
        let index = 0

        // 7.3
        for (const response of responses) {
          // 7.3.1
          /** @type {CacheBatchOperation} */
          const operation = {
            type: 'put', // 7.3.2
            request: requestList[index], // 7.3.3
            response // 7.3.4
          }

          operations.push(operation) // 7.3.5

          index++ // 7.3.6
        }

        // 7.5
        const cacheJobPromise = createDeferredPromise()

        // 7.6.1
        let errorData = null

        // 7.6.2
        try {
          this.#batchCacheOperations(operations)
        } catch (e) {
          errorData = e
        }

        // 7.6.3
        queueMicrotask(() => {
          // 7.6.3.1
          if (errorData === null) {
            cacheJobPromise.resolve(undefined)
          } else {
            // 7.6.3.2
            cacheJobPromise.reject(errorData)
          }
        })

        // 7.7
        return cacheJobPromise.promise
      }

      async put(request, response) {
        webidl.brandCheck(this, Cache)
        webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })

        request = webidl.converters.RequestInfo(request)
        response = webidl.converters.Response(response)

        // 1.
        let innerRequest = null

        // 2.
        if (request instanceof Request) {
          innerRequest = request[kState]
        } else {
          // 3.
          innerRequest = new Request(request)[kState]
        }

        // 4.
        if (
          !urlIsHttpHttpsScheme(innerRequest.url) ||
          innerRequest.method !== 'GET'
        ) {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Expected an http/s scheme when method is not GET'
          })
        }

        // 5.
        const innerResponse = response[kState]

        // 6.
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Got 206 status'
          })
        }

        // 7.
        if (innerResponse.headersList.contains('vary')) {
          // 7.1.
          const fieldValues = getFieldValues(
            innerResponse.headersList.get('vary')
          )

          // 7.2.
          for (const fieldValue of fieldValues) {
            // 7.2.1
            if (fieldValue === '*') {
              throw webidl.errors.exception({
                header: 'Cache.put',
                message: 'Got * vary field value'
              })
            }
          }
        }

        // 8.
        if (
          innerResponse.body &&
          (isDisturbed(innerResponse.body.stream) ||
            innerResponse.body.stream.locked)
        ) {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Response body is locked or disturbed'
          })
        }

        // 9.
        const clonedResponse = cloneResponse(innerResponse)

        // 10.
        const bodyReadPromise = createDeferredPromise()

        // 11.
        if (innerResponse.body != null) {
          // 11.1
          const stream = innerResponse.body.stream

          // 11.2
          const reader = stream.getReader()

          // 11.3
          readAllBytes(reader).then(
            bodyReadPromise.resolve,
            bodyReadPromise.reject
          )
        } else {
          bodyReadPromise.resolve(undefined)
        }

        // 12.
        /** @type {CacheBatchOperation[]} */
        const operations = []

        // 13.
        /** @type {CacheBatchOperation} */
        const operation = {
          type: 'put', // 14.
          request: innerRequest, // 15.
          response: clonedResponse // 16.
        }

        // 17.
        operations.push(operation)

        // 19.
        const bytes = await bodyReadPromise.promise

        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes
        }

        // 19.1
        const cacheJobPromise = createDeferredPromise()

        // 19.2.1
        let errorData = null

        // 19.2.2
        try {
          this.#batchCacheOperations(operations)
        } catch (e) {
          errorData = e
        }

        // 19.2.3
        queueMicrotask(() => {
          // 19.2.3.1
          if (errorData === null) {
            cacheJobPromise.resolve()
          } else {
            // 19.2.3.2
            cacheJobPromise.reject(errorData)
          }
        })

        return cacheJobPromise.promise
      }

      async delete(request, options = {}) {
        webidl.brandCheck(this, Cache)
        webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })

        request = webidl.converters.RequestInfo(request)
        options = webidl.converters.CacheQueryOptions(options)

        /**
         * @type {Request}
         */
        let r = null

        if (request instanceof Request) {
          r = request[kState]

          if (r.method !== 'GET' && !options.ignoreMethod) {
            return false
          }
        } else {
          assert(typeof request === 'string')

          r = new Request(request)[kState]
        }

        /** @type {CacheBatchOperation[]} */
        const operations = []

        /** @type {CacheBatchOperation} */
        const operation = {
          type: 'delete',
          request: r,
          options
        }

        operations.push(operation)

        const cacheJobPromise = createDeferredPromise()

        let errorData = null
        let requestResponses

        try {
          requestResponses = this.#batchCacheOperations(operations)
        } catch (e) {
          errorData = e
        }

        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!requestResponses?.length)
          } else {
            cacheJobPromise.reject(errorData)
          }
        })

        return cacheJobPromise.promise
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request = undefined, options = {}) {
        webidl.brandCheck(this, Cache)

        if (request !== undefined)
          request = webidl.converters.RequestInfo(request)
        options = webidl.converters.CacheQueryOptions(options)

        // 1.
        let r = null

        // 2.
        if (request !== undefined) {
          // 2.1
          if (request instanceof Request) {
            // 2.1.1
            r = request[kState]

            // 2.1.2
            if (r.method !== 'GET' && !options.ignoreMethod) {
              return []
            }
          } else if (typeof request === 'string') {
            // 2.2
            r = new Request(request)[kState]
          }
        }

        // 4.
        const promise = createDeferredPromise()

        // 5.
        // 5.1
        const requests = []

        // 5.2
        if (request === undefined) {
          // 5.2.1
          for (const requestResponse of this.#relevantRequestResponseList) {
            // 5.2.1.1
            requests.push(requestResponse[0])
          }
        } else {
          // 5.3
          // 5.3.1
          const requestResponses = this.#queryCache(r, options)

          // 5.3.2
          for (const requestResponse of requestResponses) {
            // 5.3.2.1
            requests.push(requestResponse[0])
          }
        }

        // 5.4
        queueMicrotask(() => {
          // 5.4.1
          const requestList = []

          // 5.4.2
          for (const request of requests) {
            const requestObject = new Request('https://a')
            requestObject[kState] = request
            requestObject[kHeaders][kHeadersList] = request.headersList
            requestObject[kHeaders][kGuard] = 'immutable'
            requestObject[kRealm] = request.client

            // 5.4.2.1
            requestList.push(requestObject)
          }

          // 5.4.3
          promise.resolve(Object.freeze(requestList))
        })

        return promise.promise
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        // 1.
        const cache = this.#relevantRequestResponseList

        // 2.
        const backupCache = [...cache]

        // 3.
        const addedItems = []

        // 4.1
        const resultList = []

        try {
          // 4.2
          for (const operation of operations) {
            // 4.2.1
            if (operation.type !== 'delete' && operation.type !== 'put') {
              throw webidl.errors.exception({
                header: 'Cache.#batchCacheOperations',
                message: 'operation type does not match "delete" or "put"'
              })
            }

            // 4.2.2
            if (operation.type === 'delete' && operation.response != null) {
              throw webidl.errors.exception({
                header: 'Cache.#batchCacheOperations',
                message:
                  'delete operation should not have an associated response'
              })
            }

            // 4.2.3
            if (
              this.#queryCache(operation.request, operation.options, addedItems)
                .length
            ) {
              throw new DOMException('???', 'InvalidStateError')
            }

            // 4.2.4
            let requestResponses

            // 4.2.5
            if (operation.type === 'delete') {
              // 4.2.5.1
              requestResponses = this.#queryCache(
                operation.request,
                operation.options
              )

              // TODO: the spec is wrong, this is needed to pass WPTs
              if (requestResponses.length === 0) {
                return []
              }

              // 4.2.5.2
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse)
                assert(idx !== -1)

                // 4.2.5.2.1
                cache.splice(idx, 1)
              }
            } else if (operation.type === 'put') {
              // 4.2.6
              // 4.2.6.1
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message: 'put operation should have an associated response'
                })
              }

              // 4.2.6.2
              const r = operation.request

              // 4.2.6.3
              if (!urlIsHttpHttpsScheme(r.url)) {
                throw webidl.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message: 'expected http or https scheme'
                })
              }

              // 4.2.6.4
              if (r.method !== 'GET') {
                throw webidl.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message: 'not get method'
                })
              }

              // 4.2.6.5
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message: 'options must not be defined'
                })
              }

              // 4.2.6.6
              requestResponses = this.#queryCache(operation.request)

              // 4.2.6.7
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse)
                assert(idx !== -1)

                // 4.2.6.7.1
                cache.splice(idx, 1)
              }

              // 4.2.6.8
              cache.push([operation.request, operation.response])

              // 4.2.6.10
              addedItems.push([operation.request, operation.response])
            }

            // 4.2.7
            resultList.push([operation.request, operation.response])
          }

          // 4.3
          return resultList
        } catch (e) {
          // 5.
          // 5.1
          this.#relevantRequestResponseList.length = 0

          // 5.2
          this.#relevantRequestResponseList = backupCache

          // 5.3
          throw e
        }
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options, targetStorage) {
        /** @type {requestResponseList} */
        const resultList = []

        const storage = targetStorage ?? this.#relevantRequestResponseList

        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse
          if (
            this.#requestMatchesCachedItem(
              requestQuery,
              cachedRequest,
              cachedResponse,
              options
            )
          ) {
            resultList.push(requestResponse)
          }
        }

        return resultList
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(
        requestQuery,
        request,
        response = null,
        options
      ) {
        // if (options?.ignoreMethod === false && request.method === 'GET') {
        //   return false
        // }

        const queryURL = new URL(requestQuery.url)

        const cachedURL = new URL(request.url)

        if (options?.ignoreSearch) {
          cachedURL.search = ''

          queryURL.search = ''
        }

        if (!urlEquals(queryURL, cachedURL, true)) {
          return false
        }

        if (
          response == null ||
          options?.ignoreVary ||
          !response.headersList.contains('vary')
        ) {
          return true
        }

        const fieldValues = getFieldValues(response.headersList.get('vary'))

        for (const fieldValue of fieldValues) {
          if (fieldValue === '*') {
            return false
          }

          const requestValue = request.headersList.get(fieldValue)
          const queryValue = requestQuery.headersList.get(fieldValue)

          // If one has the header and the other doesn't, or one has
          // a different value than the other, return false
          if (requestValue !== queryValue) {
            return false
          }
        }

        return true
      }
    }

    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: 'Cache',
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    })

    const cacheQueryOptionConverters = [
      {
        key: 'ignoreSearch',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'ignoreMethod',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'ignoreVary',
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]

    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(
      cacheQueryOptionConverters
    )

    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: 'cacheName',
        converter: webidl.converters.DOMString
      }
    ])

    webidl.converters.Response = webidl.interfaceConverter(Response)

    webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    )

    module.exports = {
      Cache
    }

    /***/
  },

  /***/ 7907: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kConstruct } = __nccwpck_require__(9174)
    const { Cache } = __nccwpck_require__(6101)
    const { webidl } = __nccwpck_require__(1744)
    const { kEnumerableProperty } = __nccwpck_require__(3983)

    class CacheStorage {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = new Map()

      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor()
        }
      }

      async match(request, options = {}) {
        webidl.brandCheck(this, CacheStorage)
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'CacheStorage.match'
        })

        request = webidl.converters.RequestInfo(request)
        options = webidl.converters.MultiCacheQueryOptions(options)

        // 1.
        if (options.cacheName != null) {
          // 1.1.1.1
          if (this.#caches.has(options.cacheName)) {
            // 1.1.1.1.1
            const cacheList = this.#caches.get(options.cacheName)
            const cache = new Cache(kConstruct, cacheList)

            return await cache.match(request, options)
          }
        } else {
          // 2.
          // 2.2
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList)

            // 2.2.1.2
            const response = await cache.match(request, options)

            if (response !== undefined) {
              return response
            }
          }
        }
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, CacheStorage)
        webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })

        cacheName = webidl.converters.DOMString(cacheName)

        // 2.1.1
        // 2.2
        return this.#caches.has(cacheName)
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, CacheStorage)
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'CacheStorage.open'
        })

        cacheName = webidl.converters.DOMString(cacheName)

        // 2.1
        if (this.#caches.has(cacheName)) {
          // await caches.open('v1') !== await caches.open('v1')

          // 2.1.1
          const cache = this.#caches.get(cacheName)

          // 2.1.1.1
          return new Cache(kConstruct, cache)
        }

        // 2.2
        const cache = []

        // 2.3
        this.#caches.set(cacheName, cache)

        // 2.4
        return new Cache(kConstruct, cache)
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, CacheStorage)
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'CacheStorage.delete'
        })

        cacheName = webidl.converters.DOMString(cacheName)

        return this.#caches.delete(cacheName)
      }

      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, CacheStorage)

        // 2.1
        const keys = this.#caches.keys()

        // 2.2
        return [...keys]
      }
    }

    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: 'CacheStorage',
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    })

    module.exports = {
      CacheStorage
    }

    /***/
  },

  /***/ 9174: /***/ (module) => {
    module.exports = {
      kConstruct: Symbol('constructable')
    }

    /***/
  },

  /***/ 2396: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const assert = __nccwpck_require__(9491)
    const { URLSerializer } = __nccwpck_require__(685)
    const { isValidHeaderName } = __nccwpck_require__(2538)

    /**
     * @see https://url.spec.whatwg.org/#concept-url-equals
     * @param {URL} A
     * @param {URL} B
     * @param {boolean | undefined} excludeFragment
     * @returns {boolean}
     */
    function urlEquals(A, B, excludeFragment = false) {
      const serializedA = URLSerializer(A, excludeFragment)

      const serializedB = URLSerializer(B, excludeFragment)

      return serializedA === serializedB
    }

    /**
     * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
     * @param {string} header
     */
    function fieldValues(header) {
      assert(header !== null)

      const values = []

      for (let value of header.split(',')) {
        value = value.trim()

        if (!value.length) {
          continue
        } else if (!isValidHeaderName(value)) {
          continue
        }

        values.push(value)
      }

      return values
    }

    module.exports = {
      urlEquals,
      fieldValues
    }

    /***/
  },

  /***/ 3598: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // @ts-check

    /* global WebAssembly */

    const assert = __nccwpck_require__(9491)
    const net = __nccwpck_require__(1808)
    const http = __nccwpck_require__(3685)
    const { pipeline } = __nccwpck_require__(2781)
    const util = __nccwpck_require__(3983)
    const timers = __nccwpck_require__(9459)
    const Request = __nccwpck_require__(2905)
    const DispatcherBase = __nccwpck_require__(4839)
    const {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = __nccwpck_require__(8045)
    const buildConnector = __nccwpck_require__(2067)
    const {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = __nccwpck_require__(2785)

    /** @type {import('http2')} */
    let http2
    try {
      http2 = __nccwpck_require__(5158)
    } catch {
      // @ts-ignore
      http2 = { constants: {} }
    }

    const {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http2

    // Experimental
    let h2ExperimentalWarned = false

    const FastBuffer = Buffer[Symbol.species]

    const kClosedResolve = Symbol('kClosedResolve')

    const channels = {}

    try {
      const diagnosticsChannel = __nccwpck_require__(7643)
      channels.sendHeaders = diagnosticsChannel.channel(
        'undici:client:sendHeaders'
      )
      channels.beforeConnect = diagnosticsChannel.channel(
        'undici:client:beforeConnect'
      )
      channels.connectError = diagnosticsChannel.channel(
        'undici:client:connectError'
      )
      channels.connected = diagnosticsChannel.channel('undici:client:connected')
    } catch {
      channels.sendHeaders = { hasSubscribers: false }
      channels.beforeConnect = { hasSubscribers: false }
      channels.connectError = { hasSubscribers: false }
      channels.connected = { hasSubscribers: false }
    }

    /**
     * @type {import('../types/client').default}
     */
    class Client extends DispatcherBase {
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(
        url,
        {
          interceptors,
          maxHeaderSize,
          headersTimeout,
          socketTimeout,
          requestTimeout,
          connectTimeout,
          bodyTimeout,
          idleTimeout,
          keepAlive,
          keepAliveTimeout,
          maxKeepAliveTimeout,
          keepAliveMaxTimeout,
          keepAliveTimeoutThreshold,
          socketPath,
          pipelining,
          tls,
          strictContentLength,
          maxCachedSessions,
          maxRedirections,
          connect,
          maxRequestsPerClient,
          localAddress,
          maxResponseSize,
          autoSelectFamily,
          autoSelectFamilyAttemptTimeout,
          // h2
          allowH2,
          maxConcurrentStreams
        } = {}
      ) {
        super()

        if (keepAlive !== undefined) {
          throw new InvalidArgumentError(
            'unsupported keepAlive, use pipelining=0 instead'
          )
        }

        if (socketTimeout !== undefined) {
          throw new InvalidArgumentError(
            'unsupported socketTimeout, use headersTimeout & bodyTimeout instead'
          )
        }

        if (requestTimeout !== undefined) {
          throw new InvalidArgumentError(
            'unsupported requestTimeout, use headersTimeout & bodyTimeout instead'
          )
        }

        if (idleTimeout !== undefined) {
          throw new InvalidArgumentError(
            'unsupported idleTimeout, use keepAliveTimeout instead'
          )
        }

        if (maxKeepAliveTimeout !== undefined) {
          throw new InvalidArgumentError(
            'unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead'
          )
        }

        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError('invalid maxHeaderSize')
        }

        if (socketPath != null && typeof socketPath !== 'string') {
          throw new InvalidArgumentError('invalid socketPath')
        }

        if (
          connectTimeout != null &&
          (!Number.isFinite(connectTimeout) || connectTimeout < 0)
        ) {
          throw new InvalidArgumentError('invalid connectTimeout')
        }

        if (
          keepAliveTimeout != null &&
          (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)
        ) {
          throw new InvalidArgumentError('invalid keepAliveTimeout')
        }

        if (
          keepAliveMaxTimeout != null &&
          (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)
        ) {
          throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
        }

        if (
          keepAliveTimeoutThreshold != null &&
          !Number.isFinite(keepAliveTimeoutThreshold)
        ) {
          throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
        }

        if (
          headersTimeout != null &&
          (!Number.isInteger(headersTimeout) || headersTimeout < 0)
        ) {
          throw new InvalidArgumentError(
            'headersTimeout must be a positive integer or zero'
          )
        }

        if (
          bodyTimeout != null &&
          (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)
        ) {
          throw new InvalidArgumentError(
            'bodyTimeout must be a positive integer or zero'
          )
        }

        if (
          connect != null &&
          typeof connect !== 'function' &&
          typeof connect !== 'object'
        ) {
          throw new InvalidArgumentError(
            'connect must be a function or an object'
          )
        }

        if (
          maxRedirections != null &&
          (!Number.isInteger(maxRedirections) || maxRedirections < 0)
        ) {
          throw new InvalidArgumentError(
            'maxRedirections must be a positive number'
          )
        }

        if (
          maxRequestsPerClient != null &&
          (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)
        ) {
          throw new InvalidArgumentError(
            'maxRequestsPerClient must be a positive number'
          )
        }

        if (
          localAddress != null &&
          (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)
        ) {
          throw new InvalidArgumentError(
            'localAddress must be valid string IP address'
          )
        }

        if (
          maxResponseSize != null &&
          (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)
        ) {
          throw new InvalidArgumentError(
            'maxResponseSize must be a positive number'
          )
        }

        if (
          autoSelectFamilyAttemptTimeout != null &&
          (!Number.isInteger(autoSelectFamilyAttemptTimeout) ||
            autoSelectFamilyAttemptTimeout < -1)
        ) {
          throw new InvalidArgumentError(
            'autoSelectFamilyAttemptTimeout must be a positive number'
          )
        }

        // h2
        if (allowH2 != null && typeof allowH2 !== 'boolean') {
          throw new InvalidArgumentError(
            'allowH2 must be a valid boolean value'
          )
        }

        if (
          maxConcurrentStreams != null &&
          (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)
        ) {
          throw new InvalidArgumentError(
            'maxConcurrentStreams must be a possitive integer, greater than 0'
          )
        }

        if (typeof connect !== 'function') {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...(util.nodeHasAutoSelectFamily && autoSelectFamily
              ? { autoSelectFamily, autoSelectFamilyAttemptTimeout }
              : undefined),
            ...connect
          })
        }

        this[kInterceptors] =
          interceptors &&
          interceptors.Client &&
          Array.isArray(interceptors.Client)
            ? interceptors.Client
            : [createRedirectInterceptor({ maxRedirections })]
        this[kUrl] = util.parseOrigin(url)
        this[kConnector] = connect
        this[kSocket] = null
        this[kPipelining] = pipelining != null ? pipelining : 1
        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize
        this[kKeepAliveDefaultTimeout] =
          keepAliveTimeout == null ? 4e3 : keepAliveTimeout
        this[kKeepAliveMaxTimeout] =
          keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout
        this[kKeepAliveTimeoutThreshold] =
          keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]
        this[kServerName] = null
        this[kLocalAddress] = localAddress != null ? localAddress : null
        this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
        this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
        this[kHostHeader] = `host: ${this[kUrl].hostname}${
          this[kUrl].port ? `:${this[kUrl].port}` : ''
        }\r\n`
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3
        this[kStrictContentLength] =
          strictContentLength == null ? true : strictContentLength
        this[kMaxRedirections] = maxRedirections
        this[kMaxRequests] = maxRequestsPerClient
        this[kClosedResolve] = null
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1
        this[kHTTPConnVersion] = 'h1'

        // HTTP/2
        this[kHTTP2Session] = null
        this[kHTTP2SessionState] = !allowH2
          ? null
          : {
              // streams: null, // Fixed queue of streams - For future support of `push`
              openStreams: 0, // Keep track of them to decide wether or not unref the session
              maxConcurrentStreams:
                maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
            }
        this[kHost] = `${this[kUrl].hostname}${
          this[kUrl].port ? `:${this[kUrl].port}` : ''
        }`

        // kQueue is built up of 3 sections separated by
        // the kRunningIdx and kPendingIdx indices.
        // |   complete   |   running   |   pending   |
        //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
        // kRunningIdx points to the first running element.
        // kPendingIdx points to the first pending element.
        // This implements a fast queue with an amortized
        // time of O(1).

        this[kQueue] = []
        this[kRunningIdx] = 0
        this[kPendingIdx] = 0
      }

      get pipelining() {
        return this[kPipelining]
      }

      set pipelining(value) {
        this[kPipelining] = value
        resume(this, true)
      }

      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx]
      }

      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx]
      }

      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx]
      }

      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
      }

      get [kBusy]() {
        const socket = this[kSocket]
        return (
          (socket &&
            (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
          this[kSize] >= (this[kPipelining] || 1) ||
          this[kPending] > 0
        )
      }

      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this)
        this.once('connect', cb)
      }

      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin

        const request =
          this[kHTTPConnVersion] === 'h2'
            ? Request[kHTTP2BuildRequest](origin, opts, handler)
            : Request[kHTTP1BuildRequest](origin, opts, handler)

        this[kQueue].push(request)
        if (this[kResuming]) {
          // Do nothing.
        } else if (
          util.bodyLength(request.body) == null &&
          util.isIterable(request.body)
        ) {
          // Wait a tick in case stream/iterator is ended in the same tick.
          this[kResuming] = 1
          process.nextTick(resume, this)
        } else {
          resume(this, true)
        }

        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2
        }

        return this[kNeedDrain] < 2
      }

      async [kClose]() {
        // TODO: for H2 we need to gracefully flush the remaining enqueued
        // request and close each stream.
        return new Promise((resolve) => {
          if (!this[kSize]) {
            resolve(null)
          } else {
            this[kClosedResolve] = resolve
          }
        })
      }

      async [kDestroy](err) {
        return new Promise((resolve) => {
          const requests = this[kQueue].splice(this[kPendingIdx])
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i]
            errorRequest(this, request, err)
          }

          const callback = () => {
            if (this[kClosedResolve]) {
              // TODO (fix): Should we error here with ClientDestroyedError?
              this[kClosedResolve]()
              this[kClosedResolve] = null
            }
            resolve()
          }

          if (this[kHTTP2Session] != null) {
            util.destroy(this[kHTTP2Session], err)
            this[kHTTP2Session] = null
            this[kHTTP2SessionState] = null
          }

          if (!this[kSocket]) {
            queueMicrotask(callback)
          } else {
            util.destroy(this[kSocket].on('close', callback), err)
          }

          resume(this)
        })
      }
    }

    function onHttp2SessionError(err) {
      assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

      this[kSocket][kError] = err

      onError(this[kClient], err)
    }

    function onHttp2FrameError(type, code, id) {
      const err = new InformationalError(
        `HTTP/2: "frameError" received - type ${type}, code ${code}`
      )

      if (id === 0) {
        this[kSocket][kError] = err
        onError(this[kClient], err)
      }
    }

    function onHttp2SessionEnd() {
      util.destroy(this, new SocketError('other side closed'))
      util.destroy(this[kSocket], new SocketError('other side closed'))
    }

    function onHTTP2GoAway(code) {
      const client = this[kClient]
      const err = new InformationalError(
        `HTTP/2: "GOAWAY" frame received with code ${code}`
      )
      client[kSocket] = null
      client[kHTTP2Session] = null

      if (client.destroyed) {
        assert(this[kPending] === 0)

        // Fail entire queue.
        const requests = client[kQueue].splice(client[kRunningIdx])
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i]
          errorRequest(this, request, err)
        }
      } else if (client[kRunning] > 0) {
        // Fail head of pipeline.
        const request = client[kQueue][client[kRunningIdx]]
        client[kQueue][client[kRunningIdx]++] = null

        errorRequest(client, request, err)
      }

      client[kPendingIdx] = client[kRunningIdx]

      assert(client[kRunning] === 0)

      client.emit('disconnect', client[kUrl], [client], err)

      resume(client)
    }

    const constants = __nccwpck_require__(953)
    const createRedirectInterceptor = __nccwpck_require__(8861)
    const EMPTY_BUF = Buffer.alloc(0)

    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID
        ? __nccwpck_require__(1145)
        : undefined

      let mod
      try {
        mod = await WebAssembly.compile(
          Buffer.from(__nccwpck_require__(5627), 'base64')
        )
      } catch (e) {
        /* istanbul ignore next */

        // We could check if the error was caused by the simd option not
        // being enabled, but the occurring of this other error
        // * https://github.com/emscripten-core/emscripten/issues/11495
        // got me to remove that check to avoid breaking Node 12.
        mod = await WebAssembly.compile(
          Buffer.from(llhttpWasmData || __nccwpck_require__(1145), 'base64')
        )
      }

      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */

          wasm_on_url: (p, at, len) => {
            /* istanbul ignore next */
            return 0
          },
          wasm_on_status: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p)
            const start = at - currentBufferPtr + currentBufferRef.byteOffset
            return (
              currentParser.onStatus(
                new FastBuffer(currentBufferRef.buffer, start, len)
              ) || 0
            )
          },
          wasm_on_message_begin: (p) => {
            assert.strictEqual(currentParser.ptr, p)
            return currentParser.onMessageBegin() || 0
          },
          wasm_on_header_field: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p)
            const start = at - currentBufferPtr + currentBufferRef.byteOffset
            return (
              currentParser.onHeaderField(
                new FastBuffer(currentBufferRef.buffer, start, len)
              ) || 0
            )
          },
          wasm_on_header_value: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p)
            const start = at - currentBufferPtr + currentBufferRef.byteOffset
            return (
              currentParser.onHeaderValue(
                new FastBuffer(currentBufferRef.buffer, start, len)
              ) || 0
            )
          },
          wasm_on_headers_complete: (
            p,
            statusCode,
            upgrade,
            shouldKeepAlive
          ) => {
            assert.strictEqual(currentParser.ptr, p)
            return (
              currentParser.onHeadersComplete(
                statusCode,
                Boolean(upgrade),
                Boolean(shouldKeepAlive)
              ) || 0
            )
          },
          wasm_on_body: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p)
            const start = at - currentBufferPtr + currentBufferRef.byteOffset
            return (
              currentParser.onBody(
                new FastBuffer(currentBufferRef.buffer, start, len)
              ) || 0
            )
          },
          wasm_on_message_complete: (p) => {
            assert.strictEqual(currentParser.ptr, p)
            return currentParser.onMessageComplete() || 0
          }

          /* eslint-enable camelcase */
        }
      })
    }

    let llhttpInstance = null
    let llhttpPromise = lazyllhttp()
    llhttpPromise.catch()

    let currentParser = null
    let currentBufferRef = null
    let currentBufferSize = 0
    let currentBufferPtr = null

    const TIMEOUT_HEADERS = 1
    const TIMEOUT_BODY = 2
    const TIMEOUT_IDLE = 3

    class Parser {
      constructor(client, socket, { exports }) {
        assert(
          Number.isFinite(client[kMaxHeadersSize]) &&
            client[kMaxHeadersSize] > 0
        )

        this.llhttp = exports
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)
        this.client = client
        this.socket = socket
        this.timeout = null
        this.timeoutValue = null
        this.timeoutType = null
        this.statusCode = null
        this.statusText = ''
        this.upgrade = false
        this.headers = []
        this.headersSize = 0
        this.headersMaxSize = client[kMaxHeadersSize]
        this.shouldKeepAlive = false
        this.paused = false
        this.resume = this.resume.bind(this)

        this.bytesRead = 0

        this.keepAlive = ''
        this.contentLength = ''
        this.connection = ''
        this.maxResponseSize = client[kMaxResponseSize]
      }

      setTimeout(value, type) {
        this.timeoutType = type
        if (value !== this.timeoutValue) {
          timers.clearTimeout(this.timeout)
          if (value) {
            this.timeout = timers.setTimeout(onParserTimeout, value, this)
            // istanbul ignore else: only for jest
            if (this.timeout.unref) {
              this.timeout.unref()
            }
          } else {
            this.timeout = null
          }
          this.timeoutValue = value
        } else if (this.timeout) {
          // istanbul ignore else: only for jest
          if (this.timeout.refresh) {
            this.timeout.refresh()
          }
        }
      }

      resume() {
        if (this.socket.destroyed || !this.paused) {
          return
        }

        assert(this.ptr != null)
        assert(currentParser == null)

        this.llhttp.llhttp_resume(this.ptr)

        assert(this.timeoutType === TIMEOUT_BODY)
        if (this.timeout) {
          // istanbul ignore else: only for jest
          if (this.timeout.refresh) {
            this.timeout.refresh()
          }
        }

        this.paused = false
        this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.
        this.readMore()
      }

      readMore() {
        while (!this.paused && this.ptr) {
          const chunk = this.socket.read()
          if (chunk === null) {
            break
          }
          this.execute(chunk)
        }
      }

      execute(data) {
        assert(this.ptr != null)
        assert(currentParser == null)
        assert(!this.paused)

        const { socket, llhttp } = this

        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr)
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096
          currentBufferPtr = llhttp.malloc(currentBufferSize)
        }

        new Uint8Array(
          llhttp.memory.buffer,
          currentBufferPtr,
          currentBufferSize
        ).set(data)

        // Call `execute` on the wasm parser.
        // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
        // and finally the length of bytes to parse.
        // The return value is an error code or `constants.ERROR.OK`.
        try {
          let ret

          try {
            currentBufferRef = data
            currentParser = this
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)
            /* eslint-disable-next-line no-useless-catch */
          } catch (err) {
            /* istanbul ignore next: difficult to make a test case for */
            throw err
          } finally {
            currentParser = null
            currentBufferRef = null
          }

          const offset =
            llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr

          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset))
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true
            socket.unshift(data.slice(offset))
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr)
            let message = ''
            /* istanbul ignore else: difficult to make a test case for */
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)
              message =
                'Response does not match the HTTP/1.1 protocol (' +
                Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
                ')'
            }
            throw new HTTPParserError(
              message,
              constants.ERROR[ret],
              data.slice(offset)
            )
          }
        } catch (err) {
          util.destroy(socket, err)
        }
      }

      destroy() {
        assert(this.ptr != null)
        assert(currentParser == null)

        this.llhttp.llhttp_free(this.ptr)
        this.ptr = null

        timers.clearTimeout(this.timeout)
        this.timeout = null
        this.timeoutValue = null
        this.timeoutType = null

        this.paused = false
      }

      onStatus(buf) {
        this.statusText = buf.toString()
      }

      onMessageBegin() {
        const { socket, client } = this

        /* istanbul ignore next: difficult to make a test case for */
        if (socket.destroyed) {
          return -1
        }

        const request = client[kQueue][client[kRunningIdx]]
        if (!request) {
          return -1
        }
      }

      onHeaderField(buf) {
        const len = this.headers.length

        if ((len & 1) === 0) {
          this.headers.push(buf)
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
        }

        this.trackHeader(buf.length)
      }

      onHeaderValue(buf) {
        let len = this.headers.length

        if ((len & 1) === 1) {
          this.headers.push(buf)
          len += 1
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
        }

        const key = this.headers[len - 2]
        if (
          key.length === 10 &&
          key.toString().toLowerCase() === 'keep-alive'
        ) {
          this.keepAlive += buf.toString()
        } else if (
          key.length === 10 &&
          key.toString().toLowerCase() === 'connection'
        ) {
          this.connection += buf.toString()
        } else if (
          key.length === 14 &&
          key.toString().toLowerCase() === 'content-length'
        ) {
          this.contentLength += buf.toString()
        }

        this.trackHeader(buf.length)
      }

      trackHeader(len) {
        this.headersSize += len
        if (this.headersSize >= this.headersMaxSize) {
          util.destroy(this.socket, new HeadersOverflowError())
        }
      }

      onUpgrade(head) {
        const { upgrade, client, socket, headers, statusCode } = this

        assert(upgrade)

        const request = client[kQueue][client[kRunningIdx]]
        assert(request)

        assert(!socket.destroyed)
        assert(socket === client[kSocket])
        assert(!this.paused)
        assert(request.upgrade || request.method === 'CONNECT')

        this.statusCode = null
        this.statusText = ''
        this.shouldKeepAlive = null

        assert(this.headers.length % 2 === 0)
        this.headers = []
        this.headersSize = 0

        socket.unshift(head)

        socket[kParser].destroy()
        socket[kParser] = null

        socket[kClient] = null
        socket[kError] = null
        socket
          .removeListener('error', onSocketError)
          .removeListener('readable', onSocketReadable)
          .removeListener('end', onSocketEnd)
          .removeListener('close', onSocketClose)

        client[kSocket] = null
        client[kQueue][client[kRunningIdx]++] = null
        client.emit(
          'disconnect',
          client[kUrl],
          [client],
          new InformationalError('upgrade')
        )

        try {
          request.onUpgrade(statusCode, headers, socket)
        } catch (err) {
          util.destroy(socket, err)
        }

        resume(client)
      }

      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client, socket, headers, statusText } = this

        /* istanbul ignore next: difficult to make a test case for */
        if (socket.destroyed) {
          return -1
        }

        const request = client[kQueue][client[kRunningIdx]]

        /* istanbul ignore next: difficult to make a test case for */
        if (!request) {
          return -1
        }

        assert(!this.upgrade)
        assert(this.statusCode < 200)

        if (statusCode === 100) {
          util.destroy(
            socket,
            new SocketError('bad response', util.getSocketInfo(socket))
          )
          return -1
        }

        /* this can only happen if server is misbehaving */
        if (upgrade && !request.upgrade) {
          util.destroy(
            socket,
            new SocketError('bad upgrade', util.getSocketInfo(socket))
          )
          return -1
        }

        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)

        this.statusCode = statusCode
        this.shouldKeepAlive =
          shouldKeepAlive ||
          // Override llhttp value which does not allow keepAlive for HEAD.
          (request.method === 'HEAD' &&
            !socket[kReset] &&
            this.connection.toLowerCase() === 'keep-alive')

        if (this.statusCode >= 200) {
          const bodyTimeout =
            request.bodyTimeout != null
              ? request.bodyTimeout
              : client[kBodyTimeout]
          this.setTimeout(bodyTimeout, TIMEOUT_BODY)
        } else if (this.timeout) {
          // istanbul ignore else: only for jest
          if (this.timeout.refresh) {
            this.timeout.refresh()
          }
        }

        if (request.method === 'CONNECT') {
          assert(client[kRunning] === 1)
          this.upgrade = true
          return 2
        }

        if (upgrade) {
          assert(client[kRunning] === 1)
          this.upgrade = true
          return 2
        }

        assert(this.headers.length % 2 === 0)
        this.headers = []
        this.headersSize = 0

        if (this.shouldKeepAlive && client[kPipelining]) {
          const keepAliveTimeout = this.keepAlive
            ? util.parseKeepAliveTimeout(this.keepAlive)
            : null

          if (keepAliveTimeout != null) {
            const timeout = Math.min(
              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
              client[kKeepAliveMaxTimeout]
            )
            if (timeout <= 0) {
              socket[kReset] = true
            } else {
              client[kKeepAliveTimeoutValue] = timeout
            }
          } else {
            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]
          }
        } else {
          // Stop more requests from being dispatched.
          socket[kReset] = true
        }

        let pause
        try {
          pause =
            request.onHeaders(statusCode, headers, this.resume, statusText) ===
            false
        } catch (err) {
          util.destroy(socket, err)
          return -1
        }

        if (request.method === 'HEAD') {
          return 1
        }

        if (statusCode < 200) {
          return 1
        }

        if (socket[kBlocking]) {
          socket[kBlocking] = false
          resume(client)
        }

        return pause ? constants.ERROR.PAUSED : 0
      }

      onBody(buf) {
        const { client, socket, statusCode, maxResponseSize } = this

        if (socket.destroyed) {
          return -1
        }

        const request = client[kQueue][client[kRunningIdx]]
        assert(request)

        assert.strictEqual(this.timeoutType, TIMEOUT_BODY)
        if (this.timeout) {
          // istanbul ignore else: only for jest
          if (this.timeout.refresh) {
            this.timeout.refresh()
          }
        }

        assert(statusCode >= 200)

        if (
          maxResponseSize > -1 &&
          this.bytesRead + buf.length > maxResponseSize
        ) {
          util.destroy(socket, new ResponseExceededMaxSizeError())
          return -1
        }

        this.bytesRead += buf.length

        try {
          if (request.onData(buf) === false) {
            return constants.ERROR.PAUSED
          }
        } catch (err) {
          util.destroy(socket, err)
          return -1
        }
      }

      onMessageComplete() {
        const {
          client,
          socket,
          statusCode,
          upgrade,
          headers,
          contentLength,
          bytesRead,
          shouldKeepAlive
        } = this

        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1
        }

        if (upgrade) {
          return
        }

        const request = client[kQueue][client[kRunningIdx]]
        assert(request)

        assert(statusCode >= 100)

        this.statusCode = null
        this.statusText = ''
        this.bytesRead = 0
        this.contentLength = ''
        this.keepAlive = ''
        this.connection = ''

        assert(this.headers.length % 2 === 0)
        this.headers = []
        this.headersSize = 0

        if (statusCode < 200) {
          return
        }

        /* istanbul ignore next: should be handled by llhttp? */
        if (
          request.method !== 'HEAD' &&
          contentLength &&
          bytesRead !== parseInt(contentLength, 10)
        ) {
          util.destroy(socket, new ResponseContentLengthMismatchError())
          return -1
        }

        try {
          request.onComplete(headers)
        } catch (err) {
          errorRequest(client, request, err)
        }

        client[kQueue][client[kRunningIdx]++] = null

        if (socket[kWriting]) {
          assert.strictEqual(client[kRunning], 0)
          // Response completed before request.
          util.destroy(socket, new InformationalError('reset'))
          return constants.ERROR.PAUSED
        } else if (!shouldKeepAlive) {
          util.destroy(socket, new InformationalError('reset'))
          return constants.ERROR.PAUSED
        } else if (socket[kReset] && client[kRunning] === 0) {
          // Destroy socket once all requests have completed.
          // The request at the tail of the pipeline is the one
          // that requested reset and no further requests should
          // have been queued since then.
          util.destroy(socket, new InformationalError('reset'))
          return constants.ERROR.PAUSED
        } else if (client[kPipelining] === 1) {
          // We must wait a full event loop cycle to reuse this socket to make sure
          // that non-spec compliant servers are not closing the connection even if they
          // said they won't.
          setImmediate(resume, client)
        } else {
          resume(client)
        }
      }
    }

    function onParserTimeout(parser) {
      const { socket, timeoutType, client } = parser

      /* istanbul ignore else */
      if (timeoutType === TIMEOUT_HEADERS) {
        if (
          !socket[kWriting] ||
          socket.writableNeedDrain ||
          client[kRunning] > 1
        ) {
          assert(!parser.paused, 'cannot be paused while waiting for headers')
          util.destroy(socket, new HeadersTimeoutError())
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util.destroy(socket, new BodyTimeoutError())
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])
        util.destroy(socket, new InformationalError('socket idle timeout'))
      }
    }

    function onSocketReadable() {
      const { [kParser]: parser } = this
      if (parser) {
        parser.readMore()
      }
    }

    function onSocketError(err) {
      const { [kClient]: client, [kParser]: parser } = this

      assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

      if (client[kHTTPConnVersion] !== 'h2') {
        // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
        // to the user.
        if (
          err.code === 'ECONNRESET' &&
          parser.statusCode &&
          !parser.shouldKeepAlive
        ) {
          // We treat all incoming data so for as a valid response.
          parser.onMessageComplete()
          return
        }
      }

      this[kError] = err

      onError(this[kClient], err)
    }

    function onError(client, err) {
      if (
        client[kRunning] === 0 &&
        err.code !== 'UND_ERR_INFO' &&
        err.code !== 'UND_ERR_SOCKET'
      ) {
        // Error is not caused by running request and not a recoverable
        // socket error.

        assert(client[kPendingIdx] === client[kRunningIdx])

        const requests = client[kQueue].splice(client[kRunningIdx])
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i]
          errorRequest(client, request, err)
        }
        assert(client[kSize] === 0)
      }
    }

    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client } = this

      if (client[kHTTPConnVersion] !== 'h2') {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          // We treat all incoming data so far as a valid response.
          parser.onMessageComplete()
          return
        }
      }

      util.destroy(
        this,
        new SocketError('other side closed', util.getSocketInfo(this))
      )
    }

    function onSocketClose() {
      const { [kClient]: client, [kParser]: parser } = this

      if (client[kHTTPConnVersion] === 'h1' && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          // We treat all incoming data so far as a valid response.
          parser.onMessageComplete()
        }

        this[kParser].destroy()
        this[kParser] = null
      }

      const err =
        this[kError] || new SocketError('closed', util.getSocketInfo(this))

      client[kSocket] = null

      if (client.destroyed) {
        assert(client[kPending] === 0)

        // Fail entire queue.
        const requests = client[kQueue].splice(client[kRunningIdx])
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i]
          errorRequest(client, request, err)
        }
      } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
        // Fail head of pipeline.
        const request = client[kQueue][client[kRunningIdx]]
        client[kQueue][client[kRunningIdx]++] = null

        errorRequest(client, request, err)
      }

      client[kPendingIdx] = client[kRunningIdx]

      assert(client[kRunning] === 0)

      client.emit('disconnect', client[kUrl], [client], err)

      resume(client)
    }

    async function connect(client) {
      assert(!client[kConnecting])
      assert(!client[kSocket])

      let { host, hostname, protocol, port } = client[kUrl]

      // Resolve ipv6
      if (hostname[0] === '[') {
        const idx = hostname.indexOf(']')

        assert(idx !== -1)
        const ip = hostname.substr(1, idx - 1)

        assert(net.isIP(ip))
        hostname = ip
      }

      client[kConnecting] = true

      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector]
        })
      }

      try {
        const socket = await new Promise((resolve, reject) => {
          client[kConnector](
            {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            (err, socket) => {
              if (err) {
                reject(err)
              } else {
                resolve(socket)
              }
            }
          )
        })

        if (client.destroyed) {
          util.destroy(
            socket.on('error', () => {}),
            new ClientDestroyedError()
          )
          return
        }

        client[kConnecting] = false

        assert(socket)

        const isH2 = socket.alpnProtocol === 'h2'
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true
            process.emitWarning(
              'H2 support is experimental, expect them to change at any time.',
              {
                code: 'UNDICI-H2'
              }
            )
          }

          const session = http2.connect(client[kUrl], {
            createConnection: () => socket,
            peerMaxConcurrentStreams:
              client[kHTTP2SessionState].maxConcurrentStreams
          })

          client[kHTTPConnVersion] = 'h2'
          session[kClient] = client
          session[kSocket] = socket
          session.on('error', onHttp2SessionError)
          session.on('frameError', onHttp2FrameError)
          session.on('end', onHttp2SessionEnd)
          session.on('goaway', onHTTP2GoAway)
          session.on('close', onSocketClose)
          session.unref()

          client[kHTTP2Session] = session
          socket[kHTTP2Session] = session
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise
            llhttpPromise = null
          }

          socket[kNoRef] = false
          socket[kWriting] = false
          socket[kReset] = false
          socket[kBlocking] = false
          socket[kParser] = new Parser(client, socket, llhttpInstance)
        }

        socket[kCounter] = 0
        socket[kMaxRequests] = client[kMaxRequests]
        socket[kClient] = client
        socket[kError] = null

        socket
          .on('error', onSocketError)
          .on('readable', onSocketReadable)
          .on('end', onSocketEnd)
          .on('close', onSocketClose)

        client[kSocket] = socket

        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            socket
          })
        }
        client.emit('connect', client[kUrl], [client])
      } catch (err) {
        if (client.destroyed) {
          return
        }

        client[kConnecting] = false

        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            error: err
          })
        }

        if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
          assert(client[kRunning] === 0)
          while (
            client[kPending] > 0 &&
            client[kQueue][client[kPendingIdx]].servername ===
              client[kServerName]
          ) {
            const request = client[kQueue][client[kPendingIdx]++]
            errorRequest(client, request, err)
          }
        } else {
          onError(client, err)
        }

        client.emit('connectionError', client[kUrl], [client], err)
      }

      resume(client)
    }

    function emitDrain(client) {
      client[kNeedDrain] = 0
      client.emit('drain', client[kUrl], [client])
    }

    function resume(client, sync) {
      if (client[kResuming] === 2) {
        return
      }

      client[kResuming] = 2

      _resume(client, sync)
      client[kResuming] = 0

      if (client[kRunningIdx] > 256) {
        client[kQueue].splice(0, client[kRunningIdx])
        client[kPendingIdx] -= client[kRunningIdx]
        client[kRunningIdx] = 0
      }
    }

    function _resume(client, sync) {
      while (true) {
        if (client.destroyed) {
          assert(client[kPending] === 0)
          return
        }

        if (client[kClosedResolve] && !client[kSize]) {
          client[kClosedResolve]()
          client[kClosedResolve] = null
          return
        }

        const socket = client[kSocket]

        if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
          if (client[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref()
              socket[kNoRef] = true
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref()
            socket[kNoRef] = false
          }

          if (client[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(
                client[kKeepAliveTimeoutValue],
                TIMEOUT_IDLE
              )
            }
          } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request = client[kQueue][client[kRunningIdx]]
              const headersTimeout =
                request.headersTimeout != null
                  ? request.headersTimeout
                  : client[kHeadersTimeout]
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)
            }
          }
        }

        if (client[kBusy]) {
          client[kNeedDrain] = 2
        } else if (client[kNeedDrain] === 2) {
          if (sync) {
            client[kNeedDrain] = 1
            process.nextTick(emitDrain, client)
          } else {
            emitDrain(client)
          }
          continue
        }

        if (client[kPending] === 0) {
          return
        }

        if (client[kRunning] >= (client[kPipelining] || 1)) {
          return
        }

        const request = client[kQueue][client[kPendingIdx]]

        if (
          client[kUrl].protocol === 'https:' &&
          client[kServerName] !== request.servername
        ) {
          if (client[kRunning] > 0) {
            return
          }

          client[kServerName] = request.servername

          if (socket && socket.servername !== request.servername) {
            util.destroy(socket, new InformationalError('servername changed'))
            return
          }
        }

        if (client[kConnecting]) {
          return
        }

        if (!socket && !client[kHTTP2Session]) {
          connect(client)
          return
        }

        if (
          socket.destroyed ||
          socket[kWriting] ||
          socket[kReset] ||
          socket[kBlocking]
        ) {
          return
        }

        if (client[kRunning] > 0 && !request.idempotent) {
          // Non-idempotent request cannot be retried.
          // Ensure that no other requests are inflight and
          // could cause failure.
          return
        }

        if (
          client[kRunning] > 0 &&
          (request.upgrade || request.method === 'CONNECT')
        ) {
          // Don't dispatch an upgrade until all preceding requests have completed.
          // A misbehaving server might upgrade the connection before all pipelined
          // request has completed.
          return
        }

        if (
          client[kRunning] > 0 &&
          util.bodyLength(request.body) !== 0 &&
          (util.isStream(request.body) || util.isAsyncIterable(request.body))
        ) {
          // Request with stream or iterator body can error while other requests
          // are inflight and indirectly error those as well.
          // Ensure this doesn't happen by waiting for inflight
          // to complete before dispatching.

          // Request with stream or iterator body cannot be retried.
          // Ensure that no other requests are inflight and
          // could cause failure.
          return
        }

        if (!request.aborted && write(client, request)) {
          client[kPendingIdx]++
        } else {
          client[kQueue].splice(client[kPendingIdx], 1)
        }
      }
    }

    // https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
    function shouldSendContentLength(method) {
      return (
        method !== 'GET' &&
        method !== 'HEAD' &&
        method !== 'OPTIONS' &&
        method !== 'TRACE' &&
        method !== 'CONNECT'
      )
    }

    function write(client, request) {
      if (client[kHTTPConnVersion] === 'h2') {
        writeH2(client, client[kHTTP2Session], request)
        return
      }

      const { body, method, path, host, upgrade, headers, blocking, reset } =
        request

      // https://tools.ietf.org/html/rfc7231#section-4.3.1
      // https://tools.ietf.org/html/rfc7231#section-4.3.2
      // https://tools.ietf.org/html/rfc7231#section-4.3.5

      // Sending a payload body on a request that does not
      // expect it can cause undefined behavior on some
      // servers and corrupt connection state. Do not
      // re-use the connection for further requests.

      const expectsPayload =
        method === 'PUT' || method === 'POST' || method === 'PATCH'

      if (body && typeof body.read === 'function') {
        // Try to read EOF in order to get length.
        body.read(0)
      }

      const bodyLength = util.bodyLength(body)

      let contentLength = bodyLength

      if (contentLength === null) {
        contentLength = request.contentLength
      }

      if (contentLength === 0 && !expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD NOT send a Content-Length header field when
        // the request message does not contain a payload body and the method
        // semantics do not anticipate such a body.

        contentLength = null
      }

      // https://github.com/nodejs/undici/issues/2046
      // A user agent may send a Content-Length header with 0 value, this should be allowed.
      if (
        shouldSendContentLength(method) &&
        contentLength > 0 &&
        request.contentLength !== null &&
        request.contentLength !== contentLength
      ) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError())
          return false
        }

        process.emitWarning(new RequestContentLengthMismatchError())
      }

      const socket = client[kSocket]

      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return
          }

          errorRequest(client, request, err || new RequestAbortedError())

          util.destroy(socket, new InformationalError('aborted'))
        })
      } catch (err) {
        errorRequest(client, request, err)
      }

      if (request.aborted) {
        return false
      }

      if (method === 'HEAD') {
        // https://github.com/mcollina/undici/issues/258
        // Close after a HEAD request to interop with misbehaving servers
        // that may send a body in the response.

        socket[kReset] = true
      }

      if (upgrade || method === 'CONNECT') {
        // On CONNECT or upgrade, block pipeline from dispatching further
        // requests on this connection.

        socket[kReset] = true
      }

      if (reset != null) {
        socket[kReset] = reset
      }

      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
        socket[kReset] = true
      }

      if (blocking) {
        socket[kBlocking] = true
      }

      let header = `${method} ${path} HTTP/1.1\r\n`

      if (typeof host === 'string') {
        header += `host: ${host}\r\n`
      } else {
        header += client[kHostHeader]
      }

      if (upgrade) {
        header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`
      } else if (client[kPipelining] && !socket[kReset]) {
        header += 'connection: keep-alive\r\n'
      } else {
        header += 'connection: close\r\n'
      }

      if (headers) {
        header += headers
      }

      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request, headers: header, socket })
      }

      /* istanbul ignore else: assertion */
      if (!body || bodyLength === 0) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
        } else {
          assert(contentLength === null, 'no body must not have content length')
          socket.write(`${header}\r\n`, 'latin1')
        }
        request.onRequestSent()
      } else if (util.isBuffer(body)) {
        assert(
          contentLength === body.byteLength,
          'buffer body must have content length'
        )

        socket.cork()
        socket.write(
          `${header}content-length: ${contentLength}\r\n\r\n`,
          'latin1'
        )
        socket.write(body)
        socket.uncork()
        request.onBodySent(body)
        request.onRequestSent()
        if (!expectsPayload) {
          socket[kReset] = true
        }
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === 'function') {
          writeIterable({
            body: body.stream(),
            client,
            request,
            socket,
            contentLength,
            header,
            expectsPayload
          })
        } else {
          writeBlob({
            body,
            client,
            request,
            socket,
            contentLength,
            header,
            expectsPayload
          })
        }
      } else if (util.isStream(body)) {
        writeStream({
          body,
          client,
          request,
          socket,
          contentLength,
          header,
          expectsPayload
        })
      } else if (util.isIterable(body)) {
        writeIterable({
          body,
          client,
          request,
          socket,
          contentLength,
          header,
          expectsPayload
        })
      } else {
        assert(false)
      }

      return true
    }

    function writeH2(client, session, request) {
      const {
        body,
        method,
        path,
        host,
        upgrade,
        expectContinue,
        signal,
        headers: reqHeaders
      } = request

      let headers
      if (typeof reqHeaders === 'string')
        headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())
      else headers = reqHeaders

      if (upgrade) {
        errorRequest(client, request, new Error('Upgrade not supported for H2'))
        return false
      }

      try {
        // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return
          }

          errorRequest(client, request, err || new RequestAbortedError())
        })
      } catch (err) {
        errorRequest(client, request, err)
      }

      if (request.aborted) {
        return false
      }

      let stream
      const h2State = client[kHTTP2SessionState]

      headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]
      headers[HTTP2_HEADER_METHOD] = method

      if (method === 'CONNECT') {
        session.ref()
        // we are already connected, streams are pending, first request
        // will create a new stream. We trigger a request to create the stream and wait until
        // `ready` event is triggered
        // We disabled endStream to allow the user to write to the stream
        stream = session.request(headers, { endStream: false, signal })

        if (stream.id && !stream.pending) {
          request.onUpgrade(null, null, stream)
          ++h2State.openStreams
        } else {
          stream.once('ready', () => {
            request.onUpgrade(null, null, stream)
            ++h2State.openStreams
          })
        }

        stream.once('close', () => {
          h2State.openStreams -= 1
          // TODO(HTTP/2): unref only if current streams count is 0
          if (h2State.openStreams === 0) session.unref()
        })

        return true
      }

      // https://tools.ietf.org/html/rfc7540#section-8.3
      // :path and :scheme headers must be omited when sending CONNECT

      headers[HTTP2_HEADER_PATH] = path
      headers[HTTP2_HEADER_SCHEME] = 'https'

      // https://tools.ietf.org/html/rfc7231#section-4.3.1
      // https://tools.ietf.org/html/rfc7231#section-4.3.2
      // https://tools.ietf.org/html/rfc7231#section-4.3.5

      // Sending a payload body on a request that does not
      // expect it can cause undefined behavior on some
      // servers and corrupt connection state. Do not
      // re-use the connection for further requests.

      const expectsPayload =
        method === 'PUT' || method === 'POST' || method === 'PATCH'

      if (body && typeof body.read === 'function') {
        // Try to read EOF in order to get length.
        body.read(0)
      }

      let contentLength = util.bodyLength(body)

      if (contentLength == null) {
        contentLength = request.contentLength
      }

      if (contentLength === 0 || !expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD NOT send a Content-Length header field when
        // the request message does not contain a payload body and the method
        // semantics do not anticipate such a body.

        contentLength = null
      }

      // https://github.com/nodejs/undici/issues/2046
      // A user agent may send a Content-Length header with 0 value, this should be allowed.
      if (
        shouldSendContentLength(method) &&
        contentLength > 0 &&
        request.contentLength != null &&
        request.contentLength !== contentLength
      ) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError())
          return false
        }

        process.emitWarning(new RequestContentLengthMismatchError())
      }

      if (contentLength != null) {
        assert(body, 'no body must not have content length')
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`
      }

      session.ref()

      const shouldEndStream = method === 'GET' || method === 'HEAD'
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = '100-continue'
        /**
         * @type {import('node:http2').ClientHttp2Stream}
         */
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        })

        stream.once('continue', writeBodyH2)
      } else {
        /** @type {import('node:http2').ClientHttp2Stream} */
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        })
        writeBodyH2()
      }

      // Increment counter as we have new several streams open
      ++h2State.openStreams

      stream.once('response', (headers) => {
        if (
          request.onHeaders(
            Number(headers[HTTP2_HEADER_STATUS]),
            headers,
            stream.resume.bind(stream),
            ''
          ) === false
        ) {
          stream.pause()
        }
      })

      stream.once('end', () => {
        request.onComplete([])
      })

      stream.on('data', (chunk) => {
        if (request.onData(chunk) === false) stream.pause()
      })

      stream.once('close', () => {
        h2State.openStreams -= 1
        // TODO(HTTP/2): unref only if current streams count is 0
        if (h2State.openStreams === 0) session.unref()
      })

      stream.once('error', function (err) {
        if (
          client[kHTTP2Session] &&
          !client[kHTTP2Session].destroyed &&
          !this.closed &&
          !this.destroyed
        ) {
          h2State.streams -= 1
          util.destroy(stream, err)
        }
      })

      stream.once('frameError', (type, code) => {
        const err = new InformationalError(
          `HTTP/2: "frameError" received - type ${type}, code ${code}`
        )
        errorRequest(client, request, err)

        if (
          client[kHTTP2Session] &&
          !client[kHTTP2Session].destroyed &&
          !this.closed &&
          !this.destroyed
        ) {
          h2State.streams -= 1
          util.destroy(stream, err)
        }
      })

      // stream.on('aborted', () => {
      //   // TODO(HTTP/2): Support aborted
      // })

      // stream.on('timeout', () => {
      //   // TODO(HTTP/2): Support timeout
      // })

      // stream.on('push', headers => {
      //   // TODO(HTTP/2): Suppor push
      // })

      // stream.on('trailers', headers => {
      //   // TODO(HTTP/2): Support trailers
      // })

      return true

      function writeBodyH2() {
        /* istanbul ignore else: assertion */
        if (!body) {
          request.onRequestSent()
        } else if (util.isBuffer(body)) {
          assert(
            contentLength === body.byteLength,
            'buffer body must have content length'
          )
          stream.cork()
          stream.write(body)
          stream.uncork()
          stream.end()
          request.onBodySent(body)
          request.onRequestSent()
        } else if (util.isBlobLike(body)) {
          if (typeof body.stream === 'function') {
            writeIterable({
              client,
              request,
              contentLength,
              h2stream: stream,
              expectsPayload,
              body: body.stream(),
              socket: client[kSocket],
              header: ''
            })
          } else {
            writeBlob({
              body,
              client,
              request,
              contentLength,
              expectsPayload,
              h2stream: stream,
              header: '',
              socket: client[kSocket]
            })
          }
        } else if (util.isStream(body)) {
          writeStream({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            socket: client[kSocket],
            h2stream: stream,
            header: ''
          })
        } else if (util.isIterable(body)) {
          writeIterable({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            header: '',
            h2stream: stream,
            socket: client[kSocket]
          })
        } else {
          assert(false)
        }
      }
    }

    function writeStream({
      h2stream,
      body,
      client,
      request,
      socket,
      contentLength,
      header,
      expectsPayload
    }) {
      assert(
        contentLength !== 0 || client[kRunning] === 0,
        'stream body cannot be pipelined'
      )

      if (client[kHTTPConnVersion] === 'h2') {
        // For HTTP/2, is enough to pipe the stream
        const pipe = pipeline(body, h2stream, (err) => {
          if (err) {
            util.destroy(body, err)
            util.destroy(h2stream, err)
          } else {
            request.onRequestSent()
          }
        })

        pipe.on('data', onPipeData)
        pipe.once('end', () => {
          pipe.removeListener('data', onPipeData)
          util.destroy(pipe)
        })

        function onPipeData(chunk) {
          request.onBodySent(chunk)
        }

        return
      }

      let finished = false

      const writer = new AsyncWriter({
        socket,
        request,
        contentLength,
        client,
        expectsPayload,
        header
      })

      const onData = function (chunk) {
        if (finished) {
          return
        }

        try {
          if (!writer.write(chunk) && this.pause) {
            this.pause()
          }
        } catch (err) {
          util.destroy(this, err)
        }
      }
      const onDrain = function () {
        if (finished) {
          return
        }

        if (body.resume) {
          body.resume()
        }
      }
      const onAbort = function () {
        onFinished(new RequestAbortedError())
      }
      const onFinished = function (err) {
        if (finished) {
          return
        }

        finished = true

        assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))

        socket.off('drain', onDrain).off('error', onFinished)

        body
          .removeListener('data', onData)
          .removeListener('end', onFinished)
          .removeListener('error', onFinished)
          .removeListener('close', onAbort)

        if (!err) {
          try {
            writer.end()
          } catch (er) {
            err = er
          }
        }

        writer.destroy(err)

        if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
          util.destroy(body, err)
        } else {
          util.destroy(body)
        }
      }

      body
        .on('data', onData)
        .on('end', onFinished)
        .on('error', onFinished)
        .on('close', onAbort)

      if (body.resume) {
        body.resume()
      }

      socket.on('drain', onDrain).on('error', onFinished)
    }

    async function writeBlob({
      h2stream,
      body,
      client,
      request,
      socket,
      contentLength,
      header,
      expectsPayload
    }) {
      assert(contentLength === body.size, 'blob body must have content length')

      const isH2 = client[kHTTPConnVersion] === 'h2'
      try {
        if (contentLength != null && contentLength !== body.size) {
          throw new RequestContentLengthMismatchError()
        }

        const buffer = Buffer.from(await body.arrayBuffer())

        if (isH2) {
          h2stream.cork()
          h2stream.write(buffer)
          h2stream.uncork()
        } else {
          socket.cork()
          socket.write(
            `${header}content-length: ${contentLength}\r\n\r\n`,
            'latin1'
          )
          socket.write(buffer)
          socket.uncork()
        }

        request.onBodySent(buffer)
        request.onRequestSent()

        if (!expectsPayload) {
          socket[kReset] = true
        }

        resume(client)
      } catch (err) {
        util.destroy(isH2 ? h2stream : socket, err)
      }
    }

    async function writeIterable({
      h2stream,
      body,
      client,
      request,
      socket,
      contentLength,
      header,
      expectsPayload
    }) {
      assert(
        contentLength !== 0 || client[kRunning] === 0,
        'iterator body cannot be pipelined'
      )

      let callback = null
      function onDrain() {
        if (callback) {
          const cb = callback
          callback = null
          cb()
        }
      }

      const waitForDrain = () =>
        new Promise((resolve, reject) => {
          assert(callback === null)

          if (socket[kError]) {
            reject(socket[kError])
          } else {
            callback = resolve
          }
        })

      if (client[kHTTPConnVersion] === 'h2') {
        h2stream.on('close', onDrain).on('drain', onDrain)

        try {
          // It's up to the user to somehow abort the async iterable.
          for await (const chunk of body) {
            if (socket[kError]) {
              throw socket[kError]
            }

            const res = h2stream.write(chunk)
            request.onBodySent(chunk)
            if (!res) {
              await waitForDrain()
            }
          }
        } catch (err) {
          h2stream.destroy(err)
        } finally {
          request.onRequestSent()
          h2stream.end()
          h2stream.off('close', onDrain).off('drain', onDrain)
        }

        return
      }

      socket.on('close', onDrain).on('drain', onDrain)

      const writer = new AsyncWriter({
        socket,
        request,
        contentLength,
        client,
        expectsPayload,
        header
      })
      try {
        // It's up to the user to somehow abort the async iterable.
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError]
          }

          if (!writer.write(chunk)) {
            await waitForDrain()
          }
        }

        writer.end()
      } catch (err) {
        writer.destroy(err)
      } finally {
        socket.off('close', onDrain).off('drain', onDrain)
      }
    }

    class AsyncWriter {
      constructor({
        socket,
        request,
        contentLength,
        client,
        expectsPayload,
        header
      }) {
        this.socket = socket
        this.request = request
        this.contentLength = contentLength
        this.client = client
        this.bytesWritten = 0
        this.expectsPayload = expectsPayload
        this.header = header

        socket[kWriting] = true
      }

      write(chunk) {
        const {
          socket,
          request,
          contentLength,
          client,
          bytesWritten,
          expectsPayload,
          header
        } = this

        if (socket[kError]) {
          throw socket[kError]
        }

        if (socket.destroyed) {
          return false
        }

        const len = Buffer.byteLength(chunk)
        if (!len) {
          return true
        }

        // We should defer writing chunks.
        if (contentLength !== null && bytesWritten + len > contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError()
          }

          process.emitWarning(new RequestContentLengthMismatchError())
        }

        socket.cork()

        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true
          }

          if (contentLength === null) {
            socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1')
          } else {
            socket.write(
              `${header}content-length: ${contentLength}\r\n\r\n`,
              'latin1'
            )
          }
        }

        if (contentLength === null) {
          socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1')
        }

        this.bytesWritten += len

        const ret = socket.write(chunk)

        socket.uncork()

        request.onBodySent(chunk)

        if (!ret) {
          if (
            socket[kParser].timeout &&
            socket[kParser].timeoutType === TIMEOUT_HEADERS
          ) {
            // istanbul ignore else: only for jest
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh()
            }
          }
        }

        return ret
      }

      end() {
        const {
          socket,
          contentLength,
          client,
          bytesWritten,
          expectsPayload,
          header,
          request
        } = this
        request.onRequestSent()

        socket[kWriting] = false

        if (socket[kError]) {
          throw socket[kError]
        }

        if (socket.destroyed) {
          return
        }

        if (bytesWritten === 0) {
          if (expectsPayload) {
            // https://tools.ietf.org/html/rfc7230#section-3.3.2
            // A user agent SHOULD send a Content-Length in a request message when
            // no Transfer-Encoding is sent and the request method defines a meaning
            // for an enclosed payload body.

            socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
          } else {
            socket.write(`${header}\r\n`, 'latin1')
          }
        } else if (contentLength === null) {
          socket.write('\r\n0\r\n\r\n', 'latin1')
        }

        if (contentLength !== null && bytesWritten !== contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError()
          } else {
            process.emitWarning(new RequestContentLengthMismatchError())
          }
        }

        if (
          socket[kParser].timeout &&
          socket[kParser].timeoutType === TIMEOUT_HEADERS
        ) {
          // istanbul ignore else: only for jest
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh()
          }
        }

        resume(client)
      }

      destroy(err) {
        const { socket, client } = this

        socket[kWriting] = false

        if (err) {
          assert(
            client[kRunning] <= 1,
            'pipeline should only contain this request'
          )
          util.destroy(socket, err)
        }
      }
    }

    function errorRequest(client, request, err) {
      try {
        request.onError(err)
        assert(request.aborted)
      } catch (err) {
        client.emit('error', err)
      }
    }

    module.exports = Client

    /***/
  },

  /***/ 6436: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    /* istanbul ignore file: only for Node 12 */

    const { kConnected, kSize } = __nccwpck_require__(2785)

    class CompatWeakRef {
      constructor(value) {
        this.value = value
      }

      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0
          ? undefined
          : this.value
      }
    }

    class CompatFinalizer {
      constructor(finalizer) {
        this.finalizer = finalizer
      }

      register(dispatcher, key) {
        if (dispatcher.on) {
          dispatcher.on('disconnect', () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key)
            }
          })
        }
      }
    }

    module.exports = function () {
      // FIXME: remove workaround when the Node bug is fixed
      // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        }
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      }
    }

    /***/
  },

  /***/ 663: /***/ (module) => {
    // https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
    const maxAttributeValueSize = 1024

    // https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
    const maxNameValuePairSize = 4096

    module.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    }

    /***/
  },

  /***/ 1724: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { parseSetCookie } = __nccwpck_require__(4408)
    const { stringify, getHeadersList } = __nccwpck_require__(3121)
    const { webidl } = __nccwpck_require__(1744)
    const { Headers } = __nccwpck_require__(554)

    /**
     * @typedef {Object} Cookie
     * @property {string} name
     * @property {string} value
     * @property {Date|number|undefined} expires
     * @property {number|undefined} maxAge
     * @property {string|undefined} domain
     * @property {string|undefined} path
     * @property {boolean|undefined} secure
     * @property {boolean|undefined} httpOnly
     * @property {'Strict'|'Lax'|'None'} sameSite
     * @property {string[]} unparsed
     */

    /**
     * @param {Headers} headers
     * @returns {Record<string, string>}
     */
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })

      webidl.brandCheck(headers, Headers, { strict: false })

      const cookie = headers.get('cookie')
      const out = {}

      if (!cookie) {
        return out
      }

      for (const piece of cookie.split(';')) {
        const [name, ...value] = piece.split('=')

        out[name.trim()] = value.join('=')
      }

      return out
    }

    /**
     * @param {Headers} headers
     * @param {string} name
     * @param {{ path?: string, domain?: string }|undefined} attributes
     * @returns {void}
     */
    function deleteCookie(headers, name, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })

      webidl.brandCheck(headers, Headers, { strict: false })

      name = webidl.converters.DOMString(name)
      attributes = webidl.converters.DeleteCookieAttributes(attributes)

      // Matches behavior of
      // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
      setCookie(headers, {
        name,
        value: '',
        expires: new Date(0),
        ...attributes
      })
    }

    /**
     * @param {Headers} headers
     * @returns {Cookie[]}
     */
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })

      webidl.brandCheck(headers, Headers, { strict: false })

      const cookies = getHeadersList(headers).cookies

      if (!cookies) {
        return []
      }

      // In older versions of undici, cookies is a list of name:value.
      return cookies.map((pair) =>
        parseSetCookie(Array.isArray(pair) ? pair[1] : pair)
      )
    }

    /**
     * @param {Headers} headers
     * @param {Cookie} cookie
     * @returns {void}
     */
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })

      webidl.brandCheck(headers, Headers, { strict: false })

      cookie = webidl.converters.Cookie(cookie)

      const str = stringify(cookie)

      if (str) {
        headers.append('Set-Cookie', stringify(cookie))
      }
    }

    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: 'path',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: 'domain',
        defaultValue: null
      }
    ])

    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: 'name'
      },
      {
        converter: webidl.converters.DOMString,
        key: 'value'
      },
      {
        converter: webidl.nullableConverter((value) => {
          if (typeof value === 'number') {
            return webidl.converters['unsigned long long'](value)
          }

          return new Date(value)
        }),
        key: 'expires',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters['long long']),
        key: 'maxAge',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: 'domain',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: 'path',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: 'secure',
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: 'httpOnly',
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: 'sameSite',
        allowedValues: ['Strict', 'Lax', 'None']
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: 'unparsed',
        defaultValue: []
      }
    ])

    module.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    }

    /***/
  },

  /***/ 4408: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { maxNameValuePairSize, maxAttributeValueSize } =
      __nccwpck_require__(663)
    const { isCTLExcludingHtab } = __nccwpck_require__(3121)
    const { collectASequenceOfCodePointsFast } = __nccwpck_require__(685)
    const assert = __nccwpck_require__(9491)

    /**
     * @description Parses the field-value attributes of a set-cookie header string.
     * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
     * @param {string} header
     * @returns if the header is invalid, null will be returned
     */
    function parseSetCookie(header) {
      // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
      //    character (CTL characters excluding HTAB): Abort these steps and
      //    ignore the set-cookie-string entirely.
      if (isCTLExcludingHtab(header)) {
        return null
      }

      let nameValuePair = ''
      let unparsedAttributes = ''
      let name = ''
      let value = ''

      // 2. If the set-cookie-string contains a %x3B (";") character:
      if (header.includes(';')) {
        // 1. The name-value-pair string consists of the characters up to,
        //    but not including, the first %x3B (";"), and the unparsed-
        //    attributes consist of the remainder of the set-cookie-string
        //    (including the %x3B (";") in question).
        const position = { position: 0 }

        nameValuePair = collectASequenceOfCodePointsFast(';', header, position)
        unparsedAttributes = header.slice(position.position)
      } else {
        // Otherwise:

        // 1. The name-value-pair string consists of all the characters
        //    contained in the set-cookie-string, and the unparsed-
        //    attributes is the empty string.
        nameValuePair = header
      }

      // 3. If the name-value-pair string lacks a %x3D ("=") character, then
      //    the name string is empty, and the value string is the value of
      //    name-value-pair.
      if (!nameValuePair.includes('=')) {
        value = nameValuePair
      } else {
        //    Otherwise, the name string consists of the characters up to, but
        //    not including, the first %x3D ("=") character, and the (possibly
        //    empty) value string consists of the characters after the first
        //    %x3D ("=") character.
        const position = { position: 0 }
        name = collectASequenceOfCodePointsFast('=', nameValuePair, position)
        value = nameValuePair.slice(position.position + 1)
      }

      // 4. Remove any leading or trailing WSP characters from the name
      //    string and the value string.
      name = name.trim()
      value = value.trim()

      // 5. If the sum of the lengths of the name string and the value string
      //    is more than 4096 octets, abort these steps and ignore the set-
      //    cookie-string entirely.
      if (name.length + value.length > maxNameValuePairSize) {
        return null
      }

      // 6. The cookie-name is the name string, and the cookie-value is the
      //    value string.
      return {
        name,
        value,
        ...parseUnparsedAttributes(unparsedAttributes)
      }
    }

    /**
     * Parses the remaining attributes of a set-cookie header
     * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
     * @param {string} unparsedAttributes
     * @param {[Object.<string, unknown>]={}} cookieAttributeList
     */
    function parseUnparsedAttributes(
      unparsedAttributes,
      cookieAttributeList = {}
    ) {
      // 1. If the unparsed-attributes string is empty, skip the rest of
      //    these steps.
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList
      }

      // 2. Discard the first character of the unparsed-attributes (which
      //    will be a %x3B (";") character).
      assert(unparsedAttributes[0] === ';')
      unparsedAttributes = unparsedAttributes.slice(1)

      let cookieAv = ''

      // 3. If the remaining unparsed-attributes contains a %x3B (";")
      //    character:
      if (unparsedAttributes.includes(';')) {
        // 1. Consume the characters of the unparsed-attributes up to, but
        //    not including, the first %x3B (";") character.
        cookieAv = collectASequenceOfCodePointsFast(';', unparsedAttributes, {
          position: 0
        })
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length)
      } else {
        // Otherwise:

        // 1. Consume the remainder of the unparsed-attributes.
        cookieAv = unparsedAttributes
        unparsedAttributes = ''
      }

      // Let the cookie-av string be the characters consumed in this step.

      let attributeName = ''
      let attributeValue = ''

      // 4. If the cookie-av string contains a %x3D ("=") character:
      if (cookieAv.includes('=')) {
        // 1. The (possibly empty) attribute-name string consists of the
        //    characters up to, but not including, the first %x3D ("=")
        //    character, and the (possibly empty) attribute-value string
        //    consists of the characters after the first %x3D ("=")
        //    character.
        const position = { position: 0 }

        attributeName = collectASequenceOfCodePointsFast(
          '=',
          cookieAv,
          position
        )
        attributeValue = cookieAv.slice(position.position + 1)
      } else {
        // Otherwise:

        // 1. The attribute-name string consists of the entire cookie-av
        //    string, and the attribute-value string is empty.
        attributeName = cookieAv
      }

      // 5. Remove any leading or trailing WSP characters from the attribute-
      //    name string and the attribute-value string.
      attributeName = attributeName.trim()
      attributeValue = attributeValue.trim()

      // 6. If the attribute-value is longer than 1024 octets, ignore the
      //    cookie-av string and return to Step 1 of this algorithm.
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
      }

      // 7. Process the attribute-name and attribute-value according to the
      //    requirements in the following subsections.  (Notice that
      //    attributes with unrecognized attribute-names are ignored.)
      const attributeNameLowercase = attributeName.toLowerCase()

      // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
      // If the attribute-name case-insensitively matches the string
      // "Expires", the user agent MUST process the cookie-av as follows.
      if (attributeNameLowercase === 'expires') {
        // 1. Let the expiry-time be the result of parsing the attribute-value
        //    as cookie-date (see Section 5.1.1).
        const expiryTime = new Date(attributeValue)

        // 2. If the attribute-value failed to parse as a cookie date, ignore
        //    the cookie-av.

        cookieAttributeList.expires = expiryTime
      } else if (attributeNameLowercase === 'max-age') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
        // If the attribute-name case-insensitively matches the string "Max-
        // Age", the user agent MUST process the cookie-av as follows.

        // 1. If the first character of the attribute-value is not a DIGIT or a
        //    "-" character, ignore the cookie-av.
        const charCode = attributeValue.charCodeAt(0)

        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
          return parseUnparsedAttributes(
            unparsedAttributes,
            cookieAttributeList
          )
        }

        // 2. If the remainder of attribute-value contains a non-DIGIT
        //    character, ignore the cookie-av.
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(
            unparsedAttributes,
            cookieAttributeList
          )
        }

        // 3. Let delta-seconds be the attribute-value converted to an integer.
        const deltaSeconds = Number(attributeValue)

        // 4. Let cookie-age-limit be the maximum age of the cookie (which
        //    SHOULD be 400 days or less, see Section 4.1.2.2).

        // 5. Set delta-seconds to the smaller of its present value and cookie-
        //    age-limit.
        // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

        // 6. If delta-seconds is less than or equal to zero (0), let expiry-
        //    time be the earliest representable date and time.  Otherwise, let
        //    the expiry-time be the current date and time plus delta-seconds
        //    seconds.
        // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

        // 7. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Max-Age and an attribute-value of expiry-time.
        cookieAttributeList.maxAge = deltaSeconds
      } else if (attributeNameLowercase === 'domain') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
        // If the attribute-name case-insensitively matches the string "Domain",
        // the user agent MUST process the cookie-av as follows.

        // 1. Let cookie-domain be the attribute-value.
        let cookieDomain = attributeValue

        // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
        //    cookie-domain without its leading %x2E (".").
        if (cookieDomain[0] === '.') {
          cookieDomain = cookieDomain.slice(1)
        }

        // 3. Convert the cookie-domain to lower case.
        cookieDomain = cookieDomain.toLowerCase()

        // 4. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Domain and an attribute-value of cookie-domain.
        cookieAttributeList.domain = cookieDomain
      } else if (attributeNameLowercase === 'path') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
        // If the attribute-name case-insensitively matches the string "Path",
        // the user agent MUST process the cookie-av as follows.

        // 1. If the attribute-value is empty or if the first character of the
        //    attribute-value is not %x2F ("/"):
        let cookiePath = ''
        if (attributeValue.length === 0 || attributeValue[0] !== '/') {
          // 1. Let cookie-path be the default-path.
          cookiePath = '/'
        } else {
          // Otherwise:

          // 1. Let cookie-path be the attribute-value.
          cookiePath = attributeValue
        }

        // 2. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Path and an attribute-value of cookie-path.
        cookieAttributeList.path = cookiePath
      } else if (attributeNameLowercase === 'secure') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
        // If the attribute-name case-insensitively matches the string "Secure",
        // the user agent MUST append an attribute to the cookie-attribute-list
        // with an attribute-name of Secure and an empty attribute-value.

        cookieAttributeList.secure = true
      } else if (attributeNameLowercase === 'httponly') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
        // If the attribute-name case-insensitively matches the string
        // "HttpOnly", the user agent MUST append an attribute to the cookie-
        // attribute-list with an attribute-name of HttpOnly and an empty
        // attribute-value.

        cookieAttributeList.httpOnly = true
      } else if (attributeNameLowercase === 'samesite') {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
        // If the attribute-name case-insensitively matches the string
        // "SameSite", the user agent MUST process the cookie-av as follows:

        // 1. Let enforcement be "Default".
        let enforcement = 'Default'

        const attributeValueLowercase = attributeValue.toLowerCase()
        // 2. If cookie-av's attribute-value is a case-insensitive match for
        //    "None", set enforcement to "None".
        if (attributeValueLowercase.includes('none')) {
          enforcement = 'None'
        }

        // 3. If cookie-av's attribute-value is a case-insensitive match for
        //    "Strict", set enforcement to "Strict".
        if (attributeValueLowercase.includes('strict')) {
          enforcement = 'Strict'
        }

        // 4. If cookie-av's attribute-value is a case-insensitive match for
        //    "Lax", set enforcement to "Lax".
        if (attributeValueLowercase.includes('lax')) {
          enforcement = 'Lax'
        }

        // 5. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of "SameSite" and an attribute-value of
        //    enforcement.
        cookieAttributeList.sameSite = enforcement
      } else {
        cookieAttributeList.unparsed ??= []

        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)
      }

      // 8. Return to Step 1 of this algorithm.
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    module.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    }

    /***/
  },

  /***/ 3121: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const assert = __nccwpck_require__(9491)
    const { kHeadersList } = __nccwpck_require__(2785)

    function isCTLExcludingHtab(value) {
      if (value.length === 0) {
        return false
      }

      for (const char of value) {
        const code = char.charCodeAt(0)

        if (
          code >= 0x00 ||
          code <= 0x08 ||
          code >= 0x0a ||
          code <= 0x1f ||
          code === 0x7f
        ) {
          return false
        }
      }
    }

    /**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */
    function validateCookieName(name) {
      for (const char of name) {
        const code = char.charCodeAt(0)

        if (
          code <= 0x20 ||
          code > 0x7f ||
          char === '(' ||
          char === ')' ||
          char === '>' ||
          char === '<' ||
          char === '@' ||
          char === ',' ||
          char === ';' ||
          char === ':' ||
          char === '\\' ||
          char === '"' ||
          char === '/' ||
          char === '[' ||
          char === ']' ||
          char === '?' ||
          char === '=' ||
          char === '{' ||
          char === '}'
        ) {
          throw new Error('Invalid cookie name')
        }
      }
    }

    /**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */
    function validateCookieValue(value) {
      for (const char of value) {
        const code = char.charCodeAt(0)

        if (
          code < 0x21 || // exclude CTLs (0-31)
          code === 0x22 ||
          code === 0x2c ||
          code === 0x3b ||
          code === 0x5c ||
          code > 0x7e // non-ascii
        ) {
          throw new Error('Invalid header value')
        }
      }
    }

    /**
     * path-value        = <any CHAR except CTLs or ";">
     * @param {string} path
     */
    function validateCookiePath(path) {
      for (const char of path) {
        const code = char.charCodeAt(0)

        if (code < 0x21 || char === ';') {
          throw new Error('Invalid cookie path')
        }
      }
    }

    /**
     * I have no idea why these values aren't allowed to be honest,
     * but Deno tests these. - Khafra
     * @param {string} domain
     */
    function validateCookieDomain(domain) {
      if (
        domain.startsWith('-') ||
        domain.endsWith('.') ||
        domain.endsWith('-')
      ) {
        throw new Error('Invalid cookie domain')
      }
    }

    /**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */
    function toIMFDate(date) {
      if (typeof date === 'number') {
        date = new Date(date)
      }

      const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']

      const months = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ]

      const dayName = days[date.getUTCDay()]
      const day = date.getUTCDate().toString().padStart(2, '0')
      const month = months[date.getUTCMonth()]
      const year = date.getUTCFullYear()
      const hour = date.getUTCHours().toString().padStart(2, '0')
      const minute = date.getUTCMinutes().toString().padStart(2, '0')
      const second = date.getUTCSeconds().toString().padStart(2, '0')

      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`
    }

    /**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error('Invalid cookie max-age')
      }
    }

    /**
     * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
     * @param {import('./index').Cookie} cookie
     */
    function stringify(cookie) {
      if (cookie.name.length === 0) {
        return null
      }

      validateCookieName(cookie.name)
      validateCookieValue(cookie.value)

      const out = [`${cookie.name}=${cookie.value}`]

      // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
      // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
      if (cookie.name.startsWith('__Secure-')) {
        cookie.secure = true
      }

      if (cookie.name.startsWith('__Host-')) {
        cookie.secure = true
        cookie.domain = null
        cookie.path = '/'
      }

      if (cookie.secure) {
        out.push('Secure')
      }

      if (cookie.httpOnly) {
        out.push('HttpOnly')
      }

      if (typeof cookie.maxAge === 'number') {
        validateCookieMaxAge(cookie.maxAge)
        out.push(`Max-Age=${cookie.maxAge}`)
      }

      if (cookie.domain) {
        validateCookieDomain(cookie.domain)
        out.push(`Domain=${cookie.domain}`)
      }

      if (cookie.path) {
        validateCookiePath(cookie.path)
        out.push(`Path=${cookie.path}`)
      }

      if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
        out.push(`Expires=${toIMFDate(cookie.expires)}`)
      }

      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`)
      }

      for (const part of cookie.unparsed) {
        if (!part.includes('=')) {
          throw new Error('Invalid unparsed')
        }

        const [key, ...value] = part.split('=')

        out.push(`${key.trim()}=${value.join('=')}`)
      }

      return out.join('; ')
    }

    let kHeadersListNode

    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList]
      }

      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol) => symbol.description === 'headers list'
        )

        assert(kHeadersListNode, 'Headers cannot be parsed')
      }

      const headersList = headers[kHeadersListNode]
      assert(headersList)

      return headersList
    }

    module.exports = {
      isCTLExcludingHtab,
      stringify,
      getHeadersList
    }

    /***/
  },

  /***/ 2067: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const net = __nccwpck_require__(1808)
    const assert = __nccwpck_require__(9491)
    const util = __nccwpck_require__(3983)
    const { InvalidArgumentError, ConnectTimeoutError } =
      __nccwpck_require__(8045)

    let tls // include tls conditionally since it is not always available

    // TODO: session re-use does not wait for the first
    // connection to resolve the session and might therefore
    // resolve the same servername multiple times even when
    // re-use is enabled.

    let SessionCache
    // FIXME: remove workaround when the Node bug is fixed
    // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions
          this._sessionCache = new Map()
          this._sessionRegistry = new global.FinalizationRegistry((key) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return
            }

            const ref = this._sessionCache.get(key)
            if (ref !== undefined && ref.deref() === undefined) {
              this._sessionCache.delete(key)
            }
          })
        }

        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey)
          return ref ? ref.deref() : null
        }

        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return
          }

          this._sessionCache.set(sessionKey, new WeakRef(session))
          this._sessionRegistry.register(session, sessionKey)
        }
      }
    } else {
      SessionCache = class SimpleSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions
          this._sessionCache = new Map()
        }

        get(sessionKey) {
          return this._sessionCache.get(sessionKey)
        }

        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return
          }

          if (this._sessionCache.size >= this._maxCachedSessions) {
            // remove the oldest session
            const { value: oldestKey } = this._sessionCache.keys().next()
            this._sessionCache.delete(oldestKey)
          }

          this._sessionCache.set(sessionKey, session)
        }
      }
    }

    function buildConnector({
      allowH2,
      maxCachedSessions,
      socketPath,
      timeout,
      ...opts
    }) {
      if (
        maxCachedSessions != null &&
        (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)
      ) {
        throw new InvalidArgumentError(
          'maxCachedSessions must be a positive integer or zero'
        )
      }

      const options = { path: socketPath, ...opts }
      const sessionCache = new SessionCache(
        maxCachedSessions == null ? 100 : maxCachedSessions
      )
      timeout = timeout == null ? 10e3 : timeout
      allowH2 = allowH2 != null ? allowH2 : false
      return function connect(
        {
          hostname,
          host,
          protocol,
          port,
          servername,
          localAddress,
          httpSocket
        },
        callback
      ) {
        let socket
        if (protocol === 'https:') {
          if (!tls) {
            tls = __nccwpck_require__(4404)
          }
          servername =
            servername || options.servername || util.getServerName(host) || null

          const sessionKey = servername || hostname
          const session = sessionCache.get(sessionKey) || null

          assert(sessionKey)

          socket = tls.connect({
            highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
            ...options,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
            socket: httpSocket, // upgrade socket connection
            port: port || 443,
            host: hostname
          })

          socket.on('session', function (session) {
            // TODO (fix): Can a session become invalid once established? Don't think so?
            sessionCache.set(sessionKey, session)
          })
        } else {
          assert(!httpSocket, 'httpSocket can only be sent on TLS update')
          socket = net.connect({
            highWaterMark: 64 * 1024, // Same as nodejs fs streams.
            ...options,
            localAddress,
            port: port || 80,
            host: hostname
          })
        }

        // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
        if (options.keepAlive == null || options.keepAlive) {
          const keepAliveInitialDelay =
            options.keepAliveInitialDelay === undefined
              ? 60e3
              : options.keepAliveInitialDelay
          socket.setKeepAlive(true, keepAliveInitialDelay)
        }

        const cancelTimeout = setupTimeout(
          () => onConnectTimeout(socket),
          timeout
        )

        socket
          .setNoDelay(true)
          .once(
            protocol === 'https:' ? 'secureConnect' : 'connect',
            function () {
              cancelTimeout()

              if (callback) {
                const cb = callback
                callback = null
                cb(null, this)
              }
            }
          )
          .on('error', function (err) {
            cancelTimeout()

            if (callback) {
              const cb = callback
              callback = null
              cb(err)
            }
          })

        return socket
      }
    }

    function setupTimeout(onConnectTimeout, timeout) {
      if (!timeout) {
        return () => {}
      }

      let s1 = null
      let s2 = null
      const timeoutId = setTimeout(() => {
        // setImmediate is added to make sure that we priotorise socket error events over timeouts
        s1 = setImmediate(() => {
          if (process.platform === 'win32') {
            // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
            s2 = setImmediate(() => onConnectTimeout())
          } else {
            onConnectTimeout()
          }
        })
      }, timeout)
      return () => {
        clearTimeout(timeoutId)
        clearImmediate(s1)
        clearImmediate(s2)
      }
    }

    function onConnectTimeout(socket) {
      util.destroy(socket, new ConnectTimeoutError())
    }

    module.exports = buildConnector

    /***/
  },

  /***/ 8045: /***/ (module) => {
    class UndiciError extends Error {
      constructor(message) {
        super(message)
        this.name = 'UndiciError'
        this.code = 'UND_ERR'
      }
    }

    class ConnectTimeoutError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, ConnectTimeoutError)
        this.name = 'ConnectTimeoutError'
        this.message = message || 'Connect Timeout Error'
        this.code = 'UND_ERR_CONNECT_TIMEOUT'
      }
    }

    class HeadersTimeoutError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, HeadersTimeoutError)
        this.name = 'HeadersTimeoutError'
        this.message = message || 'Headers Timeout Error'
        this.code = 'UND_ERR_HEADERS_TIMEOUT'
      }
    }

    class HeadersOverflowError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, HeadersOverflowError)
        this.name = 'HeadersOverflowError'
        this.message = message || 'Headers Overflow Error'
        this.code = 'UND_ERR_HEADERS_OVERFLOW'
      }
    }

    class BodyTimeoutError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, BodyTimeoutError)
        this.name = 'BodyTimeoutError'
        this.message = message || 'Body Timeout Error'
        this.code = 'UND_ERR_BODY_TIMEOUT'
      }
    }

    class ResponseStatusCodeError extends UndiciError {
      constructor(message, statusCode, headers, body) {
        super(message)
        Error.captureStackTrace(this, ResponseStatusCodeError)
        this.name = 'ResponseStatusCodeError'
        this.message = message || 'Response Status Code Error'
        this.code = 'UND_ERR_RESPONSE_STATUS_CODE'
        this.body = body
        this.status = statusCode
        this.statusCode = statusCode
        this.headers = headers
      }
    }

    class InvalidArgumentError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, InvalidArgumentError)
        this.name = 'InvalidArgumentError'
        this.message = message || 'Invalid Argument Error'
        this.code = 'UND_ERR_INVALID_ARG'
      }
    }

    class InvalidReturnValueError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, InvalidReturnValueError)
        this.name = 'InvalidReturnValueError'
        this.message = message || 'Invalid Return Value Error'
        this.code = 'UND_ERR_INVALID_RETURN_VALUE'
      }
    }

    class RequestAbortedError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, RequestAbortedError)
        this.name = 'AbortError'
        this.message = message || 'Request aborted'
        this.code = 'UND_ERR_ABORTED'
      }
    }

    class InformationalError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, InformationalError)
        this.name = 'InformationalError'
        this.message = message || 'Request information'
        this.code = 'UND_ERR_INFO'
      }
    }

    class RequestContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, RequestContentLengthMismatchError)
        this.name = 'RequestContentLengthMismatchError'
        this.message =
          message || 'Request body length does not match content-length header'
        this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'
      }
    }

    class ResponseContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, ResponseContentLengthMismatchError)
        this.name = 'ResponseContentLengthMismatchError'
        this.message =
          message || 'Response body length does not match content-length header'
        this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'
      }
    }

    class ClientDestroyedError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, ClientDestroyedError)
        this.name = 'ClientDestroyedError'
        this.message = message || 'The client is destroyed'
        this.code = 'UND_ERR_DESTROYED'
      }
    }

    class ClientClosedError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, ClientClosedError)
        this.name = 'ClientClosedError'
        this.message = message || 'The client is closed'
        this.code = 'UND_ERR_CLOSED'
      }
    }

    class SocketError extends UndiciError {
      constructor(message, socket) {
        super(message)
        Error.captureStackTrace(this, SocketError)
        this.name = 'SocketError'
        this.message = message || 'Socket error'
        this.code = 'UND_ERR_SOCKET'
        this.socket = socket
      }
    }

    class NotSupportedError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, NotSupportedError)
        this.name = 'NotSupportedError'
        this.message = message || 'Not supported error'
        this.code = 'UND_ERR_NOT_SUPPORTED'
      }
    }

    class BalancedPoolMissingUpstreamError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, NotSupportedError)
        this.name = 'MissingUpstreamError'
        this.message =
          message || 'No upstream has been added to the BalancedPool'
        this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'
      }
    }

    class HTTPParserError extends Error {
      constructor(message, code, data) {
        super(message)
        Error.captureStackTrace(this, HTTPParserError)
        this.name = 'HTTPParserError'
        this.code = code ? `HPE_${code}` : undefined
        this.data = data ? data.toString() : undefined
      }
    }

    class ResponseExceededMaxSizeError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, ResponseExceededMaxSizeError)
        this.name = 'ResponseExceededMaxSizeError'
        this.message = message || 'Response content exceeded max size'
        this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'
      }
    }

    module.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError
    }

    /***/
  },

  /***/ 2905: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { InvalidArgumentError, NotSupportedError } =
      __nccwpck_require__(8045)
    const assert = __nccwpck_require__(9491)
    const { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } =
      __nccwpck_require__(2785)
    const util = __nccwpck_require__(3983)

    // tokenRegExp and headerCharRegex have been lifted from
    // https://github.com/nodejs/node/blob/main/lib/_http_common.js

    /**
     * Verifies that the given val is a valid HTTP token
     * per the rules defined in RFC 7230
     * See https://tools.ietf.org/html/rfc7230#section-3.2.6
     */
    const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/

    /**
     * Matches if val contains an invalid field-vchar
     *  field-value    = *( field-content / obs-fold )
     *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
     *  field-vchar    = VCHAR / obs-text
     */
    const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/

    // Verifies that a given path is valid does not contain control chars \x00 to \x20
    const invalidPathRegex = /[^\u0021-\u00ff]/

    const kHandler = Symbol('handler')

    const channels = {}

    let extractBody

    try {
      const diagnosticsChannel = __nccwpck_require__(7643)
      channels.create = diagnosticsChannel.channel('undici:request:create')
      channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')
      channels.headers = diagnosticsChannel.channel('undici:request:headers')
      channels.trailers = diagnosticsChannel.channel('undici:request:trailers')
      channels.error = diagnosticsChannel.channel('undici:request:error')
    } catch {
      channels.create = { hasSubscribers: false }
      channels.bodySent = { hasSubscribers: false }
      channels.headers = { hasSubscribers: false }
      channels.trailers = { hasSubscribers: false }
      channels.error = { hasSubscribers: false }
    }

    class Request {
      constructor(
        origin,
        {
          path,
          method,
          body,
          headers,
          query,
          idempotent,
          blocking,
          upgrade,
          headersTimeout,
          bodyTimeout,
          reset,
          throwOnError,
          expectContinue
        },
        handler
      ) {
        if (typeof path !== 'string') {
          throw new InvalidArgumentError('path must be a string')
        } else if (
          path[0] !== '/' &&
          !(path.startsWith('http://') || path.startsWith('https://')) &&
          method !== 'CONNECT'
        ) {
          throw new InvalidArgumentError(
            'path must be an absolute URL or start with a slash'
          )
        } else if (invalidPathRegex.exec(path) !== null) {
          throw new InvalidArgumentError('invalid request path')
        }

        if (typeof method !== 'string') {
          throw new InvalidArgumentError('method must be a string')
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError('invalid request method')
        }

        if (upgrade && typeof upgrade !== 'string') {
          throw new InvalidArgumentError('upgrade must be a string')
        }

        if (
          headersTimeout != null &&
          (!Number.isFinite(headersTimeout) || headersTimeout < 0)
        ) {
          throw new InvalidArgumentError('invalid headersTimeout')
        }

        if (
          bodyTimeout != null &&
          (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)
        ) {
          throw new InvalidArgumentError('invalid bodyTimeout')
        }

        if (reset != null && typeof reset !== 'boolean') {
          throw new InvalidArgumentError('invalid reset')
        }

        if (expectContinue != null && typeof expectContinue !== 'boolean') {
          throw new InvalidArgumentError('invalid expectContinue')
        }

        this.headersTimeout = headersTimeout

        this.bodyTimeout = bodyTimeout

        this.throwOnError = throwOnError === true

        this.method = method

        this.abort = null

        if (body == null) {
          this.body = null
        } else if (util.isStream(body)) {
          this.body = body

          const rState = this.body._readableState
          if (!rState || !rState.autoDestroy) {
            this.endHandler = function autoDestroy() {
              util.destroy(this)
            }
            this.body.on('end', this.endHandler)
          }

          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err)
            } else {
              this.error = err
            }
          }
          this.body.on('error', this.errorHandler)
        } else if (util.isBuffer(body)) {
          this.body = body.byteLength ? body : null
        } else if (ArrayBuffer.isView(body)) {
          this.body = body.buffer.byteLength
            ? Buffer.from(body.buffer, body.byteOffset, body.byteLength)
            : null
        } else if (body instanceof ArrayBuffer) {
          this.body = body.byteLength ? Buffer.from(body) : null
        } else if (typeof body === 'string') {
          this.body = body.length ? Buffer.from(body) : null
        } else if (
          util.isFormDataLike(body) ||
          util.isIterable(body) ||
          util.isBlobLike(body)
        ) {
          this.body = body
        } else {
          throw new InvalidArgumentError(
            'body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable'
          )
        }

        this.completed = false

        this.aborted = false

        this.upgrade = upgrade || null

        this.path = query ? util.buildURL(path, query) : path

        this.origin = origin

        this.idempotent =
          idempotent == null
            ? method === 'HEAD' || method === 'GET'
            : idempotent

        this.blocking = blocking == null ? false : blocking

        this.reset = reset == null ? null : reset

        this.host = null

        this.contentLength = null

        this.contentType = null

        this.headers = ''

        // Only for H2
        this.expectContinue = expectContinue != null ? expectContinue : false

        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError('headers array must be even')
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(this, headers[i], headers[i + 1])
          }
        } else if (headers && typeof headers === 'object') {
          const keys = Object.keys(headers)
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i]
            processHeader(this, key, headers[key])
          }
        } else if (headers != null) {
          throw new InvalidArgumentError(
            'headers must be an object or an array'
          )
        }

        if (util.isFormDataLike(this.body)) {
          if (
            util.nodeMajor < 16 ||
            (util.nodeMajor === 16 && util.nodeMinor < 8)
          ) {
            throw new InvalidArgumentError(
              'Form-Data bodies are only supported in node v16.8 and newer.'
            )
          }

          if (!extractBody) {
            extractBody = __nccwpck_require__(1472).extractBody
          }

          const [bodyStream, contentType] = extractBody(body)
          if (this.contentType == null) {
            this.contentType = contentType
            this.headers += `content-type: ${contentType}\r\n`
          }
          this.body = bodyStream.stream
          this.contentLength = bodyStream.length
        } else if (
          util.isBlobLike(body) &&
          this.contentType == null &&
          body.type
        ) {
          this.contentType = body.type
          this.headers += `content-type: ${body.type}\r\n`
        }

        util.validateHandler(handler, method, upgrade)

        this.servername = util.getServerName(this.host)

        this[kHandler] = handler

        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this })
        }
      }

      onBodySent(chunk) {
        if (this[kHandler].onBodySent) {
          try {
            this[kHandler].onBodySent(chunk)
          } catch (err) {
            this.onError(err)
          }
        }
      }

      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this })
        }

        if (this[kHandler].onRequestSent) {
          try {
            this[kHandler].onRequestSent()
          } catch (err) {
            this.onError(err)
          }
        }
      }

      onConnect(abort) {
        assert(!this.aborted)
        assert(!this.completed)

        if (this.error) {
          abort(this.error)
        } else {
          this.abort = abort
          return this[kHandler].onConnect(abort)
        }
      }

      onHeaders(statusCode, headers, resume, statusText) {
        assert(!this.aborted)
        assert(!this.completed)

        if (channels.headers.hasSubscribers) {
          channels.headers.publish({
            request: this,
            response: { statusCode, headers, statusText }
          })
        }

        return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
      }

      onData(chunk) {
        assert(!this.aborted)
        assert(!this.completed)

        return this[kHandler].onData(chunk)
      }

      onUpgrade(statusCode, headers, socket) {
        assert(!this.aborted)
        assert(!this.completed)

        return this[kHandler].onUpgrade(statusCode, headers, socket)
      }

      onComplete(trailers) {
        this.onFinally()

        assert(!this.aborted)

        this.completed = true
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers })
        }
        return this[kHandler].onComplete(trailers)
      }

      onError(error) {
        this.onFinally()

        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error })
        }

        if (this.aborted) {
          return
        }
        this.aborted = true
        return this[kHandler].onError(error)
      }

      onFinally() {
        if (this.errorHandler) {
          this.body.off('error', this.errorHandler)
          this.errorHandler = null
        }

        if (this.endHandler) {
          this.body.off('end', this.endHandler)
          this.endHandler = null
        }
      }

      // TODO: adjust to support H2
      addHeader(key, value) {
        processHeader(this, key, value)
        return this
      }

      static [kHTTP1BuildRequest](origin, opts, handler) {
        // TODO: Migrate header parsing here, to make Requests
        // HTTP agnostic
        return new Request(origin, opts, handler)
      }

      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers
        opts = { ...opts, headers: null }

        const request = new Request(origin, opts, handler)

        request.headers = {}

        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError('headers array must be even')
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(request, headers[i], headers[i + 1], true)
          }
        } else if (headers && typeof headers === 'object') {
          const keys = Object.keys(headers)
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i]
            processHeader(request, key, headers[key], true)
          }
        } else if (headers != null) {
          throw new InvalidArgumentError(
            'headers must be an object or an array'
          )
        }

        return request
      }

      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split('\r\n')
        const headers = {}

        for (const header of rawHeaders) {
          const [key, value] = header.split(': ')

          if (value == null || value.length === 0) continue

          if (headers[key]) headers[key] += `,${value}`
          else headers[key] = value
        }

        return headers
      }
    }

    function processHeaderValue(key, val, skipAppend) {
      if (val && typeof val === 'object') {
        throw new InvalidArgumentError(`invalid ${key} header`)
      }

      val = val != null ? `${val}` : ''

      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`)
      }

      return skipAppend ? val : `${key}: ${val}\r\n`
    }

    function processHeader(request, key, val, skipAppend = false) {
      if (val && typeof val === 'object' && !Array.isArray(val)) {
        throw new InvalidArgumentError(`invalid ${key} header`)
      } else if (val === undefined) {
        return
      }

      if (
        request.host === null &&
        key.length === 4 &&
        key.toLowerCase() === 'host'
      ) {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`)
        }
        // Consumed by Client
        request.host = val
      } else if (
        request.contentLength === null &&
        key.length === 14 &&
        key.toLowerCase() === 'content-length'
      ) {
        request.contentLength = parseInt(val, 10)
        if (!Number.isFinite(request.contentLength)) {
          throw new InvalidArgumentError('invalid content-length header')
        }
      } else if (
        request.contentType === null &&
        key.length === 12 &&
        key.toLowerCase() === 'content-type'
      ) {
        request.contentType = val
        if (skipAppend)
          request.headers[key] = processHeaderValue(key, val, skipAppend)
        else request.headers += processHeaderValue(key, val)
      } else if (
        key.length === 17 &&
        key.toLowerCase() === 'transfer-encoding'
      ) {
        throw new InvalidArgumentError('invalid transfer-encoding header')
      } else if (key.length === 10 && key.toLowerCase() === 'connection') {
        const value = typeof val === 'string' ? val.toLowerCase() : null
        if (value !== 'close' && value !== 'keep-alive') {
          throw new InvalidArgumentError('invalid connection header')
        } else if (value === 'close') {
          request.reset = true
        }
      } else if (key.length === 10 && key.toLowerCase() === 'keep-alive') {
        throw new InvalidArgumentError('invalid keep-alive header')
      } else if (key.length === 7 && key.toLowerCase() === 'upgrade') {
        throw new InvalidArgumentError('invalid upgrade header')
      } else if (key.length === 6 && key.toLowerCase() === 'expect') {
        throw new NotSupportedError('expect header not supported')
      } else if (tokenRegExp.exec(key) === null) {
        throw new InvalidArgumentError('invalid header key')
      } else {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            if (skipAppend) {
              if (request.headers[key])
                request.headers[key] += `,${processHeaderValue(
                  key,
                  val[i],
                  skipAppend
                )}`
              else
                request.headers[key] = processHeaderValue(
                  key,
                  val[i],
                  skipAppend
                )
            } else {
              request.headers += processHeaderValue(key, val[i])
            }
          }
        } else {
          if (skipAppend)
            request.headers[key] = processHeaderValue(key, val, skipAppend)
          else request.headers += processHeaderValue(key, val)
        }
      }
    }

    module.exports = Request

    /***/
  },

  /***/ 2785: /***/ (module) => {
    module.exports = {
      kClose: Symbol('close'),
      kDestroy: Symbol('destroy'),
      kDispatch: Symbol('dispatch'),
      kUrl: Symbol('url'),
      kWriting: Symbol('writing'),
      kResuming: Symbol('resuming'),
      kQueue: Symbol('queue'),
      kConnect: Symbol('connect'),
      kConnecting: Symbol('connecting'),
      kHeadersList: Symbol('headers list'),
      kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
      kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
      kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
      kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
      kKeepAlive: Symbol('keep alive'),
      kHeadersTimeout: Symbol('headers timeout'),
      kBodyTimeout: Symbol('body timeout'),
      kServerName: Symbol('server name'),
      kLocalAddress: Symbol('local address'),
      kHost: Symbol('host'),
      kNoRef: Symbol('no ref'),
      kBodyUsed: Symbol('used'),
      kRunning: Symbol('running'),
      kBlocking: Symbol('blocking'),
      kPending: Symbol('pending'),
      kSize: Symbol('size'),
      kBusy: Symbol('busy'),
      kQueued: Symbol('queued'),
      kFree: Symbol('free'),
      kConnected: Symbol('connected'),
      kClosed: Symbol('closed'),
      kNeedDrain: Symbol('need drain'),
      kReset: Symbol('reset'),
      kDestroyed: Symbol.for('nodejs.stream.destroyed'),
      kMaxHeadersSize: Symbol('max headers size'),
      kRunningIdx: Symbol('running index'),
      kPendingIdx: Symbol('pending index'),
      kError: Symbol('error'),
      kClients: Symbol('clients'),
      kClient: Symbol('client'),
      kParser: Symbol('parser'),
      kOnDestroyed: Symbol('destroy callbacks'),
      kPipelining: Symbol('pipelining'),
      kSocket: Symbol('socket'),
      kHostHeader: Symbol('host header'),
      kConnector: Symbol('connector'),
      kStrictContentLength: Symbol('strict content length'),
      kMaxRedirections: Symbol('maxRedirections'),
      kMaxRequests: Symbol('maxRequestsPerClient'),
      kProxy: Symbol('proxy agent options'),
      kCounter: Symbol('socket request counter'),
      kInterceptors: Symbol('dispatch interceptors'),
      kMaxResponseSize: Symbol('max response size'),
      kHTTP2Session: Symbol('http2Session'),
      kHTTP2SessionState: Symbol('http2Session state'),
      kHTTP2BuildRequest: Symbol('http2 build request'),
      kHTTP1BuildRequest: Symbol('http1 build request'),
      kHTTP2CopyHeaders: Symbol('http2 copy headers'),
      kHTTPConnVersion: Symbol('http connection version')
    }

    /***/
  },

  /***/ 3983: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const assert = __nccwpck_require__(9491)
    const { kDestroyed, kBodyUsed } = __nccwpck_require__(2785)
    const { IncomingMessage } = __nccwpck_require__(3685)
    const stream = __nccwpck_require__(2781)
    const net = __nccwpck_require__(1808)
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const { Blob } = __nccwpck_require__(4300)
    const nodeUtil = __nccwpck_require__(3837)
    const { stringify } = __nccwpck_require__(3477)

    const [nodeMajor, nodeMinor] = process.versions.node
      .split('.')
      .map((v) => Number(v))

    function nop() {}

    function isStream(obj) {
      return (
        obj &&
        typeof obj === 'object' &&
        typeof obj.pipe === 'function' &&
        typeof obj.on === 'function'
      )
    }

    // based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
    function isBlobLike(object) {
      return (
        (Blob && object instanceof Blob) ||
        (object &&
          typeof object === 'object' &&
          (typeof object.stream === 'function' ||
            typeof object.arrayBuffer === 'function') &&
          /^(Blob|File)$/.test(object[Symbol.toStringTag]))
      )
    }

    function buildURL(url, queryParams) {
      if (url.includes('?') || url.includes('#')) {
        throw new Error(
          'Query params cannot be passed when url already contains "?" or "#".'
        )
      }

      const stringified = stringify(queryParams)

      if (stringified) {
        url += '?' + stringified
      }

      return url
    }

    function parseURL(url) {
      if (typeof url === 'string') {
        url = new URL(url)

        if (!/^https?:/.test(url.origin || url.protocol)) {
          throw new InvalidArgumentError(
            'Invalid URL protocol: the URL must start with `http:` or `https:`.'
          )
        }

        return url
      }

      if (!url || typeof url !== 'object') {
        throw new InvalidArgumentError(
          'Invalid URL: The URL argument must be a non-null object.'
        )
      }

      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError(
          'Invalid URL protocol: the URL must start with `http:` or `https:`.'
        )
      }

      if (!(url instanceof URL)) {
        if (
          url.port != null &&
          url.port !== '' &&
          !Number.isFinite(parseInt(url.port))
        ) {
          throw new InvalidArgumentError(
            'Invalid URL: port must be a valid integer or a string representation of an integer.'
          )
        }

        if (url.path != null && typeof url.path !== 'string') {
          throw new InvalidArgumentError(
            'Invalid URL path: the path must be a string or null/undefined.'
          )
        }

        if (url.pathname != null && typeof url.pathname !== 'string') {
          throw new InvalidArgumentError(
            'Invalid URL pathname: the pathname must be a string or null/undefined.'
          )
        }

        if (url.hostname != null && typeof url.hostname !== 'string') {
          throw new InvalidArgumentError(
            'Invalid URL hostname: the hostname must be a string or null/undefined.'
          )
        }

        if (url.origin != null && typeof url.origin !== 'string') {
          throw new InvalidArgumentError(
            'Invalid URL origin: the origin must be a string or null/undefined.'
          )
        }

        const port =
          url.port != null ? url.port : url.protocol === 'https:' ? 443 : 80
        let origin =
          url.origin != null
            ? url.origin
            : `${url.protocol}//${url.hostname}:${port}`
        let path =
          url.path != null
            ? url.path
            : `${url.pathname || ''}${url.search || ''}`

        if (origin.endsWith('/')) {
          origin = origin.substring(0, origin.length - 1)
        }

        if (path && !path.startsWith('/')) {
          path = `/${path}`
        }
        // new URL(path, origin) is unsafe when `path` contains an absolute URL
        // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
        // If first parameter is a relative URL, second param is required, and will be used as the base URL.
        // If first parameter is an absolute URL, a given second param will be ignored.
        url = new URL(origin + path)
      }

      return url
    }

    function parseOrigin(url) {
      url = parseURL(url)

      if (url.pathname !== '/' || url.search || url.hash) {
        throw new InvalidArgumentError('invalid url')
      }

      return url
    }

    function getHostname(host) {
      if (host[0] === '[') {
        const idx = host.indexOf(']')

        assert(idx !== -1)
        return host.substr(1, idx - 1)
      }

      const idx = host.indexOf(':')
      if (idx === -1) return host

      return host.substr(0, idx)
    }

    // IP addresses are not valid server names per RFC6066
    // > Currently, the only server names supported are DNS hostnames
    function getServerName(host) {
      if (!host) {
        return null
      }

      assert.strictEqual(typeof host, 'string')

      const servername = getHostname(host)
      if (net.isIP(servername)) {
        return ''
      }

      return servername
    }

    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj))
    }

    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
    }

    function isIterable(obj) {
      return !!(
        obj != null &&
        (typeof obj[Symbol.iterator] === 'function' ||
          typeof obj[Symbol.asyncIterator] === 'function')
      )
    }

    function bodyLength(body) {
      if (body == null) {
        return 0
      } else if (isStream(body)) {
        const state = body._readableState
        return state &&
          state.objectMode === false &&
          state.ended === true &&
          Number.isFinite(state.length)
          ? state.length
          : null
      } else if (isBlobLike(body)) {
        return body.size != null ? body.size : null
      } else if (isBuffer(body)) {
        return body.byteLength
      }

      return null
    }

    function isDestroyed(stream) {
      return !stream || !!(stream.destroyed || stream[kDestroyed])
    }

    function isReadableAborted(stream) {
      const state = stream && stream._readableState
      return isDestroyed(stream) && state && !state.endEmitted
    }

    function destroy(stream, err) {
      if (stream == null || !isStream(stream) || isDestroyed(stream)) {
        return
      }

      if (typeof stream.destroy === 'function') {
        if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
          // See: https://github.com/nodejs/node/pull/38505/files
          stream.socket = null
        }

        stream.destroy(err)
      } else if (err) {
        process.nextTick(
          (stream, err) => {
            stream.emit('error', err)
          },
          stream,
          err
        )
      }

      if (stream.destroyed !== true) {
        stream[kDestroyed] = true
      }
    }

    const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/
    function parseKeepAliveTimeout(val) {
      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)
      return m ? parseInt(m[1], 10) * 1000 : null
    }

    function parseHeaders(headers, obj = {}) {
      // For H2 support
      if (!Array.isArray(headers)) return headers

      for (let i = 0; i < headers.length; i += 2) {
        const key = headers[i].toString().toLowerCase()
        let val = obj[key]

        if (!val) {
          if (Array.isArray(headers[i + 1])) {
            obj[key] = headers[i + 1]
          } else {
            obj[key] = headers[i + 1].toString('utf8')
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val]
            obj[key] = val
          }
          val.push(headers[i + 1].toString('utf8'))
        }
      }

      // See https://github.com/nodejs/node/pull/46528
      if ('content-length' in obj && 'content-disposition' in obj) {
        obj['content-disposition'] = Buffer.from(
          obj['content-disposition']
        ).toString('latin1')
      }

      return obj
    }

    function parseRawHeaders(headers) {
      const ret = []
      let hasContentLength = false
      let contentDispositionIdx = -1

      for (let n = 0; n < headers.length; n += 2) {
        const key = headers[n + 0].toString()
        const val = headers[n + 1].toString('utf8')

        if (
          key.length === 14 &&
          (key === 'content-length' || key.toLowerCase() === 'content-length')
        ) {
          ret.push(key, val)
          hasContentLength = true
        } else if (
          key.length === 19 &&
          (key === 'content-disposition' ||
            key.toLowerCase() === 'content-disposition')
        ) {
          contentDispositionIdx = ret.push(key, val) - 1
        } else {
          ret.push(key, val)
        }
      }

      // See https://github.com/nodejs/node/pull/46528
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(
          ret[contentDispositionIdx]
        ).toString('latin1')
      }

      return ret
    }

    function isBuffer(buffer) {
      // See, https://github.com/mcollina/undici/pull/319
      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
    }

    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== 'object') {
        throw new InvalidArgumentError('handler must be an object')
      }

      if (typeof handler.onConnect !== 'function') {
        throw new InvalidArgumentError('invalid onConnect method')
      }

      if (typeof handler.onError !== 'function') {
        throw new InvalidArgumentError('invalid onError method')
      }

      if (
        typeof handler.onBodySent !== 'function' &&
        handler.onBodySent !== undefined
      ) {
        throw new InvalidArgumentError('invalid onBodySent method')
      }

      if (upgrade || method === 'CONNECT') {
        if (typeof handler.onUpgrade !== 'function') {
          throw new InvalidArgumentError('invalid onUpgrade method')
        }
      } else {
        if (typeof handler.onHeaders !== 'function') {
          throw new InvalidArgumentError('invalid onHeaders method')
        }

        if (typeof handler.onData !== 'function') {
          throw new InvalidArgumentError('invalid onData method')
        }

        if (typeof handler.onComplete !== 'function') {
          throw new InvalidArgumentError('invalid onComplete method')
        }
      }
    }

    // A body is disturbed if it has been read from and it cannot
    // be re-used without losing state or data.
    function isDisturbed(body) {
      return !!(
        body &&
        (stream.isDisturbed
          ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
          : body[kBodyUsed] ||
            body.readableDidRead ||
            (body._readableState && body._readableState.dataEmitted) ||
            isReadableAborted(body))
      )
    }

    function isErrored(body) {
      return !!(
        body &&
        (stream.isErrored
          ? stream.isErrored(body)
          : /state: 'errored'/.test(nodeUtil.inspect(body)))
      )
    }

    function isReadable(body) {
      return !!(
        body &&
        (stream.isReadable
          ? stream.isReadable(body)
          : /state: 'readable'/.test(nodeUtil.inspect(body)))
      )
    }

    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      }
    }

    async function* convertIterableToBuffer(iterable) {
      for await (const chunk of iterable) {
        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)
      }
    }

    let ReadableStream
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream) {
        ReadableStream = __nccwpck_require__(5356).ReadableStream
      }

      if (ReadableStream.from) {
        return ReadableStream.from(convertIterableToBuffer(iterable))
      }

      let iterator
      return new ReadableStream(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]()
          },
          async pull(controller) {
            const { done, value } = await iterator.next()
            if (done) {
              queueMicrotask(() => {
                controller.close()
              })
            } else {
              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)
              controller.enqueue(new Uint8Array(buf))
            }
            return controller.desiredSize > 0
          },
          async cancel(reason) {
            await iterator.return()
          }
        },
        0
      )
    }

    // The chunk should be a FormData instance and contains
    // all the required methods.
    function isFormDataLike(object) {
      return (
        object &&
        typeof object === 'object' &&
        typeof object.append === 'function' &&
        typeof object.delete === 'function' &&
        typeof object.get === 'function' &&
        typeof object.getAll === 'function' &&
        typeof object.has === 'function' &&
        typeof object.set === 'function' &&
        object[Symbol.toStringTag] === 'FormData'
      )
    }

    function throwIfAborted(signal) {
      if (!signal) {
        return
      }
      if (typeof signal.throwIfAborted === 'function') {
        signal.throwIfAborted()
      } else {
        if (signal.aborted) {
          // DOMException not available < v17.0.0
          const err = new Error('The operation was aborted')
          err.name = 'AbortError'
          throw err
        }
      }
    }

    let events
    function addAbortListener(signal, listener) {
      if (typeof Symbol.dispose === 'symbol') {
        if (!events) {
          events = __nccwpck_require__(2361)
        }
        if (
          typeof events.addAbortListener === 'function' &&
          'aborted' in signal
        ) {
          return events.addAbortListener(signal, listener)
        }
      }
      if ('addEventListener' in signal) {
        signal.addEventListener('abort', listener, { once: true })
        return () => signal.removeEventListener('abort', listener)
      }
      signal.addListener('abort', listener)
      return () => signal.removeListener('abort', listener)
    }

    const hasToWellFormed = !!String.prototype.toWellFormed

    /**
     * @param {string} val
     */
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed()
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val)
      }

      return `${val}`
    }

    const kEnumerableProperty = Object.create(null)
    kEnumerableProperty.enumerable = true

    module.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable,
      isAsyncIterable,
      isDestroyed,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily:
        nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13)
    }

    /***/
  },

  /***/ 4839: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const Dispatcher = __nccwpck_require__(412)
    const { ClientDestroyedError, ClientClosedError, InvalidArgumentError } =
      __nccwpck_require__(8045)
    const { kDestroy, kClose, kDispatch, kInterceptors } =
      __nccwpck_require__(2785)

    const kDestroyed = Symbol('destroyed')
    const kClosed = Symbol('closed')
    const kOnDestroyed = Symbol('onDestroyed')
    const kOnClosed = Symbol('onClosed')
    const kInterceptedDispatch = Symbol('Intercepted Dispatch')

    class DispatcherBase extends Dispatcher {
      constructor() {
        super()

        this[kDestroyed] = false
        this[kOnDestroyed] = null
        this[kClosed] = false
        this[kOnClosed] = []
      }

      get destroyed() {
        return this[kDestroyed]
      }

      get closed() {
        return this[kClosed]
      }

      get interceptors() {
        return this[kInterceptors]
      }

      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i = newInterceptors.length - 1; i >= 0; i--) {
            const interceptor = this[kInterceptors][i]
            if (typeof interceptor !== 'function') {
              throw new InvalidArgumentError('interceptor must be an function')
            }
          }
        }

        this[kInterceptors] = newInterceptors
      }

      close(callback) {
        if (callback === undefined) {
          return new Promise((resolve, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve(data)
            })
          })
        }

        if (typeof callback !== 'function') {
          throw new InvalidArgumentError('invalid callback')
        }

        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null))
          return
        }

        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback)
          } else {
            queueMicrotask(() => callback(null, null))
          }
          return
        }

        this[kClosed] = true
        this[kOnClosed].push(callback)

        const onClosed = () => {
          const callbacks = this[kOnClosed]
          this[kOnClosed] = null
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null)
          }
        }

        // Should not error.
        this[kClose]()
          .then(() => this.destroy())
          .then(() => {
            queueMicrotask(onClosed)
          })
      }

      destroy(err, callback) {
        if (typeof err === 'function') {
          callback = err
          err = null
        }

        if (callback === undefined) {
          return new Promise((resolve, reject) => {
            this.destroy(err, (err, data) => {
              return err
                ? /* istanbul ignore next: should never error */ reject(err)
                : resolve(data)
            })
          })
        }

        if (typeof callback !== 'function') {
          throw new InvalidArgumentError('invalid callback')
        }

        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback)
          } else {
            queueMicrotask(() => callback(null, null))
          }
          return
        }

        if (!err) {
          err = new ClientDestroyedError()
        }

        this[kDestroyed] = true
        this[kOnDestroyed] = this[kOnDestroyed] || []
        this[kOnDestroyed].push(callback)

        const onDestroyed = () => {
          const callbacks = this[kOnDestroyed]
          this[kOnDestroyed] = null
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null)
          }
        }

        // Should not error.
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed)
        })
      }

      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch]
          return this[kDispatch](opts, handler)
        }

        let dispatch = this[kDispatch].bind(this)
        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
          dispatch = this[kInterceptors][i](dispatch)
        }
        this[kInterceptedDispatch] = dispatch
        return dispatch(opts, handler)
      }

      dispatch(opts, handler) {
        if (!handler || typeof handler !== 'object') {
          throw new InvalidArgumentError('handler must be an object')
        }

        try {
          if (!opts || typeof opts !== 'object') {
            throw new InvalidArgumentError('opts must be an object.')
          }

          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError()
          }

          if (this[kClosed]) {
            throw new ClientClosedError()
          }

          return this[kInterceptedDispatch](opts, handler)
        } catch (err) {
          if (typeof handler.onError !== 'function') {
            throw new InvalidArgumentError('invalid onError method')
          }

          handler.onError(err)

          return false
        }
      }
    }

    module.exports = DispatcherBase

    /***/
  },

  /***/ 412: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const EventEmitter = __nccwpck_require__(2361)

    class Dispatcher extends EventEmitter {
      dispatch() {
        throw new Error('not implemented')
      }

      close() {
        throw new Error('not implemented')
      }

      destroy() {
        throw new Error('not implemented')
      }
    }

    module.exports = Dispatcher

    /***/
  },

  /***/ 1472: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const Busboy = __nccwpck_require__(727)
    const util = __nccwpck_require__(3983)
    const {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = __nccwpck_require__(2538)
    const { FormData } = __nccwpck_require__(2015)
    const { kState } = __nccwpck_require__(5861)
    const { webidl } = __nccwpck_require__(1744)
    const { DOMException, structuredClone } = __nccwpck_require__(1037)
    const { Blob, File: NativeFile } = __nccwpck_require__(4300)
    const { kBodyUsed } = __nccwpck_require__(2785)
    const assert = __nccwpck_require__(9491)
    const { isErrored } = __nccwpck_require__(3983)
    const { isUint8Array, isArrayBuffer } = __nccwpck_require__(9830)
    const { File: UndiciFile } = __nccwpck_require__(8511)
    const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)

    let ReadableStream = globalThis.ReadableStream

    /** @type {globalThis['File']} */
    const File = NativeFile ?? UndiciFile
    const textEncoder = new TextEncoder()
    const textDecoder = new TextDecoder()

    // https://fetch.spec.whatwg.org/#concept-bodyinit-extract
    function extractBody(object, keepalive = false) {
      if (!ReadableStream) {
        ReadableStream = __nccwpck_require__(5356).ReadableStream
      }

      // 1. Let stream be null.
      let stream = null

      // 2. If object is a ReadableStream object, then set stream to object.
      if (object instanceof ReadableStream) {
        stream = object
      } else if (isBlobLike(object)) {
        // 3. Otherwise, if object is a Blob object, set stream to the
        //    result of running object’s get stream.
        stream = object.stream()
      } else {
        // 4. Otherwise, set stream to a new ReadableStream object, and set
        //    up stream.
        stream = new ReadableStream({
          async pull(controller) {
            controller.enqueue(
              typeof source === 'string' ? textEncoder.encode(source) : source
            )
            queueMicrotask(() => readableStreamClose(controller))
          },
          start() {},
          type: undefined
        })
      }

      // 5. Assert: stream is a ReadableStream object.
      assert(isReadableStreamLike(stream))

      // 6. Let action be null.
      let action = null

      // 7. Let source be null.
      let source = null

      // 8. Let length be null.
      let length = null

      // 9. Let type be null.
      let type = null

      // 10. Switch on object:
      if (typeof object === 'string') {
        // Set source to the UTF-8 encoding of object.
        // Note: setting source to a Uint8Array here breaks some mocking assumptions.
        source = object

        // Set type to `text/plain;charset=UTF-8`.
        type = 'text/plain;charset=UTF-8'
      } else if (object instanceof URLSearchParams) {
        // URLSearchParams

        // spec says to run application/x-www-form-urlencoded on body.list
        // this is implemented in Node.js as apart of an URLSearchParams instance toString method
        // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
        // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

        // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
        source = object.toString()

        // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
        type = 'application/x-www-form-urlencoded;charset=UTF-8'
      } else if (isArrayBuffer(object)) {
        // BufferSource/ArrayBuffer

        // Set source to a copy of the bytes held by object.
        source = new Uint8Array(object.slice())
      } else if (ArrayBuffer.isView(object)) {
        // BufferSource/ArrayBufferView

        // Set source to a copy of the bytes held by object.
        source = new Uint8Array(
          object.buffer.slice(
            object.byteOffset,
            object.byteOffset + object.byteLength
          )
        )
      } else if (util.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(
          Math.random() * 1e11
        )}`.padStart(11, '0')}`
        const prefix = `--${boundary}\r\nContent-Disposition: form-data`

        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
        const escape = (str) =>
          str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22')
        const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n')

        // Set action to this step: run the multipart/form-data
        // encoding algorithm, with object’s entry list and UTF-8.
        // - This ensures that the body is immutable and can't be changed afterwords
        // - That the content-length is calculated in advance.
        // - And that all parts are pre-encoded and ready to be sent.

        const blobParts = []
        const rn = new Uint8Array([13, 10]) // '\r\n'
        length = 0
        let hasUnknownSizeValue = false

        for (const [name, value] of object) {
          if (typeof value === 'string') {
            const chunk = textEncoder.encode(
              prefix +
                `; name="${escape(normalizeLinefeeds(name))}"` +
                `\r\n\r\n${normalizeLinefeeds(value)}\r\n`
            )
            blobParts.push(chunk)
            length += chunk.byteLength
          } else {
            const chunk = textEncoder.encode(
              `${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
                (value.name ? `; filename="${escape(value.name)}"` : '') +
                '\r\n' +
                `Content-Type: ${
                  value.type || 'application/octet-stream'
                }\r\n\r\n`
            )
            blobParts.push(chunk, value, rn)
            if (typeof value.size === 'number') {
              length += chunk.byteLength + value.size + rn.byteLength
            } else {
              hasUnknownSizeValue = true
            }
          }
        }

        const chunk = textEncoder.encode(`--${boundary}--`)
        blobParts.push(chunk)
        length += chunk.byteLength
        if (hasUnknownSizeValue) {
          length = null
        }

        // Set source to object.
        source = object

        action = async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream()
            } else {
              yield part
            }
          }
        }

        // Set type to `multipart/form-data; boundary=`,
        // followed by the multipart/form-data boundary string generated
        // by the multipart/form-data encoding algorithm.
        type = 'multipart/form-data; boundary=' + boundary
      } else if (isBlobLike(object)) {
        // Blob

        // Set source to object.
        source = object

        // Set length to object’s size.
        length = object.size

        // If object’s type attribute is not the empty byte sequence, set
        // type to its value.
        if (object.type) {
          type = object.type
        }
      } else if (typeof object[Symbol.asyncIterator] === 'function') {
        // If keepalive is true, then throw a TypeError.
        if (keepalive) {
          throw new TypeError('keepalive')
        }

        // If object is disturbed or locked, then throw a TypeError.
        if (util.isDisturbed(object) || object.locked) {
          throw new TypeError(
            'Response body object should not be disturbed or locked'
          )
        }

        stream =
          object instanceof ReadableStream ? object : ReadableStreamFrom(object)
      }

      // 11. If source is a byte sequence, then set action to a
      // step that returns source and length to source’s length.
      if (typeof source === 'string' || util.isBuffer(source)) {
        length = Buffer.byteLength(source)
      }

      // 12. If action is non-null, then run these steps in in parallel:
      if (action != null) {
        // Run action.
        let iterator
        stream = new ReadableStream({
          async start() {
            iterator = action(object)[Symbol.asyncIterator]()
          },
          async pull(controller) {
            const { value, done } = await iterator.next()
            if (done) {
              // When running action is done, close stream.
              queueMicrotask(() => {
                controller.close()
              })
            } else {
              // Whenever one or more bytes are available and stream is not errored,
              // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
              // bytes into stream.
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value))
              }
            }
            return controller.desiredSize > 0
          },
          async cancel(reason) {
            await iterator.return()
          },
          type: undefined
        })
      }

      // 13. Let body be a body whose stream is stream, source is source,
      // and length is length.
      const body = { stream, source, length }

      // 14. Return (body, type).
      return [body, type]
    }

    // https://fetch.spec.whatwg.org/#bodyinit-safely-extract
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream) {
        // istanbul ignore next
        ReadableStream = __nccwpck_require__(5356).ReadableStream
      }

      // To safely extract a body and a `Content-Type` value from
      // a byte sequence or BodyInit object object, run these steps:

      // 1. If object is a ReadableStream object, then:
      if (object instanceof ReadableStream) {
        // Assert: object is neither disturbed nor locked.
        // istanbul ignore next
        assert(!util.isDisturbed(object), 'The body has already been consumed.')
        // istanbul ignore next
        assert(!object.locked, 'The stream is locked.')
      }

      // 2. Return the results of extracting object.
      return extractBody(object, keepalive)
    }

    function cloneBody(body) {
      // To clone a body body, run these steps:

      // https://fetch.spec.whatwg.org/#concept-body-clone

      // 1. Let « out1, out2 » be the result of teeing body’s stream.
      const [out1, out2] = body.stream.tee()
      const out2Clone = structuredClone(out2, { transfer: [out2] })
      // This, for whatever reasons, unrefs out2Clone which allows
      // the process to exit by itself.
      const [, finalClone] = out2Clone.tee()

      // 2. Set body’s stream to out1.
      body.stream = out1

      // 3. Return a body whose stream is out2 and other members are copied from body.
      return {
        stream: finalClone,
        length: body.length,
        source: body.source
      }
    }

    async function* consumeBody(body) {
      if (body) {
        if (isUint8Array(body)) {
          yield body
        } else {
          const stream = body.stream

          if (util.isDisturbed(stream)) {
            throw new TypeError('The body has already been consumed.')
          }

          if (stream.locked) {
            throw new TypeError('The stream is locked.')
          }

          // Compat.
          stream[kBodyUsed] = true

          yield* stream
        }
      }
    }

    function throwIfAborted(state) {
      if (state.aborted) {
        throw new DOMException('The operation was aborted.', 'AbortError')
      }
    }

    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          // The blob() method steps are to return the result of
          // running consume body with this and the following step
          // given a byte sequence bytes: return a Blob whose
          // contents are bytes and whose type attribute is this’s
          // MIME type.
          return specConsumeBody(
            this,
            (bytes) => {
              let mimeType = bodyMimeType(this)

              if (mimeType === 'failure') {
                mimeType = ''
              } else if (mimeType) {
                mimeType = serializeAMimeType(mimeType)
              }

              // Return a Blob whose contents are bytes and type attribute
              // is mimeType.
              return new Blob([bytes], { type: mimeType })
            },
            instance
          )
        },

        arrayBuffer() {
          // The arrayBuffer() method steps are to return the result
          // of running consume body with this and the following step
          // given a byte sequence bytes: return a new ArrayBuffer
          // whose contents are bytes.
          return specConsumeBody(
            this,
            (bytes) => {
              return new Uint8Array(bytes).buffer
            },
            instance
          )
        },

        text() {
          // The text() method steps are to return the result of running
          // consume body with this and UTF-8 decode.
          return specConsumeBody(this, utf8DecodeBytes, instance)
        },

        json() {
          // The json() method steps are to return the result of running
          // consume body with this and parse JSON from bytes.
          return specConsumeBody(this, parseJSONFromBytes, instance)
        },

        async formData() {
          webidl.brandCheck(this, instance)

          throwIfAborted(this[kState])

          const contentType = this.headers.get('Content-Type')

          // If mimeType’s essence is "multipart/form-data", then:
          if (/multipart\/form-data/.test(contentType)) {
            const headers = {}
            for (const [key, value] of this.headers)
              headers[key.toLowerCase()] = value

            const responseFormData = new FormData()

            let busboy

            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              })
            } catch (err) {
              throw new DOMException(`${err}`, 'AbortError')
            }

            busboy.on('field', (name, value) => {
              responseFormData.append(name, value)
            })
            busboy.on('file', (name, value, filename, encoding, mimeType) => {
              const chunks = []

              if (
                encoding === 'base64' ||
                encoding.toLowerCase() === 'base64'
              ) {
                let base64chunk = ''

                value.on('data', (chunk) => {
                  base64chunk += chunk.toString().replace(/[\r\n]/gm, '')

                  const end = base64chunk.length - (base64chunk.length % 4)
                  chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))

                  base64chunk = base64chunk.slice(end)
                })
                value.on('end', () => {
                  chunks.push(Buffer.from(base64chunk, 'base64'))
                  responseFormData.append(
                    name,
                    new File(chunks, filename, { type: mimeType })
                  )
                })
              } else {
                value.on('data', (chunk) => {
                  chunks.push(chunk)
                })
                value.on('end', () => {
                  responseFormData.append(
                    name,
                    new File(chunks, filename, { type: mimeType })
                  )
                })
              }
            })

            const busboyResolve = new Promise((resolve, reject) => {
              busboy.on('finish', resolve)
              busboy.on('error', (err) => reject(new TypeError(err)))
            })

            if (this.body !== null)
              for await (const chunk of consumeBody(this[kState].body))
                busboy.write(chunk)
            busboy.end()
            await busboyResolve

            return responseFormData
          } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
            // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

            // 1. Let entries be the result of parsing bytes.
            let entries
            try {
              let text = ''
              // application/x-www-form-urlencoded parser will keep the BOM.
              // https://url.spec.whatwg.org/#concept-urlencoded-parser
              // Note that streaming decoder is stateful and cannot be reused
              const streamingDecoder = new TextDecoder('utf-8', {
                ignoreBOM: true
              })

              for await (const chunk of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk)) {
                  throw new TypeError('Expected Uint8Array chunk')
                }
                text += streamingDecoder.decode(chunk, { stream: true })
              }
              text += streamingDecoder.decode()
              entries = new URLSearchParams(text)
            } catch (err) {
              // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
              // 2. If entries is failure, then throw a TypeError.
              throw Object.assign(new TypeError(), { cause: err })
            }

            // 3. Return a new FormData object whose entries are entries.
            const formData = new FormData()
            for (const [name, value] of entries) {
              formData.append(name, value)
            }
            return formData
          } else {
            // Wait a tick before checking if the request has been aborted.
            // Otherwise, a TypeError can be thrown when an AbortError should.
            await Promise.resolve()

            throwIfAborted(this[kState])

            // Otherwise, throw a TypeError.
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: 'Could not parse content as FormData.'
            })
          }
        }
      }

      return methods
    }

    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype))
    }

    /**
     * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
     * @param {Response|Request} object
     * @param {(value: unknown) => unknown} convertBytesToJSValue
     * @param {Response|Request} instance
     */
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance)

      throwIfAborted(object[kState])

      // 1. If object is unusable, then return a promise rejected
      //    with a TypeError.
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError('Body is unusable')
      }

      // 2. Let promise be a new promise.
      const promise = createDeferredPromise()

      // 3. Let errorSteps given error be to reject promise with error.
      const errorSteps = (error) => promise.reject(error)

      // 4. Let successSteps given a byte sequence data be to resolve
      //    promise with the result of running convertBytesToJSValue
      //    with data. If that threw an exception, then run errorSteps
      //    with that exception.
      const successSteps = (data) => {
        try {
          promise.resolve(convertBytesToJSValue(data))
        } catch (e) {
          errorSteps(e)
        }
      }

      // 5. If object’s body is null, then run successSteps with an
      //    empty byte sequence.
      if (object[kState].body == null) {
        successSteps(new Uint8Array())
        return promise.promise
      }

      // 6. Otherwise, fully read object’s body given successSteps,
      //    errorSteps, and object’s relevant global object.
      await fullyReadBody(object[kState].body, successSteps, errorSteps)

      // 7. Return promise.
      return promise.promise
    }

    // https://fetch.spec.whatwg.org/#body-unusable
    function bodyUnusable(body) {
      // An object including the Body interface mixin is
      // said to be unusable if its body is non-null and
      // its body’s stream is disturbed or locked.
      return (
        body != null && (body.stream.locked || util.isDisturbed(body.stream))
      )
    }

    /**
     * @see https://encoding.spec.whatwg.org/#utf-8-decode
     * @param {Buffer} buffer
     */
    function utf8DecodeBytes(buffer) {
      if (buffer.length === 0) {
        return ''
      }

      // 1. Let buffer be the result of peeking three bytes from
      //    ioQueue, converted to a byte sequence.

      // 2. If buffer is 0xEF 0xBB 0xBF, then read three
      //    bytes from ioQueue. (Do nothing with those bytes.)
      if (buffer[0] === 0xef && buffer[1] === 0xbb && buffer[2] === 0xbf) {
        buffer = buffer.subarray(3)
      }

      // 3. Process a queue with an instance of UTF-8’s
      //    decoder, ioQueue, output, and "replacement".
      const output = textDecoder.decode(buffer)

      // 4. Return output.
      return output
    }

    /**
     * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
     * @param {Uint8Array} bytes
     */
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes))
    }

    /**
     * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
     * @param {import('./response').Response|import('./request').Request} object
     */
    function bodyMimeType(object) {
      const { headersList } = object[kState]
      const contentType = headersList.get('content-type')

      if (contentType === null) {
        return 'failure'
      }

      return parseMIMEType(contentType)
    }

    module.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    }

    /***/
  },

  /***/ 1037: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { MessageChannel, receiveMessageOnPort } = __nccwpck_require__(1267)

    const corsSafeListedMethods = ['GET', 'HEAD', 'POST']
    const corsSafeListedMethodsSet = new Set(corsSafeListedMethods)

    const nullBodyStatus = [101, 204, 205, 304]

    const redirectStatus = [301, 302, 303, 307, 308]
    const redirectStatusSet = new Set(redirectStatus)

    // https://fetch.spec.whatwg.org/#block-bad-port
    const badPorts = [
      '1',
      '7',
      '9',
      '11',
      '13',
      '15',
      '17',
      '19',
      '20',
      '21',
      '22',
      '23',
      '25',
      '37',
      '42',
      '43',
      '53',
      '69',
      '77',
      '79',
      '87',
      '95',
      '101',
      '102',
      '103',
      '104',
      '109',
      '110',
      '111',
      '113',
      '115',
      '117',
      '119',
      '123',
      '135',
      '137',
      '139',
      '143',
      '161',
      '179',
      '389',
      '427',
      '465',
      '512',
      '513',
      '514',
      '515',
      '526',
      '530',
      '531',
      '532',
      '540',
      '548',
      '554',
      '556',
      '563',
      '587',
      '601',
      '636',
      '989',
      '990',
      '993',
      '995',
      '1719',
      '1720',
      '1723',
      '2049',
      '3659',
      '4045',
      '5060',
      '5061',
      '6000',
      '6566',
      '6665',
      '6666',
      '6667',
      '6668',
      '6669',
      '6697',
      '10080'
    ]

    const badPortsSet = new Set(badPorts)

    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
    const referrerPolicy = [
      '',
      'no-referrer',
      'no-referrer-when-downgrade',
      'same-origin',
      'origin',
      'strict-origin',
      'origin-when-cross-origin',
      'strict-origin-when-cross-origin',
      'unsafe-url'
    ]
    const referrerPolicySet = new Set(referrerPolicy)

    const requestRedirect = ['follow', 'manual', 'error']

    const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']
    const safeMethodsSet = new Set(safeMethods)

    const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']

    const requestCredentials = ['omit', 'same-origin', 'include']

    const requestCache = [
      'default',
      'no-store',
      'reload',
      'no-cache',
      'force-cache',
      'only-if-cached'
    ]

    // https://fetch.spec.whatwg.org/#request-body-header-name
    const requestBodyHeader = [
      'content-encoding',
      'content-language',
      'content-location',
      'content-type',
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      'content-length'
    ]

    // https://fetch.spec.whatwg.org/#enumdef-requestduplex
    const requestDuplex = ['half']

    // http://fetch.spec.whatwg.org/#forbidden-method
    const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']
    const forbiddenMethodsSet = new Set(forbiddenMethods)

    const subresource = [
      'audio',
      'audioworklet',
      'font',
      'image',
      'manifest',
      'paintworklet',
      'script',
      'style',
      'track',
      'video',
      'xslt',
      ''
    ]
    const subresourceSet = new Set(subresource)

    /** @type {globalThis['DOMException']} */
    const DOMException =
      globalThis.DOMException ??
      (() => {
        // DOMException was only made a global in Node v17.0.0,
        // but fetch supports >= v16.8.
        try {
          atob('~')
        } catch (err) {
          return Object.getPrototypeOf(err).constructor
        }
      })()

    let channel

    /** @type {globalThis['structuredClone']} */
    const structuredClone =
      globalThis.structuredClone ??
      // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
      // structuredClone was added in v17.0.0, but fetch supports v16.8
      function structuredClone(value, options = undefined) {
        if (arguments.length === 0) {
          throw new TypeError('missing argument')
        }

        if (!channel) {
          channel = new MessageChannel()
        }
        channel.port1.unref()
        channel.port2.unref()
        channel.port1.postMessage(value, options?.transfer)
        return receiveMessageOnPort(channel.port2).message
      }

    module.exports = {
      DOMException,
      structuredClone,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    }

    /***/
  },

  /***/ 685: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const assert = __nccwpck_require__(9491)
    const { atob } = __nccwpck_require__(4300)
    const { isomorphicDecode } = __nccwpck_require__(2538)

    const encoder = new TextEncoder()

    /**
     * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
     */
    const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/
    const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
    /**
     * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
     */
    const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line

    // https://fetch.spec.whatwg.org/#data-url-processor
    /** @param {URL} dataURL */
    function dataURLProcessor(dataURL) {
      // 1. Assert: dataURL’s scheme is "data".
      assert(dataURL.protocol === 'data:')

      // 2. Let input be the result of running the URL
      // serializer on dataURL with exclude fragment
      // set to true.
      let input = URLSerializer(dataURL, true)

      // 3. Remove the leading "data:" string from input.
      input = input.slice(5)

      // 4. Let position point at the start of input.
      const position = { position: 0 }

      // 5. Let mimeType be the result of collecting a
      // sequence of code points that are not equal
      // to U+002C (,), given position.
      let mimeType = collectASequenceOfCodePointsFast(',', input, position)

      // 6. Strip leading and trailing ASCII whitespace
      // from mimeType.
      // Undici implementation note: we need to store the
      // length because if the mimetype has spaces removed,
      // the wrong amount will be sliced from the input in
      // step #9
      const mimeTypeLength = mimeType.length
      mimeType = removeASCIIWhitespace(mimeType, true, true)

      // 7. If position is past the end of input, then
      // return failure
      if (position.position >= input.length) {
        return 'failure'
      }

      // 8. Advance position by 1.
      position.position++

      // 9. Let encodedBody be the remainder of input.
      const encodedBody = input.slice(mimeTypeLength + 1)

      // 10. Let body be the percent-decoding of encodedBody.
      let body = stringPercentDecode(encodedBody)

      // 11. If mimeType ends with U+003B (;), followed by
      // zero or more U+0020 SPACE, followed by an ASCII
      // case-insensitive match for "base64", then:
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        // 1. Let stringBody be the isomorphic decode of body.
        const stringBody = isomorphicDecode(body)

        // 2. Set body to the forgiving-base64 decode of
        // stringBody.
        body = forgivingBase64(stringBody)

        // 3. If body is failure, then return failure.
        if (body === 'failure') {
          return 'failure'
        }

        // 4. Remove the last 6 code points from mimeType.
        mimeType = mimeType.slice(0, -6)

        // 5. Remove trailing U+0020 SPACE code points from mimeType,
        // if any.
        mimeType = mimeType.replace(/(\u0020)+$/, '')

        // 6. Remove the last U+003B (;) code point from mimeType.
        mimeType = mimeType.slice(0, -1)
      }

      // 12. If mimeType starts with U+003B (;), then prepend
      // "text/plain" to mimeType.
      if (mimeType.startsWith(';')) {
        mimeType = 'text/plain' + mimeType
      }

      // 13. Let mimeTypeRecord be the result of parsing
      // mimeType.
      let mimeTypeRecord = parseMIMEType(mimeType)

      // 14. If mimeTypeRecord is failure, then set
      // mimeTypeRecord to text/plain;charset=US-ASCII.
      if (mimeTypeRecord === 'failure') {
        mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')
      }

      // 15. Return a new data: URL struct whose MIME
      // type is mimeTypeRecord and body is body.
      // https://fetch.spec.whatwg.org/#data-url-struct
      return { mimeType: mimeTypeRecord, body }
    }

    // https://url.spec.whatwg.org/#concept-url-serializer
    /**
     * @param {URL} url
     * @param {boolean} excludeFragment
     */
    function URLSerializer(url, excludeFragment = false) {
      const href = url.href

      if (!excludeFragment) {
        return href
      }

      const hash = href.lastIndexOf('#')
      if (hash === -1) {
        return href
      }
      return href.slice(0, hash)
    }

    // https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
    /**
     * @param {(char: string) => boolean} condition
     * @param {string} input
     * @param {{ position: number }} position
     */
    function collectASequenceOfCodePoints(condition, input, position) {
      // 1. Let result be the empty string.
      let result = ''

      // 2. While position doesn’t point past the end of input and the
      // code point at position within input meets the condition condition:
      while (
        position.position < input.length &&
        condition(input[position.position])
      ) {
        // 1. Append that code point to the end of result.
        result += input[position.position]

        // 2. Advance position by 1.
        position.position++
      }

      // 3. Return result.
      return result
    }

    /**
     * A faster collectASequenceOfCodePoints that only works when comparing a single character.
     * @param {string} char
     * @param {string} input
     * @param {{ position: number }} position
     */
    function collectASequenceOfCodePointsFast(char, input, position) {
      const idx = input.indexOf(char, position.position)
      const start = position.position

      if (idx === -1) {
        position.position = input.length
        return input.slice(start)
      }

      position.position = idx
      return input.slice(start, position.position)
    }

    // https://url.spec.whatwg.org/#string-percent-decode
    /** @param {string} input */
    function stringPercentDecode(input) {
      // 1. Let bytes be the UTF-8 encoding of input.
      const bytes = encoder.encode(input)

      // 2. Return the percent-decoding of bytes.
      return percentDecode(bytes)
    }

    // https://url.spec.whatwg.org/#percent-decode
    /** @param {Uint8Array} input */
    function percentDecode(input) {
      // 1. Let output be an empty byte sequence.
      /** @type {number[]} */
      const output = []

      // 2. For each byte byte in input:
      for (let i = 0; i < input.length; i++) {
        const byte = input[i]

        // 1. If byte is not 0x25 (%), then append byte to output.
        if (byte !== 0x25) {
          output.push(byte)

          // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
          // after byte in input are not in the ranges
          // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
          // and 0x61 (a) to 0x66 (f), all inclusive, append byte
          // to output.
        } else if (
          byte === 0x25 &&
          !/^[0-9A-Fa-f]{2}$/i.test(
            String.fromCharCode(input[i + 1], input[i + 2])
          )
        ) {
          output.push(0x25)

          // 3. Otherwise:
        } else {
          // 1. Let bytePoint be the two bytes after byte in input,
          // decoded, and then interpreted as hexadecimal number.
          const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])
          const bytePoint = Number.parseInt(nextTwoBytes, 16)

          // 2. Append a byte whose value is bytePoint to output.
          output.push(bytePoint)

          // 3. Skip the next two bytes in input.
          i += 2
        }
      }

      // 3. Return output.
      return Uint8Array.from(output)
    }

    // https://mimesniff.spec.whatwg.org/#parse-a-mime-type
    /** @param {string} input */
    function parseMIMEType(input) {
      // 1. Remove any leading and trailing HTTP whitespace
      // from input.
      input = removeHTTPWhitespace(input, true, true)

      // 2. Let position be a position variable for input,
      // initially pointing at the start of input.
      const position = { position: 0 }

      // 3. Let type be the result of collecting a sequence
      // of code points that are not U+002F (/) from
      // input, given position.
      const type = collectASequenceOfCodePointsFast('/', input, position)

      // 4. If type is the empty string or does not solely
      // contain HTTP token code points, then return failure.
      // https://mimesniff.spec.whatwg.org/#http-token-code-point
      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
        return 'failure'
      }

      // 5. If position is past the end of input, then return
      // failure
      if (position.position > input.length) {
        return 'failure'
      }

      // 6. Advance position by 1. (This skips past U+002F (/).)
      position.position++

      // 7. Let subtype be the result of collecting a sequence of
      // code points that are not U+003B (;) from input, given
      // position.
      let subtype = collectASequenceOfCodePointsFast(';', input, position)

      // 8. Remove any trailing HTTP whitespace from subtype.
      subtype = removeHTTPWhitespace(subtype, false, true)

      // 9. If subtype is the empty string or does not solely
      // contain HTTP token code points, then return failure.
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return 'failure'
      }

      const typeLowercase = type.toLowerCase()
      const subtypeLowercase = subtype.toLowerCase()

      // 10. Let mimeType be a new MIME type record whose type
      // is type, in ASCII lowercase, and subtype is subtype,
      // in ASCII lowercase.
      // https://mimesniff.spec.whatwg.org/#mime-type
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      }

      // 11. While position is not past the end of input:
      while (position.position < input.length) {
        // 1. Advance position by 1. (This skips past U+003B (;).)
        position.position++

        // 2. Collect a sequence of code points that are HTTP
        // whitespace from input given position.
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position
        )

        // 3. Let parameterName be the result of collecting a
        // sequence of code points that are not U+003B (;)
        // or U+003D (=) from input, given position.
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ';' && char !== '=',
          input,
          position
        )

        // 4. Set parameterName to parameterName, in ASCII
        // lowercase.
        parameterName = parameterName.toLowerCase()

        // 5. If position is not past the end of input, then:
        if (position.position < input.length) {
          // 1. If the code point at position within input is
          // U+003B (;), then continue.
          if (input[position.position] === ';') {
            continue
          }

          // 2. Advance position by 1. (This skips past U+003D (=).)
          position.position++
        }

        // 6. If position is past the end of input, then break.
        if (position.position > input.length) {
          break
        }

        // 7. Let parameterValue be null.
        let parameterValue = null

        // 8. If the code point at position within input is
        // U+0022 ("), then:
        if (input[position.position] === '"') {
          // 1. Set parameterValue to the result of collecting
          // an HTTP quoted string from input, given position
          // and the extract-value flag.
          parameterValue = collectAnHTTPQuotedString(input, position, true)

          // 2. Collect a sequence of code points that are not
          // U+003B (;) from input, given position.
          collectASequenceOfCodePointsFast(';', input, position)

          // 9. Otherwise:
        } else {
          // 1. Set parameterValue to the result of collecting
          // a sequence of code points that are not U+003B (;)
          // from input, given position.
          parameterValue = collectASequenceOfCodePointsFast(
            ';',
            input,
            position
          )

          // 2. Remove any trailing HTTP whitespace from parameterValue.
          parameterValue = removeHTTPWhitespace(parameterValue, false, true)

          // 3. If parameterValue is the empty string, then continue.
          if (parameterValue.length === 0) {
            continue
          }
        }

        // 10. If all of the following are true
        // - parameterName is not the empty string
        // - parameterName solely contains HTTP token code points
        // - parameterValue solely contains HTTP quoted-string token code points
        // - mimeType’s parameters[parameterName] does not exist
        // then set mimeType’s parameters[parameterName] to parameterValue.
        if (
          parameterName.length !== 0 &&
          HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
          (parameterValue.length === 0 ||
            HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
          !mimeType.parameters.has(parameterName)
        ) {
          mimeType.parameters.set(parameterName, parameterValue)
        }
      }

      // 12. Return mimeType.
      return mimeType
    }

    // https://infra.spec.whatwg.org/#forgiving-base64-decode
    /** @param {string} data */
    function forgivingBase64(data) {
      // 1. Remove all ASCII whitespace from data.
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '') // eslint-disable-line

      // 2. If data’s code point length divides by 4 leaving
      // no remainder, then:
      if (data.length % 4 === 0) {
        // 1. If data ends with one or two U+003D (=) code points,
        // then remove them from data.
        data = data.replace(/=?=$/, '')
      }

      // 3. If data’s code point length divides by 4 leaving
      // a remainder of 1, then return failure.
      if (data.length % 4 === 1) {
        return 'failure'
      }

      // 4. If data contains a code point that is not one of
      //  U+002B (+)
      //  U+002F (/)
      //  ASCII alphanumeric
      // then return failure.
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return 'failure'
      }

      const binary = atob(data)
      const bytes = new Uint8Array(binary.length)

      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte)
      }

      return bytes
    }

    // https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
    // tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
    /**
     * @param {string} input
     * @param {{ position: number }} position
     * @param {boolean?} extractValue
     */
    function collectAnHTTPQuotedString(input, position, extractValue) {
      // 1. Let positionStart be position.
      const positionStart = position.position

      // 2. Let value be the empty string.
      let value = ''

      // 3. Assert: the code point at position within input
      // is U+0022 (").
      assert(input[position.position] === '"')

      // 4. Advance position by 1.
      position.position++

      // 5. While true:
      while (true) {
        // 1. Append the result of collecting a sequence of code points
        // that are not U+0022 (") or U+005C (\) from input, given
        // position, to value.
        value += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== '\\',
          input,
          position
        )

        // 2. If position is past the end of input, then break.
        if (position.position >= input.length) {
          break
        }

        // 3. Let quoteOrBackslash be the code point at position within
        // input.
        const quoteOrBackslash = input[position.position]

        // 4. Advance position by 1.
        position.position++

        // 5. If quoteOrBackslash is U+005C (\), then:
        if (quoteOrBackslash === '\\') {
          // 1. If position is past the end of input, then append
          // U+005C (\) to value and break.
          if (position.position >= input.length) {
            value += '\\'
            break
          }

          // 2. Append the code point at position within input to value.
          value += input[position.position]

          // 3. Advance position by 1.
          position.position++

          // 6. Otherwise:
        } else {
          // 1. Assert: quoteOrBackslash is U+0022 (").
          assert(quoteOrBackslash === '"')

          // 2. Break.
          break
        }
      }

      // 6. If the extract-value flag is set, then return value.
      if (extractValue) {
        return value
      }

      // 7. Return the code points from positionStart to position,
      // inclusive, within input.
      return input.slice(positionStart, position.position)
    }

    /**
     * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
     */
    function serializeAMimeType(mimeType) {
      assert(mimeType !== 'failure')
      const { parameters, essence } = mimeType

      // 1. Let serialization be the concatenation of mimeType’s
      //    type, U+002F (/), and mimeType’s subtype.
      let serialization = essence

      // 2. For each name → value of mimeType’s parameters:
      for (let [name, value] of parameters.entries()) {
        // 1. Append U+003B (;) to serialization.
        serialization += ';'

        // 2. Append name to serialization.
        serialization += name

        // 3. Append U+003D (=) to serialization.
        serialization += '='

        // 4. If value does not solely contain HTTP token code
        //    points or value is the empty string, then:
        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
          // 1. Precede each occurence of U+0022 (") or
          //    U+005C (\) in value with U+005C (\).
          value = value.replace(/(\\|")/g, '\\$1')

          // 2. Prepend U+0022 (") to value.
          value = '"' + value

          // 3. Append U+0022 (") to value.
          value += '"'
        }

        // 5. Append value to serialization.
        serialization += value
      }

      // 3. Return serialization.
      return serialization
    }

    /**
     * @see https://fetch.spec.whatwg.org/#http-whitespace
     * @param {string} char
     */
    function isHTTPWhiteSpace(char) {
      return char === '\r' || char === '\n' || char === '\t' || char === ' '
    }

    /**
     * @see https://fetch.spec.whatwg.org/#http-whitespace
     * @param {string} str
     */
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0
      let trail = str.length - 1

      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
      }

      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
      }

      return str.slice(lead, trail + 1)
    }

    /**
     * @see https://infra.spec.whatwg.org/#ascii-whitespace
     * @param {string} char
     */
    function isASCIIWhitespace(char) {
      return (
        char === '\r' ||
        char === '\n' ||
        char === '\t' ||
        char === '\f' ||
        char === ' '
      )
    }

    /**
     * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
     */
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0
      let trail = str.length - 1

      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
      }

      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
      }

      return str.slice(lead, trail + 1)
    }

    module.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    }

    /***/
  },

  /***/ 8511: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { Blob, File: NativeFile } = __nccwpck_require__(4300)
    const { types } = __nccwpck_require__(3837)
    const { kState } = __nccwpck_require__(5861)
    const { isBlobLike } = __nccwpck_require__(2538)
    const { webidl } = __nccwpck_require__(1744)
    const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(685)
    const { kEnumerableProperty } = __nccwpck_require__(3983)
    const encoder = new TextEncoder()

    class File extends Blob {
      constructor(fileBits, fileName, options = {}) {
        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:
        webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })

        fileBits = webidl.converters['sequence<BlobPart>'](fileBits)
        fileName = webidl.converters.USVString(fileName)
        options = webidl.converters.FilePropertyBag(options)

        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.
        // Note: Blob handles this for us

        // 2. Let n be the fileName argument to the constructor.
        const n = fileName

        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:

        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    2. Convert every character in t to ASCII lowercase.
        let t = options.type
        let d

        // eslint-disable-next-line no-labels
        substep: {
          if (t) {
            t = parseMIMEType(t)

            if (t === 'failure') {
              t = ''
              // eslint-disable-next-line no-labels
              break substep
            }

            t = serializeAMimeType(t).toLowerCase()
          }

          //    3. If the lastModified member is provided, let d be set to the
          //    lastModified dictionary member. If it is not provided, set d to the
          //    current date and time represented as the number of milliseconds since
          //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
          d = options.lastModified
        }

        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.

        super(processBlobParts(fileBits, options), { type: t })
        this[kState] = {
          name: n,
          lastModified: d,
          type: t
        }
      }

      get name() {
        webidl.brandCheck(this, File)

        return this[kState].name
      }

      get lastModified() {
        webidl.brandCheck(this, File)

        return this[kState].lastModified
      }

      get type() {
        webidl.brandCheck(this, File)

        return this[kState].type
      }
    }

    class FileLike {
      constructor(blobLike, fileName, options = {}) {
        // TODO: argument idl type check

        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:

        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.

        // 2. Let n be the fileName argument to the constructor.
        const n = fileName

        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:

        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    TODO
        const t = options.type

        //    2. Convert every character in t to ASCII lowercase.
        //    TODO

        //    3. If the lastModified member is provided, let d be set to the
        //    lastModified dictionary member. If it is not provided, set d to the
        //    current date and time represented as the number of milliseconds since
        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
        const d = options.lastModified ?? Date.now()

        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.

        this[kState] = {
          blobLike,
          name: n,
          type: t,
          lastModified: d
        }
      }

      stream(...args) {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.stream(...args)
      }

      arrayBuffer(...args) {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.arrayBuffer(...args)
      }

      slice(...args) {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.slice(...args)
      }

      text(...args) {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.text(...args)
      }

      get size() {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.size
      }

      get type() {
        webidl.brandCheck(this, FileLike)

        return this[kState].blobLike.type
      }

      get name() {
        webidl.brandCheck(this, FileLike)

        return this[kState].name
      }

      get lastModified() {
        webidl.brandCheck(this, FileLike)

        return this[kState].lastModified
      }

      get [Symbol.toStringTag]() {
        return 'File'
      }
    }

    Object.defineProperties(File.prototype, {
      [Symbol.toStringTag]: {
        value: 'File',
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    })

    webidl.converters.Blob = webidl.interfaceConverter(Blob)

    webidl.converters.BlobPart = function (V, opts) {
      if (webidl.util.Type(V) === 'Object') {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false })
        }

        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V, opts)
        }
      }

      return webidl.converters.USVString(V, opts)
    }

    webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    )

    // https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: 'lastModified',
        converter: webidl.converters['long long'],
        get defaultValue() {
          return Date.now()
        }
      },
      {
        key: 'type',
        converter: webidl.converters.DOMString,
        defaultValue: ''
      },
      {
        key: 'endings',
        converter: (value) => {
          value = webidl.converters.DOMString(value)
          value = value.toLowerCase()

          if (value !== 'native') {
            value = 'transparent'
          }

          return value
        },
        defaultValue: 'transparent'
      }
    ])

    /**
     * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
     * @param {(NodeJS.TypedArray|Blob|string)[]} parts
     * @param {{ type: string, endings: string }} options
     */
    function processBlobParts(parts, options) {
      // 1. Let bytes be an empty sequence of bytes.
      /** @type {NodeJS.TypedArray[]} */
      const bytes = []

      // 2. For each element in parts:
      for (const element of parts) {
        // 1. If element is a USVString, run the following substeps:
        if (typeof element === 'string') {
          // 1. Let s be element.
          let s = element

          // 2. If the endings member of options is "native", set s
          //    to the result of converting line endings to native
          //    of element.
          if (options.endings === 'native') {
            s = convertLineEndingsNative(s)
          }

          // 3. Append the result of UTF-8 encoding s to bytes.
          bytes.push(encoder.encode(s))
        } else if (
          types.isAnyArrayBuffer(element) ||
          types.isTypedArray(element)
        ) {
          // 2. If element is a BufferSource, get a copy of the
          //    bytes held by the buffer source, and append those
          //    bytes to bytes.
          if (!element.buffer) {
            // ArrayBuffer
            bytes.push(new Uint8Array(element))
          } else {
            bytes.push(
              new Uint8Array(
                element.buffer,
                element.byteOffset,
                element.byteLength
              )
            )
          }
        } else if (isBlobLike(element)) {
          // 3. If element is a Blob, append the bytes it represents
          //    to bytes.
          bytes.push(element)
        }
      }

      // 3. Return bytes.
      return bytes
    }

    /**
     * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
     * @param {string} s
     */
    function convertLineEndingsNative(s) {
      // 1. Let native line ending be be the code point U+000A LF.
      let nativeLineEnding = '\n'

      // 2. If the underlying platform’s conventions are to
      //    represent newlines as a carriage return and line feed
      //    sequence, set native line ending to the code point
      //    U+000D CR followed by the code point U+000A LF.
      if (process.platform === 'win32') {
        nativeLineEnding = '\r\n'
      }

      return s.replace(/\r?\n/g, nativeLineEnding)
    }

    // If this function is moved to ./util.js, some tools (such as
    // rollup) will warn about circular dependencies. See:
    // https://github.com/nodejs/undici/issues/1629
    function isFileLike(object) {
      return (
        (NativeFile && object instanceof NativeFile) ||
        object instanceof File ||
        (object &&
          (typeof object.stream === 'function' ||
            typeof object.arrayBuffer === 'function') &&
          object[Symbol.toStringTag] === 'File')
      )
    }

    module.exports = { File, FileLike, isFileLike }

    /***/
  },

  /***/ 2015: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { isBlobLike, toUSVString, makeIterator } = __nccwpck_require__(2538)
    const { kState } = __nccwpck_require__(5861)
    const { File: UndiciFile, FileLike, isFileLike } = __nccwpck_require__(8511)
    const { webidl } = __nccwpck_require__(1744)
    const { Blob, File: NativeFile } = __nccwpck_require__(4300)

    /** @type {globalThis['File']} */
    const File = NativeFile ?? UndiciFile

    // https://xhr.spec.whatwg.org/#formdata
    class FormData {
      constructor(form) {
        if (form !== undefined) {
          throw webidl.errors.conversionFailed({
            prefix: 'FormData constructor',
            argument: 'Argument 1',
            types: ['undefined']
          })
        }

        this[kState] = []
      }

      append(name, value, filename = undefined) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })

        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          )
        }

        // 1. Let value be value if given; otherwise blobValue.

        name = webidl.converters.USVString(name)
        value = isBlobLike(value)
          ? webidl.converters.Blob(value, { strict: false })
          : webidl.converters.USVString(value)
        filename =
          arguments.length === 3
            ? webidl.converters.USVString(filename)
            : undefined

        // 2. Let entry be the result of creating an entry with
        // name, value, and filename if given.
        const entry = makeEntry(name, value, filename)

        // 3. Append entry to this’s entry list.
        this[kState].push(entry)
      }

      delete(name) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })

        name = webidl.converters.USVString(name)

        // The delete(name) method steps are to remove all entries whose name
        // is name from this’s entry list.
        this[kState] = this[kState].filter((entry) => entry.name !== name)
      }

      get(name) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })

        name = webidl.converters.USVString(name)

        // 1. If there is no entry whose name is name in this’s entry list,
        // then return null.
        const idx = this[kState].findIndex((entry) => entry.name === name)
        if (idx === -1) {
          return null
        }

        // 2. Return the value of the first entry whose name is name from
        // this’s entry list.
        return this[kState][idx].value
      }

      getAll(name) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })

        name = webidl.converters.USVString(name)

        // 1. If there is no entry whose name is name in this’s entry list,
        // then return the empty list.
        // 2. Return the values of all entries whose name is name, in order,
        // from this’s entry list.
        return this[kState]
          .filter((entry) => entry.name === name)
          .map((entry) => entry.value)
      }

      has(name) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })

        name = webidl.converters.USVString(name)

        // The has(name) method steps are to return true if there is an entry
        // whose name is name in this’s entry list; otherwise false.
        return this[kState].findIndex((entry) => entry.name === name) !== -1
      }

      set(name, value, filename = undefined) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })

        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          )
        }

        // The set(name, value) and set(name, blobValue, filename) method steps
        // are:

        // 1. Let value be value if given; otherwise blobValue.

        name = webidl.converters.USVString(name)
        value = isBlobLike(value)
          ? webidl.converters.Blob(value, { strict: false })
          : webidl.converters.USVString(value)
        filename = arguments.length === 3 ? toUSVString(filename) : undefined

        // 2. Let entry be the result of creating an entry with name, value, and
        // filename if given.
        const entry = makeEntry(name, value, filename)

        // 3. If there are entries in this’s entry list whose name is name, then
        // replace the first such entry with entry and remove the others.
        const idx = this[kState].findIndex((entry) => entry.name === name)
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState]
              .slice(idx + 1)
              .filter((entry) => entry.name !== name)
          ]
        } else {
          // 4. Otherwise, append entry to this’s entry list.
          this[kState].push(entry)
        }
      }

      entries() {
        webidl.brandCheck(this, FormData)

        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          'FormData',
          'key+value'
        )
      }

      keys() {
        webidl.brandCheck(this, FormData)

        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          'FormData',
          'key'
        )
      }

      values() {
        webidl.brandCheck(this, FormData)

        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          'FormData',
          'value'
        )
      }

      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, FormData)

        webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })

        if (typeof callbackFn !== 'function') {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          )
        }

        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this])
        }
      }
    }

    FormData.prototype[Symbol.iterator] = FormData.prototype.entries

    Object.defineProperties(FormData.prototype, {
      [Symbol.toStringTag]: {
        value: 'FormData',
        configurable: true
      }
    })

    /**
     * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
     * @param {string} name
     * @param {string|Blob} value
     * @param {?string} filename
     * @returns
     */
    function makeEntry(name, value, filename) {
      // 1. Set name to the result of converting name into a scalar value string.
      // "To convert a string into a scalar value string, replace any surrogates
      //  with U+FFFD."
      // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
      name = Buffer.from(name).toString('utf8')

      // 2. If value is a string, then set value to the result of converting
      //    value into a scalar value string.
      if (typeof value === 'string') {
        value = Buffer.from(value).toString('utf8')
      } else {
        // 3. Otherwise:

        // 1. If value is not a File object, then set value to a new File object,
        //    representing the same bytes, whose name attribute value is "blob"
        if (!isFileLike(value)) {
          value =
            value instanceof Blob
              ? new File([value], 'blob', { type: value.type })
              : new FileLike(value, 'blob', { type: value.type })
        }

        // 2. If filename is given, then set value to a new File object,
        //    representing the same bytes, whose name attribute is filename.
        if (filename !== undefined) {
          /** @type {FilePropertyBag} */
          const options = {
            type: value.type,
            lastModified: value.lastModified
          }

          value =
            (NativeFile && value instanceof NativeFile) ||
            value instanceof UndiciFile
              ? new File([value], filename, options)
              : new FileLike(value, filename, options)
        }
      }

      // 4. Return an entry whose name is name and whose value is value.
      return { name, value }
    }

    module.exports = { FormData }

    /***/
  },

  /***/ 1246: /***/ (module) => {
    // In case of breaking changes, increase the version
    // number to avoid conflicts.
    const globalOrigin = Symbol.for('undici.globalOrigin.1')

    function getGlobalOrigin() {
      return globalThis[globalOrigin]
    }

    function setGlobalOrigin(newOrigin) {
      if (newOrigin === undefined) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: undefined,
          writable: true,
          enumerable: false,
          configurable: false
        })

        return
      }

      const parsedURL = new URL(newOrigin)

      if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
        throw new TypeError(
          `Only http & https urls are allowed, received ${parsedURL.protocol}`
        )
      }

      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      })
    }

    module.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    }

    /***/
  },

  /***/ 554: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // https://github.com/Ethan-Arrowood/undici-fetch

    const { kHeadersList } = __nccwpck_require__(2785)
    const { kGuard } = __nccwpck_require__(5861)
    const { kEnumerableProperty } = __nccwpck_require__(3983)
    const { makeIterator, isValidHeaderName, isValidHeaderValue } =
      __nccwpck_require__(2538)
    const { webidl } = __nccwpck_require__(1744)
    const assert = __nccwpck_require__(9491)

    const kHeadersMap = Symbol('headers map')
    const kHeadersSortedMap = Symbol('headers map sorted')

    /**
     * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
     * @param {string} potentialValue
     */
    function headerValueNormalize(potentialValue) {
      //  To normalize a byte sequence potentialValue, remove
      //  any leading and trailing HTTP whitespace bytes from
      //  potentialValue.

      // Trimming the end with `.replace()` and a RegExp is typically subject to
      // ReDoS. This is safer and faster.
      let i = potentialValue.length
      while (/[\r\n\t ]/.test(potentialValue.charAt(--i)));
      return potentialValue.slice(0, i + 1).replace(/^[\r\n\t ]+/, '')
    }

    function fill(headers, object) {
      // To fill a Headers object headers with a given object object, run these steps:

      // 1. If object is a sequence, then for each header in object:
      // Note: webidl conversion to array has already been done.
      if (Array.isArray(object)) {
        for (const header of object) {
          // 1. If header does not contain exactly two items, then throw a TypeError.
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: 'Headers constructor',
              message: `expected name/value pair to be length 2, found ${header.length}.`
            })
          }

          // 2. Append (header’s first item, header’s second item) to headers.
          headers.append(header[0], header[1])
        }
      } else if (typeof object === 'object' && object !== null) {
        // Note: null should throw

        // 2. Otherwise, object is a record, then for each key → value in object,
        //    append (key, value) to headers
        for (const [key, value] of Object.entries(object)) {
          headers.append(key, value)
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: 'Headers constructor',
          argument: 'Argument 1',
          types: [
            'sequence<sequence<ByteString>>',
            'record<ByteString, ByteString>'
          ]
        })
      }
    }

    class HeadersList {
      /** @type {[string, string][]|null} */
      cookies = null

      constructor(init) {
        if (init instanceof HeadersList) {
          this[kHeadersMap] = new Map(init[kHeadersMap])
          this[kHeadersSortedMap] = init[kHeadersSortedMap]
          this.cookies = init.cookies
        } else {
          this[kHeadersMap] = new Map(init)
          this[kHeadersSortedMap] = null
        }
      }

      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name) {
        // A header list list contains a header name name if list
        // contains a header whose name is a byte-case-insensitive
        // match for name.
        name = name.toLowerCase()

        return this[kHeadersMap].has(name)
      }

      clear() {
        this[kHeadersMap].clear()
        this[kHeadersSortedMap] = null
        this.cookies = null
      }

      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name, value) {
        this[kHeadersSortedMap] = null

        // 1. If list contains name, then set name to the first such
        //    header’s name.
        const lowercaseName = name.toLowerCase()
        const exists = this[kHeadersMap].get(lowercaseName)

        // 2. Append (name, value) to list.
        if (exists) {
          const delimiter = lowercaseName === 'cookie' ? '; ' : ', '
          this[kHeadersMap].set(lowercaseName, {
            name: exists.name,
            value: `${exists.value}${delimiter}${value}`
          })
        } else {
          this[kHeadersMap].set(lowercaseName, { name, value })
        }

        if (lowercaseName === 'set-cookie') {
          this.cookies ??= []
          this.cookies.push(value)
        }
      }

      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name, value) {
        this[kHeadersSortedMap] = null
        const lowercaseName = name.toLowerCase()

        if (lowercaseName === 'set-cookie') {
          this.cookies = [value]
        }

        // 1. If list contains name, then set the value of
        //    the first such header to value and remove the
        //    others.
        // 2. Otherwise, append header (name, value) to list.
        return this[kHeadersMap].set(lowercaseName, { name, value })
      }

      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name) {
        this[kHeadersSortedMap] = null

        name = name.toLowerCase()

        if (name === 'set-cookie') {
          this.cookies = null
        }

        return this[kHeadersMap].delete(name)
      }

      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name) {
        // 1. If list does not contain name, then return null.
        if (!this.contains(name)) {
          return null
        }

        // 2. Return the values of all headers in list whose name
        //    is a byte-case-insensitive match for name,
        //    separated from each other by 0x2C 0x20, in order.
        return this[kHeadersMap].get(name.toLowerCase())?.value ?? null
      }

      *[Symbol.iterator]() {
        // use the lowercased name
        for (const [name, { value }] of this[kHeadersMap]) {
          yield [name, value]
        }
      }

      get entries() {
        const headers = {}

        if (this[kHeadersMap].size) {
          for (const { name, value } of this[kHeadersMap].values()) {
            headers[name] = value
          }
        }

        return headers
      }
    }

    // https://fetch.spec.whatwg.org/#headers-class
    class Headers {
      constructor(init = undefined) {
        this[kHeadersList] = new HeadersList()

        // The new Headers(init) constructor steps are:

        // 1. Set this’s guard to "none".
        this[kGuard] = 'none'

        // 2. If init is given, then fill this with init.
        if (init !== undefined) {
          init = webidl.converters.HeadersInit(init)
          fill(this, init)
        }
      }

      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name, value) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })

        name = webidl.converters.ByteString(name)
        value = webidl.converters.ByteString(value)

        // 1. Normalize value.
        value = headerValueNormalize(value)

        // 2. If name is not a header name or value is not a
        //    header value, then throw a TypeError.
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.append',
            value: name,
            type: 'header name'
          })
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.append',
            value,
            type: 'header value'
          })
        }

        // 3. If headers’s guard is "immutable", then throw a TypeError.
        // 4. Otherwise, if headers’s guard is "request" and name is a
        //    forbidden header name, return.
        // Note: undici does not implement forbidden header names
        if (this[kGuard] === 'immutable') {
          throw new TypeError('immutable')
        } else if (this[kGuard] === 'request-no-cors') {
          // 5. Otherwise, if headers’s guard is "request-no-cors":
          // TODO
        }

        // 6. Otherwise, if headers’s guard is "response" and name is a
        //    forbidden response-header name, return.

        // 7. Append (name, value) to headers’s header list.
        // 8. If headers’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from headers
        return this[kHeadersList].append(name, value)
      }

      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })

        name = webidl.converters.ByteString(name)

        // 1. If name is not a header name, then throw a TypeError.
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.delete',
            value: name,
            type: 'header name'
          })
        }

        // 2. If this’s guard is "immutable", then throw a TypeError.
        // 3. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 4. Otherwise, if this’s guard is "request-no-cors", name
        //    is not a no-CORS-safelisted request-header name, and
        //    name is not a privileged no-CORS request-header name,
        //    return.
        // 5. Otherwise, if this’s guard is "response" and name is
        //    a forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[kGuard] === 'immutable') {
          throw new TypeError('immutable')
        } else if (this[kGuard] === 'request-no-cors') {
          // TODO
        }

        // 6. If this’s header list does not contain name, then
        //    return.
        if (!this[kHeadersList].contains(name)) {
          return
        }

        // 7. Delete name from this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this.
        return this[kHeadersList].delete(name)
      }

      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })

        name = webidl.converters.ByteString(name)

        // 1. If name is not a header name, then throw a TypeError.
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.get',
            value: name,
            type: 'header name'
          })
        }

        // 2. Return the result of getting name from this’s header
        //    list.
        return this[kHeadersList].get(name)
      }

      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })

        name = webidl.converters.ByteString(name)

        // 1. If name is not a header name, then throw a TypeError.
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.has',
            value: name,
            type: 'header name'
          })
        }

        // 2. Return true if this’s header list contains name;
        //    otherwise false.
        return this[kHeadersList].contains(name)
      }

      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name, value) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })

        name = webidl.converters.ByteString(name)
        value = webidl.converters.ByteString(value)

        // 1. Normalize value.
        value = headerValueNormalize(value)

        // 2. If name is not a header name or value is not a
        //    header value, then throw a TypeError.
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.set',
            value: name,
            type: 'header name'
          })
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: 'Headers.set',
            value,
            type: 'header value'
          })
        }

        // 3. If this’s guard is "immutable", then throw a TypeError.
        // 4. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 5. Otherwise, if this’s guard is "request-no-cors" and
        //    name/value is not a no-CORS-safelisted request-header,
        //    return.
        // 6. Otherwise, if this’s guard is "response" and name is a
        //    forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[kGuard] === 'immutable') {
          throw new TypeError('immutable')
        } else if (this[kGuard] === 'request-no-cors') {
          // TODO
        }

        // 7. Set (name, value) in this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this
        return this[kHeadersList].set(name, value)
      }

      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, Headers)

        // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
        // 2. Return the values of all headers in this’s header list whose name is
        //    a byte-case-insensitive match for `Set-Cookie`, in order.

        const list = this[kHeadersList].cookies

        if (list) {
          return [...list]
        }

        return []
      }

      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap]
        }

        // 1. Let headers be an empty list of headers with the key being the name
        //    and value the value.
        const headers = []

        // 2. Let names be the result of convert header names to a sorted-lowercase
        //    set with all the names of the headers in list.
        const names = [...this[kHeadersList]].sort((a, b) =>
          a[0] < b[0] ? -1 : 1
        )
        const cookies = this[kHeadersList].cookies

        // 3. For each name of names:
        for (const [name, value] of names) {
          // 1. If name is `set-cookie`, then:
          if (name === 'set-cookie') {
            // 1. Let values be a list of all values of headers in list whose name
            //    is a byte-case-insensitive match for name, in order.

            // 2. For each value of values:
            // 1. Append (name, value) to headers.
            for (const value of cookies) {
              headers.push([name, value])
            }
          } else {
            // 2. Otherwise:

            // 1. Let value be the result of getting name from list.

            // 2. Assert: value is non-null.
            assert(value !== null)

            // 3. Append (name, value) to headers.
            headers.push([name, value])
          }
        }

        this[kHeadersList][kHeadersSortedMap] = headers

        // 4. Return headers.
        return headers
      }

      keys() {
        webidl.brandCheck(this, Headers)

        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          'Headers',
          'key'
        )
      }

      values() {
        webidl.brandCheck(this, Headers)

        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          'Headers',
          'value'
        )
      }

      entries() {
        webidl.brandCheck(this, Headers)

        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          'Headers',
          'key+value'
        )
      }

      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, Headers)

        webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })

        if (typeof callbackFn !== 'function') {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          )
        }

        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this])
        }
      }

      [Symbol.for('nodejs.util.inspect.custom')]() {
        webidl.brandCheck(this, Headers)

        return this[kHeadersList]
      }
    }

    Headers.prototype[Symbol.iterator] = Headers.prototype.entries

    Object.defineProperties(Headers.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: 'Headers',
        configurable: true
      }
    })

    webidl.converters.HeadersInit = function (V) {
      if (webidl.util.Type(V) === 'Object') {
        if (V[Symbol.iterator]) {
          return webidl.converters['sequence<sequence<ByteString>>'](V)
        }

        return webidl.converters['record<ByteString, ByteString>'](V)
      }

      throw webidl.errors.conversionFailed({
        prefix: 'Headers constructor',
        argument: 'Argument 1',
        types: [
          'sequence<sequence<ByteString>>',
          'record<ByteString, ByteString>'
        ]
      })
    }

    module.exports = {
      fill,
      Headers,
      HeadersList
    }

    /***/
  },

  /***/ 4881: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // https://github.com/Ethan-Arrowood/undici-fetch

    const {
      Response,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = __nccwpck_require__(7823)
    const { Headers } = __nccwpck_require__(554)
    const { Request, makeRequest } = __nccwpck_require__(8359)
    const zlib = __nccwpck_require__(9796)
    const {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = __nccwpck_require__(2538)
    const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
    const assert = __nccwpck_require__(9491)
    const { safelyExtractBody } = __nccwpck_require__(1472)
    const {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException
    } = __nccwpck_require__(1037)
    const { kHeadersList } = __nccwpck_require__(2785)
    const EE = __nccwpck_require__(2361)
    const { Readable, pipeline } = __nccwpck_require__(2781)
    const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } =
      __nccwpck_require__(3983)
    const { dataURLProcessor, serializeAMimeType } = __nccwpck_require__(685)
    const { TransformStream } = __nccwpck_require__(5356)
    const { getGlobalDispatcher } = __nccwpck_require__(1892)
    const { webidl } = __nccwpck_require__(1744)
    const { STATUS_CODES } = __nccwpck_require__(3685)
    const GET_OR_HEAD = ['GET', 'HEAD']

    /** @type {import('buffer').resolveObjectURL} */
    let resolveObjectURL
    let ReadableStream = globalThis.ReadableStream

    class Fetch extends EE {
      constructor(dispatcher) {
        super()

        this.dispatcher = dispatcher
        this.connection = null
        this.dump = false
        this.state = 'ongoing'
        // 2 terminated listeners get added per request,
        // but only 1 gets removed. If there are 20 redirects,
        // 21 listeners will be added.
        // See https://github.com/nodejs/undici/issues/1711
        // TODO (fix): Find and fix root cause for leaked listener.
        this.setMaxListeners(21)
      }

      terminate(reason) {
        if (this.state !== 'ongoing') {
          return
        }

        this.state = 'terminated'
        this.connection?.destroy(reason)
        this.emit('terminated', reason)
      }

      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error) {
        if (this.state !== 'ongoing') {
          return
        }

        // 1. Set controller’s state to "aborted".
        this.state = 'aborted'

        // 2. Let fallbackError be an "AbortError" DOMException.
        // 3. Set error to fallbackError if it is not given.
        if (!error) {
          error = new DOMException('The operation was aborted.', 'AbortError')
        }

        // 4. Let serializedError be StructuredSerialize(error).
        //    If that threw an exception, catch it, and let
        //    serializedError be StructuredSerialize(fallbackError).

        // 5. Set controller’s serialized abort reason to serializedError.
        this.serializedAbortReason = error

        this.connection?.destroy(error)
        this.emit('terminated', error)
      }
    }

    // https://fetch.spec.whatwg.org/#fetch-method
    function fetch(input, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })

      // 1. Let p be a new promise.
      const p = createDeferredPromise()

      // 2. Let requestObject be the result of invoking the initial value of
      // Request as constructor with input and init as arguments. If this throws
      // an exception, reject p with it and return p.
      let requestObject

      try {
        requestObject = new Request(input, init)
      } catch (e) {
        p.reject(e)
        return p.promise
      }

      // 3. Let request be requestObject’s request.
      const request = requestObject[kState]

      // 4. If requestObject’s signal’s aborted flag is set, then:
      if (requestObject.signal.aborted) {
        // 1. Abort the fetch() call with p, request, null, and
        //    requestObject’s signal’s abort reason.
        abortFetch(p, request, null, requestObject.signal.reason)

        // 2. Return p.
        return p.promise
      }

      // 5. Let globalObject be request’s client’s global object.
      const globalObject = request.client.globalObject

      // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
      // request’s service-workers mode to "none".
      if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
        request.serviceWorkers = 'none'
      }

      // 7. Let responseObject be null.
      let responseObject = null

      // 8. Let relevantRealm be this’s relevant Realm.
      const relevantRealm = null

      // 9. Let locallyAborted be false.
      let locallyAborted = false

      // 10. Let controller be null.
      let controller = null

      // 11. Add the following abort steps to requestObject’s signal:
      addAbortListener(requestObject.signal, () => {
        // 1. Set locallyAborted to true.
        locallyAborted = true

        // 2. Assert: controller is non-null.
        assert(controller != null)

        // 3. Abort controller with requestObject’s signal’s abort reason.
        controller.abort(requestObject.signal.reason)

        // 4. Abort the fetch() call with p, request, responseObject,
        //    and requestObject’s signal’s abort reason.
        abortFetch(p, request, responseObject, requestObject.signal.reason)
      })

      // 12. Let handleFetchDone given response response be to finalize and
      // report timing with response, globalObject, and "fetch".
      const handleFetchDone = (response) =>
        finalizeAndReportTiming(response, 'fetch')

      // 13. Set controller to the result of calling fetch given request,
      // with processResponseEndOfBody set to handleFetchDone, and processResponse
      // given response being these substeps:

      const processResponse = (response) => {
        // 1. If locallyAborted is true, terminate these substeps.
        if (locallyAborted) {
          return Promise.resolve()
        }

        // 2. If response’s aborted flag is set, then:
        if (response.aborted) {
          // 1. Let deserializedError be the result of deserialize a serialized
          //    abort reason given controller’s serialized abort reason and
          //    relevantRealm.

          // 2. Abort the fetch() call with p, request, responseObject, and
          //    deserializedError.

          abortFetch(
            p,
            request,
            responseObject,
            controller.serializedAbortReason
          )
          return Promise.resolve()
        }

        // 3. If response is a network error, then reject p with a TypeError
        // and terminate these substeps.
        if (response.type === 'error') {
          p.reject(
            Object.assign(new TypeError('fetch failed'), {
              cause: response.error
            })
          )
          return Promise.resolve()
        }

        // 4. Set responseObject to the result of creating a Response object,
        // given response, "immutable", and relevantRealm.
        responseObject = new Response()
        responseObject[kState] = response
        responseObject[kRealm] = relevantRealm
        responseObject[kHeaders][kHeadersList] = response.headersList
        responseObject[kHeaders][kGuard] = 'immutable'
        responseObject[kHeaders][kRealm] = relevantRealm

        // 5. Resolve p with responseObject.
        p.resolve(responseObject)
      }

      controller = fetching({
        request,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
      })

      // 14. Return p.
      return p.promise
    }

    // https://fetch.spec.whatwg.org/#finalize-and-report-timing
    function finalizeAndReportTiming(response, initiatorType = 'other') {
      // 1. If response is an aborted network error, then return.
      if (response.type === 'error' && response.aborted) {
        return
      }

      // 2. If response’s URL list is null or empty, then return.
      if (!response.urlList?.length) {
        return
      }

      // 3. Let originalURL be response’s URL list[0].
      const originalURL = response.urlList[0]

      // 4. Let timingInfo be response’s timing info.
      let timingInfo = response.timingInfo

      // 5. Let cacheState be response’s cache state.
      let cacheState = response.cacheState

      // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return
      }

      // 7. If timingInfo is null, then return.
      if (timingInfo === null) {
        return
      }

      // 8. If response’s timing allow passed flag is not set, then:
      if (!timingInfo.timingAllowPassed) {
        //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        })

        //  2. Set cacheState to the empty string.
        cacheState = ''
      }

      // 9. Set timingInfo’s end time to the coarsened shared current time
      // given global’s relevant settings object’s cross-origin isolated
      // capability.
      // TODO: given global’s relevant settings object’s cross-origin isolated
      // capability?
      timingInfo.endTime = coarsenedSharedCurrentTime()

      // 10. Set response’s timing info to timingInfo.
      response.timingInfo = timingInfo

      // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
      // global, and cacheState.
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      )
    }

    // https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
    function markResourceTiming(
      timingInfo,
      originalURL,
      initiatorType,
      globalThis,
      cacheState
    ) {
      if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
        performance.markResourceTiming(
          timingInfo,
          originalURL.href,
          initiatorType,
          globalThis,
          cacheState
        )
      }
    }

    // https://fetch.spec.whatwg.org/#abort-fetch
    function abortFetch(p, request, responseObject, error) {
      // Note: AbortSignal.reason was added in node v17.2.0
      // which would give us an undefined error to reject with.
      // Remove this once node v16 is no longer supported.
      if (!error) {
        error = new DOMException('The operation was aborted.', 'AbortError')
      }

      // 1. Reject promise with error.
      p.reject(error)

      // 2. If request’s body is not null and is readable, then cancel request’s
      // body with error.
      if (request.body != null && isReadable(request.body?.stream)) {
        request.body.stream.cancel(error).catch((err) => {
          if (err.code === 'ERR_INVALID_STATE') {
            // Node bug?
            return
          }
          throw err
        })
      }

      // 3. If responseObject is null, then return.
      if (responseObject == null) {
        return
      }

      // 4. Let response be responseObject’s response.
      const response = responseObject[kState]

      // 5. If response’s body is not null and is readable, then error response’s
      // body with error.
      if (response.body != null && isReadable(response.body?.stream)) {
        response.body.stream.cancel(error).catch((err) => {
          if (err.code === 'ERR_INVALID_STATE') {
            // Node bug?
            return
          }
          throw err
        })
      }
    }

    // https://fetch.spec.whatwg.org/#fetching
    function fetching({
      request,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher // undici
    }) {
      // 1. Let taskDestination be null.
      let taskDestination = null

      // 2. Let crossOriginIsolatedCapability be false.
      let crossOriginIsolatedCapability = false

      // 3. If request’s client is non-null, then:
      if (request.client != null) {
        // 1. Set taskDestination to request’s client’s global object.
        taskDestination = request.client.globalObject

        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
        // isolated capability.
        crossOriginIsolatedCapability =
          request.client.crossOriginIsolatedCapability
      }

      // 4. If useParallelQueue is true, then set taskDestination to the result of
      // starting a new parallel queue.
      // TODO

      // 5. Let timingInfo be a new fetch timing info whose start time and
      // post-redirect start time are the coarsened shared current time given
      // crossOriginIsolatedCapability.
      const currenTime = coarsenedSharedCurrentTime(
        crossOriginIsolatedCapability
      )
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      })

      // 6. Let fetchParams be a new fetch params whose
      // request is request,
      // timing info is timingInfo,
      // process request body chunk length is processRequestBodyChunkLength,
      // process request end-of-body is processRequestEndOfBody,
      // process response is processResponse,
      // process response consume body is processResponseConsumeBody,
      // process response end-of-body is processResponseEndOfBody,
      // task destination is taskDestination,
      // and cross-origin isolated capability is crossOriginIsolatedCapability.
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      }

      // 7. If request’s body is a byte sequence, then set request’s body to
      //    request’s body as a body.
      // NOTE: Since fetching is only called from fetch, body should already be
      // extracted.
      assert(!request.body || request.body.stream)

      // 8. If request’s window is "client", then set request’s window to request’s
      // client, if request’s client’s global object is a Window object; otherwise
      // "no-window".
      if (request.window === 'client') {
        // TODO: What if request.client is null?
        request.window =
          request.client?.globalObject?.constructor?.name === 'Window'
            ? request.client
            : 'no-window'
      }

      // 9. If request’s origin is "client", then set request’s origin to request’s
      // client’s origin.
      if (request.origin === 'client') {
        // TODO: What if request.client is null?
        request.origin = request.client?.origin
      }

      // 10. If all of the following conditions are true:
      // TODO

      // 11. If request’s policy container is "client", then:
      if (request.policyContainer === 'client') {
        // 1. If request’s client is non-null, then set request’s policy
        // container to a clone of request’s client’s policy container. [HTML]
        if (request.client != null) {
          request.policyContainer = clonePolicyContainer(
            request.client.policyContainer
          )
        } else {
          // 2. Otherwise, set request’s policy container to a new policy
          // container.
          request.policyContainer = makePolicyContainer()
        }
      }

      // 12. If request’s header list does not contain `Accept`, then:
      if (!request.headersList.contains('accept')) {
        // 1. Let value be `*/*`.
        const value = '*/*'

        // 2. A user agent should set value to the first matching statement, if
        // any, switching on request’s destination:
        // "document"
        // "frame"
        // "iframe"
        // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
        // "image"
        // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
        // "style"
        // `text/css,*/*;q=0.1`
        // TODO

        // 3. Append `Accept`/value to request’s header list.
        request.headersList.append('accept', value)
      }

      // 13. If request’s header list does not contain `Accept-Language`, then
      // user agents should append `Accept-Language`/an appropriate value to
      // request’s header list.
      if (!request.headersList.contains('accept-language')) {
        request.headersList.append('accept-language', '*')
      }

      // 14. If request’s priority is null, then use request’s initiator and
      // destination appropriately in setting request’s priority to a
      // user-agent-defined object.
      if (request.priority === null) {
        // TODO
      }

      // 15. If request is a subresource request, then:
      if (subresourceSet.has(request.destination)) {
        // TODO
      }

      // 16. Run main fetch given fetchParams.
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err)
      })

      // 17. Return fetchParam's controller
      return fetchParams.controller
    }

    // https://fetch.spec.whatwg.org/#concept-main-fetch
    async function mainFetch(fetchParams, recursive = false) {
      // 1. Let request be fetchParams’s request.
      const request = fetchParams.request

      // 2. Let response be null.
      let response = null

      // 3. If request’s local-URLs-only flag is set and request’s current URL is
      // not local, then set response to a network error.
      if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
        response = makeNetworkError('local URLs only')
      }

      // 4. Run report Content Security Policy violations for request.
      // TODO

      // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request)

      // 6. If should request be blocked due to a bad port, should fetching request
      // be blocked as mixed content, or should request be blocked by Content
      // Security Policy returns blocked, then set response to a network error.
      if (requestBadPort(request) === 'blocked') {
        response = makeNetworkError('bad port')
      }
      // TODO: should fetching request be blocked as mixed content?
      // TODO: should request be blocked by Content Security Policy?

      // 7. If request’s referrer policy is the empty string, then set request’s
      // referrer policy to request’s policy container’s referrer policy.
      if (request.referrerPolicy === '') {
        request.referrerPolicy = request.policyContainer.referrerPolicy
      }

      // 8. If request’s referrer is not "no-referrer", then set request’s
      // referrer to the result of invoking determine request’s referrer.
      if (request.referrer !== 'no-referrer') {
        request.referrer = determineRequestsReferrer(request)
      }

      // 9. Set request’s current URL’s scheme to "https" if all of the following
      // conditions are true:
      // - request’s current URL’s scheme is "http"
      // - request’s current URL’s host is a domain
      // - Matching request’s current URL’s host per Known HSTS Host Domain Name
      //   Matching results in either a superdomain match with an asserted
      //   includeSubDomains directive or a congruent match (with or without an
      //   asserted includeSubDomains directive). [HSTS]
      // TODO

      // 10. If recursive is false, then run the remaining steps in parallel.
      // TODO

      // 11. If response is null, then set response to the result of running
      // the steps corresponding to the first matching statement:
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request)

          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            (sameOrigin(currentURL, request.url) &&
              request.responseTainting === 'basic') ||
            // request’s current URL’s scheme is "data"
            currentURL.protocol === 'data:' ||
            // - request’s mode is "navigate" or "websocket"
            request.mode === 'navigate' ||
            request.mode === 'websocket'
          ) {
            // 1. Set request’s response tainting to "basic".
            request.responseTainting = 'basic'

            // 2. Return the result of running scheme fetch given fetchParams.
            return await schemeFetch(fetchParams)
          }

          // request’s mode is "same-origin"
          if (request.mode === 'same-origin') {
            // 1. Return a network error.
            return makeNetworkError('request mode cannot be "same-origin"')
          }

          // request’s mode is "no-cors"
          if (request.mode === 'no-cors') {
            // 1. If request’s redirect mode is not "follow", then return a network
            // error.
            if (request.redirect !== 'follow') {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              )
            }

            // 2. Set request’s response tainting to "opaque".
            request.responseTainting = 'opaque'

            // 3. Return the result of running scheme fetch given fetchParams.
            return await schemeFetch(fetchParams)
          }

          // request’s current URL’s scheme is not an HTTP(S) scheme
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
            // Return a network error.
            return makeNetworkError('URL scheme must be a HTTP(S) scheme')
          }

          // - request’s use-CORS-preflight flag is set
          // - request’s unsafe-request flag is set and either request’s method is
          //   not a CORS-safelisted method or CORS-unsafe request-header names with
          //   request’s header list is not empty
          //    1. Set request’s response tainting to "cors".
          //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
          //    given fetchParams and true.
          //    3. If corsWithPreflightResponse is a network error, then clear cache
          //    entries using request.
          //    4. Return corsWithPreflightResponse.
          // TODO

          // Otherwise
          //    1. Set request’s response tainting to "cors".
          request.responseTainting = 'cors'

          //    2. Return the result of running HTTP fetch given fetchParams.
          return await httpFetch(fetchParams)
        })()
      }

      // 12. If recursive is true, then return response.
      if (recursive) {
        return response
      }

      // 13. If response is not a network error and response is not a filtered
      // response, then:
      if (response.status !== 0 && !response.internalResponse) {
        // If request’s response tainting is "cors", then:
        if (request.responseTainting === 'cors') {
          // 1. Let headerNames be the result of extracting header list values
          // given `Access-Control-Expose-Headers` and response’s header list.
          // TODO
          // 2. If request’s credentials mode is not "include" and headerNames
          // contains `*`, then set response’s CORS-exposed header-name list to
          // all unique header names in response’s header list.
          // TODO
          // 3. Otherwise, if headerNames is not null or failure, then set
          // response’s CORS-exposed header-name list to headerNames.
          // TODO
        }

        // Set response to the following filtered response with response as its
        // internal response, depending on request’s response tainting:
        if (request.responseTainting === 'basic') {
          response = filterResponse(response, 'basic')
        } else if (request.responseTainting === 'cors') {
          response = filterResponse(response, 'cors')
        } else if (request.responseTainting === 'opaque') {
          response = filterResponse(response, 'opaque')
        } else {
          assert(false)
        }
      }

      // 14. Let internalResponse be response, if response is a network error,
      // and response’s internal response otherwise.
      let internalResponse =
        response.status === 0 ? response : response.internalResponse

      // 15. If internalResponse’s URL list is empty, then set it to a clone of
      // request’s URL list.
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request.urlList)
      }

      // 16. If request’s timing allow failed flag is unset, then set
      // internalResponse’s timing allow passed flag.
      if (!request.timingAllowFailed) {
        response.timingAllowPassed = true
      }

      // 17. If response is not a network error and any of the following returns
      // blocked
      // - should internalResponse to request be blocked as mixed content
      // - should internalResponse to request be blocked by Content Security Policy
      // - should internalResponse to request be blocked due to its MIME type
      // - should internalResponse to request be blocked due to nosniff
      // TODO

      // 18. If response’s type is "opaque", internalResponse’s status is 206,
      // internalResponse’s range-requested flag is set, and request’s header
      // list does not contain `Range`, then set response and internalResponse
      // to a network error.
      if (
        response.type === 'opaque' &&
        internalResponse.status === 206 &&
        internalResponse.rangeRequested &&
        !request.headers.contains('range')
      ) {
        response = internalResponse = makeNetworkError()
      }

      // 19. If response is not a network error and either request’s method is
      // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
      // set internalResponse’s body to null and disregard any enqueuing toward
      // it (if any).
      if (
        response.status !== 0 &&
        (request.method === 'HEAD' ||
          request.method === 'CONNECT' ||
          nullBodyStatus.includes(internalResponse.status))
      ) {
        internalResponse.body = null
        fetchParams.controller.dump = true
      }

      // 20. If request’s integrity metadata is not the empty string, then:
      if (request.integrity) {
        // 1. Let processBodyError be this step: run fetch finale given fetchParams
        // and a network error.
        const processBodyError = (reason) =>
          fetchFinale(fetchParams, makeNetworkError(reason))

        // 2. If request’s response tainting is "opaque", or response’s body is null,
        // then run processBodyError and abort these steps.
        if (request.responseTainting === 'opaque' || response.body == null) {
          processBodyError(response.error)
          return
        }

        // 3. Let processBody given bytes be these steps:
        const processBody = (bytes) => {
          // 1. If bytes do not match request’s integrity metadata,
          // then run processBodyError and abort these steps. [SRI]
          if (!bytesMatch(bytes, request.integrity)) {
            processBodyError('integrity mismatch')
            return
          }

          // 2. Set response’s body to bytes as a body.
          response.body = safelyExtractBody(bytes)[0]

          // 3. Run fetch finale given fetchParams and response.
          fetchFinale(fetchParams, response)
        }

        // 4. Fully read response’s body given processBody and processBodyError.
        await fullyReadBody(response.body, processBody, processBodyError)
      } else {
        // 21. Otherwise, run fetch finale given fetchParams and response.
        fetchFinale(fetchParams, response)
      }
    }

    // https://fetch.spec.whatwg.org/#concept-scheme-fetch
    // given a fetch params fetchParams
    function schemeFetch(fetchParams) {
      // Note: since the connection is destroyed on redirect, which sets fetchParams to a
      // cancelled state, we do not want this condition to trigger *unless* there have been
      // no redirects. See https://github.com/nodejs/undici/issues/1776
      // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams))
      }

      // 2. Let request be fetchParams’s request.
      const { request } = fetchParams

      const { protocol: scheme } = requestCurrentURL(request)

      // 3. Switch on request’s current URL’s scheme and run the associated steps:
      switch (scheme) {
        case 'about:': {
          // If request’s current URL’s path is the string "blank", then return a new response
          // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
          // and body is the empty byte sequence as a body.

          // Otherwise, return a network error.
          return Promise.resolve(
            makeNetworkError('about scheme is not supported')
          )
        }
        case 'blob:': {
          if (!resolveObjectURL) {
            resolveObjectURL = __nccwpck_require__(4300).resolveObjectURL
          }

          // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
          const blobURLEntry = requestCurrentURL(request)

          // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
          // Buffer.resolveObjectURL does not ignore URL queries.
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(
              makeNetworkError(
                'NetworkError when attempting to fetch resource.'
              )
            )
          }

          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())

          // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
          //    object is not a Blob object, then return a network error.
          if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError('invalid method'))
          }

          // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
          const bodyWithType = safelyExtractBody(blobURLEntryObject)

          // 4. Let body be bodyWithType’s body.
          const body = bodyWithType[0]

          // 5. Let length be body’s length, serialized and isomorphic encoded.
          const length = isomorphicEncode(`${body.length}`)

          // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
          const type = bodyWithType[1] ?? ''

          // 7. Return a new response whose status message is `OK`, header list is
          //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
          const response = makeResponse({
            statusText: 'OK',
            headersList: [
              ['content-length', { name: 'Content-Length', value: length }],
              ['content-type', { name: 'Content-Type', value: type }]
            ]
          })

          response.body = body

          return Promise.resolve(response)
        }
        case 'data:': {
          // 1. Let dataURLStruct be the result of running the
          //    data: URL processor on request’s current URL.
          const currentURL = requestCurrentURL(request)
          const dataURLStruct = dataURLProcessor(currentURL)

          // 2. If dataURLStruct is failure, then return a
          //    network error.
          if (dataURLStruct === 'failure') {
            return Promise.resolve(
              makeNetworkError('failed to fetch the data URL')
            )
          }

          // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
          const mimeType = serializeAMimeType(dataURLStruct.mimeType)

          // 4. Return a response whose status message is `OK`,
          //    header list is « (`Content-Type`, mimeType) »,
          //    and body is dataURLStruct’s body as a body.
          return Promise.resolve(
            makeResponse({
              statusText: 'OK',
              headersList: [
                ['content-type', { name: 'Content-Type', value: mimeType }]
              ],
              body: safelyExtractBody(dataURLStruct.body)[0]
            })
          )
        }
        case 'file:': {
          // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
          // When in doubt, return a network error.
          return Promise.resolve(makeNetworkError('not implemented... yet...'))
        }
        case 'http:':
        case 'https:': {
          // Return the result of running HTTP fetch given fetchParams.

          return httpFetch(fetchParams).catch((err) => makeNetworkError(err))
        }
        default: {
          return Promise.resolve(makeNetworkError('unknown scheme'))
        }
      }
    }

    // https://fetch.spec.whatwg.org/#finalize-response
    function finalizeResponse(fetchParams, response) {
      // 1. Set fetchParams’s request’s done flag.
      fetchParams.request.done = true

      // 2, If fetchParams’s process response done is not null, then queue a fetch
      // task to run fetchParams’s process response done given response, with
      // fetchParams’s task destination.
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response))
      }
    }

    // https://fetch.spec.whatwg.org/#fetch-finale
    function fetchFinale(fetchParams, response) {
      // 1. If response is a network error, then:
      if (response.type === 'error') {
        // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
        response.urlList = [fetchParams.request.urlList[0]]

        // 2. Set response’s timing info to the result of creating an opaque timing
        // info for fetchParams’s timing info.
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        })
      }

      // 2. Let processResponseEndOfBody be the following steps:
      const processResponseEndOfBody = () => {
        // 1. Set fetchParams’s request’s done flag.
        fetchParams.request.done = true

        // If fetchParams’s process response end-of-body is not null,
        // then queue a fetch task to run fetchParams’s process response
        // end-of-body given response with fetchParams’s task destination.
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response))
        }
      }

      // 3. If fetchParams’s process response is non-null, then queue a fetch task
      // to run fetchParams’s process response given response, with fetchParams’s
      // task destination.
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response))
      }

      // 4. If response’s body is null, then run processResponseEndOfBody.
      if (response.body == null) {
        processResponseEndOfBody()
      } else {
        // 5. Otherwise:

        // 1. Let transformStream be a new a TransformStream.

        // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
        // enqueues chunk in transformStream.
        const identityTransformAlgorithm = (chunk, controller) => {
          controller.enqueue(chunk)
        }

        // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
        // and flushAlgorithm set to processResponseEndOfBody.
        const transformStream = new TransformStream(
          {
            start() {},
            transform: identityTransformAlgorithm,
            flush: processResponseEndOfBody
          },
          {
            size() {
              return 1
            }
          },
          {
            size() {
              return 1
            }
          }
        )

        // 4. Set response’s body to the result of piping response’s body through transformStream.
        response.body = {
          stream: response.body.stream.pipeThrough(transformStream)
        }
      }

      // 6. If fetchParams’s process response consume body is non-null, then:
      if (fetchParams.processResponseConsumeBody != null) {
        // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
        // process response consume body given response and nullOrBytes.
        const processBody = (nullOrBytes) =>
          fetchParams.processResponseConsumeBody(response, nullOrBytes)

        // 2. Let processBodyError be this step: run fetchParams’s process
        // response consume body given response and failure.
        const processBodyError = (failure) =>
          fetchParams.processResponseConsumeBody(response, failure)

        // 3. If response’s body is null, then queue a fetch task to run processBody
        // given null, with fetchParams’s task destination.
        if (response.body == null) {
          queueMicrotask(() => processBody(null))
        } else {
          // 4. Otherwise, fully read response’s body given processBody, processBodyError,
          // and fetchParams’s task destination.
          return fullyReadBody(response.body, processBody, processBodyError)
        }
        return Promise.resolve()
      }
    }

    // https://fetch.spec.whatwg.org/#http-fetch
    async function httpFetch(fetchParams) {
      // 1. Let request be fetchParams’s request.
      const request = fetchParams.request

      // 2. Let response be null.
      let response = null

      // 3. Let actualResponse be null.
      let actualResponse = null

      // 4. Let timingInfo be fetchParams’s timing info.
      const timingInfo = fetchParams.timingInfo

      // 5. If request’s service-workers mode is "all", then:
      if (request.serviceWorkers === 'all') {
        // TODO
      }

      // 6. If response is null, then:
      if (response === null) {
        // 1. If makeCORSPreflight is true and one of these conditions is true:
        // TODO

        // 2. If request’s redirect mode is "follow", then set request’s
        // service-workers mode to "none".
        if (request.redirect === 'follow') {
          request.serviceWorkers = 'none'
        }

        // 3. Set response and actualResponse to the result of running
        // HTTP-network-or-cache fetch given fetchParams.
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)

        // 4. If request’s response tainting is "cors" and a CORS check
        // for request and response returns failure, then return a network error.
        if (
          request.responseTainting === 'cors' &&
          corsCheck(request, response) === 'failure'
        ) {
          return makeNetworkError('cors failure')
        }

        // 5. If the TAO check for request and response returns failure, then set
        // request’s timing allow failed flag.
        if (TAOCheck(request, response) === 'failure') {
          request.timingAllowFailed = true
        }
      }

      // 7. If either request’s response tainting or response’s type
      // is "opaque", and the cross-origin resource policy check with
      // request’s origin, request’s client, request’s destination,
      // and actualResponse returns blocked, then return a network error.
      if (
        (request.responseTainting === 'opaque' || response.type === 'opaque') &&
        crossOriginResourcePolicyCheck(
          request.origin,
          request.client,
          request.destination,
          actualResponse
        ) === 'blocked'
      ) {
        return makeNetworkError('blocked')
      }

      // 8. If actualResponse’s status is a redirect status, then:
      if (redirectStatusSet.has(actualResponse.status)) {
        // 1. If actualResponse’s status is not 303, request’s body is not null,
        // and the connection uses HTTP/2, then user agents may, and are even
        // encouraged to, transmit an RST_STREAM frame.
        // See, https://github.com/whatwg/fetch/issues/1288
        if (request.redirect !== 'manual') {
          fetchParams.controller.connection.destroy()
        }

        // 2. Switch on request’s redirect mode:
        if (request.redirect === 'error') {
          // Set response to a network error.
          response = makeNetworkError('unexpected redirect')
        } else if (request.redirect === 'manual') {
          // Set response to an opaque-redirect filtered response whose internal
          // response is actualResponse.
          // NOTE(spec): On the web this would return an `opaqueredirect` response,
          // but that doesn't make sense server side.
          // See https://github.com/nodejs/undici/issues/1193.
          response = actualResponse
        } else if (request.redirect === 'follow') {
          // Set response to the result of running HTTP-redirect fetch given
          // fetchParams and response.
          response = await httpRedirectFetch(fetchParams, response)
        } else {
          assert(false)
        }
      }

      // 9. Set response’s timing info to timingInfo.
      response.timingInfo = timingInfo

      // 10. Return response.
      return response
    }

    // https://fetch.spec.whatwg.org/#http-redirect-fetch
    function httpRedirectFetch(fetchParams, response) {
      // 1. Let request be fetchParams’s request.
      const request = fetchParams.request

      // 2. Let actualResponse be response, if response is not a filtered response,
      // and response’s internal response otherwise.
      const actualResponse = response.internalResponse
        ? response.internalResponse
        : response

      // 3. Let locationURL be actualResponse’s location URL given request’s current
      // URL’s fragment.
      let locationURL

      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request).hash
        )

        // 4. If locationURL is null, then return response.
        if (locationURL == null) {
          return response
        }
      } catch (err) {
        // 5. If locationURL is failure, then return a network error.
        return Promise.resolve(makeNetworkError(err))
      }

      // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
      // error.
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(
          makeNetworkError('URL scheme must be a HTTP(S) scheme')
        )
      }

      // 7. If request’s redirect count is 20, then return a network error.
      if (request.redirectCount === 20) {
        return Promise.resolve(makeNetworkError('redirect count exceeded'))
      }

      // 8. Increase request’s redirect count by 1.
      request.redirectCount += 1

      // 9. If request’s mode is "cors", locationURL includes credentials, and
      // request’s origin is not same origin with locationURL’s origin, then return
      //  a network error.
      if (
        request.mode === 'cors' &&
        (locationURL.username || locationURL.password) &&
        !sameOrigin(request, locationURL)
      ) {
        return Promise.resolve(
          makeNetworkError('cross origin not allowed for request mode "cors"')
        )
      }

      // 10. If request’s response tainting is "cors" and locationURL includes
      // credentials, then return a network error.
      if (
        request.responseTainting === 'cors' &&
        (locationURL.username || locationURL.password)
      ) {
        return Promise.resolve(
          makeNetworkError(
            'URL cannot contain credentials for request mode "cors"'
          )
        )
      }

      // 11. If actualResponse’s status is not 303, request’s body is non-null,
      // and request’s body’s source is null, then return a network error.
      if (
        actualResponse.status !== 303 &&
        request.body != null &&
        request.body.source == null
      ) {
        return Promise.resolve(makeNetworkError())
      }

      // 12. If one of the following is true
      // - actualResponse’s status is 301 or 302 and request’s method is `POST`
      // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
      if (
        ([301, 302].includes(actualResponse.status) &&
          request.method === 'POST') ||
        (actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method))
      ) {
        // then:
        // 1. Set request’s method to `GET` and request’s body to null.
        request.method = 'GET'
        request.body = null

        // 2. For each headerName of request-body-header name, delete headerName from
        // request’s header list.
        for (const headerName of requestBodyHeader) {
          request.headersList.delete(headerName)
        }
      }

      // 13. If request’s current URL’s origin is not same origin with locationURL’s
      //     origin, then for each headerName of CORS non-wildcard request-header name,
      //     delete headerName from request’s header list.
      if (!sameOrigin(requestCurrentURL(request), locationURL)) {
        // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
        request.headersList.delete('authorization')

        // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
        request.headersList.delete('cookie')
        request.headersList.delete('host')
      }

      // 14. If request’s body is non-null, then set request’s body to the first return
      // value of safely extracting request’s body’s source.
      if (request.body != null) {
        assert(request.body.source != null)
        request.body = safelyExtractBody(request.body.source)[0]
      }

      // 15. Let timingInfo be fetchParams’s timing info.
      const timingInfo = fetchParams.timingInfo

      // 16. Set timingInfo’s redirect end time and post-redirect start time to the
      // coarsened shared current time given fetchParams’s cross-origin isolated
      // capability.
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
        coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)

      // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
      //  redirect start time to timingInfo’s start time.
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime
      }

      // 18. Append locationURL to request’s URL list.
      request.urlList.push(locationURL)

      // 19. Invoke set request’s referrer policy on redirect on request and
      // actualResponse.
      setRequestReferrerPolicyOnRedirect(request, actualResponse)

      // 20. Return the result of running main fetch given fetchParams and true.
      return mainFetch(fetchParams, true)
    }

    // https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
    async function httpNetworkOrCacheFetch(
      fetchParams,
      isAuthenticationFetch = false,
      isNewConnectionFetch = false
    ) {
      // 1. Let request be fetchParams’s request.
      const request = fetchParams.request

      // 2. Let httpFetchParams be null.
      let httpFetchParams = null

      // 3. Let httpRequest be null.
      let httpRequest = null

      // 4. Let response be null.
      let response = null

      // 5. Let storedResponse be null.
      // TODO: cache

      // 6. Let httpCache be null.
      const httpCache = null

      // 7. Let the revalidatingFlag be unset.
      const revalidatingFlag = false

      // 8. Run these steps, but abort when the ongoing fetch is terminated:

      //    1. If request’s window is "no-window" and request’s redirect mode is
      //    "error", then set httpFetchParams to fetchParams and httpRequest to
      //    request.
      if (request.window === 'no-window' && request.redirect === 'error') {
        httpFetchParams = fetchParams
        httpRequest = request
      } else {
        // Otherwise:

        // 1. Set httpRequest to a clone of request.
        httpRequest = makeRequest(request)

        // 2. Set httpFetchParams to a copy of fetchParams.
        httpFetchParams = { ...fetchParams }

        // 3. Set httpFetchParams’s request to httpRequest.
        httpFetchParams.request = httpRequest
      }

      //    3. Let includeCredentials be true if one of
      const includeCredentials =
        request.credentials === 'include' ||
        (request.credentials === 'same-origin' &&
          request.responseTainting === 'basic')

      //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
      //    body is non-null; otherwise null.
      const contentLength = httpRequest.body ? httpRequest.body.length : null

      //    5. Let contentLengthHeaderValue be null.
      let contentLengthHeaderValue = null

      //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
      //    `PUT`, then set contentLengthHeaderValue to `0`.
      if (
        httpRequest.body == null &&
        ['POST', 'PUT'].includes(httpRequest.method)
      ) {
        contentLengthHeaderValue = '0'
      }

      //    7. If contentLength is non-null, then set contentLengthHeaderValue to
      //    contentLength, serialized and isomorphic encoded.
      if (contentLength != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)
      }

      //    8. If contentLengthHeaderValue is non-null, then append
      //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
      //    list.
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append(
          'content-length',
          contentLengthHeaderValue
        )
      }

      //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
      //    contentLengthHeaderValue) to httpRequest’s header list.

      //    10. If contentLength is non-null and httpRequest’s keepalive is true,
      //    then:
      if (contentLength != null && httpRequest.keepalive) {
        // NOTE: keepalive is a noop outside of browser context.
      }

      //    11. If httpRequest’s referrer is a URL, then append
      //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
      //     to httpRequest’s header list.
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append(
          'referer',
          isomorphicEncode(httpRequest.referrer.href)
        )
      }

      //    12. Append a request `Origin` header for httpRequest.
      appendRequestOriginHeader(httpRequest)

      //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
      appendFetchMetadata(httpRequest)

      //    14. If httpRequest’s header list does not contain `User-Agent`, then
      //    user agents should append `User-Agent`/default `User-Agent` value to
      //    httpRequest’s header list.
      if (!httpRequest.headersList.contains('user-agent')) {
        httpRequest.headersList.append(
          'user-agent',
          typeof esbuildDetection === 'undefined' ? 'undici' : 'node'
        )
      }

      //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
      //    list contains `If-Modified-Since`, `If-None-Match`,
      //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
      //    httpRequest’s cache mode to "no-store".
      if (
        httpRequest.cache === 'default' &&
        (httpRequest.headersList.contains('if-modified-since') ||
          httpRequest.headersList.contains('if-none-match') ||
          httpRequest.headersList.contains('if-unmodified-since') ||
          httpRequest.headersList.contains('if-match') ||
          httpRequest.headersList.contains('if-range'))
      ) {
        httpRequest.cache = 'no-store'
      }

      //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
      //    no-cache cache-control header modification flag is unset, and
      //    httpRequest’s header list does not contain `Cache-Control`, then append
      //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
      if (
        httpRequest.cache === 'no-cache' &&
        !httpRequest.preventNoCacheCacheControlHeaderModification &&
        !httpRequest.headersList.contains('cache-control')
      ) {
        httpRequest.headersList.append('cache-control', 'max-age=0')
      }

      //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
      if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
        // 1. If httpRequest’s header list does not contain `Pragma`, then append
        // `Pragma`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains('pragma')) {
          httpRequest.headersList.append('pragma', 'no-cache')
        }

        // 2. If httpRequest’s header list does not contain `Cache-Control`,
        // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains('cache-control')) {
          httpRequest.headersList.append('cache-control', 'no-cache')
        }
      }

      //    18. If httpRequest’s header list contains `Range`, then append
      //    `Accept-Encoding`/`identity` to httpRequest’s header list.
      if (httpRequest.headersList.contains('range')) {
        httpRequest.headersList.append('accept-encoding', 'identity')
      }

      //    19. Modify httpRequest’s header list per HTTP. Do not append a given
      //    header if httpRequest’s header list contains that header’s name.
      //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
      if (!httpRequest.headersList.contains('accept-encoding')) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')
        } else {
          httpRequest.headersList.append('accept-encoding', 'gzip, deflate')
        }
      }

      httpRequest.headersList.delete('host')

      //    20. If includeCredentials is true, then:
      if (includeCredentials) {
        // 1. If the user agent is not configured to block cookies for httpRequest
        // (see section 7 of [COOKIES]), then:
        // TODO: credentials
        // 2. If httpRequest’s header list does not contain `Authorization`, then:
        // TODO: credentials
      }

      //    21. If there’s a proxy-authentication entry, use it as appropriate.
      //    TODO: proxy-authentication

      //    22. Set httpCache to the result of determining the HTTP cache
      //    partition, given httpRequest.
      //    TODO: cache

      //    23. If httpCache is null, then set httpRequest’s cache mode to
      //    "no-store".
      if (httpCache == null) {
        httpRequest.cache = 'no-store'
      }

      //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
      //    then:
      if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {
        // TODO: cache
      }

      // 9. If aborted, then return the appropriate network error for fetchParams.
      // TODO

      // 10. If response is null, then:
      if (response == null) {
        // 1. If httpRequest’s cache mode is "only-if-cached", then return a
        // network error.
        if (httpRequest.mode === 'only-if-cached') {
          return makeNetworkError('only if cached')
        }

        // 2. Let forwardResponse be the result of running HTTP-network fetch
        // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        )

        // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
        // in the range 200 to 399, inclusive, invalidate appropriate stored
        // responses in httpCache, as per the "Invalidation" chapter of HTTP
        // Caching, and set storedResponse to null. [HTTP-CACHING]
        if (
          !safeMethodsSet.has(httpRequest.method) &&
          forwardResponse.status >= 200 &&
          forwardResponse.status <= 399
        ) {
          // TODO: cache
        }

        // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
        // then:
        if (revalidatingFlag && forwardResponse.status === 304) {
          // TODO: cache
        }

        // 5. If response is null, then:
        if (response == null) {
          // 1. Set response to forwardResponse.
          response = forwardResponse

          // 2. Store httpRequest and forwardResponse in httpCache, as per the
          // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
          // TODO: cache
        }
      }

      // 11. Set response’s URL list to a clone of httpRequest’s URL list.
      response.urlList = [...httpRequest.urlList]

      // 12. If httpRequest’s header list contains `Range`, then set response’s
      // range-requested flag.
      if (httpRequest.headersList.contains('range')) {
        response.rangeRequested = true
      }

      // 13. Set response’s request-includes-credentials to includeCredentials.
      response.requestIncludesCredentials = includeCredentials

      // 14. If response’s status is 401, httpRequest’s response tainting is not
      // "cors", includeCredentials is true, and request’s window is an environment
      // settings object, then:
      // TODO

      // 15. If response’s status is 407, then:
      if (response.status === 407) {
        // 1. If request’s window is "no-window", then return a network error.
        if (request.window === 'no-window') {
          return makeNetworkError()
        }

        // 2. ???

        // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams)
        }

        // 4. Prompt the end user as appropriate in request’s window and store
        // the result as a proxy-authentication entry. [HTTP-AUTH]
        // TODO: Invoke some kind of callback?

        // 5. Set response to the result of running HTTP-network-or-cache fetch given
        // fetchParams.
        // TODO
        return makeNetworkError('proxy authentication required')
      }

      // 16. If all of the following are true
      if (
        // response’s status is 421
        response.status === 421 &&
        // isNewConnectionFetch is false
        !isNewConnectionFetch &&
        // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request.body == null || request.body.source != null)
      ) {
        // then:

        // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams)
        }

        // 2. Set response to the result of running HTTP-network-or-cache
        // fetch given fetchParams, isAuthenticationFetch, and true.

        // TODO (spec): The spec doesn't specify this but we need to cancel
        // the active response before we can start a new one.
        // https://github.com/whatwg/fetch/issues/1293
        fetchParams.controller.connection.destroy()

        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        )
      }

      // 17. If isAuthenticationFetch is true, then create an authentication entry
      if (isAuthenticationFetch) {
        // TODO
      }

      // 18. Return response.
      return response
    }

    // https://fetch.spec.whatwg.org/#http-network-fetch
    async function httpNetworkFetch(
      fetchParams,
      includeCredentials = false,
      forceNewConnection = false
    ) {
      assert(
        !fetchParams.controller.connection ||
          fetchParams.controller.connection.destroyed
      )

      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          if (!this.destroyed) {
            this.destroyed = true
            this.abort?.(
              err ??
                new DOMException('The operation was aborted.', 'AbortError')
            )
          }
        }
      }

      // 1. Let request be fetchParams’s request.
      const request = fetchParams.request

      // 2. Let response be null.
      let response = null

      // 3. Let timingInfo be fetchParams’s timing info.
      const timingInfo = fetchParams.timingInfo

      // 4. Let httpCache be the result of determining the HTTP cache partition,
      // given request.
      // TODO: cache
      const httpCache = null

      // 5. If httpCache is null, then set request’s cache mode to "no-store".
      if (httpCache == null) {
        request.cache = 'no-store'
      }

      // 6. Let networkPartitionKey be the result of determining the network
      // partition key given request.
      // TODO

      // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
      // "no".
      const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars

      // 8. Switch on request’s mode:
      if (request.mode === 'websocket') {
        // Let connection be the result of obtaining a WebSocket connection,
        // given request’s current URL.
        // TODO
      } else {
        // Let connection be the result of obtaining a connection, given
        // networkPartitionKey, request’s current URL’s origin,
        // includeCredentials, and forceNewConnection.
        // TODO
      }

      // 9. Run these steps, but abort when the ongoing fetch is terminated:

      //    1. If connection is failure, then return a network error.

      //    2. Set timingInfo’s final connection timing info to the result of
      //    calling clamp and coarsen connection timing info with connection’s
      //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
      //    cross-origin isolated capability.

      //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
      //    and request’s body’s source is null, then append (`Transfer-Encoding`,
      //    `chunked`) to request’s header list.

      //    4. Set timingInfo’s final network-request start time to the coarsened
      //    shared current time given fetchParams’s cross-origin isolated
      //    capability.

      //    5. Set response to the result of making an HTTP request over connection
      //    using request with the following caveats:

      //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
      //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

      //        - If request’s body is non-null, and request’s body’s source is null,
      //        then the user agent may have a buffer of up to 64 kibibytes and store
      //        a part of request’s body in that buffer. If the user agent reads from
      //        request’s body beyond that buffer’s size and the user agent needs to
      //        resend request, then instead return a network error.

      //        - Set timingInfo’s final network-response start time to the coarsened
      //        shared current time given fetchParams’s cross-origin isolated capability,
      //        immediately after the user agent’s HTTP parser receives the first byte
      //        of the response (e.g., frame header bytes for HTTP/2 or response status
      //        line for HTTP/1.x).

      //        - Wait until all the headers are transmitted.

      //        - Any responses whose status is in the range 100 to 199, inclusive,
      //        and is not 101, are to be ignored, except for the purposes of setting
      //        timingInfo’s final network-response start time above.

      //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
      //    response is transferred via HTTP/1.0 or older, then return a network
      //    error.

      //    - If the HTTP request results in a TLS client certificate dialog, then:

      //        1. If request’s window is an environment settings object, make the
      //        dialog available in request’s window.

      //        2. Otherwise, return a network error.

      // To transmit request’s body body, run these steps:
      let requestBody = null
      // 1. If body is null and fetchParams’s process request end-of-body is
      // non-null, then queue a fetch task given fetchParams’s process request
      // end-of-body and fetchParams’s task destination.
      if (request.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody())
      } else if (request.body != null) {
        // 2. Otherwise, if body is non-null:

        //    1. Let processBodyChunk given bytes be these steps:
        const processBodyChunk = async function* (bytes) {
          // 1. If the ongoing fetch is terminated, then abort these steps.
          if (isCancelled(fetchParams)) {
            return
          }

          // 2. Run this step in parallel: transmit bytes.
          yield bytes

          // 3. If fetchParams’s process request body is non-null, then run
          // fetchParams’s process request body given bytes’s length.
          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)
        }

        // 2. Let processEndOfBody be these steps:
        const processEndOfBody = () => {
          // 1. If fetchParams is canceled, then abort these steps.
          if (isCancelled(fetchParams)) {
            return
          }

          // 2. If fetchParams’s process request end-of-body is non-null,
          // then run fetchParams’s process request end-of-body.
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody()
          }
        }

        // 3. Let processBodyError given e be these steps:
        const processBodyError = (e) => {
          // 1. If fetchParams is canceled, then abort these steps.
          if (isCancelled(fetchParams)) {
            return
          }

          // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
          if (e.name === 'AbortError') {
            fetchParams.controller.abort()
          } else {
            fetchParams.controller.terminate(e)
          }
        }

        // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
        // processBodyError, and fetchParams’s task destination.
        requestBody = (async function* () {
          try {
            for await (const bytes of request.body.stream) {
              yield* processBodyChunk(bytes)
            }
            processEndOfBody()
          } catch (err) {
            processBodyError(err)
          }
        })()
      }

      try {
        // socket is only provided for websockets
        const { body, status, statusText, headersList, socket } =
          await dispatch({ body: requestBody })

        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket })
        } else {
          const iterator = body[Symbol.asyncIterator]()
          fetchParams.controller.next = () => iterator.next()

          response = makeResponse({ status, statusText, headersList })
        }
      } catch (err) {
        // 10. If aborted, then:
        if (err.name === 'AbortError') {
          // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
          fetchParams.controller.connection.destroy()

          // 2. Return the appropriate network error for fetchParams.
          return makeAppropriateNetworkError(fetchParams, err)
        }

        return makeNetworkError(err)
      }

      // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
      // if it is suspended.
      const pullAlgorithm = () => {
        fetchParams.controller.resume()
      }

      // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
      // controller with reason, given reason.
      const cancelAlgorithm = (reason) => {
        fetchParams.controller.abort(reason)
      }

      // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
      // the user agent.
      // TODO

      // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
      // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
      // TODO

      // 15. Let stream be a new ReadableStream.
      // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
      // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
      // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
      if (!ReadableStream) {
        ReadableStream = __nccwpck_require__(5356).ReadableStream
      }

      const stream = new ReadableStream(
        {
          async start(controller) {
            fetchParams.controller.controller = controller
          },
          async pull(controller) {
            await pullAlgorithm(controller)
          },
          async cancel(reason) {
            await cancelAlgorithm(reason)
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1
          }
        }
      )

      // 17. Run these steps, but abort when the ongoing fetch is terminated:

      //    1. Set response’s body to a new body whose stream is stream.
      response.body = { stream }

      //    2. If response is not a network error and request’s cache mode is
      //    not "no-store", then update response in httpCache for request.
      //    TODO

      //    3. If includeCredentials is true and the user agent is not configured
      //    to block cookies for request (see section 7 of [COOKIES]), then run the
      //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
      //    the value of each header whose name is a byte-case-insensitive match for
      //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
      //    TODO

      // 18. If aborted, then:
      // TODO

      // 19. Run these steps in parallel:

      //    1. Run these steps, but abort when fetchParams is canceled:
      fetchParams.controller.on('terminated', onAborted)
      fetchParams.controller.resume = async () => {
        // 1. While true
        while (true) {
          // 1-3. See onData...

          // 4. Set bytes to the result of handling content codings given
          // codings and bytes.
          let bytes
          let isFailure
          try {
            const { done, value } = await fetchParams.controller.next()

            if (isAborted(fetchParams)) {
              break
            }

            bytes = done ? undefined : value
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              // zlib doesn't like empty streams.
              bytes = undefined
            } else {
              bytes = err

              // err may be propagated from the result of calling readablestream.cancel,
              // which might not be an error. https://github.com/nodejs/undici/issues/2009
              isFailure = true
            }
          }

          if (bytes === undefined) {
            // 2. Otherwise, if the bytes transmission for response’s message
            // body is done normally and stream is readable, then close
            // stream, finalize response for fetchParams and response, and
            // abort these in-parallel steps.
            readableStreamClose(fetchParams.controller.controller)

            finalizeResponse(fetchParams, response)

            return
          }

          // 5. Increase timingInfo’s decoded body size by bytes’s length.
          timingInfo.decodedBodySize += bytes?.byteLength ?? 0

          // 6. If bytes is failure, then terminate fetchParams’s controller.
          if (isFailure) {
            fetchParams.controller.terminate(bytes)
            return
          }

          // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
          // into stream.
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes))

          // 8. If stream is errored, then terminate the ongoing fetch.
          if (isErrored(stream)) {
            fetchParams.controller.terminate()
            return
          }

          // 9. If stream doesn’t need more data ask the user agent to suspend
          // the ongoing fetch.
          if (!fetchParams.controller.controller.desiredSize) {
            return
          }
        }
      }

      //    2. If aborted, then:
      function onAborted(reason) {
        // 2. If fetchParams is aborted, then:
        if (isAborted(fetchParams)) {
          // 1. Set response’s aborted flag.
          response.aborted = true

          // 2. If stream is readable, then error stream with the result of
          //    deserialize a serialized abort reason given fetchParams’s
          //    controller’s serialized abort reason and an
          //    implementation-defined realm.
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            )
          }
        } else {
          // 3. Otherwise, if stream is readable, error stream with a TypeError.
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              new TypeError('terminated', {
                cause: isErrorLike(reason) ? reason : undefined
              })
            )
          }
        }

        // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
        // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
        fetchParams.controller.connection.destroy()
      }

      // 20. Return response.
      return response

      async function dispatch({ body }) {
        const url = requestCurrentURL(request)
        /** @type {import('../..').Agent} */
        const agent = fetchParams.controller.dispatcher

        return new Promise((resolve, reject) =>
          agent.dispatch(
            {
              path: url.pathname + url.search,
              origin: url.origin,
              method: request.method,
              body: fetchParams.controller.dispatcher.isMockActive
                ? request.body && request.body.source
                : body,
              headers: request.headersList.entries,
              maxRedirections: 0,
              upgrade: request.mode === 'websocket' ? 'websocket' : undefined
            },
            {
              body: null,
              abort: null,

              onConnect(abort) {
                // TODO (fix): Do we need connection here?
                const { connection } = fetchParams.controller

                if (connection.destroyed) {
                  abort(
                    new DOMException('The operation was aborted.', 'AbortError')
                  )
                } else {
                  fetchParams.controller.on('terminated', abort)
                  this.abort = connection.abort = abort
                }
              },

              onHeaders(status, headersList, resume, statusText) {
                if (status < 200) {
                  return
                }

                let codings = []
                let location = ''

                const headers = new Headers()

                // For H2, the headers are a plain JS object
                // We distinguish between them and iterate accordingly
                if (Array.isArray(headersList)) {
                  for (let n = 0; n < headersList.length; n += 2) {
                    const key = headersList[n + 0].toString('latin1')
                    const val = headersList[n + 1].toString('latin1')
                    if (key.toLowerCase() === 'content-encoding') {
                      // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                      // "All content-coding values are case-insensitive..."
                      codings = val
                        .toLowerCase()
                        .split(',')
                        .map((x) => x.trim())
                    } else if (key.toLowerCase() === 'location') {
                      location = val
                    }

                    headers.append(key, val)
                  }
                } else {
                  const keys = Object.keys(headersList)
                  for (const key of keys) {
                    const val = headersList[key]
                    if (key.toLowerCase() === 'content-encoding') {
                      // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                      // "All content-coding values are case-insensitive..."
                      codings = val
                        .toLowerCase()
                        .split(',')
                        .map((x) => x.trim())
                        .reverse()
                    } else if (key.toLowerCase() === 'location') {
                      location = val
                    }

                    headers.append(key, val)
                  }
                }

                this.body = new Readable({ read: resume })

                const decoders = []

                const willFollow =
                  request.redirect === 'follow' &&
                  location &&
                  redirectStatusSet.has(status)

                // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
                if (
                  request.method !== 'HEAD' &&
                  request.method !== 'CONNECT' &&
                  !nullBodyStatus.includes(status) &&
                  !willFollow
                ) {
                  for (const coding of codings) {
                    // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
                    if (coding === 'x-gzip' || coding === 'gzip') {
                      decoders.push(
                        zlib.createGunzip({
                          // Be less strict when decoding compressed responses, since sometimes
                          // servers send slightly invalid responses that are still accepted
                          // by common browsers.
                          // Always using Z_SYNC_FLUSH is what cURL does.
                          flush: zlib.constants.Z_SYNC_FLUSH,
                          finishFlush: zlib.constants.Z_SYNC_FLUSH
                        })
                      )
                    } else if (coding === 'deflate') {
                      decoders.push(zlib.createInflate())
                    } else if (coding === 'br') {
                      decoders.push(zlib.createBrotliDecompress())
                    } else {
                      decoders.length = 0
                      break
                    }
                  }
                }

                resolve({
                  status,
                  statusText,
                  headersList: headers[kHeadersList],
                  body: decoders.length
                    ? pipeline(this.body, ...decoders, () => {})
                    : this.body.on('error', () => {})
                })

                return true
              },

              onData(chunk) {
                if (fetchParams.controller.dump) {
                  return
                }

                // 1. If one or more bytes have been transmitted from response’s
                // message body, then:

                //  1. Let bytes be the transmitted bytes.
                const bytes = chunk

                //  2. Let codings be the result of extracting header list values
                //  given `Content-Encoding` and response’s header list.
                //  See pullAlgorithm.

                //  3. Increase timingInfo’s encoded body size by bytes’s length.
                timingInfo.encodedBodySize += bytes.byteLength

                //  4. See pullAlgorithm...

                return this.body.push(bytes)
              },

              onComplete() {
                if (this.abort) {
                  fetchParams.controller.off('terminated', this.abort)
                }

                fetchParams.controller.ended = true

                this.body.push(null)
              },

              onError(error) {
                if (this.abort) {
                  fetchParams.controller.off('terminated', this.abort)
                }

                this.body?.destroy(error)

                fetchParams.controller.terminate(error)

                reject(error)
              },

              onUpgrade(status, headersList, socket) {
                if (status !== 101) {
                  return
                }

                const headers = new Headers()

                for (let n = 0; n < headersList.length; n += 2) {
                  const key = headersList[n + 0].toString('latin1')
                  const val = headersList[n + 1].toString('latin1')

                  headers.append(key, val)
                }

                resolve({
                  status,
                  statusText: STATUS_CODES[status],
                  headersList: headers[kHeadersList],
                  socket
                })

                return true
              }
            }
          )
        )
      }
    }

    module.exports = {
      fetch,
      Fetch,
      fetching,
      finalizeAndReportTiming
    }

    /***/
  },

  /***/ 8359: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    /* globals AbortController */

    const { extractBody, mixinBody, cloneBody } = __nccwpck_require__(1472)
    const { Headers, fill: fillHeaders, HeadersList } = __nccwpck_require__(554)
    const { FinalizationRegistry } = __nccwpck_require__(6436)()
    const util = __nccwpck_require__(3983)
    const {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer
    } = __nccwpck_require__(2538)
    const {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = __nccwpck_require__(1037)
    const { kEnumerableProperty } = util
    const { kHeaders, kSignal, kState, kGuard, kRealm } =
      __nccwpck_require__(5861)
    const { webidl } = __nccwpck_require__(1744)
    const { getGlobalOrigin } = __nccwpck_require__(1246)
    const { URLSerializer } = __nccwpck_require__(685)
    const { kHeadersList } = __nccwpck_require__(2785)
    const assert = __nccwpck_require__(9491)
    const {
      getMaxListeners,
      setMaxListeners,
      getEventListeners,
      defaultMaxListeners
    } = __nccwpck_require__(2361)

    let TransformStream = globalThis.TransformStream

    const kInit = Symbol('init')
    const kAbortController = Symbol('abortController')

    const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener('abort', abort)
    })

    // https://fetch.spec.whatwg.org/#request-class
    class Request {
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init = {}) {
        if (input === kInit) {
          return
        }

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'Request constructor'
        })

        input = webidl.converters.RequestInfo(input)
        init = webidl.converters.RequestInit(init)

        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              return this.baseUrl?.origin
            },
            policyContainer: makePolicyContainer()
          }
        }

        // 1. Let request be null.
        let request = null

        // 2. Let fallbackMode be null.
        let fallbackMode = null

        // 3. Let baseURL be this’s relevant settings object’s API base URL.
        const baseUrl = this[kRealm].settingsObject.baseUrl

        // 4. Let signal be null.
        let signal = null

        // 5. If input is a string, then:
        if (typeof input === 'string') {
          // 1. Let parsedURL be the result of parsing input with baseURL.
          // 2. If parsedURL is failure, then throw a TypeError.
          let parsedURL
          try {
            parsedURL = new URL(input, baseUrl)
          } catch (err) {
            throw new TypeError('Failed to parse URL from ' + input, {
              cause: err
            })
          }

          // 3. If parsedURL includes credentials, then throw a TypeError.
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              'Request cannot be constructed from a URL that includes credentials: ' +
                input
            )
          }

          // 4. Set request to a new request whose URL is parsedURL.
          request = makeRequest({ urlList: [parsedURL] })

          // 5. Set fallbackMode to "cors".
          fallbackMode = 'cors'
        } else {
          // 6. Otherwise:

          // 7. Assert: input is a Request object.
          assert(input instanceof Request)

          // 8. Set request to input’s request.
          request = input[kState]

          // 9. Set signal to input’s signal.
          signal = input[kSignal]
        }

        // 7. Let origin be this’s relevant settings object’s origin.
        const origin = this[kRealm].settingsObject.origin

        // 8. Let window be "client".
        let window = 'client'

        // 9. If request’s window is an environment settings object and its origin
        // is same origin with origin, then set window to request’s window.
        if (
          request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
          sameOrigin(request.window, origin)
        ) {
          window = request.window
        }

        // 10. If init["window"] exists and is non-null, then throw a TypeError.
        if (init.window != null) {
          throw new TypeError(`'window' option '${window}' must be null`)
        }

        // 11. If init["window"] exists, then set window to "no-window".
        if ('window' in init) {
          window = 'no-window'
        }

        // 12. Set request to a new request with the following properties:
        request = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window,
          // priority request’s priority.
          priority: request.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request.origin,
          // referrer request’s referrer.
          referrer: request.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request.referrerPolicy,
          // mode request’s mode.
          mode: request.mode,
          // credentials mode request’s credentials mode.
          credentials: request.credentials,
          // cache mode request’s cache mode.
          cache: request.cache,
          // redirect mode request’s redirect mode.
          redirect: request.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request.integrity,
          // keepalive request’s keepalive.
          keepalive: request.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request.urlList]
        })

        // 13. If init is not empty, then:
        if (Object.keys(init).length > 0) {
          // 1. If request’s mode is "navigate", then set it to "same-origin".
          if (request.mode === 'navigate') {
            request.mode = 'same-origin'
          }

          // 2. Unset request’s reload-navigation flag.
          request.reloadNavigation = false

          // 3. Unset request’s history-navigation flag.
          request.historyNavigation = false

          // 4. Set request’s origin to "client".
          request.origin = 'client'

          // 5. Set request’s referrer to "client"
          request.referrer = 'client'

          // 6. Set request’s referrer policy to the empty string.
          request.referrerPolicy = ''

          // 7. Set request’s URL to request’s current URL.
          request.url = request.urlList[request.urlList.length - 1]

          // 8. Set request’s URL list to « request’s URL ».
          request.urlList = [request.url]
        }

        // 14. If init["referrer"] exists, then:
        if (init.referrer !== undefined) {
          // 1. Let referrer be init["referrer"].
          const referrer = init.referrer

          // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
          if (referrer === '') {
            request.referrer = 'no-referrer'
          } else {
            // 1. Let parsedReferrer be the result of parsing referrer with
            // baseURL.
            // 2. If parsedReferrer is failure, then throw a TypeError.
            let parsedReferrer
            try {
              parsedReferrer = new URL(referrer, baseUrl)
            } catch (err) {
              throw new TypeError(
                `Referrer "${referrer}" is not a valid URL.`,
                { cause: err }
              )
            }

            // 3. If one of the following is true
            // - parsedReferrer’s scheme is "about" and path is the string "client"
            // - parsedReferrer’s origin is not same origin with origin
            // then set request’s referrer to "client".
            if (
              (parsedReferrer.protocol === 'about:' &&
                parsedReferrer.hostname === 'client') ||
              (origin &&
                !sameOrigin(
                  parsedReferrer,
                  this[kRealm].settingsObject.baseUrl
                ))
            ) {
              request.referrer = 'client'
            } else {
              // 4. Otherwise, set request’s referrer to parsedReferrer.
              request.referrer = parsedReferrer
            }
          }
        }

        // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
        // to it.
        if (init.referrerPolicy !== undefined) {
          request.referrerPolicy = init.referrerPolicy
        }

        // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
        let mode
        if (init.mode !== undefined) {
          mode = init.mode
        } else {
          mode = fallbackMode
        }

        // 17. If mode is "navigate", then throw a TypeError.
        if (mode === 'navigate') {
          throw webidl.errors.exception({
            header: 'Request constructor',
            message: 'invalid request mode navigate.'
          })
        }

        // 18. If mode is non-null, set request’s mode to mode.
        if (mode != null) {
          request.mode = mode
        }

        // 19. If init["credentials"] exists, then set request’s credentials mode
        // to it.
        if (init.credentials !== undefined) {
          request.credentials = init.credentials
        }

        // 18. If init["cache"] exists, then set request’s cache mode to it.
        if (init.cache !== undefined) {
          request.cache = init.cache
        }

        // 21. If request’s cache mode is "only-if-cached" and request’s mode is
        // not "same-origin", then throw a TypeError.
        if (
          request.cache === 'only-if-cached' &&
          request.mode !== 'same-origin'
        ) {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          )
        }

        // 22. If init["redirect"] exists, then set request’s redirect mode to it.
        if (init.redirect !== undefined) {
          request.redirect = init.redirect
        }

        // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
        if (init.integrity !== undefined && init.integrity != null) {
          request.integrity = String(init.integrity)
        }

        // 24. If init["keepalive"] exists, then set request’s keepalive to it.
        if (init.keepalive !== undefined) {
          request.keepalive = Boolean(init.keepalive)
        }

        // 25. If init["method"] exists, then:
        if (init.method !== undefined) {
          // 1. Let method be init["method"].
          let method = init.method

          // 2. If method is not a method or method is a forbidden method, then
          // throw a TypeError.
          if (!isValidHTTPToken(init.method)) {
            throw TypeError(`'${init.method}' is not a valid HTTP method.`)
          }

          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw TypeError(`'${init.method}' HTTP method is unsupported.`)
          }

          // 3. Normalize method.
          method = normalizeMethod(init.method)

          // 4. Set request’s method to method.
          request.method = method
        }

        // 26. If init["signal"] exists, then set signal to it.
        if (init.signal !== undefined) {
          signal = init.signal
        }

        // 27. Set this’s request to request.
        this[kState] = request

        // 28. Set this’s signal to a new AbortSignal object with this’s relevant
        // Realm.
        // TODO: could this be simplified with AbortSignal.any
        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
        const ac = new AbortController()
        this[kSignal] = ac.signal
        this[kSignal][kRealm] = this[kRealm]

        // 29. If signal is not null, then make this’s signal follow signal.
        if (signal != null) {
          if (
            !signal ||
            typeof signal.aborted !== 'boolean' ||
            typeof signal.addEventListener !== 'function'
          ) {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            )
          }

          if (signal.aborted) {
            ac.abort(signal.reason)
          } else {
            // Keep a strong ref to ac while request object
            // is alive. This is needed to prevent AbortController
            // from being prematurely garbage collected.
            // See, https://github.com/nodejs/undici/issues/1926.
            this[kAbortController] = ac

            const acRef = new WeakRef(ac)
            const abort = function () {
              const ac = acRef.deref()
              if (ac !== undefined) {
                ac.abort(this.reason)
              }
            }

            // Third-party AbortControllers may not work with these.
            // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
            try {
              // If the max amount of listeners is equal to the default, increase it
              // This is only available in node >= v19.9.0
              if (
                typeof getMaxListeners === 'function' &&
                getMaxListeners(signal) === defaultMaxListeners
              ) {
                setMaxListeners(100, signal)
              } else if (
                getEventListeners(signal, 'abort').length >= defaultMaxListeners
              ) {
                setMaxListeners(100, signal)
              }
            } catch {}

            util.addAbortListener(signal, abort)
            requestFinalizer.register(ac, { signal, abort })
          }
        }

        // 30. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is request’s header list and guard is
        // "request".
        this[kHeaders] = new Headers()
        this[kHeaders][kHeadersList] = request.headersList
        this[kHeaders][kGuard] = 'request'
        this[kHeaders][kRealm] = this[kRealm]

        // 31. If this’s request’s mode is "no-cors", then:
        if (mode === 'no-cors') {
          // 1. If this’s request’s method is not a CORS-safelisted method,
          // then throw a TypeError.
          if (!corsSafeListedMethodsSet.has(request.method)) {
            throw new TypeError(
              `'${request.method} is unsupported in no-cors mode.`
            )
          }

          // 2. Set this’s headers’s guard to "request-no-cors".
          this[kHeaders][kGuard] = 'request-no-cors'
        }

        // 32. If init is not empty, then:
        if (Object.keys(init).length !== 0) {
          // 1. Let headers be a copy of this’s headers and its associated header
          // list.
          let headers = new Headers(this[kHeaders])

          // 2. If init["headers"] exists, then set headers to init["headers"].
          if (init.headers !== undefined) {
            headers = init.headers
          }

          // 3. Empty this’s headers’s header list.
          this[kHeaders][kHeadersList].clear()

          // 4. If headers is a Headers object, then for each header in its header
          // list, append header’s name/header’s value to this’s headers.
          if (headers.constructor.name === 'Headers') {
            for (const [key, val] of headers) {
              this[kHeaders].append(key, val)
            }
          } else {
            // 5. Otherwise, fill this’s headers with headers.
            fillHeaders(this[kHeaders], headers)
          }
        }

        // 33. Let inputBody be input’s request’s body if input is a Request
        // object; otherwise null.
        const inputBody = input instanceof Request ? input[kState].body : null

        // 34. If either init["body"] exists and is non-null or inputBody is
        // non-null, and request’s method is `GET` or `HEAD`, then throw a
        // TypeError.
        if (
          (init.body != null || inputBody != null) &&
          (request.method === 'GET' || request.method === 'HEAD')
        ) {
          throw new TypeError('Request with GET/HEAD method cannot have body.')
        }

        // 35. Let initBody be null.
        let initBody = null

        // 36. If init["body"] exists and is non-null, then:
        if (init.body != null) {
          // 1. Let Content-Type be null.
          // 2. Set initBody and Content-Type to the result of extracting
          // init["body"], with keepalive set to request’s keepalive.
          const [extractedBody, contentType] = extractBody(
            init.body,
            request.keepalive
          )
          initBody = extractedBody

          // 3, If Content-Type is non-null and this’s headers’s header list does
          // not contain `Content-Type`, then append `Content-Type`/Content-Type to
          // this’s headers.
          if (
            contentType &&
            !this[kHeaders][kHeadersList].contains('content-type')
          ) {
            this[kHeaders].append('content-type', contentType)
          }
        }

        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
        // inputBody.
        const inputOrInitBody = initBody ?? inputBody

        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
        // null, then:
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          // 1. If initBody is non-null and init["duplex"] does not exist,
          //    then throw a TypeError.
          if (initBody != null && init.duplex == null) {
            throw new TypeError(
              'RequestInit: duplex option is required when sending a body.'
            )
          }

          // 2. If this’s request’s mode is neither "same-origin" nor "cors",
          // then throw a TypeError.
          if (request.mode !== 'same-origin' && request.mode !== 'cors') {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            )
          }

          // 3. Set this’s request’s use-CORS-preflight flag.
          request.useCORSPreflightFlag = true
        }

        // 39. Let finalBody be inputOrInitBody.
        let finalBody = inputOrInitBody

        // 40. If initBody is null and inputBody is non-null, then:
        if (initBody == null && inputBody != null) {
          // 1. If input is unusable, then throw a TypeError.
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              'Cannot construct a Request with a Request object that has already been used.'
            )
          }

          // 2. Set finalBody to the result of creating a proxy for inputBody.
          if (!TransformStream) {
            TransformStream = __nccwpck_require__(5356).TransformStream
          }

          // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
          const identityTransform = new TransformStream()
          inputBody.stream.pipeThrough(identityTransform)
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          }
        }

        // 41. Set this’s request’s body to finalBody.
        this[kState].body = finalBody
      }

      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, Request)

        // The method getter steps are to return this’s request’s method.
        return this[kState].method
      }

      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, Request)

        // The url getter steps are to return this’s request’s URL, serialized.
        return URLSerializer(this[kState].url)
      }

      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, Request)

        // The headers getter steps are to return this’s headers.
        return this[kHeaders]
      }

      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, Request)

        // The destination getter are to return this’s request’s destination.
        return this[kState].destination
      }

      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, Request)

        // 1. If this’s request’s referrer is "no-referrer", then return the
        // empty string.
        if (this[kState].referrer === 'no-referrer') {
          return ''
        }

        // 2. If this’s request’s referrer is "client", then return
        // "about:client".
        if (this[kState].referrer === 'client') {
          return 'about:client'
        }

        // Return this’s request’s referrer, serialized.
        return this[kState].referrer.toString()
      }

      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, Request)

        // The referrerPolicy getter steps are to return this’s request’s referrer policy.
        return this[kState].referrerPolicy
      }

      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, Request)

        // The mode getter steps are to return this’s request’s mode.
        return this[kState].mode
      }

      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        // The credentials getter steps are to return this’s request’s credentials mode.
        return this[kState].credentials
      }

      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, Request)

        // The cache getter steps are to return this’s request’s cache mode.
        return this[kState].cache
      }

      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, Request)

        // The redirect getter steps are to return this’s request’s redirect mode.
        return this[kState].redirect
      }

      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, Request)

        // The integrity getter steps are to return this’s request’s integrity
        // metadata.
        return this[kState].integrity
      }

      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, Request)

        // The keepalive getter steps are to return this’s request’s keepalive.
        return this[kState].keepalive
      }

      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, Request)

        // The isReloadNavigation getter steps are to return true if this’s
        // request’s reload-navigation flag is set; otherwise false.
        return this[kState].reloadNavigation
      }

      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, Request)

        // The isHistoryNavigation getter steps are to return true if this’s request’s
        // history-navigation flag is set; otherwise false.
        return this[kState].historyNavigation
      }

      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, Request)

        // The signal getter steps are to return this’s signal.
        return this[kSignal]
      }

      get body() {
        webidl.brandCheck(this, Request)

        return this[kState].body ? this[kState].body.stream : null
      }

      get bodyUsed() {
        webidl.brandCheck(this, Request)

        return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
      }

      get duplex() {
        webidl.brandCheck(this, Request)

        return 'half'
      }

      // Returns a clone of request.
      clone() {
        webidl.brandCheck(this, Request)

        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError('unusable')
        }

        // 2. Let clonedRequest be the result of cloning this’s request.
        const clonedRequest = cloneRequest(this[kState])

        // 3. Let clonedRequestObject be the result of creating a Request object,
        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
        const clonedRequestObject = new Request(kInit)
        clonedRequestObject[kState] = clonedRequest
        clonedRequestObject[kRealm] = this[kRealm]
        clonedRequestObject[kHeaders] = new Headers()
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]

        // 4. Make clonedRequestObject’s signal follow this’s signal.
        const ac = new AbortController()
        if (this.signal.aborted) {
          ac.abort(this.signal.reason)
        } else {
          util.addAbortListener(this.signal, () => {
            ac.abort(this.signal.reason)
          })
        }
        clonedRequestObject[kSignal] = ac.signal

        // 4. Return clonedRequestObject.
        return clonedRequestObject
      }
    }

    mixinBody(Request)

    function makeRequest(init) {
      // https://fetch.spec.whatwg.org/#requests
      const request = {
        method: 'GET',
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: '',
        window: 'client',
        keepalive: false,
        serviceWorkers: 'all',
        initiator: '',
        destination: '',
        priority: null,
        origin: 'client',
        policyContainer: 'client',
        referrer: 'client',
        referrerPolicy: '',
        mode: 'no-cors',
        useCORSPreflightFlag: false,
        credentials: 'same-origin',
        useCredentials: false,
        cache: 'default',
        redirect: 'follow',
        integrity: '',
        cryptoGraphicsNonceMetadata: '',
        parserMetadata: '',
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: 'basic',
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList
          ? new HeadersList(init.headersList)
          : new HeadersList()
      }
      request.url = request.urlList[0]
      return request
    }

    // https://fetch.spec.whatwg.org/#concept-request-clone
    function cloneRequest(request) {
      // To clone a request request, run these steps:

      // 1. Let newRequest be a copy of request, except for its body.
      const newRequest = makeRequest({ ...request, body: null })

      // 2. If request’s body is non-null, set newRequest’s body to the
      // result of cloning request’s body.
      if (request.body != null) {
        newRequest.body = cloneBody(request.body)
      }

      // 3. Return newRequest.
      return newRequest
    }

    Object.defineProperties(Request.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: 'Request',
        configurable: true
      }
    })

    webidl.converters.Request = webidl.interfaceConverter(Request)

    // https://fetch.spec.whatwg.org/#requestinfo
    webidl.converters.RequestInfo = function (V) {
      if (typeof V === 'string') {
        return webidl.converters.USVString(V)
      }

      if (V instanceof Request) {
        return webidl.converters.Request(V)
      }

      return webidl.converters.USVString(V)
    }

    webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal)

    // https://fetch.spec.whatwg.org/#requestinit
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: 'method',
        converter: webidl.converters.ByteString
      },
      {
        key: 'headers',
        converter: webidl.converters.HeadersInit
      },
      {
        key: 'body',
        converter: webidl.nullableConverter(webidl.converters.BodyInit)
      },
      {
        key: 'referrer',
        converter: webidl.converters.USVString
      },
      {
        key: 'referrerPolicy',
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: 'mode',
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: 'credentials',
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: 'cache',
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: 'redirect',
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: 'integrity',
        converter: webidl.converters.DOMString
      },
      {
        key: 'keepalive',
        converter: webidl.converters.boolean
      },
      {
        key: 'signal',
        converter: webidl.nullableConverter((signal) =>
          webidl.converters.AbortSignal(signal, { strict: false })
        )
      },
      {
        key: 'window',
        converter: webidl.converters.any
      },
      {
        key: 'duplex',
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ])

    module.exports = { Request, makeRequest }

    /***/
  },

  /***/ 7823: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { Headers, HeadersList, fill } = __nccwpck_require__(554)
    const { extractBody, cloneBody, mixinBody } = __nccwpck_require__(1472)
    const util = __nccwpck_require__(3983)
    const { kEnumerableProperty } = util
    const {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = __nccwpck_require__(2538)
    const { redirectStatusSet, nullBodyStatus, DOMException } =
      __nccwpck_require__(1037)
    const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(5861)
    const { webidl } = __nccwpck_require__(1744)
    const { FormData } = __nccwpck_require__(2015)
    const { getGlobalOrigin } = __nccwpck_require__(1246)
    const { URLSerializer } = __nccwpck_require__(685)
    const { kHeadersList } = __nccwpck_require__(2785)
    const assert = __nccwpck_require__(9491)
    const { types } = __nccwpck_require__(3837)

    const ReadableStream =
      globalThis.ReadableStream || __nccwpck_require__(5356).ReadableStream
    const textEncoder = new TextEncoder('utf-8')

    // https://fetch.spec.whatwg.org/#response-class
    class Response {
      // Creates network error Response.
      static error() {
        // TODO
        const relevantRealm = { settingsObject: {} }

        // The static error() method steps are to return the result of creating a
        // Response object, given a new network error, "immutable", and this’s
        // relevant Realm.
        const responseObject = new Response()
        responseObject[kState] = makeNetworkError()
        responseObject[kRealm] = relevantRealm
        responseObject[kHeaders][kHeadersList] =
          responseObject[kState].headersList
        responseObject[kHeaders][kGuard] = 'immutable'
        responseObject[kHeaders][kRealm] = relevantRealm
        return responseObject
      }

      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })

        if (init !== null) {
          init = webidl.converters.ResponseInit(init)
        }

        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        )

        // 2. Let body be the result of extracting bytes.
        const body = extractBody(bytes)

        // 3. Let responseObject be the result of creating a Response object, given a new response,
        //    "response", and this’s relevant Realm.
        const relevantRealm = { settingsObject: {} }
        const responseObject = new Response()
        responseObject[kRealm] = relevantRealm
        responseObject[kHeaders][kGuard] = 'response'
        responseObject[kHeaders][kRealm] = relevantRealm

        // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
        initializeResponse(responseObject, init, {
          body: body[0],
          type: 'application/json'
        })

        // 5. Return responseObject.
        return responseObject
      }

      // Creates a redirect Response that redirects to url with status status.
      static redirect(url, status = 302) {
        const relevantRealm = { settingsObject: {} }

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'Response.redirect'
        })

        url = webidl.converters.USVString(url)
        status = webidl.converters['unsigned short'](status)

        // 1. Let parsedURL be the result of parsing url with current settings
        // object’s API base URL.
        // 2. If parsedURL is failure, then throw a TypeError.
        // TODO: base-URL?
        let parsedURL
        try {
          parsedURL = new URL(url, getGlobalOrigin())
        } catch (err) {
          throw Object.assign(
            new TypeError('Failed to parse URL from ' + url),
            {
              cause: err
            }
          )
        }

        // 3. If status is not a redirect status, then throw a RangeError.
        if (!redirectStatusSet.has(status)) {
          throw new RangeError('Invalid status code ' + status)
        }

        // 4. Let responseObject be the result of creating a Response object,
        // given a new response, "immutable", and this’s relevant Realm.
        const responseObject = new Response()
        responseObject[kRealm] = relevantRealm
        responseObject[kHeaders][kGuard] = 'immutable'
        responseObject[kHeaders][kRealm] = relevantRealm

        // 5. Set responseObject’s response’s status to status.
        responseObject[kState].status = status

        // 6. Let value be parsedURL, serialized and isomorphic encoded.
        const value = isomorphicEncode(URLSerializer(parsedURL))

        // 7. Append `Location`/value to responseObject’s response’s header list.
        responseObject[kState].headersList.append('location', value)

        // 8. Return responseObject.
        return responseObject
      }

      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body = null, init = {}) {
        if (body !== null) {
          body = webidl.converters.BodyInit(body)
        }

        init = webidl.converters.ResponseInit(init)

        // TODO
        this[kRealm] = { settingsObject: {} }

        // 1. Set this’s response to a new response.
        this[kState] = makeResponse({})

        // 2. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is this’s response’s header list and guard
        // is "response".
        this[kHeaders] = new Headers()
        this[kHeaders][kGuard] = 'response'
        this[kHeaders][kHeadersList] = this[kState].headersList
        this[kHeaders][kRealm] = this[kRealm]

        // 3. Let bodyWithType be null.
        let bodyWithType = null

        // 4. If body is non-null, then set bodyWithType to the result of extracting body.
        if (body != null) {
          const [extractedBody, type] = extractBody(body)
          bodyWithType = { body: extractedBody, type }
        }

        // 5. Perform initialize a response given this, init, and bodyWithType.
        initializeResponse(this, init, bodyWithType)
      }

      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, Response)

        // The type getter steps are to return this’s response’s type.
        return this[kState].type
      }

      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, Response)

        const urlList = this[kState].urlList

        // The url getter steps are to return the empty string if this’s
        // response’s URL is null; otherwise this’s response’s URL,
        // serialized with exclude fragment set to true.
        const url = urlList[urlList.length - 1] ?? null

        if (url === null) {
          return ''
        }

        return URLSerializer(url, true)
      }

      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, Response)

        // The redirected getter steps are to return true if this’s response’s URL
        // list has more than one item; otherwise false.
        return this[kState].urlList.length > 1
      }

      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, Response)

        // The status getter steps are to return this’s response’s status.
        return this[kState].status
      }

      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, Response)

        // The ok getter steps are to return true if this’s response’s status is an
        // ok status; otherwise false.
        return this[kState].status >= 200 && this[kState].status <= 299
      }

      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, Response)

        // The statusText getter steps are to return this’s response’s status
        // message.
        return this[kState].statusText
      }

      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, Response)

        // The headers getter steps are to return this’s headers.
        return this[kHeaders]
      }

      get body() {
        webidl.brandCheck(this, Response)

        return this[kState].body ? this[kState].body.stream : null
      }

      get bodyUsed() {
        webidl.brandCheck(this, Response)

        return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
      }

      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, Response)

        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || (this.body && this.body.locked)) {
          throw webidl.errors.exception({
            header: 'Response.clone',
            message: 'Body has already been consumed.'
          })
        }

        // 2. Let clonedResponse be the result of cloning this’s response.
        const clonedResponse = cloneResponse(this[kState])

        // 3. Return the result of creating a Response object, given
        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
        const clonedResponseObject = new Response()
        clonedResponseObject[kState] = clonedResponse
        clonedResponseObject[kRealm] = this[kRealm]
        clonedResponseObject[kHeaders][kHeadersList] =
          clonedResponse.headersList
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]

        return clonedResponseObject
      }
    }

    mixinBody(Response)

    Object.defineProperties(Response.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: 'Response',
        configurable: true
      }
    })

    Object.defineProperties(Response, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    })

    // https://fetch.spec.whatwg.org/#concept-response-clone
    function cloneResponse(response) {
      // To clone a response response, run these steps:

      // 1. If response is a filtered response, then return a new identical
      // filtered response whose internal response is a clone of response’s
      // internal response.
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        )
      }

      // 2. Let newResponse be a copy of response, except for its body.
      const newResponse = makeResponse({ ...response, body: null })

      // 3. If response’s body is non-null, then set newResponse’s body to the
      // result of cloning response’s body.
      if (response.body != null) {
        newResponse.body = cloneBody(response.body)
      }

      // 4. Return newResponse.
      return newResponse
    }

    function makeResponse(init) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: 'default',
        status: 200,
        timingInfo: null,
        cacheState: '',
        statusText: '',
        ...init,
        headersList: init.headersList
          ? new HeadersList(init.headersList)
          : new HeadersList(),
        urlList: init.urlList ? [...init.urlList] : []
      }
    }

    function makeNetworkError(reason) {
      const isError = isErrorLike(reason)
      return makeResponse({
        type: 'error',
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === 'AbortError'
      })
    }

    function makeFilteredResponse(response, state) {
      state = {
        internalResponse: response,
        ...state
      }

      return new Proxy(response, {
        get(target, p) {
          return p in state ? state[p] : target[p]
        },
        set(target, p, value) {
          assert(!(p in state))
          target[p] = value
          return true
        }
      })
    }

    // https://fetch.spec.whatwg.org/#concept-filtered-response
    function filterResponse(response, type) {
      // Set response to the following filtered response with response as its
      // internal response, depending on request’s response tainting:
      if (type === 'basic') {
        // A basic filtered response is a filtered response whose type is "basic"
        // and header list excludes any headers in internal response’s header list
        // whose name is a forbidden response-header name.

        // Note: undici does not implement forbidden response-header names
        return makeFilteredResponse(response, {
          type: 'basic',
          headersList: response.headersList
        })
      } else if (type === 'cors') {
        // A CORS filtered response is a filtered response whose type is "cors"
        // and header list excludes any headers in internal response’s header
        // list whose name is not a CORS-safelisted response-header name, given
        // internal response’s CORS-exposed header-name list.

        // Note: undici does not implement CORS-safelisted response-header names
        return makeFilteredResponse(response, {
          type: 'cors',
          headersList: response.headersList
        })
      } else if (type === 'opaque') {
        // An opaque filtered response is a filtered response whose type is
        // "opaque", URL list is the empty list, status is 0, status message
        // is the empty byte sequence, header list is empty, and body is null.

        return makeFilteredResponse(response, {
          type: 'opaque',
          urlList: Object.freeze([]),
          status: 0,
          statusText: '',
          body: null
        })
      } else if (type === 'opaqueredirect') {
        // An opaque-redirect filtered response is a filtered response whose type
        // is "opaqueredirect", status is 0, status message is the empty byte
        // sequence, header list is empty, and body is null.

        return makeFilteredResponse(response, {
          type: 'opaqueredirect',
          status: 0,
          statusText: '',
          headersList: [],
          body: null
        })
      } else {
        assert(false)
      }
    }

    // https://fetch.spec.whatwg.org/#appropriate-network-error
    function makeAppropriateNetworkError(fetchParams, err = null) {
      // 1. Assert: fetchParams is canceled.
      assert(isCancelled(fetchParams))

      // 2. Return an aborted network error if fetchParams is aborted;
      // otherwise return a network error.
      return isAborted(fetchParams)
        ? makeNetworkError(
            Object.assign(
              new DOMException('The operation was aborted.', 'AbortError'),
              { cause: err }
            )
          )
        : makeNetworkError(
            Object.assign(new DOMException('Request was cancelled.'), {
              cause: err
            })
          )
    }

    // https://whatpr.org/fetch/1392.html#initialize-a-response
    function initializeResponse(response, init, body) {
      // 1. If init["status"] is not in the range 200 to 599, inclusive, then
      //    throw a RangeError.
      if (init.status !== null && (init.status < 200 || init.status > 599)) {
        throw new RangeError(
          'init["status"] must be in the range of 200 to 599, inclusive.'
        )
      }

      // 2. If init["statusText"] does not match the reason-phrase token production,
      //    then throw a TypeError.
      if ('statusText' in init && init.statusText != null) {
        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
        if (!isValidReasonPhrase(String(init.statusText))) {
          throw new TypeError('Invalid statusText')
        }
      }

      // 3. Set response’s response’s status to init["status"].
      if ('status' in init && init.status != null) {
        response[kState].status = init.status
      }

      // 4. Set response’s response’s status message to init["statusText"].
      if ('statusText' in init && init.statusText != null) {
        response[kState].statusText = init.statusText
      }

      // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
      if ('headers' in init && init.headers != null) {
        fill(response[kHeaders], init.headers)
      }

      // 6. If body was given, then:
      if (body) {
        // 1. If response's status is a null body status, then throw a TypeError.
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: 'Response constructor',
            message: 'Invalid response status code ' + response.status
          })
        }

        // 2. Set response's body to body's body.
        response[kState].body = body.body

        // 3. If body's type is non-null and response's header list does not contain
        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
        if (
          body.type != null &&
          !response[kState].headersList.contains('Content-Type')
        ) {
          response[kState].headersList.append('content-type', body.type)
        }
      }
    }

    webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream)

    webidl.converters.FormData = webidl.interfaceConverter(FormData)

    webidl.converters.URLSearchParams =
      webidl.interfaceConverter(URLSearchParams)

    // https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
    webidl.converters.XMLHttpRequestBodyInit = function (V) {
      if (typeof V === 'string') {
        return webidl.converters.USVString(V)
      }

      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false })
      }

      if (
        types.isAnyArrayBuffer(V) ||
        types.isTypedArray(V) ||
        types.isDataView(V)
      ) {
        return webidl.converters.BufferSource(V)
      }

      if (util.isFormDataLike(V)) {
        return webidl.converters.FormData(V, { strict: false })
      }

      if (V instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V)
      }

      return webidl.converters.DOMString(V)
    }

    // https://fetch.spec.whatwg.org/#bodyinit
    webidl.converters.BodyInit = function (V) {
      if (V instanceof ReadableStream) {
        return webidl.converters.ReadableStream(V)
      }

      // Note: the spec doesn't include async iterables,
      // this is an undici extension.
      if (V?.[Symbol.asyncIterator]) {
        return V
      }

      return webidl.converters.XMLHttpRequestBodyInit(V)
    }

    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: 'status',
        converter: webidl.converters['unsigned short'],
        defaultValue: 200
      },
      {
        key: 'statusText',
        converter: webidl.converters.ByteString,
        defaultValue: ''
      },
      {
        key: 'headers',
        converter: webidl.converters.HeadersInit
      }
    ])

    module.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response,
      cloneResponse
    }

    /***/
  },

  /***/ 5861: /***/ (module) => {
    module.exports = {
      kUrl: Symbol('url'),
      kHeaders: Symbol('headers'),
      kSignal: Symbol('signal'),
      kState: Symbol('state'),
      kGuard: Symbol('guard'),
      kRealm: Symbol('realm')
    }

    /***/
  },

  /***/ 2538: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const {
      redirectStatusSet,
      referrerPolicySet: referrerPolicyTokens,
      badPortsSet
    } = __nccwpck_require__(1037)
    const { getGlobalOrigin } = __nccwpck_require__(1246)
    const { performance } = __nccwpck_require__(4074)
    const { isBlobLike, toUSVString, ReadableStreamFrom } =
      __nccwpck_require__(3983)
    const assert = __nccwpck_require__(9491)
    const { isUint8Array } = __nccwpck_require__(9830)

    // https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
    /** @type {import('crypto')|undefined} */
    let crypto

    try {
      crypto = __nccwpck_require__(6113)
    } catch {}

    function responseURL(response) {
      // https://fetch.spec.whatwg.org/#responses
      // A response has an associated URL. It is a pointer to the last URL
      // in response’s URL list and null if response’s URL list is empty.
      const urlList = response.urlList
      const length = urlList.length
      return length === 0 ? null : urlList[length - 1].toString()
    }

    // https://fetch.spec.whatwg.org/#concept-response-location-url
    function responseLocationURL(response, requestFragment) {
      // 1. If response’s status is not a redirect status, then return null.
      if (!redirectStatusSet.has(response.status)) {
        return null
      }

      // 2. Let location be the result of extracting header list values given
      // `Location` and response’s header list.
      let location = response.headersList.get('location')

      // 3. If location is a header value, then set location to the result of
      //    parsing location with response’s URL.
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response))
      }

      // 4. If location is a URL whose fragment is null, then set location’s
      // fragment to requestFragment.
      if (location && !location.hash) {
        location.hash = requestFragment
      }

      // 5. Return location.
      return location
    }

    /** @returns {URL} */
    function requestCurrentURL(request) {
      return request.urlList[request.urlList.length - 1]
    }

    function requestBadPort(request) {
      // 1. Let url be request’s current URL.
      const url = requestCurrentURL(request)

      // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
      // then return blocked.
      if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
        return 'blocked'
      }

      // 3. Return allowed.
      return 'allowed'
    }

    function isErrorLike(object) {
      return (
        object instanceof Error ||
        object?.constructor?.name === 'Error' ||
        object?.constructor?.name === 'DOMException'
      )
    }

    // Check whether |statusText| is a ByteString and
    // matches the Reason-Phrase token production.
    // RFC 2616: https://tools.ietf.org/html/rfc2616
    // RFC 7230: https://tools.ietf.org/html/rfc7230
    // "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
    // https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
    function isValidReasonPhrase(statusText) {
      for (let i = 0; i < statusText.length; ++i) {
        const c = statusText.charCodeAt(i)
        if (
          !(
            (
              c === 0x09 || // HTAB
              (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
              (c >= 0x80 && c <= 0xff)
            ) // obs-text
          )
        ) {
          return false
        }
      }
      return true
    }

    function isTokenChar(c) {
      return !(
        c >= 0x7f ||
        c <= 0x20 ||
        c === '(' ||
        c === ')' ||
        c === '<' ||
        c === '>' ||
        c === '@' ||
        c === ',' ||
        c === ';' ||
        c === ':' ||
        c === '\\' ||
        c === '"' ||
        c === '/' ||
        c === '[' ||
        c === ']' ||
        c === '?' ||
        c === '=' ||
        c === '{' ||
        c === '}'
      )
    }

    // See RFC 7230, Section 3.2.6.
    // https://github.com/chromium/chromium/blob/d7da0240cae77824d1eda25745c4022757499131/third_party/blink/renderer/platform/network/http_parsers.cc#L321
    function isValidHTTPToken(characters) {
      if (!characters || typeof characters !== 'string') {
        return false
      }
      for (let i = 0; i < characters.length; ++i) {
        const c = characters.charCodeAt(i)
        if (c > 0x7f || !isTokenChar(c)) {
          return false
        }
      }
      return true
    }

    // https://fetch.spec.whatwg.org/#header-name
    // https://github.com/chromium/chromium/blob/b3d37e6f94f87d59e44662d6078f6a12de845d17/net/http/http_util.cc#L342
    function isValidHeaderName(potentialValue) {
      if (potentialValue.length === 0) {
        return false
      }

      return isValidHTTPToken(potentialValue)
    }

    /**
     * @see https://fetch.spec.whatwg.org/#header-value
     * @param {string} potentialValue
     */
    function isValidHeaderValue(potentialValue) {
      // - Has no leading or trailing HTTP tab or space bytes.
      // - Contains no 0x00 (NUL) or HTTP newline bytes.
      if (
        potentialValue.startsWith('\t') ||
        potentialValue.startsWith(' ') ||
        potentialValue.endsWith('\t') ||
        potentialValue.endsWith(' ')
      ) {
        return false
      }

      if (
        potentialValue.includes('\0') ||
        potentialValue.includes('\r') ||
        potentialValue.includes('\n')
      ) {
        return false
      }

      return true
    }

    // https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
      //  Given a request request and a response actualResponse, this algorithm
      //  updates request’s referrer policy according to the Referrer-Policy
      //  header (if any) in actualResponse.

      // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
      // from a Referrer-Policy header on actualResponse.

      // 8.1 Parse a referrer policy from a Referrer-Policy header
      // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
      const { headersList } = actualResponse
      // 2. Let policy be the empty string.
      // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
      // 4. Return policy.
      const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')

      // Note: As the referrer-policy can contain multiple policies
      // separated by comma, we need to loop through all of them
      // and pick the first valid one.
      // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
      let policy = ''
      if (policyHeader.length > 0) {
        // The right-most policy takes precedence.
        // The left-most policy is the fallback.
        for (let i = policyHeader.length; i !== 0; i--) {
          const token = policyHeader[i - 1].trim()
          if (referrerPolicyTokens.has(token)) {
            policy = token
            break
          }
        }
      }

      // 2. If policy is not the empty string, then set request’s referrer policy to policy.
      if (policy !== '') {
        request.referrerPolicy = policy
      }
    }

    // https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
    function crossOriginResourcePolicyCheck() {
      // TODO
      return 'allowed'
    }

    // https://fetch.spec.whatwg.org/#concept-cors-check
    function corsCheck() {
      // TODO
      return 'success'
    }

    // https://fetch.spec.whatwg.org/#concept-tao-check
    function TAOCheck() {
      // TODO
      return 'success'
    }

    function appendFetchMetadata(httpRequest) {
      //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
      //  TODO

      //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

      //  1. Assert: r’s url is a potentially trustworthy URL.
      //  TODO

      //  2. Let header be a Structured Header whose value is a token.
      let header = null

      //  3. Set header’s value to r’s mode.
      header = httpRequest.mode

      //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
      httpRequest.headersList.set('sec-fetch-mode', header)

      //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
      //  TODO

      //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
      //  TODO
    }

    // https://fetch.spec.whatwg.org/#append-a-request-origin-header
    function appendRequestOriginHeader(request) {
      // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
      let serializedOrigin = request.origin

      // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
      if (request.responseTainting === 'cors' || request.mode === 'websocket') {
        if (serializedOrigin) {
          request.headersList.append('origin', serializedOrigin)
        }

        // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
      } else if (request.method !== 'GET' && request.method !== 'HEAD') {
        // 1. Switch on request’s referrer policy:
        switch (request.referrerPolicy) {
          case 'no-referrer':
            // Set serializedOrigin to `null`.
            serializedOrigin = null
            break
          case 'no-referrer-when-downgrade':
          case 'strict-origin':
          case 'strict-origin-when-cross-origin':
            // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
            if (
              request.origin &&
              urlHasHttpsScheme(request.origin) &&
              !urlHasHttpsScheme(requestCurrentURL(request))
            ) {
              serializedOrigin = null
            }
            break
          case 'same-origin':
            // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
            if (!sameOrigin(request, requestCurrentURL(request))) {
              serializedOrigin = null
            }
            break
          default:
          // Do nothing.
        }

        if (serializedOrigin) {
          // 2. Append (`Origin`, serializedOrigin) to request’s header list.
          request.headersList.append('origin', serializedOrigin)
        }
      }
    }

    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      // TODO
      return performance.now()
    }

    // https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      }
    }

    // https://html.spec.whatwg.org/multipage/origin.html#policy-container
    function makePolicyContainer() {
      // Note: the fetch spec doesn't make use of embedder policy or CSP list
      return {
        referrerPolicy: 'strict-origin-when-cross-origin'
      }
    }

    // https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      }
    }

    // https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
    function determineRequestsReferrer(request) {
      // 1. Let policy be request's referrer policy.
      const policy = request.referrerPolicy

      // Note: policy cannot (shouldn't) be null or an empty string.
      assert(policy)

      // 2. Let environment be request’s client.

      let referrerSource = null

      // 3. Switch on request’s referrer:
      if (request.referrer === 'client') {
        // Note: node isn't a browser and doesn't implement document/iframes,
        // so we bypass this step and replace it with our own.

        const globalOrigin = getGlobalOrigin()

        if (!globalOrigin || globalOrigin.origin === 'null') {
          return 'no-referrer'
        }

        // note: we need to clone it as it's mutated
        referrerSource = new URL(globalOrigin)
      } else if (request.referrer instanceof URL) {
        // Let referrerSource be request’s referrer.
        referrerSource = request.referrer
      }

      // 4. Let request’s referrerURL be the result of stripping referrerSource for
      //    use as a referrer.
      let referrerURL = stripURLForReferrer(referrerSource)

      // 5. Let referrerOrigin be the result of stripping referrerSource for use as
      //    a referrer, with the origin-only flag set to true.
      const referrerOrigin = stripURLForReferrer(referrerSource, true)

      // 6. If the result of serializing referrerURL is a string whose length is
      //    greater than 4096, set referrerURL to referrerOrigin.
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin
      }

      const areSameOrigin = sameOrigin(request, referrerURL)
      const isNonPotentiallyTrustWorthy =
        isURLPotentiallyTrustworthy(referrerURL) &&
        !isURLPotentiallyTrustworthy(request.url)

      // 8. Execute the switch statements corresponding to the value of policy:
      switch (policy) {
        case 'origin':
          return referrerOrigin != null
            ? referrerOrigin
            : stripURLForReferrer(referrerSource, true)
        case 'unsafe-url':
          return referrerURL
        case 'same-origin':
          return areSameOrigin ? referrerOrigin : 'no-referrer'
        case 'origin-when-cross-origin':
          return areSameOrigin ? referrerURL : referrerOrigin
        case 'strict-origin-when-cross-origin': {
          const currentURL = requestCurrentURL(request)

          // 1. If the origin of referrerURL and the origin of request’s current
          //    URL are the same, then return referrerURL.
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL
          }

          // 2. If referrerURL is a potentially trustworthy URL and request’s
          //    current URL is not a potentially trustworthy URL, then return no
          //    referrer.
          if (
            isURLPotentiallyTrustworthy(referrerURL) &&
            !isURLPotentiallyTrustworthy(currentURL)
          ) {
            return 'no-referrer'
          }

          // 3. Return referrerOrigin.
          return referrerOrigin
        }
        case 'strict-origin': // eslint-disable-line
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
         */
        case 'no-referrer-when-downgrade': // eslint-disable-line
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
         */

        default: // eslint-disable-line
          return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
      }
    }

    /**
     * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
     * @param {URL} url
     * @param {boolean|undefined} originOnly
     */
    function stripURLForReferrer(url, originOnly) {
      // 1. Assert: url is a URL.
      assert(url instanceof URL)

      // 2. If url’s scheme is a local scheme, then return no referrer.
      if (
        url.protocol === 'file:' ||
        url.protocol === 'about:' ||
        url.protocol === 'blank:'
      ) {
        return 'no-referrer'
      }

      // 3. Set url’s username to the empty string.
      url.username = ''

      // 4. Set url’s password to the empty string.
      url.password = ''

      // 5. Set url’s fragment to null.
      url.hash = ''

      // 6. If the origin-only flag is true, then:
      if (originOnly) {
        // 1. Set url’s path to « the empty string ».
        url.pathname = ''

        // 2. Set url’s query to null.
        url.search = ''
      }

      // 7. Return url.
      return url
    }

    function isURLPotentiallyTrustworthy(url) {
      if (!(url instanceof URL)) {
        return false
      }

      // If child of about, return true
      if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
        return true
      }

      // If scheme is data, return true
      if (url.protocol === 'data:') return true

      // If file, return true
      if (url.protocol === 'file:') return true

      return isOriginPotentiallyTrustworthy(url.origin)

      function isOriginPotentiallyTrustworthy(origin) {
        // If origin is explicitly null, return false
        if (origin == null || origin === 'null') return false

        const originAsURL = new URL(origin)

        // If secure, return true
        if (
          originAsURL.protocol === 'https:' ||
          originAsURL.protocol === 'wss:'
        ) {
          return true
        }

        // If localhost or variants, return true
        if (
          /^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(
            originAsURL.hostname
          ) ||
          originAsURL.hostname === 'localhost' ||
          originAsURL.hostname.includes('localhost.') ||
          originAsURL.hostname.endsWith('.localhost')
        ) {
          return true
        }

        // If any other, return false
        return false
      }
    }

    /**
     * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
     * @param {Uint8Array} bytes
     * @param {string} metadataList
     */
    function bytesMatch(bytes, metadataList) {
      // If node is not built with OpenSSL support, we cannot check
      // a request's integrity, so allow it by default (the spec will
      // allow requests if an invalid hash is given, as precedence).
      /* istanbul ignore if: only if node is built with --without-ssl */
      if (crypto === undefined) {
        return true
      }

      // 1. Let parsedMetadata be the result of parsing metadataList.
      const parsedMetadata = parseMetadata(metadataList)

      // 2. If parsedMetadata is no metadata, return true.
      if (parsedMetadata === 'no metadata') {
        return true
      }

      // 3. If parsedMetadata is the empty set, return true.
      if (parsedMetadata.length === 0) {
        return true
      }

      // 4. Let metadata be the result of getting the strongest
      //    metadata from parsedMetadata.
      const list = parsedMetadata.sort((c, d) => d.algo.localeCompare(c.algo))
      // get the strongest algorithm
      const strongest = list[0].algo
      // get all entries that use the strongest algorithm; ignore weaker
      const metadata = list.filter((item) => item.algo === strongest)

      // 5. For each item in metadata:
      for (const item of metadata) {
        // 1. Let algorithm be the alg component of item.
        const algorithm = item.algo

        // 2. Let expectedValue be the val component of item.
        let expectedValue = item.hash

        // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
        // "be liberal with padding". This is annoying, and it's not even in the spec.

        if (expectedValue.endsWith('==')) {
          expectedValue = expectedValue.slice(0, -2)
        }

        // 3. Let actualValue be the result of applying algorithm to bytes.
        let actualValue = crypto
          .createHash(algorithm)
          .update(bytes)
          .digest('base64')

        if (actualValue.endsWith('==')) {
          actualValue = actualValue.slice(0, -2)
        }

        // 4. If actualValue is a case-sensitive match for expectedValue,
        //    return true.
        if (actualValue === expectedValue) {
          return true
        }

        let actualBase64URL = crypto
          .createHash(algorithm)
          .update(bytes)
          .digest('base64url')

        if (actualBase64URL.endsWith('==')) {
          actualBase64URL = actualBase64URL.slice(0, -2)
        }

        if (actualBase64URL === expectedValue) {
          return true
        }
      }

      // 6. Return false.
      return false
    }

    // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
    // https://www.w3.org/TR/CSP2/#source-list-syntax
    // https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
    const parseHashWithOptions =
      /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i

    /**
     * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
     * @param {string} metadata
     */
    function parseMetadata(metadata) {
      // 1. Let result be the empty set.
      /** @type {{ algo: string, hash: string }[]} */
      const result = []

      // 2. Let empty be equal to true.
      let empty = true

      const supportedHashes = crypto.getHashes()

      // 3. For each token returned by splitting metadata on spaces:
      for (const token of metadata.split(' ')) {
        // 1. Set empty to false.
        empty = false

        // 2. Parse token as a hash-with-options.
        const parsedToken = parseHashWithOptions.exec(token)

        // 3. If token does not parse, continue to the next token.
        if (parsedToken === null || parsedToken.groups === undefined) {
          // Note: Chromium blocks the request at this point, but Firefox
          // gives a warning that an invalid integrity was given. The
          // correct behavior is to ignore these, and subsequently not
          // check the integrity of the resource.
          continue
        }

        // 4. Let algorithm be the hash-algo component of token.
        const algorithm = parsedToken.groups.algo

        // 5. If algorithm is a hash function recognized by the user
        //    agent, add the parsed token to result.
        if (supportedHashes.includes(algorithm.toLowerCase())) {
          result.push(parsedToken.groups)
        }
      }

      // 4. Return no metadata if empty is true, otherwise return result.
      if (empty === true) {
        return 'no metadata'
      }

      return result
    }

    // https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
      // TODO
    }

    /**
     * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
     * @param {URL} A
     * @param {URL} B
     */
    function sameOrigin(A, B) {
      // 1. If A and B are the same opaque origin, then return true.
      if (A.origin === B.origin && A.origin === 'null') {
        return true
      }

      // 2. If A and B are both tuple origins and their schemes,
      //    hosts, and port are identical, then return true.
      if (
        A.protocol === B.protocol &&
        A.hostname === B.hostname &&
        A.port === B.port
      ) {
        return true
      }

      // 3. Return false.
      return false
    }

    function createDeferredPromise() {
      let res
      let rej
      const promise = new Promise((resolve, reject) => {
        res = resolve
        rej = reject
      })

      return { promise, resolve: res, reject: rej }
    }

    function isAborted(fetchParams) {
      return fetchParams.controller.state === 'aborted'
    }

    function isCancelled(fetchParams) {
      return (
        fetchParams.controller.state === 'aborted' ||
        fetchParams.controller.state === 'terminated'
      )
    }

    // https://fetch.spec.whatwg.org/#concept-method-normalize
    function normalizeMethod(method) {
      return /^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/i.test(method)
        ? method.toUpperCase()
        : method
    }

    // https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
    function serializeJavascriptValueToJSONString(value) {
      // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
      const result = JSON.stringify(value)

      // 2. If result is undefined, then throw a TypeError.
      if (result === undefined) {
        throw new TypeError('Value is not JSON serializable')
      }

      // 3. Assert: result is a string.
      assert(typeof result === 'string')

      // 4. Return result.
      return result
    }

    // https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
    const esIteratorPrototype = Object.getPrototypeOf(
      Object.getPrototypeOf([][Symbol.iterator]())
    )

    /**
     * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
     * @param {() => unknown[]} iterator
     * @param {string} name name of the instance
     * @param {'key'|'value'|'key+value'} kind
     */
    function makeIterator(iterator, name, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      }

      const i = {
        next() {
          // 1. Let interface be the interface for which the iterator prototype object exists.

          // 2. Let thisValue be the this value.

          // 3. Let object be ? ToObject(thisValue).

          // 4. If object is a platform object, then perform a security
          //    check, passing:

          // 5. If object is not a default iterator object for interface,
          //    then throw a TypeError.
          if (Object.getPrototypeOf(this) !== i) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name} Iterator.`
            )
          }

          // 6. Let index be object’s index.
          // 7. Let kind be object’s kind.
          // 8. Let values be object’s target's value pairs to iterate over.
          const { index, kind, target } = object
          const values = target()

          // 9. Let len be the length of values.
          const len = values.length

          // 10. If index is greater than or equal to len, then return
          //     CreateIterResultObject(undefined, true).
          if (index >= len) {
            return { value: undefined, done: true }
          }

          // 11. Let pair be the entry in values at index index.
          const pair = values[index]

          // 12. Set object’s index to index + 1.
          object.index = index + 1

          // 13. Return the iterator result for pair and kind.
          return iteratorResult(pair, kind)
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
      }

      // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
      Object.setPrototypeOf(i, esIteratorPrototype)
      // esIteratorPrototype needs to be the prototype of i
      // which is the prototype of an empty object. Yes, it's confusing.
      return Object.setPrototypeOf({}, i)
    }

    // https://webidl.spec.whatwg.org/#iterator-result
    function iteratorResult(pair, kind) {
      let result

      // 1. Let result be a value determined by the value of kind:
      switch (kind) {
        case 'key': {
          // 1. Let idlKey be pair’s key.
          // 2. Let key be the result of converting idlKey to an
          //    ECMAScript value.
          // 3. result is key.
          result = pair[0]
          break
        }
        case 'value': {
          // 1. Let idlValue be pair’s value.
          // 2. Let value be the result of converting idlValue to
          //    an ECMAScript value.
          // 3. result is value.
          result = pair[1]
          break
        }
        case 'key+value': {
          // 1. Let idlKey be pair’s key.
          // 2. Let idlValue be pair’s value.
          // 3. Let key be the result of converting idlKey to an
          //    ECMAScript value.
          // 4. Let value be the result of converting idlValue to
          //    an ECMAScript value.
          // 5. Let array be ! ArrayCreate(2).
          // 6. Call ! CreateDataProperty(array, "0", key).
          // 7. Call ! CreateDataProperty(array, "1", value).
          // 8. result is array.
          result = pair
          break
        }
      }

      // 2. Return CreateIterResultObject(result, false).
      return { value: result, done: false }
    }

    /**
     * @see https://fetch.spec.whatwg.org/#body-fully-read
     */
    async function fullyReadBody(body, processBody, processBodyError) {
      // 1. If taskDestination is null, then set taskDestination to
      //    the result of starting a new parallel queue.

      // 2. Let successSteps given a byte sequence bytes be to queue a
      //    fetch task to run processBody given bytes, with taskDestination.
      const successSteps = processBody

      // 3. Let errorSteps be to queue a fetch task to run processBodyError,
      //    with taskDestination.
      const errorSteps = processBodyError

      // 4. Let reader be the result of getting a reader for body’s stream.
      //    If that threw an exception, then run errorSteps with that
      //    exception and return.
      let reader

      try {
        reader = body.stream.getReader()
      } catch (e) {
        errorSteps(e)
        return
      }

      // 5. Read all bytes from reader, given successSteps and errorSteps.
      try {
        const result = await readAllBytes(reader)
        successSteps(result)
      } catch (e) {
        errorSteps(e)
      }
    }

    /** @type {ReadableStream} */
    let ReadableStream = globalThis.ReadableStream

    function isReadableStreamLike(stream) {
      if (!ReadableStream) {
        ReadableStream = __nccwpck_require__(5356).ReadableStream
      }

      return (
        stream instanceof ReadableStream ||
        (stream[Symbol.toStringTag] === 'ReadableStream' &&
          typeof stream.tee === 'function')
      )
    }

    const MAXIMUM_ARGUMENT_LENGTH = 65535

    /**
     * @see https://infra.spec.whatwg.org/#isomorphic-decode
     * @param {number[]|Uint8Array} input
     */
    function isomorphicDecode(input) {
      // 1. To isomorphic decode a byte sequence input, return a string whose code point
      //    length is equal to input’s length and whose code points have the same values
      //    as the values of input’s bytes, in the same order.

      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input)
      }

      return input.reduce(
        (previous, current) => previous + String.fromCharCode(current),
        ''
      )
    }

    /**
     * @param {ReadableStreamController<Uint8Array>} controller
     */
    function readableStreamClose(controller) {
      try {
        controller.close()
      } catch (err) {
        // TODO: add comment explaining why this error occurs.
        if (!err.message.includes('Controller is already closed')) {
          throw err
        }
      }
    }

    /**
     * @see https://infra.spec.whatwg.org/#isomorphic-encode
     * @param {string} input
     */
    function isomorphicEncode(input) {
      // 1. Assert: input contains no code points greater than U+00FF.
      for (let i = 0; i < input.length; i++) {
        assert(input.charCodeAt(i) <= 0xff)
      }

      // 2. Return a byte sequence whose length is equal to input’s code
      //    point length and whose bytes have the same values as the
      //    values of input’s code points, in the same order
      return input
    }

    /**
     * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
     * @see https://streams.spec.whatwg.org/#read-loop
     * @param {ReadableStreamDefaultReader} reader
     */
    async function readAllBytes(reader) {
      const bytes = []
      let byteLength = 0

      while (true) {
        const { done, value: chunk } = await reader.read()

        if (done) {
          // 1. Call successSteps with bytes.
          return Buffer.concat(bytes, byteLength)
        }

        // 1. If chunk is not a Uint8Array object, call failureSteps
        //    with a TypeError and abort these steps.
        if (!isUint8Array(chunk)) {
          throw new TypeError('Received non-Uint8Array chunk')
        }

        // 2. Append the bytes represented by chunk to bytes.
        bytes.push(chunk)
        byteLength += chunk.length

        // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
      }
    }

    /**
     * @see https://fetch.spec.whatwg.org/#is-local
     * @param {URL} url
     */
    function urlIsLocal(url) {
      assert('protocol' in url) // ensure it's a url object

      const protocol = url.protocol

      return (
        protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
      )
    }

    /**
     * @param {string|URL} url
     */
    function urlHasHttpsScheme(url) {
      if (typeof url === 'string') {
        return url.startsWith('https:')
      }

      return url.protocol === 'https:'
    }

    /**
     * @see https://fetch.spec.whatwg.org/#http-scheme
     * @param {URL} url
     */
    function urlIsHttpHttpsScheme(url) {
      assert('protocol' in url) // ensure it's a url object

      const protocol = url.protocol

      return protocol === 'http:' || protocol === 'https:'
    }

    /**
     * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
     */
    const hasOwn =
      Object.hasOwn ||
      ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))

    module.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes
    }

    /***/
  },

  /***/ 1744: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { types } = __nccwpck_require__(3837)
    const { hasOwn, toUSVString } = __nccwpck_require__(2538)

    /** @type {import('../../types/webidl').Webidl} */
    const webidl = {}
    webidl.converters = {}
    webidl.util = {}
    webidl.errors = {}

    webidl.errors.exception = function (message) {
      return new TypeError(`${message.header}: ${message.message}`)
    }

    webidl.errors.conversionFailed = function (context) {
      const plural = context.types.length === 1 ? '' : ' one of'
      const message =
        `${context.argument} could not be converted to` +
        `${plural}: ${context.types.join(', ')}.`

      return webidl.errors.exception({
        header: context.prefix,
        message
      })
    }

    webidl.errors.invalidArgument = function (context) {
      return webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
      })
    }

    // https://webidl.spec.whatwg.org/#implements
    webidl.brandCheck = function (V, I, opts = undefined) {
      if (opts?.strict !== false && !(V instanceof I)) {
        throw new TypeError('Illegal invocation')
      } else {
        return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]
      }
    }

    webidl.argumentLengthCheck = function ({ length }, min, ctx) {
      if (length < min) {
        throw webidl.errors.exception({
          message:
            `${min} argument${min !== 1 ? 's' : ''} required, ` +
            `but${length ? ' only' : ''} ${length} found.`,
          ...ctx
        })
      }
    }

    webidl.illegalConstructor = function () {
      throw webidl.errors.exception({
        header: 'TypeError',
        message: 'Illegal constructor'
      })
    }

    // https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
    webidl.util.Type = function (V) {
      switch (typeof V) {
        case 'undefined':
          return 'Undefined'
        case 'boolean':
          return 'Boolean'
        case 'string':
          return 'String'
        case 'symbol':
          return 'Symbol'
        case 'number':
          return 'Number'
        case 'bigint':
          return 'BigInt'
        case 'function':
        case 'object': {
          if (V === null) {
            return 'Null'
          }

          return 'Object'
        }
      }
    }

    // https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
    webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
      let upperBound
      let lowerBound

      // 1. If bitLength is 64, then:
      if (bitLength === 64) {
        // 1. Let upperBound be 2^53 − 1.
        upperBound = Math.pow(2, 53) - 1

        // 2. If signedness is "unsigned", then let lowerBound be 0.
        if (signedness === 'unsigned') {
          lowerBound = 0
        } else {
          // 3. Otherwise let lowerBound be −2^53 + 1.
          lowerBound = Math.pow(-2, 53) + 1
        }
      } else if (signedness === 'unsigned') {
        // 2. Otherwise, if signedness is "unsigned", then:

        // 1. Let lowerBound be 0.
        lowerBound = 0

        // 2. Let upperBound be 2^bitLength − 1.
        upperBound = Math.pow(2, bitLength) - 1
      } else {
        // 3. Otherwise:

        // 1. Let lowerBound be -2^bitLength − 1.
        lowerBound = Math.pow(-2, bitLength) - 1

        // 2. Let upperBound be 2^bitLength − 1 − 1.
        upperBound = Math.pow(2, bitLength - 1) - 1
      }

      // 4. Let x be ? ToNumber(V).
      let x = Number(V)

      // 5. If x is −0, then set x to +0.
      if (x === 0) {
        x = 0
      }

      // 6. If the conversion is to an IDL type associated
      //    with the [EnforceRange] extended attribute, then:
      if (opts.enforceRange === true) {
        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
        if (
          Number.isNaN(x) ||
          x === Number.POSITIVE_INFINITY ||
          x === Number.NEGATIVE_INFINITY
        ) {
          throw webidl.errors.exception({
            header: 'Integer conversion',
            message: `Could not convert ${V} to an integer.`
          })
        }

        // 2. Set x to IntegerPart(x).
        x = webidl.util.IntegerPart(x)

        // 3. If x < lowerBound or x > upperBound, then
        //    throw a TypeError.
        if (x < lowerBound || x > upperBound) {
          throw webidl.errors.exception({
            header: 'Integer conversion',
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
          })
        }

        // 4. Return x.
        return x
      }

      // 7. If x is not NaN and the conversion is to an IDL
      //    type associated with the [Clamp] extended
      //    attribute, then:
      if (!Number.isNaN(x) && opts.clamp === true) {
        // 1. Set x to min(max(x, lowerBound), upperBound).
        x = Math.min(Math.max(x, lowerBound), upperBound)

        // 2. Round x to the nearest integer, choosing the
        //    even integer if it lies halfway between two,
        //    and choosing +0 rather than −0.
        if (Math.floor(x) % 2 === 0) {
          x = Math.floor(x)
        } else {
          x = Math.ceil(x)
        }

        // 3. Return x.
        return x
      }

      // 8. If x is NaN, +0, +∞, or −∞, then return +0.
      if (
        Number.isNaN(x) ||
        (x === 0 && Object.is(0, x)) ||
        x === Number.POSITIVE_INFINITY ||
        x === Number.NEGATIVE_INFINITY
      ) {
        return 0
      }

      // 9. Set x to IntegerPart(x).
      x = webidl.util.IntegerPart(x)

      // 10. Set x to x modulo 2^bitLength.
      x = x % Math.pow(2, bitLength)

      // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
      //    then return x − 2^bitLength.
      if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
        return x - Math.pow(2, bitLength)
      }

      // 12. Otherwise, return x.
      return x
    }

    // https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
    webidl.util.IntegerPart = function (n) {
      // 1. Let r be floor(abs(n)).
      const r = Math.floor(Math.abs(n))

      // 2. If n < 0, then return -1 × r.
      if (n < 0) {
        return -1 * r
      }

      // 3. Otherwise, return r.
      return r
    }

    // https://webidl.spec.whatwg.org/#es-sequence
    webidl.sequenceConverter = function (converter) {
      return (V) => {
        // 1. If Type(V) is not Object, throw a TypeError.
        if (webidl.util.Type(V) !== 'Object') {
          throw webidl.errors.exception({
            header: 'Sequence',
            message: `Value of type ${webidl.util.Type(V)} is not an Object.`
          })
        }

        // 2. Let method be ? GetMethod(V, @@iterator).
        /** @type {Generator} */
        const method = V?.[Symbol.iterator]?.()
        const seq = []

        // 3. If method is undefined, throw a TypeError.
        if (method === undefined || typeof method.next !== 'function') {
          throw webidl.errors.exception({
            header: 'Sequence',
            message: 'Object is not an iterator.'
          })
        }

        // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
        while (true) {
          const { done, value } = method.next()

          if (done) {
            break
          }

          seq.push(converter(value))
        }

        return seq
      }
    }

    // https://webidl.spec.whatwg.org/#es-to-record
    webidl.recordConverter = function (keyConverter, valueConverter) {
      return (O) => {
        // 1. If Type(O) is not Object, throw a TypeError.
        if (webidl.util.Type(O) !== 'Object') {
          throw webidl.errors.exception({
            header: 'Record',
            message: `Value of type ${webidl.util.Type(O)} is not an Object.`
          })
        }

        // 2. Let result be a new empty instance of record<K, V>.
        const result = {}

        if (!types.isProxy(O)) {
          // Object.keys only returns enumerable properties
          const keys = Object.keys(O)

          for (const key of keys) {
            // 1. Let typedKey be key converted to an IDL value of type K.
            const typedKey = keyConverter(key)

            // 2. Let value be ? Get(O, key).
            // 3. Let typedValue be value converted to an IDL value of type V.
            const typedValue = valueConverter(O[key])

            // 4. Set result[typedKey] to typedValue.
            result[typedKey] = typedValue
          }

          // 5. Return result.
          return result
        }

        // 3. Let keys be ? O.[[OwnPropertyKeys]]().
        const keys = Reflect.ownKeys(O)

        // 4. For each key of keys.
        for (const key of keys) {
          // 1. Let desc be ? O.[[GetOwnProperty]](key).
          const desc = Reflect.getOwnPropertyDescriptor(O, key)

          // 2. If desc is not undefined and desc.[[Enumerable]] is true:
          if (desc?.enumerable) {
            // 1. Let typedKey be key converted to an IDL value of type K.
            const typedKey = keyConverter(key)

            // 2. Let value be ? Get(O, key).
            // 3. Let typedValue be value converted to an IDL value of type V.
            const typedValue = valueConverter(O[key])

            // 4. Set result[typedKey] to typedValue.
            result[typedKey] = typedValue
          }
        }

        // 5. Return result.
        return result
      }
    }

    webidl.interfaceConverter = function (i) {
      return (V, opts = {}) => {
        if (opts.strict !== false && !(V instanceof i)) {
          throw webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
          })
        }

        return V
      }
    }

    webidl.dictionaryConverter = function (converters) {
      return (dictionary) => {
        const type = webidl.util.Type(dictionary)
        const dict = {}

        if (type === 'Null' || type === 'Undefined') {
          return dict
        } else if (type !== 'Object') {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          })
        }

        for (const options of converters) {
          const { key, defaultValue, required, converter } = options

          if (required === true) {
            if (!hasOwn(dictionary, key)) {
              throw webidl.errors.exception({
                header: 'Dictionary',
                message: `Missing required key "${key}".`
              })
            }
          }

          let value = dictionary[key]
          const hasDefault = hasOwn(options, 'defaultValue')

          // Only use defaultValue if value is undefined and
          // a defaultValue options was provided.
          if (hasDefault && value !== null) {
            value = value ?? defaultValue
          }

          // A key can be optional and have no default value.
          // When this happens, do not perform a conversion,
          // and do not assign the key a value.
          if (required || hasDefault || value !== undefined) {
            value = converter(value)

            if (
              options.allowedValues &&
              !options.allowedValues.includes(value)
            ) {
              throw webidl.errors.exception({
                header: 'Dictionary',
                message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(
                  ', '
                )}.`
              })
            }

            dict[key] = value
          }
        }

        return dict
      }
    }

    webidl.nullableConverter = function (converter) {
      return (V) => {
        if (V === null) {
          return V
        }

        return converter(V)
      }
    }

    // https://webidl.spec.whatwg.org/#es-DOMString
    webidl.converters.DOMString = function (V, opts = {}) {
      // 1. If V is null and the conversion is to an IDL type
      //    associated with the [LegacyNullToEmptyString]
      //    extended attribute, then return the DOMString value
      //    that represents the empty string.
      if (V === null && opts.legacyNullToEmptyString) {
        return ''
      }

      // 2. Let x be ? ToString(V).
      if (typeof V === 'symbol') {
        throw new TypeError(
          'Could not convert argument of type symbol to string.'
        )
      }

      // 3. Return the IDL DOMString value that represents the
      //    same sequence of code units as the one the
      //    ECMAScript String value x represents.
      return String(V)
    }

    // https://webidl.spec.whatwg.org/#es-ByteString
    webidl.converters.ByteString = function (V) {
      // 1. Let x be ? ToString(V).
      // Note: DOMString converter perform ? ToString(V)
      const x = webidl.converters.DOMString(V)

      // 2. If the value of any element of x is greater than
      //    255, then throw a TypeError.
      for (let index = 0; index < x.length; index++) {
        const charCode = x.charCodeAt(index)

        if (charCode > 255) {
          throw new TypeError(
            'Cannot convert argument to a ByteString because the character at ' +
              `index ${index} has a value of ${charCode} which is greater than 255.`
          )
        }
      }

      // 3. Return an IDL ByteString value whose length is the
      //    length of x, and where the value of each element is
      //    the value of the corresponding element of x.
      return x
    }

    // https://webidl.spec.whatwg.org/#es-USVString
    webidl.converters.USVString = toUSVString

    // https://webidl.spec.whatwg.org/#es-boolean
    webidl.converters.boolean = function (V) {
      // 1. Let x be the result of computing ToBoolean(V).
      const x = Boolean(V)

      // 2. Return the IDL boolean value that is the one that represents
      //    the same truth value as the ECMAScript Boolean value x.
      return x
    }

    // https://webidl.spec.whatwg.org/#es-any
    webidl.converters.any = function (V) {
      return V
    }

    // https://webidl.spec.whatwg.org/#es-long-long
    webidl.converters['long long'] = function (V) {
      // 1. Let x be ? ConvertToInt(V, 64, "signed").
      const x = webidl.util.ConvertToInt(V, 64, 'signed')

      // 2. Return the IDL long long value that represents
      //    the same numeric value as x.
      return x
    }

    // https://webidl.spec.whatwg.org/#es-unsigned-long-long
    webidl.converters['unsigned long long'] = function (V) {
      // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
      const x = webidl.util.ConvertToInt(V, 64, 'unsigned')

      // 2. Return the IDL unsigned long long value that
      //    represents the same numeric value as x.
      return x
    }

    // https://webidl.spec.whatwg.org/#es-unsigned-long
    webidl.converters['unsigned long'] = function (V) {
      // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
      const x = webidl.util.ConvertToInt(V, 32, 'unsigned')

      // 2. Return the IDL unsigned long value that
      //    represents the same numeric value as x.
      return x
    }

    // https://webidl.spec.whatwg.org/#es-unsigned-short
    webidl.converters['unsigned short'] = function (V, opts) {
      // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
      const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)

      // 2. Return the IDL unsigned short value that represents
      //    the same numeric value as x.
      return x
    }

    // https://webidl.spec.whatwg.org/#idl-ArrayBuffer
    webidl.converters.ArrayBuffer = function (V, opts = {}) {
      // 1. If Type(V) is not Object, or V does not have an
      //    [[ArrayBufferData]] internal slot, then throw a
      //    TypeError.
      // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
      // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
      if (webidl.util.Type(V) !== 'Object' || !types.isAnyArrayBuffer(V)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V}`,
          argument: `${V}`,
          types: ['ArrayBuffer']
        })
      }

      // 2. If the conversion is not to an IDL type associated
      //    with the [AllowShared] extended attribute, and
      //    IsSharedArrayBuffer(V) is true, then throw a
      //    TypeError.
      if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
        throw webidl.errors.exception({
          header: 'ArrayBuffer',
          message: 'SharedArrayBuffer is not allowed.'
        })
      }

      // 3. If the conversion is not to an IDL type associated
      //    with the [AllowResizable] extended attribute, and
      //    IsResizableArrayBuffer(V) is true, then throw a
      //    TypeError.
      // Note: resizable ArrayBuffers are currently a proposal.

      // 4. Return the IDL ArrayBuffer value that is a
      //    reference to the same object as V.
      return V
    }

    webidl.converters.TypedArray = function (V, T, opts = {}) {
      // 1. Let T be the IDL type V is being converted to.

      // 2. If Type(V) is not Object, or V does not have a
      //    [[TypedArrayName]] internal slot with a value
      //    equal to T’s name, then throw a TypeError.
      if (
        webidl.util.Type(V) !== 'Object' ||
        !types.isTypedArray(V) ||
        V.constructor.name !== T.name
      ) {
        throw webidl.errors.conversionFailed({
          prefix: `${T.name}`,
          argument: `${V}`,
          types: [T.name]
        })
      }

      // 3. If the conversion is not to an IDL type associated
      //    with the [AllowShared] extended attribute, and
      //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
      //    true, then throw a TypeError.
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: 'ArrayBuffer',
          message: 'SharedArrayBuffer is not allowed.'
        })
      }

      // 4. If the conversion is not to an IDL type associated
      //    with the [AllowResizable] extended attribute, and
      //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
      //    true, then throw a TypeError.
      // Note: resizable array buffers are currently a proposal

      // 5. Return the IDL value of type T that is a reference
      //    to the same object as V.
      return V
    }

    webidl.converters.DataView = function (V, opts = {}) {
      // 1. If Type(V) is not Object, or V does not have a
      //    [[DataView]] internal slot, then throw a TypeError.
      if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
        throw webidl.errors.exception({
          header: 'DataView',
          message: 'Object is not a DataView.'
        })
      }

      // 2. If the conversion is not to an IDL type associated
      //    with the [AllowShared] extended attribute, and
      //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
      //    then throw a TypeError.
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: 'ArrayBuffer',
          message: 'SharedArrayBuffer is not allowed.'
        })
      }

      // 3. If the conversion is not to an IDL type associated
      //    with the [AllowResizable] extended attribute, and
      //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
      //    true, then throw a TypeError.
      // Note: resizable ArrayBuffers are currently a proposal

      // 4. Return the IDL DataView value that is a reference
      //    to the same object as V.
      return V
    }

    // https://webidl.spec.whatwg.org/#BufferSource
    webidl.converters.BufferSource = function (V, opts = {}) {
      if (types.isAnyArrayBuffer(V)) {
        return webidl.converters.ArrayBuffer(V, opts)
      }

      if (types.isTypedArray(V)) {
        return webidl.converters.TypedArray(V, V.constructor)
      }

      if (types.isDataView(V)) {
        return webidl.converters.DataView(V, opts)
      }

      throw new TypeError(`Could not convert ${V} to a BufferSource.`)
    }

    webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
      webidl.converters.ByteString
    )

    webidl.converters['sequence<sequence<ByteString>>'] =
      webidl.sequenceConverter(webidl.converters['sequence<ByteString>'])

    webidl.converters['record<ByteString, ByteString>'] =
      webidl.recordConverter(
        webidl.converters.ByteString,
        webidl.converters.ByteString
      )

    module.exports = {
      webidl
    }

    /***/
  },

  /***/ 4854: /***/ (module) => {
    /**
     * @see https://encoding.spec.whatwg.org/#concept-encoding-get
     * @param {string|undefined} label
     */
    function getEncoding(label) {
      if (!label) {
        return 'failure'
      }

      // 1. Remove any leading and trailing ASCII whitespace from label.
      // 2. If label is an ASCII case-insensitive match for any of the
      //    labels listed in the table below, then return the
      //    corresponding encoding; otherwise return failure.
      switch (label.trim().toLowerCase()) {
        case 'unicode-1-1-utf-8':
        case 'unicode11utf8':
        case 'unicode20utf8':
        case 'utf-8':
        case 'utf8':
        case 'x-unicode20utf8':
          return 'UTF-8'
        case '866':
        case 'cp866':
        case 'csibm866':
        case 'ibm866':
          return 'IBM866'
        case 'csisolatin2':
        case 'iso-8859-2':
        case 'iso-ir-101':
        case 'iso8859-2':
        case 'iso88592':
        case 'iso_8859-2':
        case 'iso_8859-2:1987':
        case 'l2':
        case 'latin2':
          return 'ISO-8859-2'
        case 'csisolatin3':
        case 'iso-8859-3':
        case 'iso-ir-109':
        case 'iso8859-3':
        case 'iso88593':
        case 'iso_8859-3':
        case 'iso_8859-3:1988':
        case 'l3':
        case 'latin3':
          return 'ISO-8859-3'
        case 'csisolatin4':
        case 'iso-8859-4':
        case 'iso-ir-110':
        case 'iso8859-4':
        case 'iso88594':
        case 'iso_8859-4':
        case 'iso_8859-4:1988':
        case 'l4':
        case 'latin4':
          return 'ISO-8859-4'
        case 'csisolatincyrillic':
        case 'cyrillic':
        case 'iso-8859-5':
        case 'iso-ir-144':
        case 'iso8859-5':
        case 'iso88595':
        case 'iso_8859-5':
        case 'iso_8859-5:1988':
          return 'ISO-8859-5'
        case 'arabic':
        case 'asmo-708':
        case 'csiso88596e':
        case 'csiso88596i':
        case 'csisolatinarabic':
        case 'ecma-114':
        case 'iso-8859-6':
        case 'iso-8859-6-e':
        case 'iso-8859-6-i':
        case 'iso-ir-127':
        case 'iso8859-6':
        case 'iso88596':
        case 'iso_8859-6':
        case 'iso_8859-6:1987':
          return 'ISO-8859-6'
        case 'csisolatingreek':
        case 'ecma-118':
        case 'elot_928':
        case 'greek':
        case 'greek8':
        case 'iso-8859-7':
        case 'iso-ir-126':
        case 'iso8859-7':
        case 'iso88597':
        case 'iso_8859-7':
        case 'iso_8859-7:1987':
        case 'sun_eu_greek':
          return 'ISO-8859-7'
        case 'csiso88598e':
        case 'csisolatinhebrew':
        case 'hebrew':
        case 'iso-8859-8':
        case 'iso-8859-8-e':
        case 'iso-ir-138':
        case 'iso8859-8':
        case 'iso88598':
        case 'iso_8859-8':
        case 'iso_8859-8:1988':
        case 'visual':
          return 'ISO-8859-8'
        case 'csiso88598i':
        case 'iso-8859-8-i':
        case 'logical':
          return 'ISO-8859-8-I'
        case 'csisolatin6':
        case 'iso-8859-10':
        case 'iso-ir-157':
        case 'iso8859-10':
        case 'iso885910':
        case 'l6':
        case 'latin6':
          return 'ISO-8859-10'
        case 'iso-8859-13':
        case 'iso8859-13':
        case 'iso885913':
          return 'ISO-8859-13'
        case 'iso-8859-14':
        case 'iso8859-14':
        case 'iso885914':
          return 'ISO-8859-14'
        case 'csisolatin9':
        case 'iso-8859-15':
        case 'iso8859-15':
        case 'iso885915':
        case 'iso_8859-15':
        case 'l9':
          return 'ISO-8859-15'
        case 'iso-8859-16':
          return 'ISO-8859-16'
        case 'cskoi8r':
        case 'koi':
        case 'koi8':
        case 'koi8-r':
        case 'koi8_r':
          return 'KOI8-R'
        case 'koi8-ru':
        case 'koi8-u':
          return 'KOI8-U'
        case 'csmacintosh':
        case 'mac':
        case 'macintosh':
        case 'x-mac-roman':
          return 'macintosh'
        case 'iso-8859-11':
        case 'iso8859-11':
        case 'iso885911':
        case 'tis-620':
        case 'windows-874':
          return 'windows-874'
        case 'cp1250':
        case 'windows-1250':
        case 'x-cp1250':
          return 'windows-1250'
        case 'cp1251':
        case 'windows-1251':
        case 'x-cp1251':
          return 'windows-1251'
        case 'ansi_x3.4-1968':
        case 'ascii':
        case 'cp1252':
        case 'cp819':
        case 'csisolatin1':
        case 'ibm819':
        case 'iso-8859-1':
        case 'iso-ir-100':
        case 'iso8859-1':
        case 'iso88591':
        case 'iso_8859-1':
        case 'iso_8859-1:1987':
        case 'l1':
        case 'latin1':
        case 'us-ascii':
        case 'windows-1252':
        case 'x-cp1252':
          return 'windows-1252'
        case 'cp1253':
        case 'windows-1253':
        case 'x-cp1253':
          return 'windows-1253'
        case 'cp1254':
        case 'csisolatin5':
        case 'iso-8859-9':
        case 'iso-ir-148':
        case 'iso8859-9':
        case 'iso88599':
        case 'iso_8859-9':
        case 'iso_8859-9:1989':
        case 'l5':
        case 'latin5':
        case 'windows-1254':
        case 'x-cp1254':
          return 'windows-1254'
        case 'cp1255':
        case 'windows-1255':
        case 'x-cp1255':
          return 'windows-1255'
        case 'cp1256':
        case 'windows-1256':
        case 'x-cp1256':
          return 'windows-1256'
        case 'cp1257':
        case 'windows-1257':
        case 'x-cp1257':
          return 'windows-1257'
        case 'cp1258':
        case 'windows-1258':
        case 'x-cp1258':
          return 'windows-1258'
        case 'x-mac-cyrillic':
        case 'x-mac-ukrainian':
          return 'x-mac-cyrillic'
        case 'chinese':
        case 'csgb2312':
        case 'csiso58gb231280':
        case 'gb2312':
        case 'gb_2312':
        case 'gb_2312-80':
        case 'gbk':
        case 'iso-ir-58':
        case 'x-gbk':
          return 'GBK'
        case 'gb18030':
          return 'gb18030'
        case 'big5':
        case 'big5-hkscs':
        case 'cn-big5':
        case 'csbig5':
        case 'x-x-big5':
          return 'Big5'
        case 'cseucpkdfmtjapanese':
        case 'euc-jp':
        case 'x-euc-jp':
          return 'EUC-JP'
        case 'csiso2022jp':
        case 'iso-2022-jp':
          return 'ISO-2022-JP'
        case 'csshiftjis':
        case 'ms932':
        case 'ms_kanji':
        case 'shift-jis':
        case 'shift_jis':
        case 'sjis':
        case 'windows-31j':
        case 'x-sjis':
          return 'Shift_JIS'
        case 'cseuckr':
        case 'csksc56011987':
        case 'euc-kr':
        case 'iso-ir-149':
        case 'korean':
        case 'ks_c_5601-1987':
        case 'ks_c_5601-1989':
        case 'ksc5601':
        case 'ksc_5601':
        case 'windows-949':
          return 'EUC-KR'
        case 'csiso2022kr':
        case 'hz-gb-2312':
        case 'iso-2022-cn':
        case 'iso-2022-cn-ext':
        case 'iso-2022-kr':
        case 'replacement':
          return 'replacement'
        case 'unicodefffe':
        case 'utf-16be':
          return 'UTF-16BE'
        case 'csunicode':
        case 'iso-10646-ucs-2':
        case 'ucs-2':
        case 'unicode':
        case 'unicodefeff':
        case 'utf-16':
        case 'utf-16le':
          return 'UTF-16LE'
        case 'x-user-defined':
          return 'x-user-defined'
        default:
          return 'failure'
      }
    }

    module.exports = {
      getEncoding
    }

    /***/
  },

  /***/ 1446: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { staticPropertyDescriptors, readOperation, fireAProgressEvent } =
      __nccwpck_require__(7530)
    const { kState, kError, kResult, kEvents, kAborted } =
      __nccwpck_require__(9054)
    const { webidl } = __nccwpck_require__(1744)
    const { kEnumerableProperty } = __nccwpck_require__(3983)

    class FileReader extends EventTarget {
      constructor() {
        super()

        this[kState] = 'empty'
        this[kResult] = null
        this[kError] = null
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        }
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, FileReader)

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'FileReader.readAsArrayBuffer'
        })

        blob = webidl.converters.Blob(blob, { strict: false })

        // The readAsArrayBuffer(blob) method, when invoked,
        // must initiate a read operation for blob with ArrayBuffer.
        readOperation(this, blob, 'ArrayBuffer')
      }

      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, FileReader)

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'FileReader.readAsBinaryString'
        })

        blob = webidl.converters.Blob(blob, { strict: false })

        // The readAsBinaryString(blob) method, when invoked,
        // must initiate a read operation for blob with BinaryString.
        readOperation(this, blob, 'BinaryString')
      }

      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = undefined) {
        webidl.brandCheck(this, FileReader)

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'FileReader.readAsText'
        })

        blob = webidl.converters.Blob(blob, { strict: false })

        if (encoding !== undefined) {
          encoding = webidl.converters.DOMString(encoding)
        }

        // The readAsText(blob, encoding) method, when invoked,
        // must initiate a read operation for blob with Text and encoding.
        readOperation(this, blob, 'Text', encoding)
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, FileReader)

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'FileReader.readAsDataURL'
        })

        blob = webidl.converters.Blob(blob, { strict: false })

        // The readAsDataURL(blob) method, when invoked, must
        // initiate a read operation for blob with DataURL.
        readOperation(this, blob, 'DataURL')
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        // 1. If this's state is "empty" or if this's state is
        //    "done" set this's result to null and terminate
        //    this algorithm.
        if (this[kState] === 'empty' || this[kState] === 'done') {
          this[kResult] = null
          return
        }

        // 2. If this's state is "loading" set this's state to
        //    "done" and set this's result to null.
        if (this[kState] === 'loading') {
          this[kState] = 'done'
          this[kResult] = null
        }

        // 3. If there are any tasks from this on the file reading
        //    task source in an affiliated task queue, then remove
        //    those tasks from that task queue.
        this[kAborted] = true

        // 4. Terminate the algorithm for the read method being processed.
        // TODO

        // 5. Fire a progress event called abort at this.
        fireAProgressEvent('abort', this)

        // 6. If this's state is not "loading", fire a progress
        //    event called loadend at this.
        if (this[kState] !== 'loading') {
          fireAProgressEvent('loadend', this)
        }
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, FileReader)

        switch (this[kState]) {
          case 'empty':
            return this.EMPTY
          case 'loading':
            return this.LOADING
          case 'done':
            return this.DONE
        }
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, FileReader)

        // The result attribute’s getter, when invoked, must return
        // this's result.
        return this[kResult]
      }

      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, FileReader)

        // The error attribute’s getter, when invoked, must return
        // this's error.
        return this[kError]
      }

      get onloadend() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].loadend
      }

      set onloadend(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].loadend) {
          this.removeEventListener('loadend', this[kEvents].loadend)
        }

        if (typeof fn === 'function') {
          this[kEvents].loadend = fn
          this.addEventListener('loadend', fn)
        } else {
          this[kEvents].loadend = null
        }
      }

      get onerror() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].error
      }

      set onerror(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].error) {
          this.removeEventListener('error', this[kEvents].error)
        }

        if (typeof fn === 'function') {
          this[kEvents].error = fn
          this.addEventListener('error', fn)
        } else {
          this[kEvents].error = null
        }
      }

      get onloadstart() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].loadstart
      }

      set onloadstart(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].loadstart) {
          this.removeEventListener('loadstart', this[kEvents].loadstart)
        }

        if (typeof fn === 'function') {
          this[kEvents].loadstart = fn
          this.addEventListener('loadstart', fn)
        } else {
          this[kEvents].loadstart = null
        }
      }

      get onprogress() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].progress
      }

      set onprogress(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].progress) {
          this.removeEventListener('progress', this[kEvents].progress)
        }

        if (typeof fn === 'function') {
          this[kEvents].progress = fn
          this.addEventListener('progress', fn)
        } else {
          this[kEvents].progress = null
        }
      }

      get onload() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].load
      }

      set onload(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].load) {
          this.removeEventListener('load', this[kEvents].load)
        }

        if (typeof fn === 'function') {
          this[kEvents].load = fn
          this.addEventListener('load', fn)
        } else {
          this[kEvents].load = null
        }
      }

      get onabort() {
        webidl.brandCheck(this, FileReader)

        return this[kEvents].abort
      }

      set onabort(fn) {
        webidl.brandCheck(this, FileReader)

        if (this[kEvents].abort) {
          this.removeEventListener('abort', this[kEvents].abort)
        }

        if (typeof fn === 'function') {
          this[kEvents].abort = fn
          this.addEventListener('abort', fn)
        } else {
          this[kEvents].abort = null
        }
      }
    }

    // https://w3c.github.io/FileAPI/#dom-filereader-empty
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0
    // https://w3c.github.io/FileAPI/#dom-filereader-loading
    FileReader.LOADING = FileReader.prototype.LOADING = 1
    // https://w3c.github.io/FileAPI/#dom-filereader-done
    FileReader.DONE = FileReader.prototype.DONE = 2

    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: 'FileReader',
        writable: false,
        enumerable: false,
        configurable: true
      }
    })

    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    })

    module.exports = {
      FileReader
    }

    /***/
  },

  /***/ 5504: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { webidl } = __nccwpck_require__(1744)

    const kState = Symbol('ProgressEvent state')

    /**
     * @see https://xhr.spec.whatwg.org/#progressevent
     */
    class ProgressEvent extends Event {
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type)
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})

        super(type, eventInitDict)

        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        }
      }

      get lengthComputable() {
        webidl.brandCheck(this, ProgressEvent)

        return this[kState].lengthComputable
      }

      get loaded() {
        webidl.brandCheck(this, ProgressEvent)

        return this[kState].loaded
      }

      get total() {
        webidl.brandCheck(this, ProgressEvent)

        return this[kState].total
      }
    }

    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: 'lengthComputable',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'loaded',
        converter: webidl.converters['unsigned long long'],
        defaultValue: 0
      },
      {
        key: 'total',
        converter: webidl.converters['unsigned long long'],
        defaultValue: 0
      },
      {
        key: 'bubbles',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'cancelable',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'composed',
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ])

    module.exports = {
      ProgressEvent
    }

    /***/
  },

  /***/ 9054: /***/ (module) => {
    module.exports = {
      kState: Symbol('FileReader state'),
      kResult: Symbol('FileReader result'),
      kError: Symbol('FileReader error'),
      kLastProgressEventFired: Symbol(
        'FileReader last progress event fired timestamp'
      ),
      kEvents: Symbol('FileReader events'),
      kAborted: Symbol('FileReader aborted')
    }

    /***/
  },

  /***/ 7530: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kState, kError, kResult, kAborted, kLastProgressEventFired } =
      __nccwpck_require__(9054)
    const { ProgressEvent } = __nccwpck_require__(5504)
    const { getEncoding } = __nccwpck_require__(4854)
    const { DOMException } = __nccwpck_require__(1037)
    const { serializeAMimeType, parseMIMEType } = __nccwpck_require__(685)
    const { types } = __nccwpck_require__(3837)
    const { StringDecoder } = __nccwpck_require__(1576)
    const { btoa } = __nccwpck_require__(4300)

    /** @type {PropertyDescriptor} */
    const staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    }

    /**
     * @see https://w3c.github.io/FileAPI/#readOperation
     * @param {import('./filereader').FileReader} fr
     * @param {import('buffer').Blob} blob
     * @param {string} type
     * @param {string?} encodingName
     */
    function readOperation(fr, blob, type, encodingName) {
      // 1. If fr’s state is "loading", throw an InvalidStateError
      //    DOMException.
      if (fr[kState] === 'loading') {
        throw new DOMException('Invalid state', 'InvalidStateError')
      }

      // 2. Set fr’s state to "loading".
      fr[kState] = 'loading'

      // 3. Set fr’s result to null.
      fr[kResult] = null

      // 4. Set fr’s error to null.
      fr[kError] = null

      // 5. Let stream be the result of calling get stream on blob.
      /** @type {import('stream/web').ReadableStream} */
      const stream = blob.stream()

      // 6. Let reader be the result of getting a reader from stream.
      const reader = stream.getReader()

      // 7. Let bytes be an empty byte sequence.
      /** @type {Uint8Array[]} */
      const bytes = []

      // 8. Let chunkPromise be the result of reading a chunk from
      //    stream with reader.
      let chunkPromise = reader.read()

      // 9. Let isFirstChunk be true.
      let isFirstChunk = true

      // 10. In parallel, while true:
      // Note: "In parallel" just means non-blocking
      // Note 2: readOperation itself cannot be async as double
      // reading the body would then reject the promise, instead
      // of throwing an error.
      ;(async () => {
        while (!fr[kAborted]) {
          // 1. Wait for chunkPromise to be fulfilled or rejected.
          try {
            const { done, value } = await chunkPromise

            // 2. If chunkPromise is fulfilled, and isFirstChunk is
            //    true, queue a task to fire a progress event called
            //    loadstart at fr.
            if (isFirstChunk && !fr[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent('loadstart', fr)
              })
            }

            // 3. Set isFirstChunk to false.
            isFirstChunk = false

            // 4. If chunkPromise is fulfilled with an object whose
            //    done property is false and whose value property is
            //    a Uint8Array object, run these steps:
            if (!done && types.isUint8Array(value)) {
              // 1. Let bs be the byte sequence represented by the
              //    Uint8Array object.

              // 2. Append bs to bytes.
              bytes.push(value)

              // 3. If roughly 50ms have passed since these steps
              //    were last invoked, queue a task to fire a
              //    progress event called progress at fr.
              if (
                (fr[kLastProgressEventFired] === undefined ||
                  Date.now() - fr[kLastProgressEventFired] >= 50) &&
                !fr[kAborted]
              ) {
                fr[kLastProgressEventFired] = Date.now()
                queueMicrotask(() => {
                  fireAProgressEvent('progress', fr)
                })
              }

              // 4. Set chunkPromise to the result of reading a
              //    chunk from stream with reader.
              chunkPromise = reader.read()
            } else if (done) {
              // 5. Otherwise, if chunkPromise is fulfilled with an
              //    object whose done property is true, queue a task
              //    to run the following steps and abort this algorithm:
              queueMicrotask(() => {
                // 1. Set fr’s state to "done".
                fr[kState] = 'done'

                // 2. Let result be the result of package data given
                //    bytes, type, blob’s type, and encodingName.
                try {
                  const result = packageData(
                    bytes,
                    type,
                    blob.type,
                    encodingName
                  )

                  // 4. Else:

                  if (fr[kAborted]) {
                    return
                  }

                  // 1. Set fr’s result to result.
                  fr[kResult] = result

                  // 2. Fire a progress event called load at the fr.
                  fireAProgressEvent('load', fr)
                } catch (error) {
                  // 3. If package data threw an exception error:

                  // 1. Set fr’s error to error.
                  fr[kError] = error

                  // 2. Fire a progress event called error at fr.
                  fireAProgressEvent('error', fr)
                }

                // 5. If fr’s state is not "loading", fire a progress
                //    event called loadend at the fr.
                if (fr[kState] !== 'loading') {
                  fireAProgressEvent('loadend', fr)
                }
              })

              break
            }
          } catch (error) {
            if (fr[kAborted]) {
              return
            }

            // 6. Otherwise, if chunkPromise is rejected with an
            //    error error, queue a task to run the following
            //    steps and abort this algorithm:
            queueMicrotask(() => {
              // 1. Set fr’s state to "done".
              fr[kState] = 'done'

              // 2. Set fr’s error to error.
              fr[kError] = error

              // 3. Fire a progress event called error at fr.
              fireAProgressEvent('error', fr)

              // 4. If fr’s state is not "loading", fire a progress
              //    event called loadend at fr.
              if (fr[kState] !== 'loading') {
                fireAProgressEvent('loadend', fr)
              }
            })

            break
          }
        }
      })()
    }

    /**
     * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
     * @see https://dom.spec.whatwg.org/#concept-event-fire
     * @param {string} e The name of the event
     * @param {import('./filereader').FileReader} reader
     */
    function fireAProgressEvent(e, reader) {
      // The progress event e does not bubble. e.bubbles must be false
      // The progress event e is NOT cancelable. e.cancelable must be false
      const event = new ProgressEvent(e, {
        bubbles: false,
        cancelable: false
      })

      reader.dispatchEvent(event)
    }

    /**
     * @see https://w3c.github.io/FileAPI/#blob-package-data
     * @param {Uint8Array[]} bytes
     * @param {string} type
     * @param {string?} mimeType
     * @param {string?} encodingName
     */
    function packageData(bytes, type, mimeType, encodingName) {
      // 1. A Blob has an associated package data algorithm, given
      //    bytes, a type, a optional mimeType, and a optional
      //    encodingName, which switches on type and runs the
      //    associated steps:

      switch (type) {
        case 'DataURL': {
          // 1. Return bytes as a DataURL [RFC2397] subject to
          //    the considerations below:
          //  * Use mimeType as part of the Data URL if it is
          //    available in keeping with the Data URL
          //    specification [RFC2397].
          //  * If mimeType is not available return a Data URL
          //    without a media-type. [RFC2397].

          // https://datatracker.ietf.org/doc/html/rfc2397#section-3
          // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
          // mediatype  := [ type "/" subtype ] *( ";" parameter )
          // data       := *urlchar
          // parameter  := attribute "=" value
          let dataURL = 'data:'

          const parsed = parseMIMEType(mimeType || 'application/octet-stream')

          if (parsed !== 'failure') {
            dataURL += serializeAMimeType(parsed)
          }

          dataURL += ';base64,'

          const decoder = new StringDecoder('latin1')

          for (const chunk of bytes) {
            dataURL += btoa(decoder.write(chunk))
          }

          dataURL += btoa(decoder.end())

          return dataURL
        }
        case 'Text': {
          // 1. Let encoding be failure
          let encoding = 'failure'

          // 2. If the encodingName is present, set encoding to the
          //    result of getting an encoding from encodingName.
          if (encodingName) {
            encoding = getEncoding(encodingName)
          }

          // 3. If encoding is failure, and mimeType is present:
          if (encoding === 'failure' && mimeType) {
            // 1. Let type be the result of parse a MIME type
            //    given mimeType.
            const type = parseMIMEType(mimeType)

            // 2. If type is not failure, set encoding to the result
            //    of getting an encoding from type’s parameters["charset"].
            if (type !== 'failure') {
              encoding = getEncoding(type.parameters.get('charset'))
            }
          }

          // 4. If encoding is failure, then set encoding to UTF-8.
          if (encoding === 'failure') {
            encoding = 'UTF-8'
          }

          // 5. Decode bytes using fallback encoding encoding, and
          //    return the result.
          return decode(bytes, encoding)
        }
        case 'ArrayBuffer': {
          // Return a new ArrayBuffer whose contents are bytes.
          const sequence = combineByteSequences(bytes)

          return sequence.buffer
        }
        case 'BinaryString': {
          // Return bytes as a binary string, in which every byte
          //  is represented by a code unit of equal value [0..255].
          let binaryString = ''

          const decoder = new StringDecoder('latin1')

          for (const chunk of bytes) {
            binaryString += decoder.write(chunk)
          }

          binaryString += decoder.end()

          return binaryString
        }
      }
    }

    /**
     * @see https://encoding.spec.whatwg.org/#decode
     * @param {Uint8Array[]} ioQueue
     * @param {string} encoding
     */
    function decode(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue)

      // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
      const BOMEncoding = BOMSniffing(bytes)

      let slice = 0

      // 2. If BOMEncoding is non-null:
      if (BOMEncoding !== null) {
        // 1. Set encoding to BOMEncoding.
        encoding = BOMEncoding

        // 2. Read three bytes from ioQueue, if BOMEncoding is
        //    UTF-8; otherwise read two bytes.
        //    (Do nothing with those bytes.)
        slice = BOMEncoding === 'UTF-8' ? 3 : 2
      }

      // 3. Process a queue with an instance of encoding’s
      //    decoder, ioQueue, output, and "replacement".

      // 4. Return output.

      const sliced = bytes.slice(slice)
      return new TextDecoder(encoding).decode(sliced)
    }

    /**
     * @see https://encoding.spec.whatwg.org/#bom-sniff
     * @param {Uint8Array} ioQueue
     */
    function BOMSniffing(ioQueue) {
      // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
      //    converted to a byte sequence.
      const [a, b, c] = ioQueue

      // 2. For each of the rows in the table below, starting with
      //    the first one and going down, if BOM starts with the
      //    bytes given in the first column, then return the
      //    encoding given in the cell in the second column of that
      //    row. Otherwise, return null.
      if (a === 0xef && b === 0xbb && c === 0xbf) {
        return 'UTF-8'
      } else if (a === 0xfe && b === 0xff) {
        return 'UTF-16BE'
      } else if (a === 0xff && b === 0xfe) {
        return 'UTF-16LE'
      }

      return null
    }

    /**
     * @param {Uint8Array[]} sequences
     */
    function combineByteSequences(sequences) {
      const size = sequences.reduce((a, b) => {
        return a + b.byteLength
      }, 0)

      let offset = 0

      return sequences.reduce((a, b) => {
        a.set(b, offset)
        offset += b.byteLength
        return a
      }, new Uint8Array(size))
    }

    module.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    }

    /***/
  },

  /***/ 1892: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // We include a version number for the Dispatcher API. In case of breaking changes,
    // this version number must be increased to avoid conflicts.
    const globalDispatcher = Symbol.for('undici.globalDispatcher.1')
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const Agent = __nccwpck_require__(7890)

    if (getGlobalDispatcher() === undefined) {
      setGlobalDispatcher(new Agent())
    }

    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== 'function') {
        throw new InvalidArgumentError('Argument agent must implement Agent')
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      })
    }

    function getGlobalDispatcher() {
      return globalThis[globalDispatcher]
    }

    module.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    }

    /***/
  },

  /***/ 6930: /***/ (module) => {
    module.exports = class DecoratorHandler {
      constructor(handler) {
        this.handler = handler
      }

      onConnect(...args) {
        return this.handler.onConnect(...args)
      }

      onError(...args) {
        return this.handler.onError(...args)
      }

      onUpgrade(...args) {
        return this.handler.onUpgrade(...args)
      }

      onHeaders(...args) {
        return this.handler.onHeaders(...args)
      }

      onData(...args) {
        return this.handler.onData(...args)
      }

      onComplete(...args) {
        return this.handler.onComplete(...args)
      }

      onBodySent(...args) {
        return this.handler.onBodySent(...args)
      }
    }

    /***/
  },

  /***/ 2860: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const util = __nccwpck_require__(3983)
    const { kBodyUsed } = __nccwpck_require__(2785)
    const assert = __nccwpck_require__(9491)
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const EE = __nccwpck_require__(2361)

    const redirectableStatusCodes = [300, 301, 302, 303, 307, 308]

    const kBody = Symbol('body')

    class BodyAsyncIterable {
      constructor(body) {
        this[kBody] = body
        this[kBodyUsed] = false
      }

      async *[Symbol.asyncIterator]() {
        assert(!this[kBodyUsed], 'disturbed')
        this[kBodyUsed] = true
        yield* this[kBody]
      }
    }

    class RedirectHandler {
      constructor(dispatch, maxRedirections, opts, handler) {
        if (
          maxRedirections != null &&
          (!Number.isInteger(maxRedirections) || maxRedirections < 0)
        ) {
          throw new InvalidArgumentError(
            'maxRedirections must be a positive number'
          )
        }

        util.validateHandler(handler, opts.method, opts.upgrade)

        this.dispatch = dispatch
        this.location = null
        this.abort = null
        this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy
        this.maxRedirections = maxRedirections
        this.handler = handler
        this.history = []

        if (util.isStream(this.opts.body)) {
          // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
          // so that it can be dispatched again?
          // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
          if (util.bodyLength(this.opts.body) === 0) {
            this.opts.body.on('data', function () {
              assert(false)
            })
          }

          if (typeof this.opts.body.readableDidRead !== 'boolean') {
            this.opts.body[kBodyUsed] = false
            EE.prototype.on.call(this.opts.body, 'data', function () {
              this[kBodyUsed] = true
            })
          }
        } else if (
          this.opts.body &&
          typeof this.opts.body.pipeTo === 'function'
        ) {
          // TODO (fix): We can't access ReadableStream internal state
          // to determine whether or not it has been disturbed. This is just
          // a workaround.
          this.opts.body = new BodyAsyncIterable(this.opts.body)
        } else if (
          this.opts.body &&
          typeof this.opts.body !== 'string' &&
          !ArrayBuffer.isView(this.opts.body) &&
          util.isIterable(this.opts.body)
        ) {
          // TODO: Should we allow re-using iterable if !this.opts.idempotent
          // or through some other flag?
          this.opts.body = new BodyAsyncIterable(this.opts.body)
        }
      }

      onConnect(abort) {
        this.abort = abort
        this.handler.onConnect(abort, { history: this.history })
      }

      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket)
      }

      onError(error) {
        this.handler.onError(error)
      }

      onHeaders(statusCode, headers, resume, statusText) {
        this.location =
          this.history.length >= this.maxRedirections ||
          util.isDisturbed(this.opts.body)
            ? null
            : parseLocation(statusCode, headers)

        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin))
        }

        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume, statusText)
        }

        const { origin, pathname, search } = util.parseURL(
          new URL(
            this.location,
            this.opts.origin && new URL(this.opts.path, this.opts.origin)
          )
        )
        const path = search ? `${pathname}${search}` : pathname

        // Remove headers referring to the original URL.
        // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
        // https://tools.ietf.org/html/rfc7231#section-6.4
        this.opts.headers = cleanRequestHeaders(
          this.opts.headers,
          statusCode === 303,
          this.opts.origin !== origin
        )
        this.opts.path = path
        this.opts.origin = origin
        this.opts.maxRedirections = 0
        this.opts.query = null

        // https://tools.ietf.org/html/rfc7231#section-6.4.4
        // In case of HTTP 303, always replace method to be either HEAD or GET
        if (statusCode === 303 && this.opts.method !== 'HEAD') {
          this.opts.method = 'GET'
          this.opts.body = null
        }
      }

      onData(chunk) {
        if (this.location) {
          /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response bodies.

        Redirection is used to serve the requested resource from another URL, so it is assumes that
        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.

        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually
        (which means it's optional and not mandated) contain just an hyperlink to the value of
        the Location response header, so the body can be ignored safely.

        For status 300, which is "Multiple Choices", the spec mentions both generating a Location
        response header AND a response body with the other possible location to follow.
        Since the spec explicitily chooses not to specify a format for such body and leave it to
        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.
      */
        } else {
          return this.handler.onData(chunk)
        }
      }

      onComplete(trailers) {
        if (this.location) {
          /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */

          this.location = null
          this.abort = null

          this.dispatch(this.opts, this)
        } else {
          this.handler.onComplete(trailers)
        }
      }

      onBodySent(chunk) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk)
        }
      }
    }

    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null
      }

      for (let i = 0; i < headers.length; i += 2) {
        if (headers[i].toString().toLowerCase() === 'location') {
          return headers[i + 1]
        }
      }
    }

    // https://tools.ietf.org/html/rfc7231#section-6.4.4
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      return (
        (header.length === 4 && header.toString().toLowerCase() === 'host') ||
        (removeContent &&
          header.toString().toLowerCase().indexOf('content-') === 0) ||
        (unknownOrigin &&
          header.length === 13 &&
          header.toString().toLowerCase() === 'authorization') ||
        (unknownOrigin &&
          header.length === 6 &&
          header.toString().toLowerCase() === 'cookie')
      )
    }

    // https://tools.ietf.org/html/rfc7231#section-6.4
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = []
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
            ret.push(headers[i], headers[i + 1])
          }
        }
      } else if (headers && typeof headers === 'object') {
        for (const key of Object.keys(headers)) {
          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
            ret.push(key, headers[key])
          }
        }
      } else {
        assert(headers == null, 'headers must be an object or an array')
      }
      return ret
    }

    module.exports = RedirectHandler

    /***/
  },

  /***/ 8861: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const RedirectHandler = __nccwpck_require__(2860)

    function createRedirectInterceptor({
      maxRedirections: defaultMaxRedirections
    }) {
      return (dispatch) => {
        return function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts

          if (!maxRedirections) {
            return dispatch(opts, handler)
          }

          const redirectHandler = new RedirectHandler(
            dispatch,
            maxRedirections,
            opts,
            handler
          )
          opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
          return dispatch(opts, redirectHandler)
        }
      }
    }

    module.exports = createRedirectInterceptor

    /***/
  },

  /***/ 953: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.SPECIAL_HEADERS =
      exports.HEADER_STATE =
      exports.MINOR =
      exports.MAJOR =
      exports.CONNECTION_TOKEN_CHARS =
      exports.HEADER_CHARS =
      exports.TOKEN =
      exports.STRICT_TOKEN =
      exports.HEX =
      exports.URL_CHAR =
      exports.STRICT_URL_CHAR =
      exports.USERINFO_CHARS =
      exports.MARK =
      exports.ALPHANUM =
      exports.NUM =
      exports.HEX_MAP =
      exports.NUM_MAP =
      exports.ALPHA =
      exports.FINISH =
      exports.H_METHOD_MAP =
      exports.METHOD_MAP =
      exports.METHODS_RTSP =
      exports.METHODS_ICE =
      exports.METHODS_HTTP =
      exports.METHODS =
      exports.LENIENT_FLAGS =
      exports.FLAGS =
      exports.TYPE =
      exports.ERROR =
        void 0
    const utils_1 = __nccwpck_require__(1891)
    // C headers
    var ERROR
    ;(function (ERROR) {
      ERROR[(ERROR['OK'] = 0)] = 'OK'
      ERROR[(ERROR['INTERNAL'] = 1)] = 'INTERNAL'
      ERROR[(ERROR['STRICT'] = 2)] = 'STRICT'
      ERROR[(ERROR['LF_EXPECTED'] = 3)] = 'LF_EXPECTED'
      ERROR[(ERROR['UNEXPECTED_CONTENT_LENGTH'] = 4)] =
        'UNEXPECTED_CONTENT_LENGTH'
      ERROR[(ERROR['CLOSED_CONNECTION'] = 5)] = 'CLOSED_CONNECTION'
      ERROR[(ERROR['INVALID_METHOD'] = 6)] = 'INVALID_METHOD'
      ERROR[(ERROR['INVALID_URL'] = 7)] = 'INVALID_URL'
      ERROR[(ERROR['INVALID_CONSTANT'] = 8)] = 'INVALID_CONSTANT'
      ERROR[(ERROR['INVALID_VERSION'] = 9)] = 'INVALID_VERSION'
      ERROR[(ERROR['INVALID_HEADER_TOKEN'] = 10)] = 'INVALID_HEADER_TOKEN'
      ERROR[(ERROR['INVALID_CONTENT_LENGTH'] = 11)] = 'INVALID_CONTENT_LENGTH'
      ERROR[(ERROR['INVALID_CHUNK_SIZE'] = 12)] = 'INVALID_CHUNK_SIZE'
      ERROR[(ERROR['INVALID_STATUS'] = 13)] = 'INVALID_STATUS'
      ERROR[(ERROR['INVALID_EOF_STATE'] = 14)] = 'INVALID_EOF_STATE'
      ERROR[(ERROR['INVALID_TRANSFER_ENCODING'] = 15)] =
        'INVALID_TRANSFER_ENCODING'
      ERROR[(ERROR['CB_MESSAGE_BEGIN'] = 16)] = 'CB_MESSAGE_BEGIN'
      ERROR[(ERROR['CB_HEADERS_COMPLETE'] = 17)] = 'CB_HEADERS_COMPLETE'
      ERROR[(ERROR['CB_MESSAGE_COMPLETE'] = 18)] = 'CB_MESSAGE_COMPLETE'
      ERROR[(ERROR['CB_CHUNK_HEADER'] = 19)] = 'CB_CHUNK_HEADER'
      ERROR[(ERROR['CB_CHUNK_COMPLETE'] = 20)] = 'CB_CHUNK_COMPLETE'
      ERROR[(ERROR['PAUSED'] = 21)] = 'PAUSED'
      ERROR[(ERROR['PAUSED_UPGRADE'] = 22)] = 'PAUSED_UPGRADE'
      ERROR[(ERROR['PAUSED_H2_UPGRADE'] = 23)] = 'PAUSED_H2_UPGRADE'
      ERROR[(ERROR['USER'] = 24)] = 'USER'
    })((ERROR = exports.ERROR || (exports.ERROR = {})))
    var TYPE
    ;(function (TYPE) {
      TYPE[(TYPE['BOTH'] = 0)] = 'BOTH'
      TYPE[(TYPE['REQUEST'] = 1)] = 'REQUEST'
      TYPE[(TYPE['RESPONSE'] = 2)] = 'RESPONSE'
    })((TYPE = exports.TYPE || (exports.TYPE = {})))
    var FLAGS
    ;(function (FLAGS) {
      FLAGS[(FLAGS['CONNECTION_KEEP_ALIVE'] = 1)] = 'CONNECTION_KEEP_ALIVE'
      FLAGS[(FLAGS['CONNECTION_CLOSE'] = 2)] = 'CONNECTION_CLOSE'
      FLAGS[(FLAGS['CONNECTION_UPGRADE'] = 4)] = 'CONNECTION_UPGRADE'
      FLAGS[(FLAGS['CHUNKED'] = 8)] = 'CHUNKED'
      FLAGS[(FLAGS['UPGRADE'] = 16)] = 'UPGRADE'
      FLAGS[(FLAGS['CONTENT_LENGTH'] = 32)] = 'CONTENT_LENGTH'
      FLAGS[(FLAGS['SKIPBODY'] = 64)] = 'SKIPBODY'
      FLAGS[(FLAGS['TRAILING'] = 128)] = 'TRAILING'
      // 1 << 8 is unused
      FLAGS[(FLAGS['TRANSFER_ENCODING'] = 512)] = 'TRANSFER_ENCODING'
    })((FLAGS = exports.FLAGS || (exports.FLAGS = {})))
    var LENIENT_FLAGS
    ;(function (LENIENT_FLAGS) {
      LENIENT_FLAGS[(LENIENT_FLAGS['HEADERS'] = 1)] = 'HEADERS'
      LENIENT_FLAGS[(LENIENT_FLAGS['CHUNKED_LENGTH'] = 2)] = 'CHUNKED_LENGTH'
      LENIENT_FLAGS[(LENIENT_FLAGS['KEEP_ALIVE'] = 4)] = 'KEEP_ALIVE'
    })((LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {})))
    var METHODS
    ;(function (METHODS) {
      METHODS[(METHODS['DELETE'] = 0)] = 'DELETE'
      METHODS[(METHODS['GET'] = 1)] = 'GET'
      METHODS[(METHODS['HEAD'] = 2)] = 'HEAD'
      METHODS[(METHODS['POST'] = 3)] = 'POST'
      METHODS[(METHODS['PUT'] = 4)] = 'PUT'
      /* pathological */
      METHODS[(METHODS['CONNECT'] = 5)] = 'CONNECT'
      METHODS[(METHODS['OPTIONS'] = 6)] = 'OPTIONS'
      METHODS[(METHODS['TRACE'] = 7)] = 'TRACE'
      /* WebDAV */
      METHODS[(METHODS['COPY'] = 8)] = 'COPY'
      METHODS[(METHODS['LOCK'] = 9)] = 'LOCK'
      METHODS[(METHODS['MKCOL'] = 10)] = 'MKCOL'
      METHODS[(METHODS['MOVE'] = 11)] = 'MOVE'
      METHODS[(METHODS['PROPFIND'] = 12)] = 'PROPFIND'
      METHODS[(METHODS['PROPPATCH'] = 13)] = 'PROPPATCH'
      METHODS[(METHODS['SEARCH'] = 14)] = 'SEARCH'
      METHODS[(METHODS['UNLOCK'] = 15)] = 'UNLOCK'
      METHODS[(METHODS['BIND'] = 16)] = 'BIND'
      METHODS[(METHODS['REBIND'] = 17)] = 'REBIND'
      METHODS[(METHODS['UNBIND'] = 18)] = 'UNBIND'
      METHODS[(METHODS['ACL'] = 19)] = 'ACL'
      /* subversion */
      METHODS[(METHODS['REPORT'] = 20)] = 'REPORT'
      METHODS[(METHODS['MKACTIVITY'] = 21)] = 'MKACTIVITY'
      METHODS[(METHODS['CHECKOUT'] = 22)] = 'CHECKOUT'
      METHODS[(METHODS['MERGE'] = 23)] = 'MERGE'
      /* upnp */
      METHODS[(METHODS['M-SEARCH'] = 24)] = 'M-SEARCH'
      METHODS[(METHODS['NOTIFY'] = 25)] = 'NOTIFY'
      METHODS[(METHODS['SUBSCRIBE'] = 26)] = 'SUBSCRIBE'
      METHODS[(METHODS['UNSUBSCRIBE'] = 27)] = 'UNSUBSCRIBE'
      /* RFC-5789 */
      METHODS[(METHODS['PATCH'] = 28)] = 'PATCH'
      METHODS[(METHODS['PURGE'] = 29)] = 'PURGE'
      /* CalDAV */
      METHODS[(METHODS['MKCALENDAR'] = 30)] = 'MKCALENDAR'
      /* RFC-2068, section 19.6.1.2 */
      METHODS[(METHODS['LINK'] = 31)] = 'LINK'
      METHODS[(METHODS['UNLINK'] = 32)] = 'UNLINK'
      /* icecast */
      METHODS[(METHODS['SOURCE'] = 33)] = 'SOURCE'
      /* RFC-7540, section 11.6 */
      METHODS[(METHODS['PRI'] = 34)] = 'PRI'
      /* RFC-2326 RTSP */
      METHODS[(METHODS['DESCRIBE'] = 35)] = 'DESCRIBE'
      METHODS[(METHODS['ANNOUNCE'] = 36)] = 'ANNOUNCE'
      METHODS[(METHODS['SETUP'] = 37)] = 'SETUP'
      METHODS[(METHODS['PLAY'] = 38)] = 'PLAY'
      METHODS[(METHODS['PAUSE'] = 39)] = 'PAUSE'
      METHODS[(METHODS['TEARDOWN'] = 40)] = 'TEARDOWN'
      METHODS[(METHODS['GET_PARAMETER'] = 41)] = 'GET_PARAMETER'
      METHODS[(METHODS['SET_PARAMETER'] = 42)] = 'SET_PARAMETER'
      METHODS[(METHODS['REDIRECT'] = 43)] = 'REDIRECT'
      METHODS[(METHODS['RECORD'] = 44)] = 'RECORD'
      /* RAOP */
      METHODS[(METHODS['FLUSH'] = 45)] = 'FLUSH'
    })((METHODS = exports.METHODS || (exports.METHODS = {})))
    exports.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS['M-SEARCH'],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ]
    exports.METHODS_ICE = [METHODS.SOURCE]
    exports.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ]
    exports.METHOD_MAP = utils_1.enumToMap(METHODS)
    exports.H_METHOD_MAP = {}
    Object.keys(exports.METHOD_MAP).forEach((key) => {
      if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key]
      }
    })
    var FINISH
    ;(function (FINISH) {
      FINISH[(FINISH['SAFE'] = 0)] = 'SAFE'
      FINISH[(FINISH['SAFE_WITH_CB'] = 1)] = 'SAFE_WITH_CB'
      FINISH[(FINISH['UNSAFE'] = 2)] = 'UNSAFE'
    })((FINISH = exports.FINISH || (exports.FINISH = {})))
    exports.ALPHA = []
    for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
      // Upper case
      exports.ALPHA.push(String.fromCharCode(i))
      // Lower case
      exports.ALPHA.push(String.fromCharCode(i + 0x20))
    }
    exports.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    }
    exports.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 0xa,
      B: 0xb,
      C: 0xc,
      D: 0xd,
      E: 0xe,
      F: 0xf,
      a: 0xa,
      b: 0xb,
      c: 0xc,
      d: 0xd,
      e: 0xe,
      f: 0xf
    }
    exports.NUM = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    exports.ALPHANUM = exports.ALPHA.concat(exports.NUM)
    exports.MARK = ['-', '_', '.', '!', '~', '*', "'", '(', ')']
    exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
      '%',
      ';',
      ':',
      '&',
      '=',
      '+',
      '$',
      ','
    ])
    // TODO(indutny): use RFC
    exports.STRICT_URL_CHAR = [
      '!',
      '"',
      '$',
      '%',
      '&',
      "'",
      '(',
      ')',
      '*',
      '+',
      ',',
      '-',
      '.',
      '/',
      ':',
      ';',
      '<',
      '=',
      '>',
      '@',
      '[',
      '\\',
      ']',
      '^',
      '_',
      '`',
      '{',
      '|',
      '}',
      '~'
    ].concat(exports.ALPHANUM)
    exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(['\t', '\f'])
    // All characters with 0x80 bit set to 1
    for (let i = 0x80; i <= 0xff; i++) {
      exports.URL_CHAR.push(i)
    }
    exports.HEX = exports.NUM.concat([
      'a',
      'b',
      'c',
      'd',
      'e',
      'f',
      'A',
      'B',
      'C',
      'D',
      'E',
      'F'
    ])
    /* Tokens as defined by rfc 2616. Also lowercases them.
     *        token       = 1*<any CHAR except CTLs or separators>
     *     separators     = "(" | ")" | "<" | ">" | "@"
     *                    | "," | ";" | ":" | "\" | <">
     *                    | "/" | "[" | "]" | "?" | "="
     *                    | "{" | "}" | SP | HT
     */
    exports.STRICT_TOKEN = [
      '!',
      '#',
      '$',
      '%',
      '&',
      "'",
      '*',
      '+',
      '-',
      '.',
      '^',
      '_',
      '`',
      '|',
      '~'
    ].concat(exports.ALPHANUM)
    exports.TOKEN = exports.STRICT_TOKEN.concat([' '])
    /*
     * Verify that a char is a valid visible (printable) US-ASCII
     * character or %x80-FF
     */
    exports.HEADER_CHARS = ['\t']
    for (let i = 32; i <= 255; i++) {
      if (i !== 127) {
        exports.HEADER_CHARS.push(i)
      }
    }
    // ',' = \x44
    exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter(
      (c) => c !== 44
    )
    exports.MAJOR = exports.NUM_MAP
    exports.MINOR = exports.MAJOR
    var HEADER_STATE
    ;(function (HEADER_STATE) {
      HEADER_STATE[(HEADER_STATE['GENERAL'] = 0)] = 'GENERAL'
      HEADER_STATE[(HEADER_STATE['CONNECTION'] = 1)] = 'CONNECTION'
      HEADER_STATE[(HEADER_STATE['CONTENT_LENGTH'] = 2)] = 'CONTENT_LENGTH'
      HEADER_STATE[(HEADER_STATE['TRANSFER_ENCODING'] = 3)] =
        'TRANSFER_ENCODING'
      HEADER_STATE[(HEADER_STATE['UPGRADE'] = 4)] = 'UPGRADE'
      HEADER_STATE[(HEADER_STATE['CONNECTION_KEEP_ALIVE'] = 5)] =
        'CONNECTION_KEEP_ALIVE'
      HEADER_STATE[(HEADER_STATE['CONNECTION_CLOSE'] = 6)] = 'CONNECTION_CLOSE'
      HEADER_STATE[(HEADER_STATE['CONNECTION_UPGRADE'] = 7)] =
        'CONNECTION_UPGRADE'
      HEADER_STATE[(HEADER_STATE['TRANSFER_ENCODING_CHUNKED'] = 8)] =
        'TRANSFER_ENCODING_CHUNKED'
    })((HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {})))
    exports.SPECIAL_HEADERS = {
      connection: HEADER_STATE.CONNECTION,
      'content-length': HEADER_STATE.CONTENT_LENGTH,
      'proxy-connection': HEADER_STATE.CONNECTION,
      'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
      upgrade: HEADER_STATE.UPGRADE
    }
    //# sourceMappingURL=constants.js.map

    /***/
  },

  /***/ 1145: /***/ (module) => {
    module.exports =
      ''

    /***/
  },

  /***/ 5627: /***/ (module) => {
    module.exports =
      ''

    /***/
  },

  /***/ 1891: /***/ (__unused_webpack_module, exports) => {
    Object.defineProperty(exports, '__esModule', { value: true })
    exports.enumToMap = void 0
    function enumToMap(obj) {
      const res = {}
      Object.keys(obj).forEach((key) => {
        const value = obj[key]
        if (typeof value === 'number') {
          res[key] = value
        }
      })
      return res
    }
    exports.enumToMap = enumToMap
    //# sourceMappingURL=utils.js.map

    /***/
  },

  /***/ 6771: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kClients } = __nccwpck_require__(2785)
    const Agent = __nccwpck_require__(7890)
    const {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = __nccwpck_require__(4347)
    const MockClient = __nccwpck_require__(8687)
    const MockPool = __nccwpck_require__(6193)
    const { matchValue, buildMockOptions } = __nccwpck_require__(9323)
    const { InvalidArgumentError, UndiciError } = __nccwpck_require__(8045)
    const Dispatcher = __nccwpck_require__(412)
    const Pluralizer = __nccwpck_require__(8891)
    const PendingInterceptorsFormatter = __nccwpck_require__(6823)

    class FakeWeakRef {
      constructor(value) {
        this.value = value
      }

      deref() {
        return this.value
      }
    }

    class MockAgent extends Dispatcher {
      constructor(opts) {
        super(opts)

        this[kNetConnect] = true
        this[kIsMockActive] = true

        // Instantiate Agent and encapsulate
        if (opts && opts.agent && typeof opts.agent.dispatch !== 'function') {
          throw new InvalidArgumentError(
            'Argument opts.agent must implement Agent'
          )
        }
        const agent = opts && opts.agent ? opts.agent : new Agent(opts)
        this[kAgent] = agent

        this[kClients] = agent[kClients]
        this[kOptions] = buildMockOptions(opts)
      }

      get(origin) {
        let dispatcher = this[kMockAgentGet](origin)

        if (!dispatcher) {
          dispatcher = this[kFactory](origin)
          this[kMockAgentSet](origin, dispatcher)
        }
        return dispatcher
      }

      dispatch(opts, handler) {
        // Call MockAgent.get to perform additional setup before dispatching as normal
        this.get(opts.origin)
        return this[kAgent].dispatch(opts, handler)
      }

      async close() {
        await this[kAgent].close()
        this[kClients].clear()
      }

      deactivate() {
        this[kIsMockActive] = false
      }

      activate() {
        this[kIsMockActive] = true
      }

      enableNetConnect(matcher) {
        if (
          typeof matcher === 'string' ||
          typeof matcher === 'function' ||
          matcher instanceof RegExp
        ) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher)
          } else {
            this[kNetConnect] = [matcher]
          }
        } else if (typeof matcher === 'undefined') {
          this[kNetConnect] = true
        } else {
          throw new InvalidArgumentError(
            'Unsupported matcher. Must be one of String|Function|RegExp.'
          )
        }
      }

      disableNetConnect() {
        this[kNetConnect] = false
      }

      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive]
      }

      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher))
      }

      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions])
        return this[kOptions] && this[kOptions].connections === 1
          ? new MockClient(origin, mockOptions)
          : new MockPool(origin, mockOptions)
      }

      [kMockAgentGet](origin) {
        // First check if we can immediately find it
        const ref = this[kClients].get(origin)
        if (ref) {
          return ref.deref()
        }

        // If the origin is not a string create a dummy parent pool and return to user
        if (typeof origin !== 'string') {
          const dispatcher = this[kFactory]('http://localhost:9999')
          this[kMockAgentSet](origin, dispatcher)
          return dispatcher
        }

        // If we match, create a pool and assign the same dispatches
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref()
          if (
            nonExplicitDispatcher &&
            typeof keyMatcher !== 'string' &&
            matchValue(keyMatcher, origin)
          ) {
            const dispatcher = this[kFactory](origin)
            this[kMockAgentSet](origin, dispatcher)
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]
            return dispatcher
          }
        }
      }

      [kGetNetConnect]() {
        return this[kNetConnect]
      }

      pendingInterceptors() {
        const mockAgentClients = this[kClients]

        return Array.from(mockAgentClients.entries())
          .flatMap(([origin, scope]) =>
            scope
              .deref()
              [kDispatches].map((dispatch) => ({ ...dispatch, origin }))
          )
          .filter(({ pending }) => pending)
      }

      assertNoPendingInterceptors({
        pendingInterceptorsFormatter = new PendingInterceptorsFormatter()
      } = {}) {
        const pending = this.pendingInterceptors()

        if (pending.length === 0) {
          return
        }

        const pluralizer = new Pluralizer(
          'interceptor',
          'interceptors'
        ).pluralize(pending.length)

        throw new UndiciError(
          `
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim()
        )
      }
    }

    module.exports = MockAgent

    /***/
  },

  /***/ 8687: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { promisify } = __nccwpck_require__(3837)
    const Client = __nccwpck_require__(3598)
    const { buildMockDispatch } = __nccwpck_require__(9323)
    const {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = __nccwpck_require__(4347)
    const { MockInterceptor } = __nccwpck_require__(410)
    const Symbols = __nccwpck_require__(2785)
    const { InvalidArgumentError } = __nccwpck_require__(8045)

    /**
     * MockClient provides an API that extends the Client to influence the mockDispatches.
     */
    class MockClient extends Client {
      constructor(origin, opts) {
        super(origin, opts)

        if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
          throw new InvalidArgumentError(
            'Argument opts.agent must implement Agent'
          )
        }

        this[kMockAgent] = opts.agent
        this[kOrigin] = origin
        this[kDispatches] = []
        this[kConnected] = 1
        this[kOriginalDispatch] = this.dispatch
        this[kOriginalClose] = this.close.bind(this)

        this.dispatch = buildMockDispatch.call(this)
        this.close = this[kClose]
      }

      get [Symbols.kConnected]() {
        return this[kConnected]
      }

      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches])
      }

      async [kClose]() {
        await promisify(this[kOriginalClose])()
        this[kConnected] = 0
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
      }
    }

    module.exports = MockClient

    /***/
  },

  /***/ 888: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { UndiciError } = __nccwpck_require__(8045)

    class MockNotMatchedError extends UndiciError {
      constructor(message) {
        super(message)
        Error.captureStackTrace(this, MockNotMatchedError)
        this.name = 'MockNotMatchedError'
        this.message =
          message || 'The request does not match any registered mock dispatches'
        this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'
      }
    }

    module.exports = {
      MockNotMatchedError
    }

    /***/
  },

  /***/ 410: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { getResponseData, buildKey, addMockDispatch } =
      __nccwpck_require__(9323)
    const {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = __nccwpck_require__(4347)
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const { buildURL } = __nccwpck_require__(3983)

    /**
     * Defines the scope API for an interceptor reply
     */
    class MockScope {
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch
      }

      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (
          typeof waitInMs !== 'number' ||
          !Number.isInteger(waitInMs) ||
          waitInMs <= 0
        ) {
          throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
        }

        this[kMockDispatch].delay = waitInMs
        return this
      }

      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true
        return this
      }

      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (
          typeof repeatTimes !== 'number' ||
          !Number.isInteger(repeatTimes) ||
          repeatTimes <= 0
        ) {
          throw new InvalidArgumentError(
            'repeatTimes must be a valid integer > 0'
          )
        }

        this[kMockDispatch].times = repeatTimes
        return this
      }
    }

    /**
     * Defines an interceptor for a Mock
     */
    class MockInterceptor {
      constructor(opts, mockDispatches) {
        if (typeof opts !== 'object') {
          throw new InvalidArgumentError('opts must be an object')
        }
        if (typeof opts.path === 'undefined') {
          throw new InvalidArgumentError('opts.path must be defined')
        }
        if (typeof opts.method === 'undefined') {
          opts.method = 'GET'
        }
        // See https://github.com/nodejs/undici/issues/1245
        // As per RFC 3986, clients are not supposed to send URI
        // fragments to servers when they retrieve a document,
        if (typeof opts.path === 'string') {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query)
          } else {
            // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
            const parsedURL = new URL(opts.path, 'data://')
            opts.path = parsedURL.pathname + parsedURL.search
          }
        }
        if (typeof opts.method === 'string') {
          opts.method = opts.method.toUpperCase()
        }

        this[kDispatchKey] = buildKey(opts)
        this[kDispatches] = mockDispatches
        this[kDefaultHeaders] = {}
        this[kDefaultTrailers] = {}
        this[kContentLength] = false
      }

      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data)
        const contentLength = this[kContentLength]
          ? { 'content-length': responseData.length }
          : {}
        const headers = {
          ...this[kDefaultHeaders],
          ...contentLength,
          ...responseOptions.headers
        }
        const trailers = {
          ...this[kDefaultTrailers],
          ...responseOptions.trailers
        }

        return { statusCode, data, headers, trailers }
      }

      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === 'undefined') {
          throw new InvalidArgumentError('statusCode must be defined')
        }
        if (typeof data === 'undefined') {
          throw new InvalidArgumentError('data must be defined')
        }
        if (typeof responseOptions !== 'object') {
          throw new InvalidArgumentError('responseOptions must be an object')
        }
      }

      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        // Values of reply aren't available right now as they
        // can only be available when the reply callback is invoked.
        if (typeof replyData === 'function') {
          // We'll first wrap the provided callback in another function,
          // this function will properly resolve the data from the callback
          // when invoked.
          const wrappedDefaultsCallback = (opts) => {
            // Our reply options callback contains the parameter for statusCode, data and options.
            const resolvedData = replyData(opts)

            // Check if it is in the right format
            if (typeof resolvedData !== 'object') {
              throw new InvalidArgumentError(
                'reply options callback must return an object'
              )
            }

            const { statusCode, data = '', responseOptions = {} } = resolvedData
            this.validateReplyParameters(statusCode, data, responseOptions)
            // Since the values can be obtained immediately we return them
            // from this higher order function that will be resolved later.
            return {
              ...this.createMockScopeDispatchData(
                statusCode,
                data,
                responseOptions
              )
            }
          }

          // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
          const newMockDispatch = addMockDispatch(
            this[kDispatches],
            this[kDispatchKey],
            wrappedDefaultsCallback
          )
          return new MockScope(newMockDispatch)
        }

        // We can have either one or three parameters, if we get here,
        // we should have 1-3 parameters. So we spread the arguments of
        // this function to obtain the parameters, since replyData will always
        // just be the statusCode.
        const [statusCode, data = '', responseOptions = {}] = [...arguments]
        this.validateReplyParameters(statusCode, data, responseOptions)

        // Send in-already provided data like usual
        const dispatchData = this.createMockScopeDispatchData(
          statusCode,
          data,
          responseOptions
        )
        const newMockDispatch = addMockDispatch(
          this[kDispatches],
          this[kDispatchKey],
          dispatchData
        )
        return new MockScope(newMockDispatch)
      }

      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error) {
        if (typeof error === 'undefined') {
          throw new InvalidArgumentError('error must be defined')
        }

        const newMockDispatch = addMockDispatch(
          this[kDispatches],
          this[kDispatchKey],
          { error }
        )
        return new MockScope(newMockDispatch)
      }

      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === 'undefined') {
          throw new InvalidArgumentError('headers must be defined')
        }

        this[kDefaultHeaders] = headers
        return this
      }

      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === 'undefined') {
          throw new InvalidArgumentError('trailers must be defined')
        }

        this[kDefaultTrailers] = trailers
        return this
      }

      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true
        return this
      }
    }

    module.exports.MockInterceptor = MockInterceptor
    module.exports.MockScope = MockScope

    /***/
  },

  /***/ 6193: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { promisify } = __nccwpck_require__(3837)
    const Pool = __nccwpck_require__(4634)
    const { buildMockDispatch } = __nccwpck_require__(9323)
    const {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = __nccwpck_require__(4347)
    const { MockInterceptor } = __nccwpck_require__(410)
    const Symbols = __nccwpck_require__(2785)
    const { InvalidArgumentError } = __nccwpck_require__(8045)

    /**
     * MockPool provides an API that extends the Pool to influence the mockDispatches.
     */
    class MockPool extends Pool {
      constructor(origin, opts) {
        super(origin, opts)

        if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
          throw new InvalidArgumentError(
            'Argument opts.agent must implement Agent'
          )
        }

        this[kMockAgent] = opts.agent
        this[kOrigin] = origin
        this[kDispatches] = []
        this[kConnected] = 1
        this[kOriginalDispatch] = this.dispatch
        this[kOriginalClose] = this.close.bind(this)

        this.dispatch = buildMockDispatch.call(this)
        this.close = this[kClose]
      }

      get [Symbols.kConnected]() {
        return this[kConnected]
      }

      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches])
      }

      async [kClose]() {
        await promisify(this[kOriginalClose])()
        this[kConnected] = 0
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
      }
    }

    module.exports = MockPool

    /***/
  },

  /***/ 4347: /***/ (module) => {
    module.exports = {
      kAgent: Symbol('agent'),
      kOptions: Symbol('options'),
      kFactory: Symbol('factory'),
      kDispatches: Symbol('dispatches'),
      kDispatchKey: Symbol('dispatch key'),
      kDefaultHeaders: Symbol('default headers'),
      kDefaultTrailers: Symbol('default trailers'),
      kContentLength: Symbol('content length'),
      kMockAgent: Symbol('mock agent'),
      kMockAgentSet: Symbol('mock agent set'),
      kMockAgentGet: Symbol('mock agent get'),
      kMockDispatch: Symbol('mock dispatch'),
      kClose: Symbol('close'),
      kOriginalClose: Symbol('original agent close'),
      kOrigin: Symbol('origin'),
      kIsMockActive: Symbol('is mock active'),
      kNetConnect: Symbol('net connect'),
      kGetNetConnect: Symbol('get net connect'),
      kConnected: Symbol('connected')
    }

    /***/
  },

  /***/ 9323: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { MockNotMatchedError } = __nccwpck_require__(888)
    const {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = __nccwpck_require__(4347)
    const { buildURL, nop } = __nccwpck_require__(3983)
    const { STATUS_CODES } = __nccwpck_require__(3685)
    const {
      types: { isPromise }
    } = __nccwpck_require__(3837)

    function matchValue(match, value) {
      if (typeof match === 'string') {
        return match === value
      }
      if (match instanceof RegExp) {
        return match.test(value)
      }
      if (typeof match === 'function') {
        return match(value) === true
      }
      return false
    }

    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue]
        })
      )
    }

    /**
     * @param {import('../../index').Headers|string[]|Record<string, string>} headers
     * @param {string} key
     */
    function getHeaderByName(headers, key) {
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
            return headers[i + 1]
          }
        }

        return undefined
      } else if (typeof headers.get === 'function') {
        return headers.get(key)
      } else {
        return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
      }
    }

    /** @param {string[]} headers */
    function buildHeadersFromArray(headers) {
      // fetch HeadersList
      const clone = headers.slice()
      const entries = []
      for (let index = 0; index < clone.length; index += 2) {
        entries.push([clone[index], clone[index + 1]])
      }
      return Object.fromEntries(entries)
    }

    function matchHeaders(mockDispatch, headers) {
      if (typeof mockDispatch.headers === 'function') {
        if (Array.isArray(headers)) {
          // fetch HeadersList
          headers = buildHeadersFromArray(headers)
        }
        return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
      }
      if (typeof mockDispatch.headers === 'undefined') {
        return true
      }
      if (
        typeof headers !== 'object' ||
        typeof mockDispatch.headers !== 'object'
      ) {
        return false
      }

      for (const [matchHeaderName, matchHeaderValue] of Object.entries(
        mockDispatch.headers
      )) {
        const headerValue = getHeaderByName(headers, matchHeaderName)

        if (!matchValue(matchHeaderValue, headerValue)) {
          return false
        }
      }
      return true
    }

    function safeUrl(path) {
      if (typeof path !== 'string') {
        return path
      }

      const pathSegments = path.split('?')

      if (pathSegments.length !== 2) {
        return path
      }

      const qp = new URLSearchParams(pathSegments.pop())
      qp.sort()
      return [...pathSegments, qp.toString()].join('?')
    }

    function matchKey(mockDispatch, { path, method, body, headers }) {
      const pathMatch = matchValue(mockDispatch.path, path)
      const methodMatch = matchValue(mockDispatch.method, method)
      const bodyMatch =
        typeof mockDispatch.body !== 'undefined'
          ? matchValue(mockDispatch.body, body)
          : true
      const headersMatch = matchHeaders(mockDispatch, headers)
      return pathMatch && methodMatch && bodyMatch && headersMatch
    }

    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data
      } else if (typeof data === 'object') {
        return JSON.stringify(data)
      } else {
        return data.toString()
      }
    }

    function getMockDispatch(mockDispatches, key) {
      const basePath = key.query ? buildURL(key.path, key.query) : key.path
      const resolvedPath =
        typeof basePath === 'string' ? safeUrl(basePath) : basePath

      // Match path
      let matchedMockDispatches = mockDispatches
        .filter(({ consumed }) => !consumed)
        .filter(({ path }) => matchValue(safeUrl(path), resolvedPath))
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(
          `Mock dispatch not matched for path '${resolvedPath}'`
        )
      }

      // Match method
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) =>
        matchValue(method, key.method)
      )
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(
          `Mock dispatch not matched for method '${key.method}'`
        )
      }

      // Match body
      matchedMockDispatches = matchedMockDispatches.filter(({ body }) =>
        typeof body !== 'undefined' ? matchValue(body, key.body) : true
      )
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(
          `Mock dispatch not matched for body '${key.body}'`
        )
      }

      // Match headers
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) =>
        matchHeaders(mockDispatch, key.headers)
      )
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(
          `Mock dispatch not matched for headers '${
            typeof key.headers === 'object'
              ? JSON.stringify(key.headers)
              : key.headers
          }'`
        )
      }

      return matchedMockDispatches[0]
    }

    function addMockDispatch(mockDispatches, key, data) {
      const baseData = {
        timesInvoked: 0,
        times: 1,
        persist: false,
        consumed: false
      }
      const replyData =
        typeof data === 'function' ? { callback: data } : { ...data }
      const newMockDispatch = {
        ...baseData,
        ...key,
        pending: true,
        data: { error: null, ...replyData }
      }
      mockDispatches.push(newMockDispatch)
      return newMockDispatch
    }

    function deleteMockDispatch(mockDispatches, key) {
      const index = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false
        }
        return matchKey(dispatch, key)
      })
      if (index !== -1) {
        mockDispatches.splice(index, 1)
      }
    }

    function buildKey(opts) {
      const { path, method, body, headers, query } = opts
      return {
        path,
        method,
        body,
        headers,
        query
      }
    }

    function generateKeyValues(data) {
      return Object.entries(data).reduce(
        (keyValuePairs, [key, value]) => [
          ...keyValuePairs,
          Buffer.from(`${key}`),
          Array.isArray(value)
            ? value.map((x) => Buffer.from(`${x}`))
            : Buffer.from(`${value}`)
        ],
        []
      )
    }

    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
     * @param {number} statusCode
     */
    function getStatusText(statusCode) {
      return STATUS_CODES[statusCode] || 'unknown'
    }

    async function getResponse(body) {
      const buffers = []
      for await (const data of body) {
        buffers.push(data)
      }
      return Buffer.concat(buffers).toString('utf8')
    }

    /**
     * Mock dispatch function used to simulate undici dispatches
     */
    function mockDispatch(opts, handler) {
      // Get mock dispatch from built key
      const key = buildKey(opts)
      const mockDispatch = getMockDispatch(this[kDispatches], key)

      mockDispatch.timesInvoked++

      // Here's where we resolve a callback if a callback is present for the dispatch data.
      if (mockDispatch.data.callback) {
        mockDispatch.data = {
          ...mockDispatch.data,
          ...mockDispatch.data.callback(opts)
        }
      }

      // Parse mockDispatch data
      const {
        data: { statusCode, data, headers, trailers, error },
        delay,
        persist
      } = mockDispatch
      const { timesInvoked, times } = mockDispatch

      // If it's used up and not persistent, mark as consumed
      mockDispatch.consumed = !persist && timesInvoked >= times
      mockDispatch.pending = timesInvoked < times

      // If specified, trigger dispatch error
      if (error !== null) {
        deleteMockDispatch(this[kDispatches], key)
        handler.onError(error)
        return true
      }

      // Handle the request with a delay if necessary
      if (typeof delay === 'number' && delay > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches])
        }, delay)
      } else {
        handleReply(this[kDispatches])
      }

      function handleReply(mockDispatches, _data = data) {
        // fetch's HeadersList is a 1D string array
        const optsHeaders = Array.isArray(opts.headers)
          ? buildHeadersFromArray(opts.headers)
          : opts.headers
        const body =
          typeof _data === 'function'
            ? _data({ ...opts, headers: optsHeaders })
            : _data

        // util.types.isPromise is likely needed for jest.
        if (isPromise(body)) {
          // If handleReply is asynchronous, throwing an error
          // in the callback will reject the promise, rather than
          // synchronously throw the error, which breaks some tests.
          // Rather, we wait for the callback to resolve if it is a
          // promise, and then re-run handleReply with the new body.
          body.then((newData) => handleReply(mockDispatches, newData))
          return
        }

        const responseData = getResponseData(body)
        const responseHeaders = generateKeyValues(headers)
        const responseTrailers = generateKeyValues(trailers)

        handler.abort = nop
        handler.onHeaders(
          statusCode,
          responseHeaders,
          resume,
          getStatusText(statusCode)
        )
        handler.onData(Buffer.from(responseData))
        handler.onComplete(responseTrailers)
        deleteMockDispatch(mockDispatches, key)
      }

      function resume() {}

      return true
    }

    function buildMockDispatch() {
      const agent = this[kMockAgent]
      const origin = this[kOrigin]
      const originalDispatch = this[kOriginalDispatch]

      return function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler)
          } catch (error) {
            if (error instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]()
              if (netConnect === false) {
                throw new MockNotMatchedError(
                  `${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`
                )
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler)
              } else {
                throw new MockNotMatchedError(
                  `${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`
                )
              }
            } else {
              throw error
            }
          }
        } else {
          originalDispatch.call(this, opts, handler)
        }
      }
    }

    function checkNetConnect(netConnect, origin) {
      const url = new URL(origin)
      if (netConnect === true) {
        return true
      } else if (
        Array.isArray(netConnect) &&
        netConnect.some((matcher) => matchValue(matcher, url.host))
      ) {
        return true
      }
      return false
    }

    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts
        return mockOptions
      }
    }

    module.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    }

    /***/
  },

  /***/ 6823: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { Transform } = __nccwpck_require__(2781)
    const { Console } = __nccwpck_require__(6206)

    /**
     * Gets the output of `console.table(…)` as a string.
     */
    module.exports = class PendingInterceptorsFormatter {
      constructor({ disableColors } = {}) {
        this.transform = new Transform({
          transform(chunk, _enc, cb) {
            cb(null, chunk)
          }
        })

        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        })
      }

      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({
            method,
            path,
            data: { statusCode },
            persist,
            times,
            timesInvoked,
            origin
          }) => ({
            Method: method,
            Origin: origin,
            Path: path,
            'Status code': statusCode,
            Persistent: persist ? '✅' : '❌',
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times - timesInvoked
          })
        )

        this.logger.table(withPrettyHeaders)
        return this.transform.read().toString()
      }
    }

    /***/
  },

  /***/ 8891: /***/ (module) => {
    const singulars = {
      pronoun: 'it',
      is: 'is',
      was: 'was',
      this: 'this'
    }

    const plurals = {
      pronoun: 'they',
      is: 'are',
      was: 'were',
      this: 'these'
    }

    module.exports = class Pluralizer {
      constructor(singular, plural) {
        this.singular = singular
        this.plural = plural
      }

      pluralize(count) {
        const one = count === 1
        const keys = one ? singulars : plurals
        const noun = one ? this.singular : this.plural
        return { ...keys, count, noun }
      }
    }

    /***/
  },

  /***/ 8266: /***/ (module) => {
    /* eslint-disable */

    // Extracted from node/lib/internal/fixed_queue.js

    // Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
    const kSize = 2048
    const kMask = kSize - 1

    // The FixedQueue is implemented as a singly-linked list of fixed-size
    // circular buffers. It looks something like this:
    //
    //  head                                                       tail
    //    |                                                          |
    //    v                                                          v
    // +-----------+ <-----\       +-----------+ <------\         +-----------+
    // |  [null]   |        \----- |   next    |         \------- |   next    |
    // +-----------+               +-----------+                  +-----------+
    // |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
    // |   item    |               |   item    |                  |  [empty]  |
    // |   item    |               |   item    |                  |  [empty]  |
    // |   item    |               |   item    |                  |  [empty]  |
    // |   item    |               |   item    |       bottom --> |   item    |
    // |   item    |               |   item    |                  |   item    |
    // |    ...    |               |    ...    |                  |    ...    |
    // |   item    |               |   item    |                  |   item    |
    // |   item    |               |   item    |                  |   item    |
    // |  [empty]  | <-- top       |   item    |                  |   item    |
    // |  [empty]  |               |   item    |                  |   item    |
    // |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
    // +-----------+               +-----------+                  +-----------+
    //
    // Or, if there is only one circular buffer, it looks something
    // like either of these:
    //
    //  head   tail                                 head   tail
    //    |     |                                     |     |
    //    v     v                                     v     v
    // +-----------+                               +-----------+
    // |  [null]   |                               |  [null]   |
    // +-----------+                               +-----------+
    // |  [empty]  |                               |   item    |
    // |  [empty]  |                               |   item    |
    // |   item    | <-- bottom            top --> |  [empty]  |
    // |   item    |                               |  [empty]  |
    // |  [empty]  | <-- top            bottom --> |   item    |
    // |  [empty]  |                               |   item    |
    // +-----------+                               +-----------+
    //
    // Adding a value means moving `top` forward by one, removing means
    // moving `bottom` forward by one. After reaching the end, the queue
    // wraps around.
    //
    // When `top === bottom` the current queue is empty and when
    // `top + 1 === bottom` it's full. This wastes a single space of storage
    // but allows much quicker checks.

    class FixedCircularBuffer {
      constructor() {
        this.bottom = 0
        this.top = 0
        this.list = new Array(kSize)
        this.next = null
      }

      isEmpty() {
        return this.top === this.bottom
      }

      isFull() {
        return ((this.top + 1) & kMask) === this.bottom
      }

      push(data) {
        this.list[this.top] = data
        this.top = (this.top + 1) & kMask
      }

      shift() {
        const nextItem = this.list[this.bottom]
        if (nextItem === undefined) return null
        this.list[this.bottom] = undefined
        this.bottom = (this.bottom + 1) & kMask
        return nextItem
      }
    }

    module.exports = class FixedQueue {
      constructor() {
        this.head = this.tail = new FixedCircularBuffer()
      }

      isEmpty() {
        return this.head.isEmpty()
      }

      push(data) {
        if (this.head.isFull()) {
          // Head is full: Creates a new queue, sets the old queue's `.next` to it,
          // and sets it as the new main queue.
          this.head = this.head.next = new FixedCircularBuffer()
        }
        this.head.push(data)
      }

      shift() {
        const tail = this.tail
        const next = tail.shift()
        if (tail.isEmpty() && tail.next !== null) {
          // If there is another queue, it forms the new tail.
          this.tail = tail.next
        }
        return next
      }
    }

    /***/
  },

  /***/ 3198: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const DispatcherBase = __nccwpck_require__(4839)
    const FixedQueue = __nccwpck_require__(8266)
    const {
      kConnected,
      kSize,
      kRunning,
      kPending,
      kQueued,
      kBusy,
      kFree,
      kUrl,
      kClose,
      kDestroy,
      kDispatch
    } = __nccwpck_require__(2785)
    const PoolStats = __nccwpck_require__(9689)

    const kClients = Symbol('clients')
    const kNeedDrain = Symbol('needDrain')
    const kQueue = Symbol('queue')
    const kClosedResolve = Symbol('closed resolve')
    const kOnDrain = Symbol('onDrain')
    const kOnConnect = Symbol('onConnect')
    const kOnDisconnect = Symbol('onDisconnect')
    const kOnConnectionError = Symbol('onConnectionError')
    const kGetDispatcher = Symbol('get dispatcher')
    const kAddClient = Symbol('add client')
    const kRemoveClient = Symbol('remove client')
    const kStats = Symbol('stats')

    class PoolBase extends DispatcherBase {
      constructor() {
        super()

        this[kQueue] = new FixedQueue()
        this[kClients] = []
        this[kQueued] = 0

        const pool = this

        this[kOnDrain] = function onDrain(origin, targets) {
          const queue = pool[kQueue]

          let needDrain = false

          while (!needDrain) {
            const item = queue.shift()
            if (!item) {
              break
            }
            pool[kQueued]--
            needDrain = !this.dispatch(item.opts, item.handler)
          }

          this[kNeedDrain] = needDrain

          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false
            pool.emit('drain', origin, [pool, ...targets])
          }

          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c) => c.close())).then(
              pool[kClosedResolve]
            )
          }
        }

        this[kOnConnect] = (origin, targets) => {
          pool.emit('connect', origin, [pool, ...targets])
        }

        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit('disconnect', origin, [pool, ...targets], err)
        }

        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit('connectionError', origin, [pool, ...targets], err)
        }

        this[kStats] = new PoolStats(this)
      }

      get [kBusy]() {
        return this[kNeedDrain]
      }

      get [kConnected]() {
        return this[kClients].filter((client) => client[kConnected]).length
      }

      get [kFree]() {
        return this[kClients].filter(
          (client) => client[kConnected] && !client[kNeedDrain]
        ).length
      }

      get [kPending]() {
        let ret = this[kQueued]
        for (const { [kPending]: pending } of this[kClients]) {
          ret += pending
        }
        return ret
      }

      get [kRunning]() {
        let ret = 0
        for (const { [kRunning]: running } of this[kClients]) {
          ret += running
        }
        return ret
      }

      get [kSize]() {
        let ret = this[kQueued]
        for (const { [kSize]: size } of this[kClients]) {
          ret += size
        }
        return ret
      }

      get stats() {
        return this[kStats]
      }

      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c) => c.close()))
        } else {
          return new Promise((resolve) => {
            this[kClosedResolve] = resolve
          })
        }
      }

      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift()
          if (!item) {
            break
          }
          item.handler.onError(err)
        }

        return Promise.all(this[kClients].map((c) => c.destroy(err)))
      }

      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]()

        if (!dispatcher) {
          this[kNeedDrain] = true
          this[kQueue].push({ opts, handler })
          this[kQueued]++
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true
          this[kNeedDrain] = !this[kGetDispatcher]()
        }

        return !this[kNeedDrain]
      }

      [kAddClient](client) {
        client
          .on('drain', this[kOnDrain])
          .on('connect', this[kOnConnect])
          .on('disconnect', this[kOnDisconnect])
          .on('connectionError', this[kOnConnectionError])

        this[kClients].push(client)

        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client[kUrl], [this, client])
            }
          })
        }

        return this
      }

      [kRemoveClient](client) {
        client.close(() => {
          const idx = this[kClients].indexOf(client)
          if (idx !== -1) {
            this[kClients].splice(idx, 1)
          }
        })

        this[kNeedDrain] = this[kClients].some(
          (dispatcher) =>
            !dispatcher[kNeedDrain] &&
            dispatcher.closed !== true &&
            dispatcher.destroyed !== true
        )
      }
    }

    module.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    }

    /***/
  },

  /***/ 9689: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kFree, kConnected, kPending, kQueued, kRunning, kSize } =
      __nccwpck_require__(2785)
    const kPool = Symbol('pool')

    class PoolStats {
      constructor(pool) {
        this[kPool] = pool
      }

      get connected() {
        return this[kPool][kConnected]
      }

      get free() {
        return this[kPool][kFree]
      }

      get pending() {
        return this[kPool][kPending]
      }

      get queued() {
        return this[kPool][kQueued]
      }

      get running() {
        return this[kPool][kRunning]
      }

      get size() {
        return this[kPool][kSize]
      }
    }

    module.exports = PoolStats

    /***/
  },

  /***/ 4634: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { PoolBase, kClients, kNeedDrain, kAddClient, kGetDispatcher } =
      __nccwpck_require__(3198)
    const Client = __nccwpck_require__(3598)
    const { InvalidArgumentError } = __nccwpck_require__(8045)
    const util = __nccwpck_require__(3983)
    const { kUrl, kInterceptors } = __nccwpck_require__(2785)
    const buildConnector = __nccwpck_require__(2067)

    const kOptions = Symbol('options')
    const kConnections = Symbol('connections')
    const kFactory = Symbol('factory')

    function defaultFactory(origin, opts) {
      return new Client(origin, opts)
    }

    class Pool extends PoolBase {
      constructor(
        origin,
        {
          connections,
          factory = defaultFactory,
          connect,
          connectTimeout,
          tls,
          maxCachedSessions,
          socketPath,
          autoSelectFamily,
          autoSelectFamilyAttemptTimeout,
          allowH2,
          ...options
        } = {}
      ) {
        super()

        if (
          connections != null &&
          (!Number.isFinite(connections) || connections < 0)
        ) {
          throw new InvalidArgumentError('invalid connections')
        }

        if (typeof factory !== 'function') {
          throw new InvalidArgumentError('factory must be a function.')
        }

        if (
          connect != null &&
          typeof connect !== 'function' &&
          typeof connect !== 'object'
        ) {
          throw new InvalidArgumentError(
            'connect must be a function or an object'
          )
        }

        if (typeof connect !== 'function') {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...(util.nodeHasAutoSelectFamily && autoSelectFamily
              ? { autoSelectFamily, autoSelectFamilyAttemptTimeout }
              : undefined),
            ...connect
          })
        }

        this[kInterceptors] =
          options.interceptors &&
          options.interceptors.Pool &&
          Array.isArray(options.interceptors.Pool)
            ? options.interceptors.Pool
            : []
        this[kConnections] = connections || null
        this[kUrl] = util.parseOrigin(origin)
        this[kOptions] = { ...util.deepClone(options), connect, allowH2 }
        this[kOptions].interceptors = options.interceptors
          ? { ...options.interceptors }
          : undefined
        this[kFactory] = factory
      }

      [kGetDispatcher]() {
        let dispatcher = this[kClients].find(
          (dispatcher) => !dispatcher[kNeedDrain]
        )

        if (dispatcher) {
          return dispatcher
        }

        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions])
          this[kAddClient](dispatcher)
        }

        return dispatcher
      }
    }

    module.exports = Pool

    /***/
  },

  /***/ 7858: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kProxy, kClose, kDestroy, kInterceptors } =
      __nccwpck_require__(2785)
    const { URL } = __nccwpck_require__(7310)
    const Agent = __nccwpck_require__(7890)
    const Pool = __nccwpck_require__(4634)
    const DispatcherBase = __nccwpck_require__(4839)
    const { InvalidArgumentError, RequestAbortedError } =
      __nccwpck_require__(8045)
    const buildConnector = __nccwpck_require__(2067)

    const kAgent = Symbol('proxy agent')
    const kClient = Symbol('proxy client')
    const kProxyHeaders = Symbol('proxy headers')
    const kRequestTls = Symbol('request tls settings')
    const kProxyTls = Symbol('proxy tls settings')
    const kConnectEndpoint = Symbol('connect endpoint function')

    function defaultProtocolPort(protocol) {
      return protocol === 'https:' ? 443 : 80
    }

    function buildProxyOptions(opts) {
      if (typeof opts === 'string') {
        opts = { uri: opts }
      }

      if (!opts || !opts.uri) {
        throw new InvalidArgumentError('Proxy opts.uri is mandatory')
      }

      return {
        uri: opts.uri,
        protocol: opts.protocol || 'https'
      }
    }

    function defaultFactory(origin, opts) {
      return new Pool(origin, opts)
    }

    class ProxyAgent extends DispatcherBase {
      constructor(opts) {
        super(opts)
        this[kProxy] = buildProxyOptions(opts)
        this[kAgent] = new Agent(opts)
        this[kInterceptors] =
          opts.interceptors &&
          opts.interceptors.ProxyAgent &&
          Array.isArray(opts.interceptors.ProxyAgent)
            ? opts.interceptors.ProxyAgent
            : []

        if (typeof opts === 'string') {
          opts = { uri: opts }
        }

        if (!opts || !opts.uri) {
          throw new InvalidArgumentError('Proxy opts.uri is mandatory')
        }

        const { clientFactory = defaultFactory } = opts

        if (typeof clientFactory !== 'function') {
          throw new InvalidArgumentError(
            'Proxy opts.clientFactory must be a function.'
          )
        }

        this[kRequestTls] = opts.requestTls
        this[kProxyTls] = opts.proxyTls
        this[kProxyHeaders] = opts.headers || {}

        if (opts.auth && opts.token) {
          throw new InvalidArgumentError(
            'opts.auth cannot be used in combination with opts.token'
          )
        } else if (opts.auth) {
          /* @deprecated in favour of opts.token */
          this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`
        } else if (opts.token) {
          this[kProxyHeaders]['proxy-authorization'] = opts.token
        }

        const resolvedUrl = new URL(opts.uri)
        const { origin, port, host } = resolvedUrl

        const connect = buildConnector({ ...opts.proxyTls })
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })
        this[kClient] = clientFactory(resolvedUrl, { connect })
        this[kAgent] = new Agent({
          ...opts,
          connect: async (opts, callback) => {
            let requestedHost = opts.host
            if (!opts.port) {
              requestedHost += `:${defaultProtocolPort(opts.protocol)}`
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              })
              if (statusCode !== 200) {
                socket.on('error', () => {}).destroy()
                callback(
                  new RequestAbortedError(
                    'Proxy response !== 200 when HTTP Tunneling'
                  )
                )
              }
              if (opts.protocol !== 'https:') {
                callback(null, socket)
                return
              }
              let servername
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername
              } else {
                servername = opts.servername
              }
              this[kConnectEndpoint](
                { ...opts, servername, httpSocket: socket },
                callback
              )
            } catch (err) {
              callback(err)
            }
          }
        })
      }

      dispatch(opts, handler) {
        const { host } = new URL(opts.origin)
        const headers = buildHeaders(opts.headers)
        throwIfProxyAuthIsSent(headers)
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        )
      }

      async [kClose]() {
        await this[kAgent].close()
        await this[kClient].close()
      }

      async [kDestroy]() {
        await this[kAgent].destroy()
        await this[kClient].destroy()
      }
    }

    /**
     * @param {string[] | Record<string, string>} headers
     * @returns {Record<string, string>}
     */
    function buildHeaders(headers) {
      // When using undici.fetch, the headers list is stored
      // as an array.
      if (Array.isArray(headers)) {
        /** @type {Record<string, string>} */
        const headersPair = {}

        for (let i = 0; i < headers.length; i += 2) {
          headersPair[headers[i]] = headers[i + 1]
        }

        return headersPair
      }

      return headers
    }

    /**
     * @param {Record<string, string>} headers
     *
     * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
     * Nevertheless, it was changed and to avoid a security vulnerability by end users
     * this check was created.
     * It should be removed in the next major version for performance reasons
     */
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth =
        headers &&
        Object.keys(headers).find(
          (key) => key.toLowerCase() === 'proxy-authorization'
        )
      if (existProxyAuth) {
        throw new InvalidArgumentError(
          'Proxy-Authorization should be sent in ProxyAgent constructor'
        )
      }
    }

    module.exports = ProxyAgent

    /***/
  },

  /***/ 9459: /***/ (module) => {
    let fastNow = Date.now()
    let fastNowTimeout

    const fastTimers = []

    function onTimeout() {
      fastNow = Date.now()

      let len = fastTimers.length
      let idx = 0
      while (idx < len) {
        const timer = fastTimers[idx]

        if (timer.state === 0) {
          timer.state = fastNow + timer.delay
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1
          timer.callback(timer.opaque)
        }

        if (timer.state === -1) {
          timer.state = -2
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop()
          } else {
            fastTimers.pop()
          }
          len -= 1
        } else {
          idx += 1
        }
      }

      if (fastTimers.length > 0) {
        refreshTimeout()
      }
    }

    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh()
      } else {
        clearTimeout(fastNowTimeout)
        fastNowTimeout = setTimeout(onTimeout, 1e3)
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref()
        }
      }
    }

    class Timeout {
      constructor(callback, delay, opaque) {
        this.callback = callback
        this.delay = delay
        this.opaque = opaque

        //  -2 not in timer list
        //  -1 in timer list but inactive
        //   0 in timer list waiting for time
        // > 0 in timer list waiting for time to expire
        this.state = -2

        this.refresh()
      }

      refresh() {
        if (this.state === -2) {
          fastTimers.push(this)
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout()
          }
        }

        this.state = 0
      }

      clear() {
        this.state = -1
      }
    }

    module.exports = {
      setTimeout(callback, delay, opaque) {
        return delay < 1e3
          ? setTimeout(callback, delay, opaque)
          : new Timeout(callback, delay, opaque)
      },
      clearTimeout(timeout) {
        if (timeout instanceof Timeout) {
          timeout.clear()
        } else {
          clearTimeout(timeout)
        }
      }
    }

    /***/
  },

  /***/ 5354: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const diagnosticsChannel = __nccwpck_require__(7643)
    const { uid, states } = __nccwpck_require__(9188)
    const { kReadyState, kSentClose, kByteParser, kReceivedClose } =
      __nccwpck_require__(7578)
    const { fireEvent, failWebsocketConnection } = __nccwpck_require__(5515)
    const { CloseEvent } = __nccwpck_require__(2611)
    const { makeRequest } = __nccwpck_require__(8359)
    const { fetching } = __nccwpck_require__(4881)
    const { Headers } = __nccwpck_require__(554)
    const { getGlobalDispatcher } = __nccwpck_require__(1892)
    const { kHeadersList } = __nccwpck_require__(2785)

    const channels = {}
    channels.open = diagnosticsChannel.channel('undici:websocket:open')
    channels.close = diagnosticsChannel.channel('undici:websocket:close')
    channels.socketError = diagnosticsChannel.channel(
      'undici:websocket:socket_error'
    )

    /** @type {import('crypto')} */
    let crypto
    try {
      crypto = __nccwpck_require__(6113)
    } catch {}

    /**
     * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
     * @param {URL} url
     * @param {string|string[]} protocols
     * @param {import('./websocket').WebSocket} ws
     * @param {(response: any) => void} onEstablish
     * @param {Partial<import('../../types/websocket').WebSocketInit>} options
     */
    function establishWebSocketConnection(
      url,
      protocols,
      ws,
      onEstablish,
      options
    ) {
      // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
      //    scheme is "ws", and to "https" otherwise.
      const requestURL = url

      requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'

      // 2. Let request be a new request, whose URL is requestURL, client is client,
      //    service-workers mode is "none", referrer is "no-referrer", mode is
      //    "websocket", credentials mode is "include", cache mode is "no-store" ,
      //    and redirect mode is "error".
      const request = makeRequest({
        urlList: [requestURL],
        serviceWorkers: 'none',
        referrer: 'no-referrer',
        mode: 'websocket',
        credentials: 'include',
        cache: 'no-store',
        redirect: 'error'
      })

      // Note: undici extension, allow setting custom headers.
      if (options.headers) {
        const headersList = new Headers(options.headers)[kHeadersList]

        request.headersList = headersList
      }

      // 3. Append (`Upgrade`, `websocket`) to request’s header list.
      // 4. Append (`Connection`, `Upgrade`) to request’s header list.
      // Note: both of these are handled by undici currently.
      // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

      // 5. Let keyValue be a nonce consisting of a randomly selected
      //    16-byte value that has been forgiving-base64-encoded and
      //    isomorphic encoded.
      const keyValue = crypto.randomBytes(16).toString('base64')

      // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
      //    header list.
      request.headersList.append('sec-websocket-key', keyValue)

      // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
      //    header list.
      request.headersList.append('sec-websocket-version', '13')

      // 8. For each protocol in protocols, combine
      //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
      //    list.
      for (const protocol of protocols) {
        request.headersList.append('sec-websocket-protocol', protocol)
      }

      // 9. Let permessageDeflate be a user-agent defined
      //    "permessage-deflate" extension header value.
      // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
      // TODO: enable once permessage-deflate is supported
      const permessageDeflate = '' // 'permessage-deflate; 15'

      // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
      //     request’s header list.
      // request.headersList.append('sec-websocket-extensions', permessageDeflate)

      // 11. Fetch request with useParallelQueue set to true, and
      //     processResponse given response being these steps:
      const controller = fetching({
        request,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          // 1. If response is a network error or its status is not 101,
          //    fail the WebSocket connection.
          if (response.type === 'error' || response.status !== 101) {
            failWebsocketConnection(
              ws,
              'Received network error or non-101 status code.'
            )
            return
          }

          // 2. If protocols is not the empty list and extracting header
          //    list values given `Sec-WebSocket-Protocol` and response’s
          //    header list results in null, failure, or the empty byte
          //    sequence, then fail the WebSocket connection.
          if (
            protocols.length !== 0 &&
            !response.headersList.get('Sec-WebSocket-Protocol')
          ) {
            failWebsocketConnection(
              ws,
              'Server did not respond with sent protocols.'
            )
            return
          }

          // 3. Follow the requirements stated step 2 to step 6, inclusive,
          //    of the last set of steps in section 4.1 of The WebSocket
          //    Protocol to validate response. This either results in fail
          //    the WebSocket connection or the WebSocket connection is
          //    established.

          // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
          //    header field contains a value that is not an ASCII case-
          //    insensitive match for the value "websocket", the client MUST
          //    _Fail the WebSocket Connection_.
          if (
            response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket'
          ) {
            failWebsocketConnection(
              ws,
              'Server did not set Upgrade header to "websocket".'
            )
            return
          }

          // 3. If the response lacks a |Connection| header field or the
          //    |Connection| header field doesn't contain a token that is an
          //    ASCII case-insensitive match for the value "Upgrade", the client
          //    MUST _Fail the WebSocket Connection_.
          if (
            response.headersList.get('Connection')?.toLowerCase() !== 'upgrade'
          ) {
            failWebsocketConnection(
              ws,
              'Server did not set Connection header to "upgrade".'
            )
            return
          }

          // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
          //    the |Sec-WebSocket-Accept| contains a value other than the
          //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
          //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
          //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
          //    trailing whitespace, the client MUST _Fail the WebSocket
          //    Connection_.
          const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')
          const digest = crypto
            .createHash('sha1')
            .update(keyValue + uid)
            .digest('base64')
          if (secWSAccept !== digest) {
            failWebsocketConnection(
              ws,
              'Incorrect hash received in Sec-WebSocket-Accept header.'
            )
            return
          }

          // 5. If the response includes a |Sec-WebSocket-Extensions| header
          //    field and this header field indicates the use of an extension
          //    that was not present in the client's handshake (the server has
          //    indicated an extension not requested by the client), the client
          //    MUST _Fail the WebSocket Connection_.  (The parsing of this
          //    header field to determine which extensions are requested is
          //    discussed in Section 9.1.)
          const secExtension = response.headersList.get(
            'Sec-WebSocket-Extensions'
          )

          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(
              ws,
              'Received different permessage-deflate than the one set.'
            )
            return
          }

          // 6. If the response includes a |Sec-WebSocket-Protocol| header field
          //    and this header field indicates the use of a subprotocol that was
          //    not present in the client's handshake (the server has indicated a
          //    subprotocol not requested by the client), the client MUST _Fail
          //    the WebSocket Connection_.
          const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')

          if (
            secProtocol !== null &&
            secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')
          ) {
            failWebsocketConnection(
              ws,
              'Protocol was not set in the opening handshake.'
            )
            return
          }

          response.socket.on('data', onSocketData)
          response.socket.on('close', onSocketClose)
          response.socket.on('error', onSocketError)

          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            })
          }

          onEstablish(response)
        }
      })

      return controller
    }

    /**
     * @param {Buffer} chunk
     */
    function onSocketData(chunk) {
      if (!this.ws[kByteParser].write(chunk)) {
        this.pause()
      }
    }

    /**
     * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
     * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
     */
    function onSocketClose() {
      const { ws } = this

      // If the TCP connection was closed after the
      // WebSocket closing handshake was completed, the WebSocket connection
      // is said to have been closed _cleanly_.
      const wasClean = ws[kSentClose] && ws[kReceivedClose]

      let code = 1005
      let reason = ''

      const result = ws[kByteParser].closingInfo

      if (result) {
        code = result.code ?? 1005
        reason = result.reason
      } else if (!ws[kSentClose]) {
        // If _The WebSocket
        // Connection is Closed_ and no Close control frame was received by the
        // endpoint (such as could occur if the underlying transport connection
        // is lost), _The WebSocket Connection Close Code_ is considered to be
        // 1006.
        code = 1006
      }

      // 1. Change the ready state to CLOSED (3).
      ws[kReadyState] = states.CLOSED

      // 2. If the user agent was required to fail the WebSocket
      //    connection, or if the WebSocket connection was closed
      //    after being flagged as full, fire an event named error
      //    at the WebSocket object.
      // TODO

      // 3. Fire an event named close at the WebSocket object,
      //    using CloseEvent, with the wasClean attribute
      //    initialized to true if the connection closed cleanly
      //    and false otherwise, the code attribute initialized to
      //    the WebSocket connection close code, and the reason
      //    attribute initialized to the result of applying UTF-8
      //    decode without BOM to the WebSocket connection close
      //    reason.
      fireEvent('close', ws, CloseEvent, {
        wasClean,
        code,
        reason
      })

      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        })
      }
    }

    function onSocketError(error) {
      const { ws } = this

      ws[kReadyState] = states.CLOSING

      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error)
      }

      this.destroy()
    }

    module.exports = {
      establishWebSocketConnection
    }

    /***/
  },

  /***/ 9188: /***/ (module) => {
    // This is a Globally Unique Identifier unique used
    // to validate that the endpoint accepts websocket
    // connections.
    // See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
    const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'

    /** @type {PropertyDescriptor} */
    const staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    }

    const states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    }

    const opcodes = {
      CONTINUATION: 0x0,
      TEXT: 0x1,
      BINARY: 0x2,
      CLOSE: 0x8,
      PING: 0x9,
      PONG: 0xa
    }

    const maxUnsigned16Bit = 2 ** 16 - 1 // 65535

    const parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    }

    const emptyBuffer = Buffer.allocUnsafe(0)

    module.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    }

    /***/
  },

  /***/ 2611: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { webidl } = __nccwpck_require__(1744)
    const { kEnumerableProperty } = __nccwpck_require__(3983)
    const { MessagePort } = __nccwpck_require__(1267)

    /**
     * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
     */
    class MessageEvent extends Event {
      #eventInit

      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'MessageEvent constructor'
        })

        type = webidl.converters.DOMString(type)
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict)

        super(type, eventInitDict)

        this.#eventInit = eventInitDict
      }

      get data() {
        webidl.brandCheck(this, MessageEvent)

        return this.#eventInit.data
      }

      get origin() {
        webidl.brandCheck(this, MessageEvent)

        return this.#eventInit.origin
      }

      get lastEventId() {
        webidl.brandCheck(this, MessageEvent)

        return this.#eventInit.lastEventId
      }

      get source() {
        webidl.brandCheck(this, MessageEvent)

        return this.#eventInit.source
      }

      get ports() {
        webidl.brandCheck(this, MessageEvent)

        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports)
        }

        return this.#eventInit.ports
      }

      initMessageEvent(
        type,
        bubbles = false,
        cancelable = false,
        data = null,
        origin = '',
        lastEventId = '',
        source = null,
        ports = []
      ) {
        webidl.brandCheck(this, MessageEvent)

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'MessageEvent.initMessageEvent'
        })

        return new MessageEvent(type, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        })
      }
    }

    /**
     * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
     */
    class CloseEvent extends Event {
      #eventInit

      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'CloseEvent constructor'
        })

        type = webidl.converters.DOMString(type)
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict)

        super(type, eventInitDict)

        this.#eventInit = eventInitDict
      }

      get wasClean() {
        webidl.brandCheck(this, CloseEvent)

        return this.#eventInit.wasClean
      }

      get code() {
        webidl.brandCheck(this, CloseEvent)

        return this.#eventInit.code
      }

      get reason() {
        webidl.brandCheck(this, CloseEvent)

        return this.#eventInit.reason
      }
    }

    // https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
    class ErrorEvent extends Event {
      #eventInit

      constructor(type, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, {
          header: 'ErrorEvent constructor'
        })

        super(type, eventInitDict)

        type = webidl.converters.DOMString(type)
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})

        this.#eventInit = eventInitDict
      }

      get message() {
        webidl.brandCheck(this, ErrorEvent)

        return this.#eventInit.message
      }

      get filename() {
        webidl.brandCheck(this, ErrorEvent)

        return this.#eventInit.filename
      }

      get lineno() {
        webidl.brandCheck(this, ErrorEvent)

        return this.#eventInit.lineno
      }

      get colno() {
        webidl.brandCheck(this, ErrorEvent)

        return this.#eventInit.colno
      }

      get error() {
        webidl.brandCheck(this, ErrorEvent)

        return this.#eventInit.error
      }
    }

    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: 'MessageEvent',
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    })

    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: 'CloseEvent',
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    })

    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: 'ErrorEvent',
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    })

    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)

    webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    )

    const eventInit = [
      {
        key: 'bubbles',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'cancelable',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'composed',
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]

    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: 'data',
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: 'origin',
        converter: webidl.converters.USVString,
        defaultValue: ''
      },
      {
        key: 'lastEventId',
        converter: webidl.converters.DOMString,
        defaultValue: ''
      },
      {
        key: 'source',
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: 'ports',
        converter: webidl.converters['sequence<MessagePort>'],
        get defaultValue() {
          return []
        }
      }
    ])

    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: 'wasClean',
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: 'code',
        converter: webidl.converters['unsigned short'],
        defaultValue: 0
      },
      {
        key: 'reason',
        converter: webidl.converters.USVString,
        defaultValue: ''
      }
    ])

    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: 'message',
        converter: webidl.converters.DOMString,
        defaultValue: ''
      },
      {
        key: 'filename',
        converter: webidl.converters.USVString,
        defaultValue: ''
      },
      {
        key: 'lineno',
        converter: webidl.converters['unsigned long'],
        defaultValue: 0
      },
      {
        key: 'colno',
        converter: webidl.converters['unsigned long'],
        defaultValue: 0
      },
      {
        key: 'error',
        converter: webidl.converters.any
      }
    ])

    module.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    }

    /***/
  },

  /***/ 5444: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { maxUnsigned16Bit } = __nccwpck_require__(9188)

    /** @type {import('crypto')} */
    let crypto
    try {
      crypto = __nccwpck_require__(6113)
    } catch {}

    class WebsocketFrameSend {
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data
        this.maskKey = crypto.randomBytes(4)
      }

      createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0

        /** @type {number} */
        let payloadLength = bodyLength // 0-125
        let offset = 6

        if (bodyLength > maxUnsigned16Bit) {
          offset += 8 // payload length is next 8 bytes
          payloadLength = 127
        } else if (bodyLength > 125) {
          offset += 2 // payload length is next 2 bytes
          payloadLength = 126
        }

        const buffer = Buffer.allocUnsafe(bodyLength + offset)

        // Clear first 2 bytes, everything else is overwritten
        buffer[0] = buffer[1] = 0
        buffer[0] |= 0x80 // FIN
        buffer[0] = (buffer[0] & 0xf0) + opcode // opcode

        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
        buffer[offset - 4] = this.maskKey[0]
        buffer[offset - 3] = this.maskKey[1]
        buffer[offset - 2] = this.maskKey[2]
        buffer[offset - 1] = this.maskKey[3]

        buffer[1] = payloadLength

        if (payloadLength === 126) {
          buffer.writeUInt16BE(bodyLength, 2)
        } else if (payloadLength === 127) {
          // Clear extended payload length
          buffer[2] = buffer[3] = 0
          buffer.writeUIntBE(bodyLength, 4, 6)
        }

        buffer[1] |= 0x80 // MASK

        // mask body
        for (let i = 0; i < bodyLength; i++) {
          buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]
        }

        return buffer
      }
    }

    module.exports = {
      WebsocketFrameSend
    }

    /***/
  },

  /***/ 1688: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { Writable } = __nccwpck_require__(2781)
    const diagnosticsChannel = __nccwpck_require__(7643)
    const { parserStates, opcodes, states, emptyBuffer } =
      __nccwpck_require__(9188)
    const { kReadyState, kSentClose, kResponse, kReceivedClose } =
      __nccwpck_require__(7578)
    const {
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    } = __nccwpck_require__(5515)
    const { WebsocketFrameSend } = __nccwpck_require__(5444)

    // This code was influenced by ws released under the MIT license.
    // Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
    // Copyright (c) 2013 Arnout Kazemier and contributors
    // Copyright (c) 2016 Luigi Pinca and contributors

    const channels = {}
    channels.ping = diagnosticsChannel.channel('undici:websocket:ping')
    channels.pong = diagnosticsChannel.channel('undici:websocket:pong')

    class ByteParser extends Writable {
      #buffers = []
      #byteOffset = 0

      #state = parserStates.INFO

      #info = {}
      #fragments = []

      constructor(ws) {
        super()

        this.ws = ws
      }

      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk, _, callback) {
        this.#buffers.push(chunk)
        this.#byteOffset += chunk.length

        this.run(callback)
      }

      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            // If there aren't enough bytes to parse the payload length, etc.
            if (this.#byteOffset < 2) {
              return callback()
            }

            const buffer = this.consume(2)

            this.#info.fin = (buffer[0] & 0x80) !== 0
            this.#info.opcode = buffer[0] & 0x0f

            // If we receive a fragmented message, we use the type of the first
            // frame to parse the full message as binary/text, when it's terminated
            this.#info.originalOpcode ??= this.#info.opcode

            this.#info.fragmented =
              !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION

            if (
              this.#info.fragmented &&
              this.#info.opcode !== opcodes.BINARY &&
              this.#info.opcode !== opcodes.TEXT
            ) {
              // Only text and binary frames can be fragmented
              failWebsocketConnection(
                this.ws,
                'Invalid frame type was fragmented.'
              )
              return
            }

            const payloadLength = buffer[1] & 0x7f

            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength
              this.#state = parserStates.READ_DATA
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64
            }

            if (this.#info.fragmented && payloadLength > 125) {
              // A fragmented frame can't be fragmented itself
              failWebsocketConnection(
                this.ws,
                'Fragmented frame exceeded 125 bytes.'
              )
              return
            } else if (
              (this.#info.opcode === opcodes.PING ||
                this.#info.opcode === opcodes.PONG ||
                this.#info.opcode === opcodes.CLOSE) &&
              payloadLength > 125
            ) {
              // Control frames can have a payload length of 125 bytes MAX
              failWebsocketConnection(
                this.ws,
                'Payload length for control frame exceeded 125 bytes.'
              )
              return
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(
                  this.ws,
                  'Received close frame with a 1-byte body.'
                )
                return
              }

              const body = this.consume(payloadLength)

              this.#info.closeInfo = this.parseCloseBody(false, body)

              if (!this.ws[kSentClose]) {
                // If an endpoint receives a Close frame and did not previously send a
                // Close frame, the endpoint MUST send a Close frame in response.  (When
                // sending a Close frame in response, the endpoint typically echos the
                // status code it received.)
                const body = Buffer.allocUnsafe(2)
                body.writeUInt16BE(this.#info.closeInfo.code, 0)
                const closeFrame = new WebsocketFrameSend(body)

                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true
                    }
                  }
                )
              }

              // Upon either sending or receiving a Close control frame, it is said
              // that _The WebSocket Closing Handshake is Started_ and that the
              // WebSocket connection is in the CLOSING state.
              this.ws[kReadyState] = states.CLOSING
              this.ws[kReceivedClose] = true

              this.end()

              return
            } else if (this.#info.opcode === opcodes.PING) {
              // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
              // response, unless it already received a Close frame.
              // A Pong frame sent in response to a Ping frame must have identical
              // "Application data"

              const body = this.consume(payloadLength)

              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body)

                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))

                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body
                  })
                }
              }

              this.#state = parserStates.INFO

              if (this.#byteOffset > 0) {
                continue
              } else {
                callback()
                return
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              // A Pong frame MAY be sent unsolicited.  This serves as a
              // unidirectional heartbeat.  A response to an unsolicited Pong frame is
              // not expected.

              const body = this.consume(payloadLength)

              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body
                })
              }

              if (this.#byteOffset > 0) {
                continue
              } else {
                callback()
                return
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback()
            }

            const buffer = this.consume(2)

            this.#info.payloadLength = buffer.readUInt16BE(0)
            this.#state = parserStates.READ_DATA
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback()
            }

            const buffer = this.consume(8)
            const upper = buffer.readUInt32BE(0)

            // 2^31 is the maxinimum bytes an arraybuffer can contain
            // on 32-bit systems. Although, on 64-bit systems, this is
            // 2^53-1 bytes.
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
            // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
            // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(
                this.ws,
                'Received payload length > 2^31 bytes.'
              )
              return
            }

            const lower = buffer.readUInt32BE(4)

            this.#info.payloadLength = (upper << 8) + lower
            this.#state = parserStates.READ_DATA
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              // If there is still more data in this chunk that needs to be read
              return callback()
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              // If the server sent multiple frames in a single chunk

              const body = this.consume(this.#info.payloadLength)

              this.#fragments.push(body)

              // If the frame is unfragmented, or a fragmented frame was terminated,
              // a message was received
              if (
                !this.#info.fragmented ||
                (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)
              ) {
                const fullMessage = Buffer.concat(this.#fragments)

                websocketMessageReceived(
                  this.ws,
                  this.#info.originalOpcode,
                  fullMessage
                )

                this.#info = {}
                this.#fragments.length = 0
              }

              this.#state = parserStates.INFO
            }
          }

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            break
          }
        }
      }

      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n) {
        if (n > this.#byteOffset) {
          return null
        } else if (n === 0) {
          return emptyBuffer
        }

        if (this.#buffers[0].length === n) {
          this.#byteOffset -= this.#buffers[0].length
          return this.#buffers.shift()
        }

        const buffer = Buffer.allocUnsafe(n)
        let offset = 0

        while (offset !== n) {
          const next = this.#buffers[0]
          const { length } = next

          if (length + offset === n) {
            buffer.set(this.#buffers.shift(), offset)
            break
          } else if (length + offset > n) {
            buffer.set(next.subarray(0, n - offset), offset)
            this.#buffers[0] = next.subarray(n - offset)
            break
          } else {
            buffer.set(this.#buffers.shift(), offset)
            offset += next.length
          }
        }

        this.#byteOffset -= n

        return buffer
      }

      parseCloseBody(onlyCode, data) {
        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
        /** @type {number|undefined} */
        let code

        if (data.length >= 2) {
          // _The WebSocket Connection Close Code_ is
          // defined as the status code (Section 7.4) contained in the first Close
          // control frame received by the application
          code = data.readUInt16BE(0)
        }

        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null
          }

          return { code }
        }

        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
        /** @type {Buffer} */
        let reason = data.subarray(2)

        // Remove BOM
        if (reason[0] === 0xef && reason[1] === 0xbb && reason[2] === 0xbf) {
          reason = reason.subarray(3)
        }

        if (code !== undefined && !isValidStatusCode(code)) {
          return null
        }

        try {
          // TODO: optimize this
          reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)
        } catch {
          return null
        }

        return { code, reason }
      }

      get closingInfo() {
        return this.#info.closeInfo
      }
    }

    module.exports = {
      ByteParser
    }

    /***/
  },

  /***/ 7578: /***/ (module) => {
    module.exports = {
      kWebSocketURL: Symbol('url'),
      kReadyState: Symbol('ready state'),
      kController: Symbol('controller'),
      kResponse: Symbol('response'),
      kBinaryType: Symbol('binary type'),
      kSentClose: Symbol('sent close'),
      kReceivedClose: Symbol('received close'),
      kByteParser: Symbol('byte parser')
    }

    /***/
  },

  /***/ 5515: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } =
      __nccwpck_require__(7578)
    const { states, opcodes } = __nccwpck_require__(9188)
    const { MessageEvent, ErrorEvent } = __nccwpck_require__(2611)

    /* globals Blob */

    /**
     * @param {import('./websocket').WebSocket} ws
     */
    function isEstablished(ws) {
      // If the server's response is validated as provided for above, it is
      // said that _The WebSocket Connection is Established_ and that the
      // WebSocket Connection is in the OPEN state.
      return ws[kReadyState] === states.OPEN
    }

    /**
     * @param {import('./websocket').WebSocket} ws
     */
    function isClosing(ws) {
      // Upon either sending or receiving a Close control frame, it is said
      // that _The WebSocket Closing Handshake is Started_ and that the
      // WebSocket connection is in the CLOSING state.
      return ws[kReadyState] === states.CLOSING
    }

    /**
     * @param {import('./websocket').WebSocket} ws
     */
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED
    }

    /**
     * @see https://dom.spec.whatwg.org/#concept-event-fire
     * @param {string} e
     * @param {EventTarget} target
     * @param {EventInit | undefined} eventInitDict
     */
    function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
      // 1. If eventConstructor is not given, then let eventConstructor be Event.

      // 2. Let event be the result of creating an event given eventConstructor,
      //    in the relevant realm of target.
      // 3. Initialize event’s type attribute to e.
      const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap

      // 4. Initialize any other IDL attributes of event as described in the
      //    invocation of this algorithm.

      // 5. Return the result of dispatching event at target, with legacy target
      //    override flag set if set.
      target.dispatchEvent(event)
    }

    /**
     * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
     * @param {import('./websocket').WebSocket} ws
     * @param {number} type Opcode
     * @param {Buffer} data application data
     */
    function websocketMessageReceived(ws, type, data) {
      // 1. If ready state is not OPEN (1), then return.
      if (ws[kReadyState] !== states.OPEN) {
        return
      }

      // 2. Let dataForEvent be determined by switching on type and binary type:
      let dataForEvent

      if (type === opcodes.TEXT) {
        // -> type indicates that the data is Text
        //      a new DOMString containing data
        try {
          dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)
        } catch {
          failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')
          return
        }
      } else if (type === opcodes.BINARY) {
        if (ws[kBinaryType] === 'blob') {
          // -> type indicates that the data is Binary and binary type is "blob"
          //      a new Blob object, created in the relevant Realm of the WebSocket
          //      object, that represents data as its raw data
          dataForEvent = new Blob([data])
        } else {
          // -> type indicates that the data is Binary and binary type is "arraybuffer"
          //      a new ArrayBuffer object, created in the relevant Realm of the
          //      WebSocket object, whose contents are data
          dataForEvent = new Uint8Array(data).buffer
        }
      }

      // 3. Fire an event named message at the WebSocket object, using MessageEvent,
      //    with the origin attribute initialized to the serialization of the WebSocket
      //    object’s url's origin, and the data attribute initialized to dataForEvent.
      fireEvent('message', ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      })
    }

    /**
     * @see https://datatracker.ietf.org/doc/html/rfc6455
     * @see https://datatracker.ietf.org/doc/html/rfc2616
     * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
     * @param {string} protocol
     */
    function isValidSubprotocol(protocol) {
      // If present, this value indicates one
      // or more comma-separated subprotocol the client wishes to speak,
      // ordered by preference.  The elements that comprise this value
      // MUST be non-empty strings with characters in the range U+0021 to
      // U+007E not including separator characters as defined in
      // [RFC2616] and MUST all be unique strings.
      if (protocol.length === 0) {
        return false
      }

      for (const char of protocol) {
        const code = char.charCodeAt(0)

        if (
          code < 0x21 ||
          code > 0x7e ||
          char === '(' ||
          char === ')' ||
          char === '<' ||
          char === '>' ||
          char === '@' ||
          char === ',' ||
          char === ';' ||
          char === ':' ||
          char === '\\' ||
          char === '"' ||
          char === '/' ||
          char === '[' ||
          char === ']' ||
          char === '?' ||
          char === '=' ||
          char === '{' ||
          char === '}' ||
          code === 32 || // SP
          code === 9 // HT
        ) {
          return false
        }
      }

      return true
    }

    /**
     * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
     * @param {number} code
     */
    function isValidStatusCode(code) {
      if (code >= 1000 && code < 1015) {
        return (
          code !== 1004 && // reserved
          code !== 1005 && // "MUST NOT be set as a status code"
          code !== 1006 // "MUST NOT be set as a status code"
        )
      }

      return code >= 3000 && code <= 4999
    }

    /**
     * @param {import('./websocket').WebSocket} ws
     * @param {string|undefined} reason
     */
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws

      controller.abort()

      if (response?.socket && !response.socket.destroyed) {
        response.socket.destroy()
      }

      if (reason) {
        fireEvent('error', ws, ErrorEvent, {
          error: new Error(reason)
        })
      }
    }

    module.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    }

    /***/
  },

  /***/ 4284: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const { webidl } = __nccwpck_require__(1744)
    const { DOMException } = __nccwpck_require__(1037)
    const { URLSerializer } = __nccwpck_require__(685)
    const { getGlobalOrigin } = __nccwpck_require__(1246)
    const { staticPropertyDescriptors, states, opcodes, emptyBuffer } =
      __nccwpck_require__(9188)
    const {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = __nccwpck_require__(7578)
    const {
      isEstablished,
      isClosing,
      isValidSubprotocol,
      failWebsocketConnection,
      fireEvent
    } = __nccwpck_require__(5515)
    const { establishWebSocketConnection } = __nccwpck_require__(5354)
    const { WebsocketFrameSend } = __nccwpck_require__(5444)
    const { ByteParser } = __nccwpck_require__(1688)
    const { kEnumerableProperty, isBlobLike } = __nccwpck_require__(3983)
    const { getGlobalDispatcher } = __nccwpck_require__(1892)
    const { types } = __nccwpck_require__(3837)

    let experimentalWarned = false

    // https://websockets.spec.whatwg.org/#interface-definition
    class WebSocket extends EventTarget {
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      }

      #bufferedAmount = 0
      #protocol = ''
      #extensions = ''

      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url, protocols = []) {
        super()

        webidl.argumentLengthCheck(arguments, 1, {
          header: 'WebSocket constructor'
        })

        if (!experimentalWarned) {
          experimentalWarned = true
          process.emitWarning(
            'WebSockets are experimental, expect them to change at any time.',
            {
              code: 'UNDICI-WS'
            }
          )
        }

        const options =
          webidl.converters[
            'DOMString or sequence<DOMString> or WebSocketInit'
          ](protocols)

        url = webidl.converters.USVString(url)
        protocols = options.protocols

        // 1. Let baseURL be this's relevant settings object's API base URL.
        const baseURL = getGlobalOrigin()

        // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
        let urlRecord

        try {
          urlRecord = new URL(url, baseURL)
        } catch (e) {
          // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
          throw new DOMException(e, 'SyntaxError')
        }

        // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
        if (urlRecord.protocol === 'http:') {
          urlRecord.protocol = 'ws:'
        } else if (urlRecord.protocol === 'https:') {
          // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
          urlRecord.protocol = 'wss:'
        }

        // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
        if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
          throw new DOMException(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            'SyntaxError'
          )
        }

        // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
        //    DOMException.
        if (urlRecord.hash || urlRecord.href.endsWith('#')) {
          throw new DOMException('Got fragment', 'SyntaxError')
        }

        // 8. If protocols is a string, set protocols to a sequence consisting
        //    of just that string.
        if (typeof protocols === 'string') {
          protocols = [protocols]
        }

        // 9. If any of the values in protocols occur more than once or otherwise
        //    fail to match the requirements for elements that comprise the value
        //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
        //    protocol, then throw a "SyntaxError" DOMException.
        if (
          protocols.length !==
          new Set(protocols.map((p) => p.toLowerCase())).size
        ) {
          throw new DOMException(
            'Invalid Sec-WebSocket-Protocol value',
            'SyntaxError'
          )
        }

        if (
          protocols.length > 0 &&
          !protocols.every((p) => isValidSubprotocol(p))
        ) {
          throw new DOMException(
            'Invalid Sec-WebSocket-Protocol value',
            'SyntaxError'
          )
        }

        // 10. Set this's url to urlRecord.
        this[kWebSocketURL] = new URL(urlRecord.href)

        // 11. Let client be this's relevant settings object.

        // 12. Run this step in parallel:

        //    1. Establish a WebSocket connection given urlRecord, protocols,
        //       and client.
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options
        )

        // Each WebSocket object has an associated ready state, which is a
        // number representing the state of the connection. Initially it must
        // be CONNECTING (0).
        this[kReadyState] = WebSocket.CONNECTING

        // The extensions attribute must initially return the empty string.

        // The protocol attribute must initially return the empty string.

        // Each WebSocket object has an associated binary type, which is a
        // BinaryType. Initially it must be "blob".
        this[kBinaryType] = 'blob'
      }

      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = undefined, reason = undefined) {
        webidl.brandCheck(this, WebSocket)

        if (code !== undefined) {
          code = webidl.converters['unsigned short'](code, { clamp: true })
        }

        if (reason !== undefined) {
          reason = webidl.converters.USVString(reason)
        }

        // 1. If code is present, but is neither an integer equal to 1000 nor an
        //    integer in the range 3000 to 4999, inclusive, throw an
        //    "InvalidAccessError" DOMException.
        if (code !== undefined) {
          if (code !== 1000 && (code < 3000 || code > 4999)) {
            throw new DOMException('invalid code', 'InvalidAccessError')
          }
        }

        let reasonByteLength = 0

        // 2. If reason is present, then run these substeps:
        if (reason !== undefined) {
          // 1. Let reasonBytes be the result of encoding reason.
          // 2. If reasonBytes is longer than 123 bytes, then throw a
          //    "SyntaxError" DOMException.
          reasonByteLength = Buffer.byteLength(reason)

          if (reasonByteLength > 123) {
            throw new DOMException(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              'SyntaxError'
            )
          }
        }

        // 3. Run the first matching steps from the following list:
        if (
          this[kReadyState] === WebSocket.CLOSING ||
          this[kReadyState] === WebSocket.CLOSED
        ) {
          // If this's ready state is CLOSING (2) or CLOSED (3)
          // Do nothing.
        } else if (!isEstablished(this)) {
          // If the WebSocket connection is not yet established
          // Fail the WebSocket connection and set this's ready state
          // to CLOSING (2).
          failWebsocketConnection(
            this,
            'Connection was closed before it was established.'
          )
          this[kReadyState] = WebSocket.CLOSING
        } else if (!isClosing(this)) {
          // If the WebSocket closing handshake has not yet been started
          // Start the WebSocket closing handshake and set this's ready
          // state to CLOSING (2).
          // - If neither code nor reason is present, the WebSocket Close
          //   message must not have a body.
          // - If code is present, then the status code to use in the
          //   WebSocket Close message must be the integer given by code.
          // - If reason is also present, then reasonBytes must be
          //   provided in the Close message after the status code.

          const frame = new WebsocketFrameSend()

          // If neither code nor reason is present, the WebSocket Close
          // message must not have a body.

          // If code is present, then the status code to use in the
          // WebSocket Close message must be the integer given by code.
          if (code !== undefined && reason === undefined) {
            frame.frameData = Buffer.allocUnsafe(2)
            frame.frameData.writeUInt16BE(code, 0)
          } else if (code !== undefined && reason !== undefined) {
            // If reason is also present, then reasonBytes must be
            // provided in the Close message after the status code.
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)
            frame.frameData.writeUInt16BE(code, 0)
            // the body MAY contain UTF-8-encoded data with value /reason/
            frame.frameData.write(reason, 2, 'utf-8')
          } else {
            frame.frameData = emptyBuffer
          }

          /** @type {import('stream').Duplex} */
          const socket = this[kResponse].socket

          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true
            }
          })

          // Upon either sending or receiving a Close control frame, it is said
          // that _The WebSocket Closing Handshake is Started_ and that the
          // WebSocket connection is in the CLOSING state.
          this[kReadyState] = states.CLOSING
        } else {
          // Otherwise
          // Set this's ready state to CLOSING (2).
          this[kReadyState] = WebSocket.CLOSING
        }
      }

      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, WebSocket)

        webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })

        data = webidl.converters.WebSocketSendData(data)

        // 1. If this's ready state is CONNECTING, then throw an
        //    "InvalidStateError" DOMException.
        if (this[kReadyState] === WebSocket.CONNECTING) {
          throw new DOMException('Sent before connected.', 'InvalidStateError')
        }

        // 2. Run the appropriate set of steps from the following list:
        // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
        // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

        if (!isEstablished(this) || isClosing(this)) {
          return
        }

        /** @type {import('stream').Duplex} */
        const socket = this[kResponse].socket

        // If data is a string
        if (typeof data === 'string') {
          // If the WebSocket connection is established and the WebSocket
          // closing handshake has not yet started, then the user agent
          // must send a WebSocket Message comprised of the data argument
          // using a text frame opcode; if the data cannot be sent, e.g.
          // because it would need to be buffered but the buffer is full,
          // the user agent must flag the WebSocket as full and then close
          // the WebSocket connection. Any invocation of this method with a
          // string argument that does not throw an exception must increase
          // the bufferedAmount attribute by the number of bytes needed to
          // express the argument as UTF-8.

          const value = Buffer.from(data)
          const frame = new WebsocketFrameSend(value)
          const buffer = frame.createFrame(opcodes.TEXT)

          this.#bufferedAmount += value.byteLength
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength
          })
        } else if (types.isArrayBuffer(data)) {
          // If the WebSocket connection is established, and the WebSocket
          // closing handshake has not yet started, then the user agent must
          // send a WebSocket Message comprised of data using a binary frame
          // opcode; if the data cannot be sent, e.g. because it would need
          // to be buffered but the buffer is full, the user agent must flag
          // the WebSocket as full and then close the WebSocket connection.
          // The data to be sent is the data stored in the buffer described
          // by the ArrayBuffer object. Any invocation of this method with an
          // ArrayBuffer argument that does not throw an exception must
          // increase the bufferedAmount attribute by the length of the
          // ArrayBuffer in bytes.

          const value = Buffer.from(data)
          const frame = new WebsocketFrameSend(value)
          const buffer = frame.createFrame(opcodes.BINARY)

          this.#bufferedAmount += value.byteLength
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength
          })
        } else if (ArrayBuffer.isView(data)) {
          // If the WebSocket connection is established, and the WebSocket
          // closing handshake has not yet started, then the user agent must
          // send a WebSocket Message comprised of data using a binary frame
          // opcode; if the data cannot be sent, e.g. because it would need to
          // be buffered but the buffer is full, the user agent must flag the
          // WebSocket as full and then close the WebSocket connection. The
          // data to be sent is the data stored in the section of the buffer
          // described by the ArrayBuffer object that data references. Any
          // invocation of this method with this kind of argument that does
          // not throw an exception must increase the bufferedAmount attribute
          // by the length of data’s buffer in bytes.

          const ab = Buffer.from(data, data.byteOffset, data.byteLength)

          const frame = new WebsocketFrameSend(ab)
          const buffer = frame.createFrame(opcodes.BINARY)

          this.#bufferedAmount += ab.byteLength
          socket.write(buffer, () => {
            this.#bufferedAmount -= ab.byteLength
          })
        } else if (isBlobLike(data)) {
          // If the WebSocket connection is established, and the WebSocket
          // closing handshake has not yet started, then the user agent must
          // send a WebSocket Message comprised of data using a binary frame
          // opcode; if the data cannot be sent, e.g. because it would need to
          // be buffered but the buffer is full, the user agent must flag the
          // WebSocket as full and then close the WebSocket connection. The data
          // to be sent is the raw data represented by the Blob object. Any
          // invocation of this method with a Blob argument that does not throw
          // an exception must increase the bufferedAmount attribute by the size
          // of the Blob object’s raw data, in bytes.

          const frame = new WebsocketFrameSend()

          data.arrayBuffer().then((ab) => {
            const value = Buffer.from(ab)
            frame.frameData = value
            const buffer = frame.createFrame(opcodes.BINARY)

            this.#bufferedAmount += value.byteLength
            socket.write(buffer, () => {
              this.#bufferedAmount -= value.byteLength
            })
          })
        }
      }

      get readyState() {
        webidl.brandCheck(this, WebSocket)

        // The readyState getter steps are to return this's ready state.
        return this[kReadyState]
      }

      get bufferedAmount() {
        webidl.brandCheck(this, WebSocket)

        return this.#bufferedAmount
      }

      get url() {
        webidl.brandCheck(this, WebSocket)

        // The url getter steps are to return this's url, serialized.
        return URLSerializer(this[kWebSocketURL])
      }

      get extensions() {
        webidl.brandCheck(this, WebSocket)

        return this.#extensions
      }

      get protocol() {
        webidl.brandCheck(this, WebSocket)

        return this.#protocol
      }

      get onopen() {
        webidl.brandCheck(this, WebSocket)

        return this.#events.open
      }

      set onopen(fn) {
        webidl.brandCheck(this, WebSocket)

        if (this.#events.open) {
          this.removeEventListener('open', this.#events.open)
        }

        if (typeof fn === 'function') {
          this.#events.open = fn
          this.addEventListener('open', fn)
        } else {
          this.#events.open = null
        }
      }

      get onerror() {
        webidl.brandCheck(this, WebSocket)

        return this.#events.error
      }

      set onerror(fn) {
        webidl.brandCheck(this, WebSocket)

        if (this.#events.error) {
          this.removeEventListener('error', this.#events.error)
        }

        if (typeof fn === 'function') {
          this.#events.error = fn
          this.addEventListener('error', fn)
        } else {
          this.#events.error = null
        }
      }

      get onclose() {
        webidl.brandCheck(this, WebSocket)

        return this.#events.close
      }

      set onclose(fn) {
        webidl.brandCheck(this, WebSocket)

        if (this.#events.close) {
          this.removeEventListener('close', this.#events.close)
        }

        if (typeof fn === 'function') {
          this.#events.close = fn
          this.addEventListener('close', fn)
        } else {
          this.#events.close = null
        }
      }

      get onmessage() {
        webidl.brandCheck(this, WebSocket)

        return this.#events.message
      }

      set onmessage(fn) {
        webidl.brandCheck(this, WebSocket)

        if (this.#events.message) {
          this.removeEventListener('message', this.#events.message)
        }

        if (typeof fn === 'function') {
          this.#events.message = fn
          this.addEventListener('message', fn)
        } else {
          this.#events.message = null
        }
      }

      get binaryType() {
        webidl.brandCheck(this, WebSocket)

        return this[kBinaryType]
      }

      set binaryType(type) {
        webidl.brandCheck(this, WebSocket)

        if (type !== 'blob' && type !== 'arraybuffer') {
          this[kBinaryType] = 'blob'
        } else {
          this[kBinaryType] = type
        }
      }

      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        // processResponse is called when the "response’s header list has been received and initialized."
        // once this happens, the connection is open
        this[kResponse] = response

        const parser = new ByteParser(this)
        parser.on('drain', function onParserDrain() {
          this.ws[kResponse].socket.resume()
        })

        response.socket.ws = this
        this[kByteParser] = parser

        // 1. Change the ready state to OPEN (1).
        this[kReadyState] = states.OPEN

        // 2. Change the extensions attribute’s value to the extensions in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
        const extensions = response.headersList.get('sec-websocket-extensions')

        if (extensions !== null) {
          this.#extensions = extensions
        }

        // 3. Change the protocol attribute’s value to the subprotocol in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
        const protocol = response.headersList.get('sec-websocket-protocol')

        if (protocol !== null) {
          this.#protocol = protocol
        }

        // 4. Fire an event named open at the WebSocket object.
        fireEvent('open', this)
      }
    }

    // https://websockets.spec.whatwg.org/#dom-websocket-connecting
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING
    // https://websockets.spec.whatwg.org/#dom-websocket-open
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN
    // https://websockets.spec.whatwg.org/#dom-websocket-closing
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING
    // https://websockets.spec.whatwg.org/#dom-websocket-closed
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED

    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: 'WebSocket',
        writable: false,
        enumerable: false,
        configurable: true
      }
    })

    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    })

    webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
      webidl.converters.DOMString
    )

    webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
      if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
        return webidl.converters['sequence<DOMString>'](V)
      }

      return webidl.converters.DOMString(V)
    }

    // This implements the propsal made in https://github.com/whatwg/websockets/issues/42
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: 'protocols',
        converter: webidl.converters['DOMString or sequence<DOMString>'],
        get defaultValue() {
          return []
        }
      },
      {
        key: 'dispatcher',
        converter: (V) => V,
        get defaultValue() {
          return getGlobalDispatcher()
        }
      },
      {
        key: 'headers',
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ])

    webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] =
      function (V) {
        if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
          return webidl.converters.WebSocketInit(V)
        }

        return {
          protocols: webidl.converters['DOMString or sequence<DOMString>'](V)
        }
      }

    webidl.converters.WebSocketSendData = function (V) {
      if (webidl.util.Type(V) === 'Object') {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false })
        }

        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V)
        }
      }

      return webidl.converters.USVString(V)
    }

    module.exports = {
      WebSocket
    }

    /***/
  },

  /***/ 5840: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    Object.defineProperty(exports, 'v1', {
      enumerable: true,
      get: function () {
        return _v.default
      }
    })
    Object.defineProperty(exports, 'v3', {
      enumerable: true,
      get: function () {
        return _v2.default
      }
    })
    Object.defineProperty(exports, 'v4', {
      enumerable: true,
      get: function () {
        return _v3.default
      }
    })
    Object.defineProperty(exports, 'v5', {
      enumerable: true,
      get: function () {
        return _v4.default
      }
    })
    Object.defineProperty(exports, 'NIL', {
      enumerable: true,
      get: function () {
        return _nil.default
      }
    })
    Object.defineProperty(exports, 'version', {
      enumerable: true,
      get: function () {
        return _version.default
      }
    })
    Object.defineProperty(exports, 'validate', {
      enumerable: true,
      get: function () {
        return _validate.default
      }
    })
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return _stringify.default
      }
    })
    Object.defineProperty(exports, 'parse', {
      enumerable: true,
      get: function () {
        return _parse.default
      }
    })

    var _v = _interopRequireDefault(__nccwpck_require__(8628))

    var _v2 = _interopRequireDefault(__nccwpck_require__(6409))

    var _v3 = _interopRequireDefault(__nccwpck_require__(5122))

    var _v4 = _interopRequireDefault(__nccwpck_require__(9120))

    var _nil = _interopRequireDefault(__nccwpck_require__(5332))

    var _version = _interopRequireDefault(__nccwpck_require__(1595))

    var _validate = _interopRequireDefault(__nccwpck_require__(6900))

    var _stringify = _interopRequireDefault(__nccwpck_require__(8950))

    var _parse = _interopRequireDefault(__nccwpck_require__(2746))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    /***/
  },

  /***/ 4569: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _crypto = _interopRequireDefault(__nccwpck_require__(6113))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes)
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8')
      }

      return _crypto.default.createHash('md5').update(bytes).digest()
    }

    var _default = md5
    exports['default'] = _default

    /***/
  },

  /***/ 5332: /***/ (__unused_webpack_module, exports) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0
    var _default = '00000000-0000-0000-0000-000000000000'
    exports['default'] = _default

    /***/
  },

  /***/ 2746: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _validate = _interopRequireDefault(__nccwpck_require__(6900))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID')
      }

      let v
      const arr = new Uint8Array(16) // Parse ########-....-....-....-............

      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24
      arr[1] = (v >>> 16) & 0xff
      arr[2] = (v >>> 8) & 0xff
      arr[3] = v & 0xff // Parse ........-####-....-....-............

      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8
      arr[5] = v & 0xff // Parse ........-....-####-....-............

      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8
      arr[7] = v & 0xff // Parse ........-....-....-####-............

      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8
      arr[9] = v & 0xff // Parse ........-....-....-....-############
      // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

      arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff
      arr[11] = (v / 0x100000000) & 0xff
      arr[12] = (v >>> 24) & 0xff
      arr[13] = (v >>> 16) & 0xff
      arr[14] = (v >>> 8) & 0xff
      arr[15] = v & 0xff
      return arr
    }

    var _default = parse
    exports['default'] = _default

    /***/
  },

  /***/ 814: /***/ (__unused_webpack_module, exports) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0
    var _default =
      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i
    exports['default'] = _default

    /***/
  },

  /***/ 807: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = rng

    var _crypto = _interopRequireDefault(__nccwpck_require__(6113))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    const rnds8Pool = new Uint8Array(256) // # of random values to pre-allocate

    let poolPtr = rnds8Pool.length

    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool)

        poolPtr = 0
      }

      return rnds8Pool.slice(poolPtr, (poolPtr += 16))
    }

    /***/
  },

  /***/ 5274: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _crypto = _interopRequireDefault(__nccwpck_require__(6113))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes)
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8')
      }

      return _crypto.default.createHash('sha1').update(bytes).digest()
    }

    var _default = sha1
    exports['default'] = _default

    /***/
  },

  /***/ 8950: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _validate = _interopRequireDefault(__nccwpck_require__(6900))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    const byteToHex = []

    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1))
    }

    function stringify(arr, offset = 0) {
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      const uuid = (
        byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]
      ).toLowerCase() // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid')
      }

      return uuid
    }

    var _default = stringify
    exports['default'] = _default

    /***/
  },

  /***/ 8628: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _rng = _interopRequireDefault(__nccwpck_require__(807))

    var _stringify = _interopRequireDefault(__nccwpck_require__(8950))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html
    let _nodeId

    let _clockseq // Previous uuid creation time

    let _lastMSecs = 0
    let _lastNSecs = 0 // See https://github.com/uuidjs/uuid for API details

    function v1(options, buf, offset) {
      let i = (buf && offset) || 0
      const b = buf || new Array(16)
      options = options || {}
      let node = options.node || _nodeId
      let clockseq =
        options.clockseq !== undefined ? options.clockseq : _clockseq // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189

      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)()

        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ]
        }

        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff
        }
      } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

      let msecs = options.msecs !== undefined ? options.msecs : Date.now() // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock

      let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1 // Time since last uuid creation (in msecs)

      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000 // Per 4.2.1.2, Bump clockseq on clock regression

      if (dt < 0 && options.clockseq === undefined) {
        clockseq = (clockseq + 1) & 0x3fff
      } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval

      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0
      } // Per 4.2.1.2 Throw error if too many uuids are requested

      if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec")
      }

      _lastMSecs = msecs
      _lastNSecs = nsecs
      _clockseq = clockseq // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

      msecs += 12219292800000 // `time_low`

      const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000
      b[i++] = (tl >>> 24) & 0xff
      b[i++] = (tl >>> 16) & 0xff
      b[i++] = (tl >>> 8) & 0xff
      b[i++] = tl & 0xff // `time_mid`

      const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff
      b[i++] = (tmh >>> 8) & 0xff
      b[i++] = tmh & 0xff // `time_high_and_version`

      b[i++] = ((tmh >>> 24) & 0xf) | 0x10 // include version

      b[i++] = (tmh >>> 16) & 0xff // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

      b[i++] = (clockseq >>> 8) | 0x80 // `clock_seq_low`

      b[i++] = clockseq & 0xff // `node`

      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n]
      }

      return buf || (0, _stringify.default)(b)
    }

    var _default = v1
    exports['default'] = _default

    /***/
  },

  /***/ 6409: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _v = _interopRequireDefault(__nccwpck_require__(5998))

    var _md = _interopRequireDefault(__nccwpck_require__(4569))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    const v3 = (0, _v.default)('v3', 0x30, _md.default)
    var _default = v3
    exports['default'] = _default

    /***/
  },

  /***/ 5998: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = _default
    exports.URL = exports.DNS = void 0

    var _stringify = _interopRequireDefault(__nccwpck_require__(8950))

    var _parse = _interopRequireDefault(__nccwpck_require__(2746))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)) // UTF8 escape

      const bytes = []

      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i))
      }

      return bytes
    }

    const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8'
    exports.DNS = DNS
    const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8'
    exports.URL = URL

    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === 'string') {
          value = stringToBytes(value)
        }

        if (typeof namespace === 'string') {
          namespace = (0, _parse.default)(namespace)
        }

        if (namespace.length !== 16) {
          throw TypeError(
            'Namespace must be array-like (16 iterable integer values, 0-255)'
          )
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`

        let bytes = new Uint8Array(16 + value.length)
        bytes.set(namespace)
        bytes.set(value, namespace.length)
        bytes = hashfunc(bytes)
        bytes[6] = (bytes[6] & 0x0f) | version
        bytes[8] = (bytes[8] & 0x3f) | 0x80

        if (buf) {
          offset = offset || 0

          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i]
          }

          return buf
        }

        return (0, _stringify.default)(bytes)
      } // Function#name is not settable on some platforms (#270)

      try {
        generateUUID.name = name // eslint-disable-next-line no-empty
      } catch (err) {} // For CommonJS default export support

      generateUUID.DNS = DNS
      generateUUID.URL = URL
      return generateUUID
    }

    /***/
  },

  /***/ 5122: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _rng = _interopRequireDefault(__nccwpck_require__(807))

    var _stringify = _interopRequireDefault(__nccwpck_require__(8950))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function v4(options, buf, offset) {
      options = options || {}

      const rnds = options.random || (options.rng || _rng.default)() // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = (rnds[6] & 0x0f) | 0x40
      rnds[8] = (rnds[8] & 0x3f) | 0x80 // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0

        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i]
        }

        return buf
      }

      return (0, _stringify.default)(rnds)
    }

    var _default = v4
    exports['default'] = _default

    /***/
  },

  /***/ 9120: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _v = _interopRequireDefault(__nccwpck_require__(5998))

    var _sha = _interopRequireDefault(__nccwpck_require__(5274))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    const v5 = (0, _v.default)('v5', 0x50, _sha.default)
    var _default = v5
    exports['default'] = _default

    /***/
  },

  /***/ 6900: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _regex = _interopRequireDefault(__nccwpck_require__(814))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function validate(uuid) {
      return typeof uuid === 'string' && _regex.default.test(uuid)
    }

    var _default = validate
    exports['default'] = _default

    /***/
  },

  /***/ 1595: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
    Object.defineProperty(exports, '__esModule', {
      value: true
    })
    exports['default'] = void 0

    var _validate = _interopRequireDefault(__nccwpck_require__(6900))

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj }
    }

    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID')
      }

      return parseInt(uuid.substr(14, 1), 16)
    }

    var _default = version
    exports['default'] = _default

    /***/
  },

  /***/ 1452: /***/ function (__unused_webpack_module, exports) {
    /**
     * web-streams-polyfill v3.2.1
     */
    ;(function (global, factory) {
      true ? factory(exports) : 0
    })(this, function (exports) {
      'use strict'

      /// <reference lib="es2015.symbol" />
      const SymbolPolyfill =
        typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
          ? Symbol
          : (description) => `Symbol(${description})`

      /// <reference lib="dom" />
      function noop() {
        return undefined
      }
      function getGlobals() {
        if (typeof self !== 'undefined') {
          return self
        } else if (typeof window !== 'undefined') {
          return window
        } else if (typeof global !== 'undefined') {
          return global
        }
        return undefined
      }
      const globals = getGlobals()

      function typeIsObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function'
      }
      const rethrowAssertionErrorRejection = noop

      const originalPromise = Promise
      const originalPromiseThen = Promise.prototype.then
      const originalPromiseResolve = Promise.resolve.bind(originalPromise)
      const originalPromiseReject = Promise.reject.bind(originalPromise)
      function newPromise(executor) {
        return new originalPromise(executor)
      }
      function promiseResolvedWith(value) {
        return originalPromiseResolve(value)
      }
      function promiseRejectedWith(reason) {
        return originalPromiseReject(reason)
      }
      function PerformPromiseThen(promise, onFulfilled, onRejected) {
        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an
        // approximation.
        return originalPromiseThen.call(promise, onFulfilled, onRejected)
      }
      function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(
          PerformPromiseThen(promise, onFulfilled, onRejected),
          undefined,
          rethrowAssertionErrorRejection
        )
      }
      function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled)
      }
      function uponRejection(promise, onRejected) {
        uponPromise(promise, undefined, onRejected)
      }
      function transformPromiseWith(
        promise,
        fulfillmentHandler,
        rejectionHandler
      ) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler)
      }
      function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection)
      }
      const queueMicrotask = (() => {
        const globalQueueMicrotask = globals && globals.queueMicrotask
        if (typeof globalQueueMicrotask === 'function') {
          return globalQueueMicrotask
        }
        const resolvedPromise = promiseResolvedWith(undefined)
        return (fn) => PerformPromiseThen(resolvedPromise, fn)
      })()
      function reflectCall(F, V, args) {
        if (typeof F !== 'function') {
          throw new TypeError('Argument is not a function')
        }
        return Function.prototype.apply.call(F, V, args)
      }
      function promiseCall(F, V, args) {
        try {
          return promiseResolvedWith(reflectCall(F, V, args))
        } catch (value) {
          return promiseRejectedWith(value)
        }
      }

      // Original from Chromium
      // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js
      const QUEUE_MAX_ARRAY_SIZE = 16384
      /**
       * Simple queue structure.
       *
       * Avoids scalability issues with using a packed array directly by using
       * multiple arrays in a linked list and keeping the array size bounded.
       */
      class SimpleQueue {
        constructor() {
          this._cursor = 0
          this._size = 0
          // _front and _back are always defined.
          this._front = {
            _elements: [],
            _next: undefined
          }
          this._back = this._front
          // The cursor is used to avoid calling Array.shift().
          // It contains the index of the front element of the array inside the
          // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).
          this._cursor = 0
          // When there is only one node, size === elements.length - cursor.
          this._size = 0
        }
        get length() {
          return this._size
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
          const oldBack = this._back
          let newBack = oldBack
          if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
            newBack = {
              _elements: [],
              _next: undefined
            }
          }
          // push() is the mutation most likely to throw an exception, so it
          // goes first.
          oldBack._elements.push(element)
          if (newBack !== oldBack) {
            this._back = newBack
            oldBack._next = newBack
          }
          ++this._size
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() {
          // must not be called on an empty queue
          const oldFront = this._front
          let newFront = oldFront
          const oldCursor = this._cursor
          let newCursor = oldCursor + 1
          const elements = oldFront._elements
          const element = elements[oldCursor]
          if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
            newFront = oldFront._next
            newCursor = 0
          }
          // No mutations before this point.
          --this._size
          this._cursor = newCursor
          if (oldFront !== newFront) {
            this._front = newFront
          }
          // Permit shifted element to be garbage collected.
          elements[oldCursor] = undefined
          return element
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
          let i = this._cursor
          let node = this._front
          let elements = node._elements
          while (i !== elements.length || node._next !== undefined) {
            if (i === elements.length) {
              node = node._next
              elements = node._elements
              i = 0
              if (elements.length === 0) {
                break
              }
            }
            callback(elements[i])
            ++i
          }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() {
          // must not be called on an empty queue
          const front = this._front
          const cursor = this._cursor
          return front._elements[cursor]
        }
      }

      function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream
        stream._reader = reader
        if (stream._state === 'readable') {
          defaultReaderClosedPromiseInitialize(reader)
        } else if (stream._state === 'closed') {
          defaultReaderClosedPromiseInitializeAsResolved(reader)
        } else {
          defaultReaderClosedPromiseInitializeAsRejected(
            reader,
            stream._storedError
          )
        }
      }
      // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state
      // check.
      function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream
        return ReadableStreamCancel(stream, reason)
      }
      function ReadableStreamReaderGenericRelease(reader) {
        if (reader._ownerReadableStream._state === 'readable') {
          defaultReaderClosedPromiseReject(
            reader,
            new TypeError(
              `Reader was released and can no longer be used to monitor the stream's closedness`
            )
          )
        } else {
          defaultReaderClosedPromiseResetToRejected(
            reader,
            new TypeError(
              `Reader was released and can no longer be used to monitor the stream's closedness`
            )
          )
        }
        reader._ownerReadableStream._reader = undefined
        reader._ownerReadableStream = undefined
      }
      // Helper functions for the readers.
      function readerLockException(name) {
        return new TypeError(
          'Cannot ' + name + ' a stream using a released reader'
        )
      }
      // Helper functions for the ReadableStreamDefaultReader.
      function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
          reader._closedPromise_resolve = resolve
          reader._closedPromise_reject = reject
        })
      }
      function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader)
        defaultReaderClosedPromiseReject(reader, reason)
      }
      function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader)
        defaultReaderClosedPromiseResolve(reader)
      }
      function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === undefined) {
          return
        }
        setPromiseIsHandledToTrue(reader._closedPromise)
        reader._closedPromise_reject(reason)
        reader._closedPromise_resolve = undefined
        reader._closedPromise_reject = undefined
      }
      function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason)
      }
      function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === undefined) {
          return
        }
        reader._closedPromise_resolve(undefined)
        reader._closedPromise_resolve = undefined
        reader._closedPromise_reject = undefined
      }

      const AbortSteps = SymbolPolyfill('[[AbortSteps]]')
      const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]')
      const CancelSteps = SymbolPolyfill('[[CancelSteps]]')
      const PullSteps = SymbolPolyfill('[[PullSteps]]')

      /// <reference lib="es2015.core" />
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill
      const NumberIsFinite =
        Number.isFinite ||
        function (x) {
          return typeof x === 'number' && isFinite(x)
        }

      /// <reference lib="es2015.core" />
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill
      const MathTrunc =
        Math.trunc ||
        function (v) {
          return v < 0 ? Math.ceil(v) : Math.floor(v)
        }

      // https://heycam.github.io/webidl/#idl-dictionaries
      function isDictionary(x) {
        return typeof x === 'object' || typeof x === 'function'
      }
      function assertDictionary(obj, context) {
        if (obj !== undefined && !isDictionary(obj)) {
          throw new TypeError(`${context} is not an object.`)
        }
      }
      // https://heycam.github.io/webidl/#idl-callback-functions
      function assertFunction(x, context) {
        if (typeof x !== 'function') {
          throw new TypeError(`${context} is not a function.`)
        }
      }
      // https://heycam.github.io/webidl/#idl-object
      function isObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function'
      }
      function assertObject(x, context) {
        if (!isObject(x)) {
          throw new TypeError(`${context} is not an object.`)
        }
      }
      function assertRequiredArgument(x, position, context) {
        if (x === undefined) {
          throw new TypeError(
            `Parameter ${position} is required in '${context}'.`
          )
        }
      }
      function assertRequiredField(x, field, context) {
        if (x === undefined) {
          throw new TypeError(`${field} is required in '${context}'.`)
        }
      }
      // https://heycam.github.io/webidl/#idl-unrestricted-double
      function convertUnrestrictedDouble(value) {
        return Number(value)
      }
      function censorNegativeZero(x) {
        return x === 0 ? 0 : x
      }
      function integerPart(x) {
        return censorNegativeZero(MathTrunc(x))
      }
      // https://heycam.github.io/webidl/#idl-unsigned-long-long
      function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0
        const upperBound = Number.MAX_SAFE_INTEGER
        let x = Number(value)
        x = censorNegativeZero(x)
        if (!NumberIsFinite(x)) {
          throw new TypeError(`${context} is not a finite number`)
        }
        x = integerPart(x)
        if (x < lowerBound || x > upperBound) {
          throw new TypeError(
            `${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`
          )
        }
        if (!NumberIsFinite(x) || x === 0) {
          return 0
        }
        // TODO Use BigInt if supported?
        // let xBigInt = BigInt(integerPart(x));
        // xBigInt = BigInt.asUintN(64, xBigInt);
        // return Number(xBigInt);
        return x
      }

      function assertReadableStream(x, context) {
        if (!IsReadableStream(x)) {
          throw new TypeError(`${context} is not a ReadableStream.`)
        }
      }

      // Abstract operations for the ReadableStream.
      function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream)
      }
      // ReadableStream API exposed for controllers.
      function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest)
      }
      function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader
        const readRequest = reader._readRequests.shift()
        if (done) {
          readRequest._closeSteps()
        } else {
          readRequest._chunkSteps(chunk)
        }
      }
      function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length
      }
      function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader
        if (reader === undefined) {
          return false
        }
        if (!IsReadableStreamDefaultReader(reader)) {
          return false
        }
        return true
      }
      /**
       * A default reader vended by a {@link ReadableStream}.
       *
       * @public
       */
      class ReadableStreamDefaultReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader')
          assertReadableStream(stream, 'First parameter')
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError(
              'This stream has already been locked for exclusive reading by another reader'
            )
          }
          ReadableStreamReaderGenericInitialize(this, stream)
          this._readRequests = new SimpleQueue()
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(
              defaultReaderBrandCheckException('closed')
            )
          }
          return this._closedPromise
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(
              defaultReaderBrandCheckException('cancel')
            )
          }
          if (this._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('cancel'))
          }
          return ReadableStreamReaderGenericCancel(this, reason)
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException('read'))
          }
          if (this._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('read from'))
          }
          let resolvePromise
          let rejectPromise
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve
            rejectPromise = reject
          })
          const readRequest = {
            _chunkSteps: (chunk) =>
              resolvePromise({ value: chunk, done: false }),
            _closeSteps: () => resolvePromise({ value: undefined, done: true }),
            _errorSteps: (e) => rejectPromise(e)
          }
          ReadableStreamDefaultReaderRead(this, readRequest)
          return promise
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamDefaultReader(this)) {
            throw defaultReaderBrandCheckException('releaseLock')
          }
          if (this._ownerReadableStream === undefined) {
            return
          }
          if (this._readRequests.length > 0) {
            throw new TypeError(
              'Tried to release a reader lock when that reader has pending read() calls un-settled'
            )
          }
          ReadableStreamReaderGenericRelease(this)
        }
      }
      Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableStreamDefaultReader.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableStreamDefaultReader',
            configurable: true
          }
        )
      }
      // Abstract operations for the readers.
      function IsReadableStreamDefaultReader(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {
          return false
        }
        return x instanceof ReadableStreamDefaultReader
      }
      function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream
        stream._disturbed = true
        if (stream._state === 'closed') {
          readRequest._closeSteps()
        } else if (stream._state === 'errored') {
          readRequest._errorSteps(stream._storedError)
        } else {
          stream._readableStreamController[PullSteps](readRequest)
        }
      }
      // Helper functions for the ReadableStreamDefaultReader.
      function defaultReaderBrandCheckException(name) {
        return new TypeError(
          `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`
        )
      }

      /// <reference lib="es2018.asynciterable" />
      /* eslint-disable @typescript-eslint/no-empty-function */
      const AsyncIteratorPrototype = Object.getPrototypeOf(
        Object.getPrototypeOf(async function* () {}).prototype
      )

      /// <reference lib="es2018.asynciterable" />
      class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
          this._ongoingPromise = undefined
          this._isFinished = false
          this._reader = reader
          this._preventCancel = preventCancel
        }
        next() {
          const nextSteps = () => this._nextSteps()
          this._ongoingPromise = this._ongoingPromise
            ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps)
            : nextSteps()
          return this._ongoingPromise
        }
        return(value) {
          const returnSteps = () => this._returnSteps(value)
          return this._ongoingPromise
            ? transformPromiseWith(
                this._ongoingPromise,
                returnSteps,
                returnSteps
              )
            : returnSteps()
        }
        _nextSteps() {
          if (this._isFinished) {
            return Promise.resolve({ value: undefined, done: true })
          }
          const reader = this._reader
          if (reader._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('iterate'))
          }
          let resolvePromise
          let rejectPromise
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve
            rejectPromise = reject
          })
          const readRequest = {
            _chunkSteps: (chunk) => {
              this._ongoingPromise = undefined
              // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.
              // FIXME Is this a bug in the specification, or in the test?
              queueMicrotask(() =>
                resolvePromise({ value: chunk, done: false })
              )
            },
            _closeSteps: () => {
              this._ongoingPromise = undefined
              this._isFinished = true
              ReadableStreamReaderGenericRelease(reader)
              resolvePromise({ value: undefined, done: true })
            },
            _errorSteps: (reason) => {
              this._ongoingPromise = undefined
              this._isFinished = true
              ReadableStreamReaderGenericRelease(reader)
              rejectPromise(reason)
            }
          }
          ReadableStreamDefaultReaderRead(reader, readRequest)
          return promise
        }
        _returnSteps(value) {
          if (this._isFinished) {
            return Promise.resolve({ value, done: true })
          }
          this._isFinished = true
          const reader = this._reader
          if (reader._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('finish iterating'))
          }
          if (!this._preventCancel) {
            const result = ReadableStreamReaderGenericCancel(reader, value)
            ReadableStreamReaderGenericRelease(reader)
            return transformPromiseWith(result, () => ({ value, done: true }))
          }
          ReadableStreamReaderGenericRelease(reader)
          return promiseResolvedWith({ value, done: true })
        }
      }
      const ReadableStreamAsyncIteratorPrototype = {
        next() {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(
              streamAsyncIteratorBrandCheckException('next')
            )
          }
          return this._asyncIteratorImpl.next()
        },
        return(value) {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(
              streamAsyncIteratorBrandCheckException('return')
            )
          }
          return this._asyncIteratorImpl.return(value)
        }
      }
      if (AsyncIteratorPrototype !== undefined) {
        Object.setPrototypeOf(
          ReadableStreamAsyncIteratorPrototype,
          AsyncIteratorPrototype
        )
      }
      // Abstract operations for the ReadableStream.
      function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream)
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel)
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype)
        iterator._asyncIteratorImpl = impl
        return iterator
      }
      function IsReadableStreamAsyncIterator(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {
          return false
        }
        try {
          // noinspection SuspiciousTypeOfGuard
          return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl
        } catch (_a) {
          return false
        }
      }
      // Helper functions for the ReadableStream.
      function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(
          `ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`
        )
      }

      /// <reference lib="es2015.core" />
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill
      const NumberIsNaN =
        Number.isNaN ||
        function (x) {
          // eslint-disable-next-line no-self-compare
          return x !== x
        }

      function CreateArrayFromList(elements) {
        // We use arrays to represent lists, so this is basically a no-op.
        // Do a slice though just in case we happen to depend on the unique-ness.
        return elements.slice()
      }
      function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset)
      }
      // Not implemented correctly
      function TransferArrayBuffer(O) {
        return O
      }
      // Not implemented correctly
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      function IsDetachedBuffer(O) {
        return false
      }
      function ArrayBufferSlice(buffer, begin, end) {
        // ArrayBuffer.prototype.slice is not available on IE10
        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice
        if (buffer.slice) {
          return buffer.slice(begin, end)
        }
        const length = end - begin
        const slice = new ArrayBuffer(length)
        CopyDataBlockBytes(slice, 0, buffer, begin, length)
        return slice
      }

      function IsNonNegativeNumber(v) {
        if (typeof v !== 'number') {
          return false
        }
        if (NumberIsNaN(v)) {
          return false
        }
        if (v < 0) {
          return false
        }
        return true
      }
      function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(
          O.buffer,
          O.byteOffset,
          O.byteOffset + O.byteLength
        )
        return new Uint8Array(buffer)
      }

      function DequeueValue(container) {
        const pair = container._queue.shift()
        container._queueTotalSize -= pair.size
        if (container._queueTotalSize < 0) {
          container._queueTotalSize = 0
        }
        return pair.value
      }
      function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
          throw new RangeError(
            'Size must be a finite, non-NaN, non-negative number.'
          )
        }
        container._queue.push({ value, size })
        container._queueTotalSize += size
      }
      function PeekQueueValue(container) {
        const pair = container._queue.peek()
        return pair.value
      }
      function ResetQueue(container) {
        container._queue = new SimpleQueue()
        container._queueTotalSize = 0
      }

      /**
       * A pull-into request in a {@link ReadableByteStreamController}.
       *
       * @public
       */
      class ReadableStreamBYOBRequest {
        constructor() {
          throw new TypeError('Illegal constructor')
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException('view')
          }
          return this._view
        }
        respond(bytesWritten) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException('respond')
          }
          assertRequiredArgument(bytesWritten, 1, 'respond')
          bytesWritten = convertUnsignedLongLongWithEnforceRange(
            bytesWritten,
            'First parameter'
          )
          if (this._associatedReadableByteStreamController === undefined) {
            throw new TypeError('This BYOB request has been invalidated')
          }
          if (IsDetachedBuffer(this._view.buffer));
          ReadableByteStreamControllerRespond(
            this._associatedReadableByteStreamController,
            bytesWritten
          )
        }
        respondWithNewView(view) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException('respondWithNewView')
          }
          assertRequiredArgument(view, 1, 'respondWithNewView')
          if (!ArrayBuffer.isView(view)) {
            throw new TypeError('You can only respond with array buffer views')
          }
          if (this._associatedReadableByteStreamController === undefined) {
            throw new TypeError('This BYOB request has been invalidated')
          }
          if (IsDetachedBuffer(view.buffer));
          ReadableByteStreamControllerRespondWithNewView(
            this._associatedReadableByteStreamController,
            view
          )
        }
      }
      Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableStreamBYOBRequest.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableStreamBYOBRequest',
            configurable: true
          }
        )
      }
      /**
       * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.
       *
       * @public
       */
      class ReadableByteStreamController {
        constructor() {
          throw new TypeError('Illegal constructor')
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException('byobRequest')
          }
          return ReadableByteStreamControllerGetBYOBRequest(this)
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException('desiredSize')
          }
          return ReadableByteStreamControllerGetDesiredSize(this)
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException('close')
          }
          if (this._closeRequested) {
            throw new TypeError(
              'The stream has already been closed; do not close it again!'
            )
          }
          const state = this._controlledReadableByteStream._state
          if (state !== 'readable') {
            throw new TypeError(
              `The stream (in ${state} state) is not in the readable state and cannot be closed`
            )
          }
          ReadableByteStreamControllerClose(this)
        }
        enqueue(chunk) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException('enqueue')
          }
          assertRequiredArgument(chunk, 1, 'enqueue')
          if (!ArrayBuffer.isView(chunk)) {
            throw new TypeError('chunk must be an array buffer view')
          }
          if (chunk.byteLength === 0) {
            throw new TypeError('chunk must have non-zero byteLength')
          }
          if (chunk.buffer.byteLength === 0) {
            throw new TypeError(`chunk's buffer must have non-zero byteLength`)
          }
          if (this._closeRequested) {
            throw new TypeError('stream is closed or draining')
          }
          const state = this._controlledReadableByteStream._state
          if (state !== 'readable') {
            throw new TypeError(
              `The stream (in ${state} state) is not in the readable state and cannot be enqueued to`
            )
          }
          ReadableByteStreamControllerEnqueue(this, chunk)
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException('error')
          }
          ReadableByteStreamControllerError(this, e)
        }
        /** @internal */
        [CancelSteps](reason) {
          ReadableByteStreamControllerClearPendingPullIntos(this)
          ResetQueue(this)
          const result = this._cancelAlgorithm(reason)
          ReadableByteStreamControllerClearAlgorithms(this)
          return result
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableByteStream
          if (this._queueTotalSize > 0) {
            const entry = this._queue.shift()
            this._queueTotalSize -= entry.byteLength
            ReadableByteStreamControllerHandleQueueDrain(this)
            const view = new Uint8Array(
              entry.buffer,
              entry.byteOffset,
              entry.byteLength
            )
            readRequest._chunkSteps(view)
            return
          }
          const autoAllocateChunkSize = this._autoAllocateChunkSize
          if (autoAllocateChunkSize !== undefined) {
            let buffer
            try {
              buffer = new ArrayBuffer(autoAllocateChunkSize)
            } catch (bufferE) {
              readRequest._errorSteps(bufferE)
              return
            }
            const pullIntoDescriptor = {
              buffer,
              bufferByteLength: autoAllocateChunkSize,
              byteOffset: 0,
              byteLength: autoAllocateChunkSize,
              bytesFilled: 0,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: 'default'
            }
            this._pendingPullIntos.push(pullIntoDescriptor)
          }
          ReadableStreamAddReadRequest(stream, readRequest)
          ReadableByteStreamControllerCallPullIfNeeded(this)
        }
      }
      Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableByteStreamController.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableByteStreamController',
            configurable: true
          }
        )
      }
      // Abstract operations for the ReadableByteStreamController.
      function IsReadableByteStreamController(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(
            x,
            '_controlledReadableByteStream'
          )
        ) {
          return false
        }
        return x instanceof ReadableByteStreamController
      }
      function IsReadableStreamBYOBRequest(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(
            x,
            '_associatedReadableByteStreamController'
          )
        ) {
          return false
        }
        return x instanceof ReadableStreamBYOBRequest
      }
      function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull =
          ReadableByteStreamControllerShouldCallPull(controller)
        if (!shouldPull) {
          return
        }
        if (controller._pulling) {
          controller._pullAgain = true
          return
        }
        controller._pulling = true
        // TODO: Test controller argument
        const pullPromise = controller._pullAlgorithm()
        uponPromise(
          pullPromise,
          () => {
            controller._pulling = false
            if (controller._pullAgain) {
              controller._pullAgain = false
              ReadableByteStreamControllerCallPullIfNeeded(controller)
            }
          },
          (e) => {
            ReadableByteStreamControllerError(controller, e)
          }
        )
      }
      function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller)
        controller._pendingPullIntos = new SimpleQueue()
      }
      function ReadableByteStreamControllerCommitPullIntoDescriptor(
        stream,
        pullIntoDescriptor
      ) {
        let done = false
        if (stream._state === 'closed') {
          done = true
        }
        const filledView =
          ReadableByteStreamControllerConvertPullIntoDescriptor(
            pullIntoDescriptor
          )
        if (pullIntoDescriptor.readerType === 'default') {
          ReadableStreamFulfillReadRequest(stream, filledView, done)
        } else {
          ReadableStreamFulfillReadIntoRequest(stream, filledView, done)
        }
      }
      function ReadableByteStreamControllerConvertPullIntoDescriptor(
        pullIntoDescriptor
      ) {
        const bytesFilled = pullIntoDescriptor.bytesFilled
        const elementSize = pullIntoDescriptor.elementSize
        return new pullIntoDescriptor.viewConstructor(
          pullIntoDescriptor.buffer,
          pullIntoDescriptor.byteOffset,
          bytesFilled / elementSize
        )
      }
      function ReadableByteStreamControllerEnqueueChunkToQueue(
        controller,
        buffer,
        byteOffset,
        byteLength
      ) {
        controller._queue.push({ buffer, byteOffset, byteLength })
        controller._queueTotalSize += byteLength
      }
      function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
        controller,
        pullIntoDescriptor
      ) {
        const elementSize = pullIntoDescriptor.elementSize
        const currentAlignedBytes =
          pullIntoDescriptor.bytesFilled -
          (pullIntoDescriptor.bytesFilled % elementSize)
        const maxBytesToCopy = Math.min(
          controller._queueTotalSize,
          pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled
        )
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy
        const maxAlignedBytes = maxBytesFilled - (maxBytesFilled % elementSize)
        let totalBytesToCopyRemaining = maxBytesToCopy
        let ready = false
        if (maxAlignedBytes > currentAlignedBytes) {
          totalBytesToCopyRemaining =
            maxAlignedBytes - pullIntoDescriptor.bytesFilled
          ready = true
        }
        const queue = controller._queue
        while (totalBytesToCopyRemaining > 0) {
          const headOfQueue = queue.peek()
          const bytesToCopy = Math.min(
            totalBytesToCopyRemaining,
            headOfQueue.byteLength
          )
          const destStart =
            pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled
          CopyDataBlockBytes(
            pullIntoDescriptor.buffer,
            destStart,
            headOfQueue.buffer,
            headOfQueue.byteOffset,
            bytesToCopy
          )
          if (headOfQueue.byteLength === bytesToCopy) {
            queue.shift()
          } else {
            headOfQueue.byteOffset += bytesToCopy
            headOfQueue.byteLength -= bytesToCopy
          }
          controller._queueTotalSize -= bytesToCopy
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(
            controller,
            bytesToCopy,
            pullIntoDescriptor
          )
          totalBytesToCopyRemaining -= bytesToCopy
        }
        return ready
      }
      function ReadableByteStreamControllerFillHeadPullIntoDescriptor(
        controller,
        size,
        pullIntoDescriptor
      ) {
        pullIntoDescriptor.bytesFilled += size
      }
      function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
          ReadableByteStreamControllerClearAlgorithms(controller)
          ReadableStreamClose(controller._controlledReadableByteStream)
        } else {
          ReadableByteStreamControllerCallPullIfNeeded(controller)
        }
      }
      function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
          return
        }
        controller._byobRequest._associatedReadableByteStreamController =
          undefined
        controller._byobRequest._view = null
        controller._byobRequest = null
      }
      function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(
        controller
      ) {
        while (controller._pendingPullIntos.length > 0) {
          if (controller._queueTotalSize === 0) {
            return
          }
          const pullIntoDescriptor = controller._pendingPullIntos.peek()
          if (
            ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
              controller,
              pullIntoDescriptor
            )
          ) {
            ReadableByteStreamControllerShiftPendingPullInto(controller)
            ReadableByteStreamControllerCommitPullIntoDescriptor(
              controller._controlledReadableByteStream,
              pullIntoDescriptor
            )
          }
        }
      }
      function ReadableByteStreamControllerPullInto(
        controller,
        view,
        readIntoRequest
      ) {
        const stream = controller._controlledReadableByteStream
        let elementSize = 1
        if (view.constructor !== DataView) {
          elementSize = view.constructor.BYTES_PER_ELEMENT
        }
        const ctor = view.constructor
        // try {
        const buffer = TransferArrayBuffer(view.buffer)
        // } catch (e) {
        //   readIntoRequest._errorSteps(e);
        //   return;
        // }
        const pullIntoDescriptor = {
          buffer,
          bufferByteLength: buffer.byteLength,
          byteOffset: view.byteOffset,
          byteLength: view.byteLength,
          bytesFilled: 0,
          elementSize,
          viewConstructor: ctor,
          readerType: 'byob'
        }
        if (controller._pendingPullIntos.length > 0) {
          controller._pendingPullIntos.push(pullIntoDescriptor)
          // No ReadableByteStreamControllerCallPullIfNeeded() call since:
          // - No change happens on desiredSize
          // - The source has already been notified of that there's at least 1 pending read(view)
          ReadableStreamAddReadIntoRequest(stream, readIntoRequest)
          return
        }
        if (stream._state === 'closed') {
          const emptyView = new ctor(
            pullIntoDescriptor.buffer,
            pullIntoDescriptor.byteOffset,
            0
          )
          readIntoRequest._closeSteps(emptyView)
          return
        }
        if (controller._queueTotalSize > 0) {
          if (
            ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
              controller,
              pullIntoDescriptor
            )
          ) {
            const filledView =
              ReadableByteStreamControllerConvertPullIntoDescriptor(
                pullIntoDescriptor
              )
            ReadableByteStreamControllerHandleQueueDrain(controller)
            readIntoRequest._chunkSteps(filledView)
            return
          }
          if (controller._closeRequested) {
            const e = new TypeError(
              'Insufficient bytes to fill elements in the given buffer'
            )
            ReadableByteStreamControllerError(controller, e)
            readIntoRequest._errorSteps(e)
            return
          }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor)
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest)
        ReadableByteStreamControllerCallPullIfNeeded(controller)
      }
      function ReadableByteStreamControllerRespondInClosedState(
        controller,
        firstDescriptor
      ) {
        const stream = controller._controlledReadableByteStream
        if (ReadableStreamHasBYOBReader(stream)) {
          while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            const pullIntoDescriptor =
              ReadableByteStreamControllerShiftPendingPullInto(controller)
            ReadableByteStreamControllerCommitPullIntoDescriptor(
              stream,
              pullIntoDescriptor
            )
          }
        }
      }
      function ReadableByteStreamControllerRespondInReadableState(
        controller,
        bytesWritten,
        pullIntoDescriptor
      ) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(
          controller,
          bytesWritten,
          pullIntoDescriptor
        )
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
          return
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller)
        const remainderSize =
          pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize
        if (remainderSize > 0) {
          const end =
            pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled
          const remainder = ArrayBufferSlice(
            pullIntoDescriptor.buffer,
            end - remainderSize,
            end
          )
          ReadableByteStreamControllerEnqueueChunkToQueue(
            controller,
            remainder,
            0,
            remainder.byteLength
          )
        }
        pullIntoDescriptor.bytesFilled -= remainderSize
        ReadableByteStreamControllerCommitPullIntoDescriptor(
          controller._controlledReadableByteStream,
          pullIntoDescriptor
        )
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(
          controller
        )
      }
      function ReadableByteStreamControllerRespondInternal(
        controller,
        bytesWritten
      ) {
        const firstDescriptor = controller._pendingPullIntos.peek()
        ReadableByteStreamControllerInvalidateBYOBRequest(controller)
        const state = controller._controlledReadableByteStream._state
        if (state === 'closed') {
          ReadableByteStreamControllerRespondInClosedState(controller)
        } else {
          ReadableByteStreamControllerRespondInReadableState(
            controller,
            bytesWritten,
            firstDescriptor
          )
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller)
      }
      function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift()
        return descriptor
      }
      function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream
        if (stream._state !== 'readable') {
          return false
        }
        if (controller._closeRequested) {
          return false
        }
        if (!controller._started) {
          return false
        }
        if (
          ReadableStreamHasDefaultReader(stream) &&
          ReadableStreamGetNumReadRequests(stream) > 0
        ) {
          return true
        }
        if (
          ReadableStreamHasBYOBReader(stream) &&
          ReadableStreamGetNumReadIntoRequests(stream) > 0
        ) {
          return true
        }
        const desiredSize =
          ReadableByteStreamControllerGetDesiredSize(controller)
        if (desiredSize > 0) {
          return true
        }
        return false
      }
      function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined
        controller._cancelAlgorithm = undefined
      }
      // A client of ReadableByteStreamController may use these functions directly to bypass state check.
      function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream
        if (controller._closeRequested || stream._state !== 'readable') {
          return
        }
        if (controller._queueTotalSize > 0) {
          controller._closeRequested = true
          return
        }
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek()
          if (firstPendingPullInto.bytesFilled > 0) {
            const e = new TypeError(
              'Insufficient bytes to fill elements in the given buffer'
            )
            ReadableByteStreamControllerError(controller, e)
            throw e
          }
        }
        ReadableByteStreamControllerClearAlgorithms(controller)
        ReadableStreamClose(stream)
      }
      function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream
        if (controller._closeRequested || stream._state !== 'readable') {
          return
        }
        const buffer = chunk.buffer
        const byteOffset = chunk.byteOffset
        const byteLength = chunk.byteLength
        const transferredBuffer = TransferArrayBuffer(buffer)
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek()
          if (IsDetachedBuffer(firstPendingPullInto.buffer));
          firstPendingPullInto.buffer = TransferArrayBuffer(
            firstPendingPullInto.buffer
          )
        }
        ReadableByteStreamControllerInvalidateBYOBRequest(controller)
        if (ReadableStreamHasDefaultReader(stream)) {
          if (ReadableStreamGetNumReadRequests(stream) === 0) {
            ReadableByteStreamControllerEnqueueChunkToQueue(
              controller,
              transferredBuffer,
              byteOffset,
              byteLength
            )
          } else {
            if (controller._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerShiftPendingPullInto(controller)
            }
            const transferredView = new Uint8Array(
              transferredBuffer,
              byteOffset,
              byteLength
            )
            ReadableStreamFulfillReadRequest(stream, transferredView, false)
          }
        } else if (ReadableStreamHasBYOBReader(stream)) {
          // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.
          ReadableByteStreamControllerEnqueueChunkToQueue(
            controller,
            transferredBuffer,
            byteOffset,
            byteLength
          )
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(
            controller
          )
        } else {
          ReadableByteStreamControllerEnqueueChunkToQueue(
            controller,
            transferredBuffer,
            byteOffset,
            byteLength
          )
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller)
      }
      function ReadableByteStreamControllerError(controller, e) {
        const stream = controller._controlledReadableByteStream
        if (stream._state !== 'readable') {
          return
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller)
        ResetQueue(controller)
        ReadableByteStreamControllerClearAlgorithms(controller)
        ReadableStreamError(stream, e)
      }
      function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (
          controller._byobRequest === null &&
          controller._pendingPullIntos.length > 0
        ) {
          const firstDescriptor = controller._pendingPullIntos.peek()
          const view = new Uint8Array(
            firstDescriptor.buffer,
            firstDescriptor.byteOffset + firstDescriptor.bytesFilled,
            firstDescriptor.byteLength - firstDescriptor.bytesFilled
          )
          const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype)
          SetUpReadableStreamBYOBRequest(byobRequest, controller, view)
          controller._byobRequest = byobRequest
        }
        return controller._byobRequest
      }
      function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state
        if (state === 'errored') {
          return null
        }
        if (state === 'closed') {
          return 0
        }
        return controller._strategyHWM - controller._queueTotalSize
      }
      function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek()
        const state = controller._controlledReadableByteStream._state
        if (state === 'closed') {
          if (bytesWritten !== 0) {
            throw new TypeError(
              'bytesWritten must be 0 when calling respond() on a closed stream'
            )
          }
        } else {
          if (bytesWritten === 0) {
            throw new TypeError(
              'bytesWritten must be greater than 0 when calling respond() on a readable stream'
            )
          }
          if (
            firstDescriptor.bytesFilled + bytesWritten >
            firstDescriptor.byteLength
          ) {
            throw new RangeError('bytesWritten out of range')
          }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer)
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten)
      }
      function ReadableByteStreamControllerRespondWithNewView(
        controller,
        view
      ) {
        const firstDescriptor = controller._pendingPullIntos.peek()
        const state = controller._controlledReadableByteStream._state
        if (state === 'closed') {
          if (view.byteLength !== 0) {
            throw new TypeError(
              "The view's length must be 0 when calling respondWithNewView() on a closed stream"
            )
          }
        } else {
          if (view.byteLength === 0) {
            throw new TypeError(
              "The view's length must be greater than 0 when calling respondWithNewView() on a readable stream"
            )
          }
        }
        if (
          firstDescriptor.byteOffset + firstDescriptor.bytesFilled !==
          view.byteOffset
        ) {
          throw new RangeError(
            'The region specified by view does not match byobRequest'
          )
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
          throw new RangeError(
            'The buffer of view has different capacity than byobRequest'
          )
        }
        if (
          firstDescriptor.bytesFilled + view.byteLength >
          firstDescriptor.byteLength
        ) {
          throw new RangeError(
            'The region specified by view is larger than byobRequest'
          )
        }
        const viewByteLength = view.byteLength
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer)
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength)
      }
      function SetUpReadableByteStreamController(
        stream,
        controller,
        startAlgorithm,
        pullAlgorithm,
        cancelAlgorithm,
        highWaterMark,
        autoAllocateChunkSize
      ) {
        controller._controlledReadableByteStream = stream
        controller._pullAgain = false
        controller._pulling = false
        controller._byobRequest = null
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = controller._queueTotalSize = undefined
        ResetQueue(controller)
        controller._closeRequested = false
        controller._started = false
        controller._strategyHWM = highWaterMark
        controller._pullAlgorithm = pullAlgorithm
        controller._cancelAlgorithm = cancelAlgorithm
        controller._autoAllocateChunkSize = autoAllocateChunkSize
        controller._pendingPullIntos = new SimpleQueue()
        stream._readableStreamController = controller
        const startResult = startAlgorithm()
        uponPromise(
          promiseResolvedWith(startResult),
          () => {
            controller._started = true
            ReadableByteStreamControllerCallPullIfNeeded(controller)
          },
          (r) => {
            ReadableByteStreamControllerError(controller, r)
          }
        )
      }
      function SetUpReadableByteStreamControllerFromUnderlyingSource(
        stream,
        underlyingByteSource,
        highWaterMark
      ) {
        const controller = Object.create(ReadableByteStreamController.prototype)
        let startAlgorithm = () => undefined
        let pullAlgorithm = () => promiseResolvedWith(undefined)
        let cancelAlgorithm = () => promiseResolvedWith(undefined)
        if (underlyingByteSource.start !== undefined) {
          startAlgorithm = () => underlyingByteSource.start(controller)
        }
        if (underlyingByteSource.pull !== undefined) {
          pullAlgorithm = () => underlyingByteSource.pull(controller)
        }
        if (underlyingByteSource.cancel !== undefined) {
          cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason)
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize
        if (autoAllocateChunkSize === 0) {
          throw new TypeError('autoAllocateChunkSize must be greater than 0')
        }
        SetUpReadableByteStreamController(
          stream,
          controller,
          startAlgorithm,
          pullAlgorithm,
          cancelAlgorithm,
          highWaterMark,
          autoAllocateChunkSize
        )
      }
      function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller
        request._view = view
      }
      // Helper functions for the ReadableStreamBYOBRequest.
      function byobRequestBrandCheckException(name) {
        return new TypeError(
          `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`
        )
      }
      // Helper functions for the ReadableByteStreamController.
      function byteStreamControllerBrandCheckException(name) {
        return new TypeError(
          `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`
        )
      }

      // Abstract operations for the ReadableStream.
      function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream)
      }
      // ReadableStream API exposed for controllers.
      function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest)
      }
      function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader
        const readIntoRequest = reader._readIntoRequests.shift()
        if (done) {
          readIntoRequest._closeSteps(chunk)
        } else {
          readIntoRequest._chunkSteps(chunk)
        }
      }
      function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length
      }
      function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader
        if (reader === undefined) {
          return false
        }
        if (!IsReadableStreamBYOBReader(reader)) {
          return false
        }
        return true
      }
      /**
       * A BYOB reader vended by a {@link ReadableStream}.
       *
       * @public
       */
      class ReadableStreamBYOBReader {
        constructor(stream) {
          assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader')
          assertReadableStream(stream, 'First parameter')
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError(
              'This stream has already been locked for exclusive reading by another reader'
            )
          }
          if (
            !IsReadableByteStreamController(stream._readableStreamController)
          ) {
            throw new TypeError(
              'Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +
                'source'
            )
          }
          ReadableStreamReaderGenericInitialize(this, stream)
          this._readIntoRequests = new SimpleQueue()
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException('closed'))
          }
          return this._closedPromise
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException('cancel'))
          }
          if (this._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('cancel'))
          }
          return ReadableStreamReaderGenericCancel(this, reason)
        }
        /**
         * Attempts to reads bytes into view, and returns a promise resolved with the result.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read(view) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException('read'))
          }
          if (!ArrayBuffer.isView(view)) {
            return promiseRejectedWith(
              new TypeError('view must be an array buffer view')
            )
          }
          if (view.byteLength === 0) {
            return promiseRejectedWith(
              new TypeError('view must have non-zero byteLength')
            )
          }
          if (view.buffer.byteLength === 0) {
            return promiseRejectedWith(
              new TypeError(`view's buffer must have non-zero byteLength`)
            )
          }
          if (IsDetachedBuffer(view.buffer));
          if (this._ownerReadableStream === undefined) {
            return promiseRejectedWith(readerLockException('read from'))
          }
          let resolvePromise
          let rejectPromise
          const promise = newPromise((resolve, reject) => {
            resolvePromise = resolve
            rejectPromise = reject
          })
          const readIntoRequest = {
            _chunkSteps: (chunk) =>
              resolvePromise({ value: chunk, done: false }),
            _closeSteps: (chunk) =>
              resolvePromise({ value: chunk, done: true }),
            _errorSteps: (e) => rejectPromise(e)
          }
          ReadableStreamBYOBReaderRead(this, view, readIntoRequest)
          return promise
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamBYOBReader(this)) {
            throw byobReaderBrandCheckException('releaseLock')
          }
          if (this._ownerReadableStream === undefined) {
            return
          }
          if (this._readIntoRequests.length > 0) {
            throw new TypeError(
              'Tried to release a reader lock when that reader has pending read() calls un-settled'
            )
          }
          ReadableStreamReaderGenericRelease(this)
        }
      }
      Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableStreamBYOBReader.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableStreamBYOBReader',
            configurable: true
          }
        )
      }
      // Abstract operations for the readers.
      function IsReadableStreamBYOBReader(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {
          return false
        }
        return x instanceof ReadableStreamBYOBReader
      }
      function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
        const stream = reader._ownerReadableStream
        stream._disturbed = true
        if (stream._state === 'errored') {
          readIntoRequest._errorSteps(stream._storedError)
        } else {
          ReadableByteStreamControllerPullInto(
            stream._readableStreamController,
            view,
            readIntoRequest
          )
        }
      }
      // Helper functions for the ReadableStreamBYOBReader.
      function byobReaderBrandCheckException(name) {
        return new TypeError(
          `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`
        )
      }

      function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy
        if (highWaterMark === undefined) {
          return defaultHWM
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
          throw new RangeError('Invalid highWaterMark')
        }
        return highWaterMark
      }
      function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy
        if (!size) {
          return () => 1
        }
        return size
      }

      function convertQueuingStrategy(init, context) {
        assertDictionary(init, context)
        const highWaterMark =
          init === null || init === void 0 ? void 0 : init.highWaterMark
        const size = init === null || init === void 0 ? void 0 : init.size
        return {
          highWaterMark:
            highWaterMark === undefined
              ? undefined
              : convertUnrestrictedDouble(highWaterMark),
          size:
            size === undefined
              ? undefined
              : convertQueuingStrategySize(
                  size,
                  `${context} has member 'size' that`
                )
        }
      }
      function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context)
        return (chunk) => convertUnrestrictedDouble(fn(chunk))
      }

      function convertUnderlyingSink(original, context) {
        assertDictionary(original, context)
        const abort =
          original === null || original === void 0 ? void 0 : original.abort
        const close =
          original === null || original === void 0 ? void 0 : original.close
        const start =
          original === null || original === void 0 ? void 0 : original.start
        const type =
          original === null || original === void 0 ? void 0 : original.type
        const write =
          original === null || original === void 0 ? void 0 : original.write
        return {
          abort:
            abort === undefined
              ? undefined
              : convertUnderlyingSinkAbortCallback(
                  abort,
                  original,
                  `${context} has member 'abort' that`
                ),
          close:
            close === undefined
              ? undefined
              : convertUnderlyingSinkCloseCallback(
                  close,
                  original,
                  `${context} has member 'close' that`
                ),
          start:
            start === undefined
              ? undefined
              : convertUnderlyingSinkStartCallback(
                  start,
                  original,
                  `${context} has member 'start' that`
                ),
          write:
            write === undefined
              ? undefined
              : convertUnderlyingSinkWriteCallback(
                  write,
                  original,
                  `${context} has member 'write' that`
                ),
          type
        }
      }
      function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context)
        return (reason) => promiseCall(fn, original, [reason])
      }
      function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context)
        return () => promiseCall(fn, original, [])
      }
      function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context)
        return (controller) => reflectCall(fn, original, [controller])
      }
      function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context)
        return (chunk, controller) =>
          promiseCall(fn, original, [chunk, controller])
      }

      function assertWritableStream(x, context) {
        if (!IsWritableStream(x)) {
          throw new TypeError(`${context} is not a WritableStream.`)
        }
      }

      function isAbortSignal(value) {
        if (typeof value !== 'object' || value === null) {
          return false
        }
        try {
          return typeof value.aborted === 'boolean'
        } catch (_a) {
          // AbortSignal.prototype.aborted throws if its brand check fails
          return false
        }
      }
      const supportsAbortController = typeof AbortController === 'function'
      /**
       * Construct a new AbortController, if supported by the platform.
       *
       * @internal
       */
      function createAbortController() {
        if (supportsAbortController) {
          return new AbortController()
        }
        return undefined
      }

      /**
       * A writable stream represents a destination for data, into which you can write.
       *
       * @public
       */
      class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
          if (rawUnderlyingSink === undefined) {
            rawUnderlyingSink = null
          } else {
            assertObject(rawUnderlyingSink, 'First parameter')
          }
          const strategy = convertQueuingStrategy(
            rawStrategy,
            'Second parameter'
          )
          const underlyingSink = convertUnderlyingSink(
            rawUnderlyingSink,
            'First parameter'
          )
          InitializeWritableStream(this)
          const type = underlyingSink.type
          if (type !== undefined) {
            throw new RangeError('Invalid type is specified')
          }
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy)
          const highWaterMark = ExtractHighWaterMark(strategy, 1)
          SetUpWritableStreamDefaultControllerFromUnderlyingSink(
            this,
            underlyingSink,
            highWaterMark,
            sizeAlgorithm
          )
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2('locked')
          }
          return IsWritableStreamLocked(this)
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = undefined) {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2('abort'))
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(
              new TypeError('Cannot abort a stream that already has a writer')
            )
          }
          return WritableStreamAbort(this, reason)
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2('close'))
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(
              new TypeError('Cannot close a stream that already has a writer')
            )
          }
          if (WritableStreamCloseQueuedOrInFlight(this)) {
            return promiseRejectedWith(
              new TypeError('Cannot close an already-closing stream')
            )
          }
          return WritableStreamClose(this)
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2('getWriter')
          }
          return AcquireWritableStreamDefaultWriter(this)
        }
      }
      Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          WritableStream.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'WritableStream',
            configurable: true
          }
        )
      }
      // Abstract operations for the WritableStream.
      function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream)
      }
      // Throws if and only if startAlgorithm throws.
      function CreateWritableStream(
        startAlgorithm,
        writeAlgorithm,
        closeAlgorithm,
        abortAlgorithm,
        highWaterMark = 1,
        sizeAlgorithm = () => 1
      ) {
        const stream = Object.create(WritableStream.prototype)
        InitializeWritableStream(stream)
        const controller = Object.create(
          WritableStreamDefaultController.prototype
        )
        SetUpWritableStreamDefaultController(
          stream,
          controller,
          startAlgorithm,
          writeAlgorithm,
          closeAlgorithm,
          abortAlgorithm,
          highWaterMark,
          sizeAlgorithm
        )
        return stream
      }
      function InitializeWritableStream(stream) {
        stream._state = 'writable'
        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is
        // 'erroring' or 'errored'. May be set to an undefined value.
        stream._storedError = undefined
        stream._writer = undefined
        // Initialize to undefined first because the constructor of the controller checks this
        // variable to validate the caller.
        stream._writableStreamController = undefined
        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data
        // producer without waiting for the queued writes to finish.
        stream._writeRequests = new SimpleQueue()
        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents
        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.
        stream._inFlightWriteRequest = undefined
        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer
        // has been detached.
        stream._closeRequest = undefined
        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it
        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.
        stream._inFlightCloseRequest = undefined
        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.
        stream._pendingAbortRequest = undefined
        // The backpressure signal set by the controller.
        stream._backpressure = false
      }
      function IsWritableStream(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_writableStreamController')
        ) {
          return false
        }
        return x instanceof WritableStream
      }
      function IsWritableStreamLocked(stream) {
        if (stream._writer === undefined) {
          return false
        }
        return true
      }
      function WritableStreamAbort(stream, reason) {
        var _a
        if (stream._state === 'closed' || stream._state === 'errored') {
          return promiseResolvedWith(undefined)
        }
        stream._writableStreamController._abortReason = reason
        ;(_a = stream._writableStreamController._abortController) === null ||
        _a === void 0
          ? void 0
          : _a.abort()
        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',
        // but it doesn't know that signaling abort runs author code that might have changed the state.
        // Widen the type again by casting to WritableStreamState.
        const state = stream._state
        if (state === 'closed' || state === 'errored') {
          return promiseResolvedWith(undefined)
        }
        if (stream._pendingAbortRequest !== undefined) {
          return stream._pendingAbortRequest._promise
        }
        let wasAlreadyErroring = false
        if (state === 'erroring') {
          wasAlreadyErroring = true
          // reason will not be used, so don't keep a reference to it.
          reason = undefined
        }
        const promise = newPromise((resolve, reject) => {
          stream._pendingAbortRequest = {
            _promise: undefined,
            _resolve: resolve,
            _reject: reject,
            _reason: reason,
            _wasAlreadyErroring: wasAlreadyErroring
          }
        })
        stream._pendingAbortRequest._promise = promise
        if (!wasAlreadyErroring) {
          WritableStreamStartErroring(stream, reason)
        }
        return promise
      }
      function WritableStreamClose(stream) {
        const state = stream._state
        if (state === 'closed' || state === 'errored') {
          return promiseRejectedWith(
            new TypeError(
              `The stream (in ${state} state) is not in the writable state and cannot be closed`
            )
          )
        }
        const promise = newPromise((resolve, reject) => {
          const closeRequest = {
            _resolve: resolve,
            _reject: reject
          }
          stream._closeRequest = closeRequest
        })
        const writer = stream._writer
        if (
          writer !== undefined &&
          stream._backpressure &&
          state === 'writable'
        ) {
          defaultWriterReadyPromiseResolve(writer)
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController)
        return promise
      }
      // WritableStream API exposed for controllers.
      function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
          const writeRequest = {
            _resolve: resolve,
            _reject: reject
          }
          stream._writeRequests.push(writeRequest)
        })
        return promise
      }
      function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state
        if (state === 'writable') {
          WritableStreamStartErroring(stream, error)
          return
        }
        WritableStreamFinishErroring(stream)
      }
      function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController
        stream._state = 'erroring'
        stream._storedError = reason
        const writer = stream._writer
        if (writer !== undefined) {
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason)
        }
        if (
          !WritableStreamHasOperationMarkedInFlight(stream) &&
          controller._started
        ) {
          WritableStreamFinishErroring(stream)
        }
      }
      function WritableStreamFinishErroring(stream) {
        stream._state = 'errored'
        stream._writableStreamController[ErrorSteps]()
        const storedError = stream._storedError
        stream._writeRequests.forEach((writeRequest) => {
          writeRequest._reject(storedError)
        })
        stream._writeRequests = new SimpleQueue()
        if (stream._pendingAbortRequest === undefined) {
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)
          return
        }
        const abortRequest = stream._pendingAbortRequest
        stream._pendingAbortRequest = undefined
        if (abortRequest._wasAlreadyErroring) {
          abortRequest._reject(storedError)
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)
          return
        }
        const promise = stream._writableStreamController[AbortSteps](
          abortRequest._reason
        )
        uponPromise(
          promise,
          () => {
            abortRequest._resolve()
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)
          },
          (reason) => {
            abortRequest._reject(reason)
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream)
          }
        )
      }
      function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(undefined)
        stream._inFlightWriteRequest = undefined
      }
      function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error)
        stream._inFlightWriteRequest = undefined
        WritableStreamDealWithRejection(stream, error)
      }
      function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(undefined)
        stream._inFlightCloseRequest = undefined
        const state = stream._state
        if (state === 'erroring') {
          // The error was too late to do anything, so it is ignored.
          stream._storedError = undefined
          if (stream._pendingAbortRequest !== undefined) {
            stream._pendingAbortRequest._resolve()
            stream._pendingAbortRequest = undefined
          }
        }
        stream._state = 'closed'
        const writer = stream._writer
        if (writer !== undefined) {
          defaultWriterClosedPromiseResolve(writer)
        }
      }
      function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error)
        stream._inFlightCloseRequest = undefined
        // Never execute sink abort() after sink close().
        if (stream._pendingAbortRequest !== undefined) {
          stream._pendingAbortRequest._reject(error)
          stream._pendingAbortRequest = undefined
        }
        WritableStreamDealWithRejection(stream, error)
      }
      // TODO(ricea): Fix alphabetical order.
      function WritableStreamCloseQueuedOrInFlight(stream) {
        if (
          stream._closeRequest === undefined &&
          stream._inFlightCloseRequest === undefined
        ) {
          return false
        }
        return true
      }
      function WritableStreamHasOperationMarkedInFlight(stream) {
        if (
          stream._inFlightWriteRequest === undefined &&
          stream._inFlightCloseRequest === undefined
        ) {
          return false
        }
        return true
      }
      function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest
        stream._closeRequest = undefined
      }
      function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift()
      }
      function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== undefined) {
          stream._closeRequest._reject(stream._storedError)
          stream._closeRequest = undefined
        }
        const writer = stream._writer
        if (writer !== undefined) {
          defaultWriterClosedPromiseReject(writer, stream._storedError)
        }
      }
      function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer
        if (writer !== undefined && backpressure !== stream._backpressure) {
          if (backpressure) {
            defaultWriterReadyPromiseReset(writer)
          } else {
            defaultWriterReadyPromiseResolve(writer)
          }
        }
        stream._backpressure = backpressure
      }
      /**
       * A default writer vended by a {@link WritableStream}.
       *
       * @public
       */
      class WritableStreamDefaultWriter {
        constructor(stream) {
          assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter')
          assertWritableStream(stream, 'First parameter')
          if (IsWritableStreamLocked(stream)) {
            throw new TypeError(
              'This stream has already been locked for exclusive writing by another writer'
            )
          }
          this._ownerWritableStream = stream
          stream._writer = this
          const state = stream._state
          if (state === 'writable') {
            if (
              !WritableStreamCloseQueuedOrInFlight(stream) &&
              stream._backpressure
            ) {
              defaultWriterReadyPromiseInitialize(this)
            } else {
              defaultWriterReadyPromiseInitializeAsResolved(this)
            }
            defaultWriterClosedPromiseInitialize(this)
          } else if (state === 'erroring') {
            defaultWriterReadyPromiseInitializeAsRejected(
              this,
              stream._storedError
            )
            defaultWriterClosedPromiseInitialize(this)
          } else if (state === 'closed') {
            defaultWriterReadyPromiseInitializeAsResolved(this)
            defaultWriterClosedPromiseInitializeAsResolved(this)
          } else {
            const storedError = stream._storedError
            defaultWriterReadyPromiseInitializeAsRejected(this, storedError)
            defaultWriterClosedPromiseInitializeAsRejected(this, storedError)
          }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(
              defaultWriterBrandCheckException('closed')
            )
          }
          return this._closedPromise
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException('desiredSize')
          }
          if (this._ownerWritableStream === undefined) {
            throw defaultWriterLockException('desiredSize')
          }
          return WritableStreamDefaultWriterGetDesiredSize(this)
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(
              defaultWriterBrandCheckException('ready')
            )
          }
          return this._readyPromise
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = undefined) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(
              defaultWriterBrandCheckException('abort')
            )
          }
          if (this._ownerWritableStream === undefined) {
            return promiseRejectedWith(defaultWriterLockException('abort'))
          }
          return WritableStreamDefaultWriterAbort(this, reason)
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(
              defaultWriterBrandCheckException('close')
            )
          }
          const stream = this._ownerWritableStream
          if (stream === undefined) {
            return promiseRejectedWith(defaultWriterLockException('close'))
          }
          if (WritableStreamCloseQueuedOrInFlight(stream)) {
            return promiseRejectedWith(
              new TypeError('Cannot close an already-closing stream')
            )
          }
          return WritableStreamDefaultWriterClose(this)
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException('releaseLock')
          }
          const stream = this._ownerWritableStream
          if (stream === undefined) {
            return
          }
          WritableStreamDefaultWriterRelease(this)
        }
        write(chunk = undefined) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(
              defaultWriterBrandCheckException('write')
            )
          }
          if (this._ownerWritableStream === undefined) {
            return promiseRejectedWith(defaultWriterLockException('write to'))
          }
          return WritableStreamDefaultWriterWrite(this, chunk)
        }
      }
      Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          WritableStreamDefaultWriter.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'WritableStreamDefaultWriter',
            configurable: true
          }
        )
      }
      // Abstract operations for the WritableStreamDefaultWriter.
      function IsWritableStreamDefaultWriter(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {
          return false
        }
        return x instanceof WritableStreamDefaultWriter
      }
      // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.
      function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream
        return WritableStreamAbort(stream, reason)
      }
      function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream
        return WritableStreamClose(stream)
      }
      function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream
        const state = stream._state
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
          return promiseResolvedWith(undefined)
        }
        if (state === 'errored') {
          return promiseRejectedWith(stream._storedError)
        }
        return WritableStreamDefaultWriterClose(writer)
      }
      function WritableStreamDefaultWriterEnsureClosedPromiseRejected(
        writer,
        error
      ) {
        if (writer._closedPromiseState === 'pending') {
          defaultWriterClosedPromiseReject(writer, error)
        } else {
          defaultWriterClosedPromiseResetToRejected(writer, error)
        }
      }
      function WritableStreamDefaultWriterEnsureReadyPromiseRejected(
        writer,
        error
      ) {
        if (writer._readyPromiseState === 'pending') {
          defaultWriterReadyPromiseReject(writer, error)
        } else {
          defaultWriterReadyPromiseResetToRejected(writer, error)
        }
      }
      function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream
        const state = stream._state
        if (state === 'errored' || state === 'erroring') {
          return null
        }
        if (state === 'closed') {
          return 0
        }
        return WritableStreamDefaultControllerGetDesiredSize(
          stream._writableStreamController
        )
      }
      function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream
        const releasedError = new TypeError(
          `Writer was released and can no longer be used to monitor the stream's closedness`
        )
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(
          writer,
          releasedError
        )
        // The state transitions to "errored" before the sink abort() method runs, but the writer.closed promise is not
        // rejected until afterwards. This means that simply testing state will not work.
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(
          writer,
          releasedError
        )
        stream._writer = undefined
        writer._ownerWritableStream = undefined
      }
      function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream
        const controller = stream._writableStreamController
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(
          controller,
          chunk
        )
        if (stream !== writer._ownerWritableStream) {
          return promiseRejectedWith(defaultWriterLockException('write to'))
        }
        const state = stream._state
        if (state === 'errored') {
          return promiseRejectedWith(stream._storedError)
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
          return promiseRejectedWith(
            new TypeError(
              'The stream is closing or closed and cannot be written to'
            )
          )
        }
        if (state === 'erroring') {
          return promiseRejectedWith(stream._storedError)
        }
        const promise = WritableStreamAddWriteRequest(stream)
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize)
        return promise
      }
      const closeSentinel = {}
      /**
       * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.
       *
       * @public
       */
      class WritableStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor')
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2('abortReason')
          }
          return this._abortReason
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2('signal')
          }
          if (this._abortController === undefined) {
            // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.
            // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,
            // so instead we only implement support for `signal` if we find a global `AbortController` constructor.
            throw new TypeError(
              'WritableStreamDefaultController.prototype.signal is not supported'
            )
          }
          return this._abortController.signal
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e = undefined) {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2('error')
          }
          const state = this._controlledWritableStream._state
          if (state !== 'writable') {
            // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so
            // just treat it as a no-op.
            return
          }
          WritableStreamDefaultControllerError(this, e)
        }
        /** @internal */
        [AbortSteps](reason) {
          const result = this._abortAlgorithm(reason)
          WritableStreamDefaultControllerClearAlgorithms(this)
          return result
        }
        /** @internal */
        [ErrorSteps]() {
          ResetQueue(this)
        }
      }
      Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          WritableStreamDefaultController.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'WritableStreamDefaultController',
            configurable: true
          }
        )
      }
      // Abstract operations implementing interface required by the WritableStream.
      function IsWritableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')
        ) {
          return false
        }
        return x instanceof WritableStreamDefaultController
      }
      function SetUpWritableStreamDefaultController(
        stream,
        controller,
        startAlgorithm,
        writeAlgorithm,
        closeAlgorithm,
        abortAlgorithm,
        highWaterMark,
        sizeAlgorithm
      ) {
        controller._controlledWritableStream = stream
        stream._writableStreamController = controller
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = undefined
        controller._queueTotalSize = undefined
        ResetQueue(controller)
        controller._abortReason = undefined
        controller._abortController = createAbortController()
        controller._started = false
        controller._strategySizeAlgorithm = sizeAlgorithm
        controller._strategyHWM = highWaterMark
        controller._writeAlgorithm = writeAlgorithm
        controller._closeAlgorithm = closeAlgorithm
        controller._abortAlgorithm = abortAlgorithm
        const backpressure =
          WritableStreamDefaultControllerGetBackpressure(controller)
        WritableStreamUpdateBackpressure(stream, backpressure)
        const startResult = startAlgorithm()
        const startPromise = promiseResolvedWith(startResult)
        uponPromise(
          startPromise,
          () => {
            controller._started = true
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)
          },
          (r) => {
            controller._started = true
            WritableStreamDealWithRejection(stream, r)
          }
        )
      }
      function SetUpWritableStreamDefaultControllerFromUnderlyingSink(
        stream,
        underlyingSink,
        highWaterMark,
        sizeAlgorithm
      ) {
        const controller = Object.create(
          WritableStreamDefaultController.prototype
        )
        let startAlgorithm = () => undefined
        let writeAlgorithm = () => promiseResolvedWith(undefined)
        let closeAlgorithm = () => promiseResolvedWith(undefined)
        let abortAlgorithm = () => promiseResolvedWith(undefined)
        if (underlyingSink.start !== undefined) {
          startAlgorithm = () => underlyingSink.start(controller)
        }
        if (underlyingSink.write !== undefined) {
          writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller)
        }
        if (underlyingSink.close !== undefined) {
          closeAlgorithm = () => underlyingSink.close()
        }
        if (underlyingSink.abort !== undefined) {
          abortAlgorithm = (reason) => underlyingSink.abort(reason)
        }
        SetUpWritableStreamDefaultController(
          stream,
          controller,
          startAlgorithm,
          writeAlgorithm,
          closeAlgorithm,
          abortAlgorithm,
          highWaterMark,
          sizeAlgorithm
        )
      }
      // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.
      function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = undefined
        controller._closeAlgorithm = undefined
        controller._abortAlgorithm = undefined
        controller._strategySizeAlgorithm = undefined
      }
      function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0)
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)
      }
      function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
          return controller._strategySizeAlgorithm(chunk)
        } catch (chunkSizeE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE)
          return 1
        }
      }
      function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize
      }
      function WritableStreamDefaultControllerWrite(
        controller,
        chunk,
        chunkSize
      ) {
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize)
        } catch (enqueueE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE)
          return
        }
        const stream = controller._controlledWritableStream
        if (
          !WritableStreamCloseQueuedOrInFlight(stream) &&
          stream._state === 'writable'
        ) {
          const backpressure =
            WritableStreamDefaultControllerGetBackpressure(controller)
          WritableStreamUpdateBackpressure(stream, backpressure)
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)
      }
      // Abstract operations for the WritableStreamDefaultController.
      function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream
        if (!controller._started) {
          return
        }
        if (stream._inFlightWriteRequest !== undefined) {
          return
        }
        const state = stream._state
        if (state === 'erroring') {
          WritableStreamFinishErroring(stream)
          return
        }
        if (controller._queue.length === 0) {
          return
        }
        const value = PeekQueueValue(controller)
        if (value === closeSentinel) {
          WritableStreamDefaultControllerProcessClose(controller)
        } else {
          WritableStreamDefaultControllerProcessWrite(controller, value)
        }
      }
      function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === 'writable') {
          WritableStreamDefaultControllerError(controller, error)
        }
      }
      function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream
        WritableStreamMarkCloseRequestInFlight(stream)
        DequeueValue(controller)
        const sinkClosePromise = controller._closeAlgorithm()
        WritableStreamDefaultControllerClearAlgorithms(controller)
        uponPromise(
          sinkClosePromise,
          () => {
            WritableStreamFinishInFlightClose(stream)
          },
          (reason) => {
            WritableStreamFinishInFlightCloseWithError(stream, reason)
          }
        )
      }
      function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream
        WritableStreamMarkFirstWriteRequestInFlight(stream)
        const sinkWritePromise = controller._writeAlgorithm(chunk)
        uponPromise(
          sinkWritePromise,
          () => {
            WritableStreamFinishInFlightWrite(stream)
            const state = stream._state
            DequeueValue(controller)
            if (
              !WritableStreamCloseQueuedOrInFlight(stream) &&
              state === 'writable'
            ) {
              const backpressure =
                WritableStreamDefaultControllerGetBackpressure(controller)
              WritableStreamUpdateBackpressure(stream, backpressure)
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller)
          },
          (reason) => {
            if (stream._state === 'writable') {
              WritableStreamDefaultControllerClearAlgorithms(controller)
            }
            WritableStreamFinishInFlightWriteWithError(stream, reason)
          }
        )
      }
      function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize =
          WritableStreamDefaultControllerGetDesiredSize(controller)
        return desiredSize <= 0
      }
      // A client of WritableStreamDefaultController may use these functions directly to bypass state check.
      function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream
        WritableStreamDefaultControllerClearAlgorithms(controller)
        WritableStreamStartErroring(stream, error)
      }
      // Helper functions for the WritableStream.
      function streamBrandCheckException$2(name) {
        return new TypeError(
          `WritableStream.prototype.${name} can only be used on a WritableStream`
        )
      }
      // Helper functions for the WritableStreamDefaultController.
      function defaultControllerBrandCheckException$2(name) {
        return new TypeError(
          `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`
        )
      }
      // Helper functions for the WritableStreamDefaultWriter.
      function defaultWriterBrandCheckException(name) {
        return new TypeError(
          `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`
        )
      }
      function defaultWriterLockException(name) {
        return new TypeError(
          'Cannot ' + name + ' a stream using a released writer'
        )
      }
      function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
          writer._closedPromise_resolve = resolve
          writer._closedPromise_reject = reject
          writer._closedPromiseState = 'pending'
        })
      }
      function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer)
        defaultWriterClosedPromiseReject(writer, reason)
      }
      function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer)
        defaultWriterClosedPromiseResolve(writer)
      }
      function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === undefined) {
          return
        }
        setPromiseIsHandledToTrue(writer._closedPromise)
        writer._closedPromise_reject(reason)
        writer._closedPromise_resolve = undefined
        writer._closedPromise_reject = undefined
        writer._closedPromiseState = 'rejected'
      }
      function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason)
      }
      function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === undefined) {
          return
        }
        writer._closedPromise_resolve(undefined)
        writer._closedPromise_resolve = undefined
        writer._closedPromise_reject = undefined
        writer._closedPromiseState = 'resolved'
      }
      function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
          writer._readyPromise_resolve = resolve
          writer._readyPromise_reject = reject
        })
        writer._readyPromiseState = 'pending'
      }
      function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer)
        defaultWriterReadyPromiseReject(writer, reason)
      }
      function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer)
        defaultWriterReadyPromiseResolve(writer)
      }
      function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === undefined) {
          return
        }
        setPromiseIsHandledToTrue(writer._readyPromise)
        writer._readyPromise_reject(reason)
        writer._readyPromise_resolve = undefined
        writer._readyPromise_reject = undefined
        writer._readyPromiseState = 'rejected'
      }
      function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer)
      }
      function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason)
      }
      function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === undefined) {
          return
        }
        writer._readyPromise_resolve(undefined)
        writer._readyPromise_resolve = undefined
        writer._readyPromise_reject = undefined
        writer._readyPromiseState = 'fulfilled'
      }

      /// <reference lib="dom" />
      const NativeDOMException =
        typeof DOMException !== 'undefined' ? DOMException : undefined

      /// <reference types="node" />
      function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {
          return false
        }
        try {
          new ctor()
          return true
        } catch (_a) {
          return false
        }
      }
      function createDOMExceptionPolyfill() {
        // eslint-disable-next-line no-shadow
        const ctor = function DOMException(message, name) {
          this.message = message || ''
          this.name = name || 'Error'
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor)
          }
        }
        ctor.prototype = Object.create(Error.prototype)
        Object.defineProperty(ctor.prototype, 'constructor', {
          value: ctor,
          writable: true,
          configurable: true
        })
        return ctor
      }
      // eslint-disable-next-line no-redeclare
      const DOMException$1 = isDOMExceptionConstructor(NativeDOMException)
        ? NativeDOMException
        : createDOMExceptionPolyfill()

      function ReadableStreamPipeTo(
        source,
        dest,
        preventClose,
        preventAbort,
        preventCancel,
        signal
      ) {
        const reader = AcquireReadableStreamDefaultReader(source)
        const writer = AcquireWritableStreamDefaultWriter(dest)
        source._disturbed = true
        let shuttingDown = false
        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.
        let currentWrite = promiseResolvedWith(undefined)
        return newPromise((resolve, reject) => {
          let abortAlgorithm
          if (signal !== undefined) {
            abortAlgorithm = () => {
              const error = new DOMException$1('Aborted', 'AbortError')
              const actions = []
              if (!preventAbort) {
                actions.push(() => {
                  if (dest._state === 'writable') {
                    return WritableStreamAbort(dest, error)
                  }
                  return promiseResolvedWith(undefined)
                })
              }
              if (!preventCancel) {
                actions.push(() => {
                  if (source._state === 'readable') {
                    return ReadableStreamCancel(source, error)
                  }
                  return promiseResolvedWith(undefined)
                })
              }
              shutdownWithAction(
                () => Promise.all(actions.map((action) => action())),
                true,
                error
              )
            }
            if (signal.aborted) {
              abortAlgorithm()
              return
            }
            signal.addEventListener('abort', abortAlgorithm)
          }
          // Using reader and writer, read all chunks from this and write them to dest
          // - Backpressure must be enforced
          // - Shutdown must stop all activity
          function pipeLoop() {
            return newPromise((resolveLoop, rejectLoop) => {
              function next(done) {
                if (done) {
                  resolveLoop()
                } else {
                  // Use `PerformPromiseThen` instead of `uponPromise` to avoid
                  // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers
                  PerformPromiseThen(pipeStep(), next, rejectLoop)
                }
              }
              next(false)
            })
          }
          function pipeStep() {
            if (shuttingDown) {
              return promiseResolvedWith(true)
            }
            return PerformPromiseThen(writer._readyPromise, () => {
              return newPromise((resolveRead, rejectRead) => {
                ReadableStreamDefaultReaderRead(reader, {
                  _chunkSteps: (chunk) => {
                    currentWrite = PerformPromiseThen(
                      WritableStreamDefaultWriterWrite(writer, chunk),
                      undefined,
                      noop
                    )
                    resolveRead(false)
                  },
                  _closeSteps: () => resolveRead(true),
                  _errorSteps: rejectRead
                })
              })
            })
          }
          // Errors must be propagated forward
          isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
            if (!preventAbort) {
              shutdownWithAction(
                () => WritableStreamAbort(dest, storedError),
                true,
                storedError
              )
            } else {
              shutdown(true, storedError)
            }
          })
          // Errors must be propagated backward
          isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
            if (!preventCancel) {
              shutdownWithAction(
                () => ReadableStreamCancel(source, storedError),
                true,
                storedError
              )
            } else {
              shutdown(true, storedError)
            }
          })
          // Closing must be propagated forward
          isOrBecomesClosed(source, reader._closedPromise, () => {
            if (!preventClose) {
              shutdownWithAction(() =>
                WritableStreamDefaultWriterCloseWithErrorPropagation(writer)
              )
            } else {
              shutdown()
            }
          })
          // Closing must be propagated backward
          if (
            WritableStreamCloseQueuedOrInFlight(dest) ||
            dest._state === 'closed'
          ) {
            const destClosed = new TypeError(
              'the destination writable stream closed before all data could be piped to it'
            )
            if (!preventCancel) {
              shutdownWithAction(
                () => ReadableStreamCancel(source, destClosed),
                true,
                destClosed
              )
            } else {
              shutdown(true, destClosed)
            }
          }
          setPromiseIsHandledToTrue(pipeLoop())
          function waitForWritesToFinish() {
            // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait
            // for that too.
            const oldCurrentWrite = currentWrite
            return PerformPromiseThen(currentWrite, () =>
              oldCurrentWrite !== currentWrite
                ? waitForWritesToFinish()
                : undefined
            )
          }
          function isOrBecomesErrored(stream, promise, action) {
            if (stream._state === 'errored') {
              action(stream._storedError)
            } else {
              uponRejection(promise, action)
            }
          }
          function isOrBecomesClosed(stream, promise, action) {
            if (stream._state === 'closed') {
              action()
            } else {
              uponFulfillment(promise, action)
            }
          }
          function shutdownWithAction(action, originalIsError, originalError) {
            if (shuttingDown) {
              return
            }
            shuttingDown = true
            if (
              dest._state === 'writable' &&
              !WritableStreamCloseQueuedOrInFlight(dest)
            ) {
              uponFulfillment(waitForWritesToFinish(), doTheRest)
            } else {
              doTheRest()
            }
            function doTheRest() {
              uponPromise(
                action(),
                () => finalize(originalIsError, originalError),
                (newError) => finalize(true, newError)
              )
            }
          }
          function shutdown(isError, error) {
            if (shuttingDown) {
              return
            }
            shuttingDown = true
            if (
              dest._state === 'writable' &&
              !WritableStreamCloseQueuedOrInFlight(dest)
            ) {
              uponFulfillment(waitForWritesToFinish(), () =>
                finalize(isError, error)
              )
            } else {
              finalize(isError, error)
            }
          }
          function finalize(isError, error) {
            WritableStreamDefaultWriterRelease(writer)
            ReadableStreamReaderGenericRelease(reader)
            if (signal !== undefined) {
              signal.removeEventListener('abort', abortAlgorithm)
            }
            if (isError) {
              reject(error)
            } else {
              resolve(undefined)
            }
          }
        })
      }

      /**
       * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.
       *
       * @public
       */
      class ReadableStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor')
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1('desiredSize')
          }
          return ReadableStreamDefaultControllerGetDesiredSize(this)
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1('close')
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError(
              'The stream is not in a state that permits close'
            )
          }
          ReadableStreamDefaultControllerClose(this)
        }
        enqueue(chunk = undefined) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1('enqueue')
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError(
              'The stream is not in a state that permits enqueue'
            )
          }
          return ReadableStreamDefaultControllerEnqueue(this, chunk)
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1('error')
          }
          ReadableStreamDefaultControllerError(this, e)
        }
        /** @internal */
        [CancelSteps](reason) {
          ResetQueue(this)
          const result = this._cancelAlgorithm(reason)
          ReadableStreamDefaultControllerClearAlgorithms(this)
          return result
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableStream
          if (this._queue.length > 0) {
            const chunk = DequeueValue(this)
            if (this._closeRequested && this._queue.length === 0) {
              ReadableStreamDefaultControllerClearAlgorithms(this)
              ReadableStreamClose(stream)
            } else {
              ReadableStreamDefaultControllerCallPullIfNeeded(this)
            }
            readRequest._chunkSteps(chunk)
          } else {
            ReadableStreamAddReadRequest(stream, readRequest)
            ReadableStreamDefaultControllerCallPullIfNeeded(this)
          }
        }
      }
      Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableStreamDefaultController.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableStreamDefaultController',
            configurable: true
          }
        )
      }
      // Abstract operations for the ReadableStreamDefaultController.
      function IsReadableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')
        ) {
          return false
        }
        return x instanceof ReadableStreamDefaultController
      }
      function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull =
          ReadableStreamDefaultControllerShouldCallPull(controller)
        if (!shouldPull) {
          return
        }
        if (controller._pulling) {
          controller._pullAgain = true
          return
        }
        controller._pulling = true
        const pullPromise = controller._pullAlgorithm()
        uponPromise(
          pullPromise,
          () => {
            controller._pulling = false
            if (controller._pullAgain) {
              controller._pullAgain = false
              ReadableStreamDefaultControllerCallPullIfNeeded(controller)
            }
          },
          (e) => {
            ReadableStreamDefaultControllerError(controller, e)
          }
        )
      }
      function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return false
        }
        if (!controller._started) {
          return false
        }
        if (
          IsReadableStreamLocked(stream) &&
          ReadableStreamGetNumReadRequests(stream) > 0
        ) {
          return true
        }
        const desiredSize =
          ReadableStreamDefaultControllerGetDesiredSize(controller)
        if (desiredSize > 0) {
          return true
        }
        return false
      }
      function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined
        controller._cancelAlgorithm = undefined
        controller._strategySizeAlgorithm = undefined
      }
      // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.
      function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return
        }
        const stream = controller._controlledReadableStream
        controller._closeRequested = true
        if (controller._queue.length === 0) {
          ReadableStreamDefaultControllerClearAlgorithms(controller)
          ReadableStreamClose(stream)
        }
      }
      function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return
        }
        const stream = controller._controlledReadableStream
        if (
          IsReadableStreamLocked(stream) &&
          ReadableStreamGetNumReadRequests(stream) > 0
        ) {
          ReadableStreamFulfillReadRequest(stream, chunk, false)
        } else {
          let chunkSize
          try {
            chunkSize = controller._strategySizeAlgorithm(chunk)
          } catch (chunkSizeE) {
            ReadableStreamDefaultControllerError(controller, chunkSizeE)
            throw chunkSizeE
          }
          try {
            EnqueueValueWithSize(controller, chunk, chunkSize)
          } catch (enqueueE) {
            ReadableStreamDefaultControllerError(controller, enqueueE)
            throw enqueueE
          }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller)
      }
      function ReadableStreamDefaultControllerError(controller, e) {
        const stream = controller._controlledReadableStream
        if (stream._state !== 'readable') {
          return
        }
        ResetQueue(controller)
        ReadableStreamDefaultControllerClearAlgorithms(controller)
        ReadableStreamError(stream, e)
      }
      function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state
        if (state === 'errored') {
          return null
        }
        if (state === 'closed') {
          return 0
        }
        return controller._strategyHWM - controller._queueTotalSize
      }
      // This is used in the implementation of TransformStream.
      function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
          return false
        }
        return true
      }
      function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state
        if (!controller._closeRequested && state === 'readable') {
          return true
        }
        return false
      }
      function SetUpReadableStreamDefaultController(
        stream,
        controller,
        startAlgorithm,
        pullAlgorithm,
        cancelAlgorithm,
        highWaterMark,
        sizeAlgorithm
      ) {
        controller._controlledReadableStream = stream
        controller._queue = undefined
        controller._queueTotalSize = undefined
        ResetQueue(controller)
        controller._started = false
        controller._closeRequested = false
        controller._pullAgain = false
        controller._pulling = false
        controller._strategySizeAlgorithm = sizeAlgorithm
        controller._strategyHWM = highWaterMark
        controller._pullAlgorithm = pullAlgorithm
        controller._cancelAlgorithm = cancelAlgorithm
        stream._readableStreamController = controller
        const startResult = startAlgorithm()
        uponPromise(
          promiseResolvedWith(startResult),
          () => {
            controller._started = true
            ReadableStreamDefaultControllerCallPullIfNeeded(controller)
          },
          (r) => {
            ReadableStreamDefaultControllerError(controller, r)
          }
        )
      }
      function SetUpReadableStreamDefaultControllerFromUnderlyingSource(
        stream,
        underlyingSource,
        highWaterMark,
        sizeAlgorithm
      ) {
        const controller = Object.create(
          ReadableStreamDefaultController.prototype
        )
        let startAlgorithm = () => undefined
        let pullAlgorithm = () => promiseResolvedWith(undefined)
        let cancelAlgorithm = () => promiseResolvedWith(undefined)
        if (underlyingSource.start !== undefined) {
          startAlgorithm = () => underlyingSource.start(controller)
        }
        if (underlyingSource.pull !== undefined) {
          pullAlgorithm = () => underlyingSource.pull(controller)
        }
        if (underlyingSource.cancel !== undefined) {
          cancelAlgorithm = (reason) => underlyingSource.cancel(reason)
        }
        SetUpReadableStreamDefaultController(
          stream,
          controller,
          startAlgorithm,
          pullAlgorithm,
          cancelAlgorithm,
          highWaterMark,
          sizeAlgorithm
        )
      }
      // Helper functions for the ReadableStreamDefaultController.
      function defaultControllerBrandCheckException$1(name) {
        return new TypeError(
          `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`
        )
      }

      function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
          return ReadableByteStreamTee(stream)
        }
        return ReadableStreamDefaultTee(stream)
      }
      function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream)
        let reading = false
        let readAgain = false
        let canceled1 = false
        let canceled2 = false
        let reason1
        let reason2
        let branch1
        let branch2
        let resolveCancelPromise
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve
        })
        function pullAlgorithm() {
          if (reading) {
            readAgain = true
            return promiseResolvedWith(undefined)
          }
          reading = true
          const readRequest = {
            _chunkSteps: (chunk) => {
              // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
              // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
              // successful synchronously-available reads get ahead of asynchronously-available errors.
              queueMicrotask(() => {
                readAgain = false
                const chunk1 = chunk
                const chunk2 = chunk
                // There is no way to access the cloning code right now in the reference implementation.
                // If we add one then we'll need an implementation for serializable objects.
                // if (!canceled2 && cloneForBranch2) {
                //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));
                // }
                if (!canceled1) {
                  ReadableStreamDefaultControllerEnqueue(
                    branch1._readableStreamController,
                    chunk1
                  )
                }
                if (!canceled2) {
                  ReadableStreamDefaultControllerEnqueue(
                    branch2._readableStreamController,
                    chunk2
                  )
                }
                reading = false
                if (readAgain) {
                  pullAlgorithm()
                }
              })
            },
            _closeSteps: () => {
              reading = false
              if (!canceled1) {
                ReadableStreamDefaultControllerClose(
                  branch1._readableStreamController
                )
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerClose(
                  branch2._readableStreamController
                )
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(undefined)
              }
            },
            _errorSteps: () => {
              reading = false
            }
          }
          ReadableStreamDefaultReaderRead(reader, readRequest)
          return promiseResolvedWith(undefined)
        }
        function cancel1Algorithm(reason) {
          canceled1 = true
          reason1 = reason
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2])
            const cancelResult = ReadableStreamCancel(stream, compositeReason)
            resolveCancelPromise(cancelResult)
          }
          return cancelPromise
        }
        function cancel2Algorithm(reason) {
          canceled2 = true
          reason2 = reason
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2])
            const cancelResult = ReadableStreamCancel(stream, compositeReason)
            resolveCancelPromise(cancelResult)
          }
          return cancelPromise
        }
        function startAlgorithm() {
          // do nothing
        }
        branch1 = CreateReadableStream(
          startAlgorithm,
          pullAlgorithm,
          cancel1Algorithm
        )
        branch2 = CreateReadableStream(
          startAlgorithm,
          pullAlgorithm,
          cancel2Algorithm
        )
        uponRejection(reader._closedPromise, (r) => {
          ReadableStreamDefaultControllerError(
            branch1._readableStreamController,
            r
          )
          ReadableStreamDefaultControllerError(
            branch2._readableStreamController,
            r
          )
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(undefined)
          }
        })
        return [branch1, branch2]
      }
      function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream)
        let reading = false
        let readAgainForBranch1 = false
        let readAgainForBranch2 = false
        let canceled1 = false
        let canceled2 = false
        let reason1
        let reason2
        let branch1
        let branch2
        let resolveCancelPromise
        const cancelPromise = newPromise((resolve) => {
          resolveCancelPromise = resolve
        })
        function forwardReaderError(thisReader) {
          uponRejection(thisReader._closedPromise, (r) => {
            if (thisReader !== reader) {
              return
            }
            ReadableByteStreamControllerError(
              branch1._readableStreamController,
              r
            )
            ReadableByteStreamControllerError(
              branch2._readableStreamController,
              r
            )
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(undefined)
            }
          })
        }
        function pullWithDefaultReader() {
          if (IsReadableStreamBYOBReader(reader)) {
            ReadableStreamReaderGenericRelease(reader)
            reader = AcquireReadableStreamDefaultReader(stream)
            forwardReaderError(reader)
          }
          const readRequest = {
            _chunkSteps: (chunk) => {
              // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
              // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
              // successful synchronously-available reads get ahead of asynchronously-available errors.
              queueMicrotask(() => {
                readAgainForBranch1 = false
                readAgainForBranch2 = false
                const chunk1 = chunk
                let chunk2 = chunk
                if (!canceled1 && !canceled2) {
                  try {
                    chunk2 = CloneAsUint8Array(chunk)
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(
                      branch1._readableStreamController,
                      cloneE
                    )
                    ReadableByteStreamControllerError(
                      branch2._readableStreamController,
                      cloneE
                    )
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE))
                    return
                  }
                }
                if (!canceled1) {
                  ReadableByteStreamControllerEnqueue(
                    branch1._readableStreamController,
                    chunk1
                  )
                }
                if (!canceled2) {
                  ReadableByteStreamControllerEnqueue(
                    branch2._readableStreamController,
                    chunk2
                  )
                }
                reading = false
                if (readAgainForBranch1) {
                  pull1Algorithm()
                } else if (readAgainForBranch2) {
                  pull2Algorithm()
                }
              })
            },
            _closeSteps: () => {
              reading = false
              if (!canceled1) {
                ReadableByteStreamControllerClose(
                  branch1._readableStreamController
                )
              }
              if (!canceled2) {
                ReadableByteStreamControllerClose(
                  branch2._readableStreamController
                )
              }
              if (
                branch1._readableStreamController._pendingPullIntos.length > 0
              ) {
                ReadableByteStreamControllerRespond(
                  branch1._readableStreamController,
                  0
                )
              }
              if (
                branch2._readableStreamController._pendingPullIntos.length > 0
              ) {
                ReadableByteStreamControllerRespond(
                  branch2._readableStreamController,
                  0
                )
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(undefined)
              }
            },
            _errorSteps: () => {
              reading = false
            }
          }
          ReadableStreamDefaultReaderRead(reader, readRequest)
        }
        function pullWithBYOBReader(view, forBranch2) {
          if (IsReadableStreamDefaultReader(reader)) {
            ReadableStreamReaderGenericRelease(reader)
            reader = AcquireReadableStreamBYOBReader(stream)
            forwardReaderError(reader)
          }
          const byobBranch = forBranch2 ? branch2 : branch1
          const otherBranch = forBranch2 ? branch1 : branch2
          const readIntoRequest = {
            _chunkSteps: (chunk) => {
              // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
              // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
              // successful synchronously-available reads get ahead of asynchronously-available errors.
              queueMicrotask(() => {
                readAgainForBranch1 = false
                readAgainForBranch2 = false
                const byobCanceled = forBranch2 ? canceled2 : canceled1
                const otherCanceled = forBranch2 ? canceled1 : canceled2
                if (!otherCanceled) {
                  let clonedChunk
                  try {
                    clonedChunk = CloneAsUint8Array(chunk)
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(
                      byobBranch._readableStreamController,
                      cloneE
                    )
                    ReadableByteStreamControllerError(
                      otherBranch._readableStreamController,
                      cloneE
                    )
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE))
                    return
                  }
                  if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(
                      byobBranch._readableStreamController,
                      chunk
                    )
                  }
                  ReadableByteStreamControllerEnqueue(
                    otherBranch._readableStreamController,
                    clonedChunk
                  )
                } else if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(
                    byobBranch._readableStreamController,
                    chunk
                  )
                }
                reading = false
                if (readAgainForBranch1) {
                  pull1Algorithm()
                } else if (readAgainForBranch2) {
                  pull2Algorithm()
                }
              })
            },
            _closeSteps: (chunk) => {
              reading = false
              const byobCanceled = forBranch2 ? canceled2 : canceled1
              const otherCanceled = forBranch2 ? canceled1 : canceled2
              if (!byobCanceled) {
                ReadableByteStreamControllerClose(
                  byobBranch._readableStreamController
                )
              }
              if (!otherCanceled) {
                ReadableByteStreamControllerClose(
                  otherBranch._readableStreamController
                )
              }
              if (chunk !== undefined) {
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(
                    byobBranch._readableStreamController,
                    chunk
                  )
                }
                if (
                  !otherCanceled &&
                  otherBranch._readableStreamController._pendingPullIntos
                    .length > 0
                ) {
                  ReadableByteStreamControllerRespond(
                    otherBranch._readableStreamController,
                    0
                  )
                }
              }
              if (!byobCanceled || !otherCanceled) {
                resolveCancelPromise(undefined)
              }
            },
            _errorSteps: () => {
              reading = false
            }
          }
          ReadableStreamBYOBReaderRead(reader, view, readIntoRequest)
        }
        function pull1Algorithm() {
          if (reading) {
            readAgainForBranch1 = true
            return promiseResolvedWith(undefined)
          }
          reading = true
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(
            branch1._readableStreamController
          )
          if (byobRequest === null) {
            pullWithDefaultReader()
          } else {
            pullWithBYOBReader(byobRequest._view, false)
          }
          return promiseResolvedWith(undefined)
        }
        function pull2Algorithm() {
          if (reading) {
            readAgainForBranch2 = true
            return promiseResolvedWith(undefined)
          }
          reading = true
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(
            branch2._readableStreamController
          )
          if (byobRequest === null) {
            pullWithDefaultReader()
          } else {
            pullWithBYOBReader(byobRequest._view, true)
          }
          return promiseResolvedWith(undefined)
        }
        function cancel1Algorithm(reason) {
          canceled1 = true
          reason1 = reason
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2])
            const cancelResult = ReadableStreamCancel(stream, compositeReason)
            resolveCancelPromise(cancelResult)
          }
          return cancelPromise
        }
        function cancel2Algorithm(reason) {
          canceled2 = true
          reason2 = reason
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2])
            const cancelResult = ReadableStreamCancel(stream, compositeReason)
            resolveCancelPromise(cancelResult)
          }
          return cancelPromise
        }
        function startAlgorithm() {
          return
        }
        branch1 = CreateReadableByteStream(
          startAlgorithm,
          pull1Algorithm,
          cancel1Algorithm
        )
        branch2 = CreateReadableByteStream(
          startAlgorithm,
          pull2Algorithm,
          cancel2Algorithm
        )
        forwardReaderError(reader)
        return [branch1, branch2]
      }

      function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context)
        const original = source
        const autoAllocateChunkSize =
          original === null || original === void 0
            ? void 0
            : original.autoAllocateChunkSize
        const cancel =
          original === null || original === void 0 ? void 0 : original.cancel
        const pull =
          original === null || original === void 0 ? void 0 : original.pull
        const start =
          original === null || original === void 0 ? void 0 : original.start
        const type =
          original === null || original === void 0 ? void 0 : original.type
        return {
          autoAllocateChunkSize:
            autoAllocateChunkSize === undefined
              ? undefined
              : convertUnsignedLongLongWithEnforceRange(
                  autoAllocateChunkSize,
                  `${context} has member 'autoAllocateChunkSize' that`
                ),
          cancel:
            cancel === undefined
              ? undefined
              : convertUnderlyingSourceCancelCallback(
                  cancel,
                  original,
                  `${context} has member 'cancel' that`
                ),
          pull:
            pull === undefined
              ? undefined
              : convertUnderlyingSourcePullCallback(
                  pull,
                  original,
                  `${context} has member 'pull' that`
                ),
          start:
            start === undefined
              ? undefined
              : convertUnderlyingSourceStartCallback(
                  start,
                  original,
                  `${context} has member 'start' that`
                ),
          type:
            type === undefined
              ? undefined
              : convertReadableStreamType(
                  type,
                  `${context} has member 'type' that`
                )
        }
      }
      function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context)
        return (reason) => promiseCall(fn, original, [reason])
      }
      function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context)
        return (controller) => promiseCall(fn, original, [controller])
      }
      function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context)
        return (controller) => reflectCall(fn, original, [controller])
      }
      function convertReadableStreamType(type, context) {
        type = `${type}`
        if (type !== 'bytes') {
          throw new TypeError(
            `${context} '${type}' is not a valid enumeration value for ReadableStreamType`
          )
        }
        return type
      }

      function convertReaderOptions(options, context) {
        assertDictionary(options, context)
        const mode =
          options === null || options === void 0 ? void 0 : options.mode
        return {
          mode:
            mode === undefined
              ? undefined
              : convertReadableStreamReaderMode(
                  mode,
                  `${context} has member 'mode' that`
                )
        }
      }
      function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`
        if (mode !== 'byob') {
          throw new TypeError(
            `${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`
          )
        }
        return mode
      }

      function convertIteratorOptions(options, context) {
        assertDictionary(options, context)
        const preventCancel =
          options === null || options === void 0
            ? void 0
            : options.preventCancel
        return { preventCancel: Boolean(preventCancel) }
      }

      function convertPipeOptions(options, context) {
        assertDictionary(options, context)
        const preventAbort =
          options === null || options === void 0 ? void 0 : options.preventAbort
        const preventCancel =
          options === null || options === void 0
            ? void 0
            : options.preventCancel
        const preventClose =
          options === null || options === void 0 ? void 0 : options.preventClose
        const signal =
          options === null || options === void 0 ? void 0 : options.signal
        if (signal !== undefined) {
          assertAbortSignal(signal, `${context} has member 'signal' that`)
        }
        return {
          preventAbort: Boolean(preventAbort),
          preventCancel: Boolean(preventCancel),
          preventClose: Boolean(preventClose),
          signal
        }
      }
      function assertAbortSignal(signal, context) {
        if (!isAbortSignal(signal)) {
          throw new TypeError(`${context} is not an AbortSignal.`)
        }
      }

      function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context)
        const readable =
          pair === null || pair === void 0 ? void 0 : pair.readable
        assertRequiredField(readable, 'readable', 'ReadableWritablePair')
        assertReadableStream(readable, `${context} has member 'readable' that`)
        const writable =
          pair === null || pair === void 0 ? void 0 : pair.writable
        assertRequiredField(writable, 'writable', 'ReadableWritablePair')
        assertWritableStream(writable, `${context} has member 'writable' that`)
        return { readable, writable }
      }

      /**
       * A readable stream represents a source of data, from which you can read.
       *
       * @public
       */
      class ReadableStream {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
          if (rawUnderlyingSource === undefined) {
            rawUnderlyingSource = null
          } else {
            assertObject(rawUnderlyingSource, 'First parameter')
          }
          const strategy = convertQueuingStrategy(
            rawStrategy,
            'Second parameter'
          )
          const underlyingSource = convertUnderlyingDefaultOrByteSource(
            rawUnderlyingSource,
            'First parameter'
          )
          InitializeReadableStream(this)
          if (underlyingSource.type === 'bytes') {
            if (strategy.size !== undefined) {
              throw new RangeError(
                'The strategy for a byte stream cannot have a size function'
              )
            }
            const highWaterMark = ExtractHighWaterMark(strategy, 0)
            SetUpReadableByteStreamControllerFromUnderlyingSource(
              this,
              underlyingSource,
              highWaterMark
            )
          } else {
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy)
            const highWaterMark = ExtractHighWaterMark(strategy, 1)
            SetUpReadableStreamDefaultControllerFromUnderlyingSource(
              this,
              underlyingSource,
              highWaterMark,
              sizeAlgorithm
            )
          }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1('locked')
          }
          return IsReadableStreamLocked(this)
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = undefined) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1('cancel'))
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(
              new TypeError('Cannot cancel a stream that already has a reader')
            )
          }
          return ReadableStreamCancel(this, reason)
        }
        getReader(rawOptions = undefined) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1('getReader')
          }
          const options = convertReaderOptions(rawOptions, 'First parameter')
          if (options.mode === undefined) {
            return AcquireReadableStreamDefaultReader(this)
          }
          return AcquireReadableStreamBYOBReader(this)
        }
        pipeThrough(rawTransform, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1('pipeThrough')
          }
          assertRequiredArgument(rawTransform, 1, 'pipeThrough')
          const transform = convertReadableWritablePair(
            rawTransform,
            'First parameter'
          )
          const options = convertPipeOptions(rawOptions, 'Second parameter')
          if (IsReadableStreamLocked(this)) {
            throw new TypeError(
              'ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream'
            )
          }
          if (IsWritableStreamLocked(transform.writable)) {
            throw new TypeError(
              'ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream'
            )
          }
          const promise = ReadableStreamPipeTo(
            this,
            transform.writable,
            options.preventClose,
            options.preventAbort,
            options.preventCancel,
            options.signal
          )
          setPromiseIsHandledToTrue(promise)
          return transform.readable
        }
        pipeTo(destination, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1('pipeTo'))
          }
          if (destination === undefined) {
            return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`)
          }
          if (!IsWritableStream(destination)) {
            return promiseRejectedWith(
              new TypeError(
                `ReadableStream.prototype.pipeTo's first argument must be a WritableStream`
              )
            )
          }
          let options
          try {
            options = convertPipeOptions(rawOptions, 'Second parameter')
          } catch (e) {
            return promiseRejectedWith(e)
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(
              new TypeError(
                'ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'
              )
            )
          }
          if (IsWritableStreamLocked(destination)) {
            return promiseRejectedWith(
              new TypeError(
                'ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'
              )
            )
          }
          return ReadableStreamPipeTo(
            this,
            destination,
            options.preventClose,
            options.preventAbort,
            options.preventCancel,
            options.signal
          )
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1('tee')
          }
          const branches = ReadableStreamTee(this)
          return CreateArrayFromList(branches)
        }
        values(rawOptions = undefined) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1('values')
          }
          const options = convertIteratorOptions(rawOptions, 'First parameter')
          return AcquireReadableStreamAsyncIterator(this, options.preventCancel)
        }
      }
      Object.defineProperties(ReadableStream.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ReadableStream.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ReadableStream',
            configurable: true
          }
        )
      }
      if (typeof SymbolPolyfill.asyncIterator === 'symbol') {
        Object.defineProperty(
          ReadableStream.prototype,
          SymbolPolyfill.asyncIterator,
          {
            value: ReadableStream.prototype.values,
            writable: true,
            configurable: true
          }
        )
      }
      // Abstract operations for the ReadableStream.
      // Throws if and only if startAlgorithm throws.
      function CreateReadableStream(
        startAlgorithm,
        pullAlgorithm,
        cancelAlgorithm,
        highWaterMark = 1,
        sizeAlgorithm = () => 1
      ) {
        const stream = Object.create(ReadableStream.prototype)
        InitializeReadableStream(stream)
        const controller = Object.create(
          ReadableStreamDefaultController.prototype
        )
        SetUpReadableStreamDefaultController(
          stream,
          controller,
          startAlgorithm,
          pullAlgorithm,
          cancelAlgorithm,
          highWaterMark,
          sizeAlgorithm
        )
        return stream
      }
      // Throws if and only if startAlgorithm throws.
      function CreateReadableByteStream(
        startAlgorithm,
        pullAlgorithm,
        cancelAlgorithm
      ) {
        const stream = Object.create(ReadableStream.prototype)
        InitializeReadableStream(stream)
        const controller = Object.create(ReadableByteStreamController.prototype)
        SetUpReadableByteStreamController(
          stream,
          controller,
          startAlgorithm,
          pullAlgorithm,
          cancelAlgorithm,
          0,
          undefined
        )
        return stream
      }
      function InitializeReadableStream(stream) {
        stream._state = 'readable'
        stream._reader = undefined
        stream._storedError = undefined
        stream._disturbed = false
      }
      function IsReadableStream(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_readableStreamController')
        ) {
          return false
        }
        return x instanceof ReadableStream
      }
      function IsReadableStreamLocked(stream) {
        if (stream._reader === undefined) {
          return false
        }
        return true
      }
      // ReadableStream API exposed for controllers.
      function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true
        if (stream._state === 'closed') {
          return promiseResolvedWith(undefined)
        }
        if (stream._state === 'errored') {
          return promiseRejectedWith(stream._storedError)
        }
        ReadableStreamClose(stream)
        const reader = stream._reader
        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {
          reader._readIntoRequests.forEach((readIntoRequest) => {
            readIntoRequest._closeSteps(undefined)
          })
          reader._readIntoRequests = new SimpleQueue()
        }
        const sourceCancelPromise =
          stream._readableStreamController[CancelSteps](reason)
        return transformPromiseWith(sourceCancelPromise, noop)
      }
      function ReadableStreamClose(stream) {
        stream._state = 'closed'
        const reader = stream._reader
        if (reader === undefined) {
          return
        }
        defaultReaderClosedPromiseResolve(reader)
        if (IsReadableStreamDefaultReader(reader)) {
          reader._readRequests.forEach((readRequest) => {
            readRequest._closeSteps()
          })
          reader._readRequests = new SimpleQueue()
        }
      }
      function ReadableStreamError(stream, e) {
        stream._state = 'errored'
        stream._storedError = e
        const reader = stream._reader
        if (reader === undefined) {
          return
        }
        defaultReaderClosedPromiseReject(reader, e)
        if (IsReadableStreamDefaultReader(reader)) {
          reader._readRequests.forEach((readRequest) => {
            readRequest._errorSteps(e)
          })
          reader._readRequests = new SimpleQueue()
        } else {
          reader._readIntoRequests.forEach((readIntoRequest) => {
            readIntoRequest._errorSteps(e)
          })
          reader._readIntoRequests = new SimpleQueue()
        }
      }
      // Helper functions for the ReadableStream.
      function streamBrandCheckException$1(name) {
        return new TypeError(
          `ReadableStream.prototype.${name} can only be used on a ReadableStream`
        )
      }

      function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context)
        const highWaterMark =
          init === null || init === void 0 ? void 0 : init.highWaterMark
        assertRequiredField(
          highWaterMark,
          'highWaterMark',
          'QueuingStrategyInit'
        )
        return {
          highWaterMark: convertUnrestrictedDouble(highWaterMark)
        }
      }

      // The size function must not have a prototype property nor be a constructor
      const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength
      }
      try {
        Object.defineProperty(byteLengthSizeFunction, 'name', {
          value: 'size',
          configurable: true
        })
      } catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
      }
      /**
       * A queuing strategy that counts the number of bytes in each chunk.
       *
       * @public
       */
      class ByteLengthQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy')
          options = convertQueuingStrategyInit(options, 'First parameter')
          this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException('highWaterMark')
          }
          return this._byteLengthQueuingStrategyHighWaterMark
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException('size')
          }
          return byteLengthSizeFunction
        }
      }
      Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          ByteLengthQueuingStrategy.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'ByteLengthQueuingStrategy',
            configurable: true
          }
        )
      }
      // Helper functions for the ByteLengthQueuingStrategy.
      function byteLengthBrandCheckException(name) {
        return new TypeError(
          `ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`
        )
      }
      function IsByteLengthQueuingStrategy(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(
            x,
            '_byteLengthQueuingStrategyHighWaterMark'
          )
        ) {
          return false
        }
        return x instanceof ByteLengthQueuingStrategy
      }

      // The size function must not have a prototype property nor be a constructor
      const countSizeFunction = () => {
        return 1
      }
      try {
        Object.defineProperty(countSizeFunction, 'name', {
          value: 'size',
          configurable: true
        })
      } catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
      }
      /**
       * A queuing strategy that counts the number of chunks.
       *
       * @public
       */
      class CountQueuingStrategy {
        constructor(options) {
          assertRequiredArgument(options, 1, 'CountQueuingStrategy')
          options = convertQueuingStrategyInit(options, 'First parameter')
          this._countQueuingStrategyHighWaterMark = options.highWaterMark
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException('highWaterMark')
          }
          return this._countQueuingStrategyHighWaterMark
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException('size')
          }
          return countSizeFunction
        }
      }
      Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          CountQueuingStrategy.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'CountQueuingStrategy',
            configurable: true
          }
        )
      }
      // Helper functions for the CountQueuingStrategy.
      function countBrandCheckException(name) {
        return new TypeError(
          `CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`
        )
      }
      function IsCountQueuingStrategy(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(
            x,
            '_countQueuingStrategyHighWaterMark'
          )
        ) {
          return false
        }
        return x instanceof CountQueuingStrategy
      }

      function convertTransformer(original, context) {
        assertDictionary(original, context)
        const flush =
          original === null || original === void 0 ? void 0 : original.flush
        const readableType =
          original === null || original === void 0
            ? void 0
            : original.readableType
        const start =
          original === null || original === void 0 ? void 0 : original.start
        const transform =
          original === null || original === void 0 ? void 0 : original.transform
        const writableType =
          original === null || original === void 0
            ? void 0
            : original.writableType
        return {
          flush:
            flush === undefined
              ? undefined
              : convertTransformerFlushCallback(
                  flush,
                  original,
                  `${context} has member 'flush' that`
                ),
          readableType,
          start:
            start === undefined
              ? undefined
              : convertTransformerStartCallback(
                  start,
                  original,
                  `${context} has member 'start' that`
                ),
          transform:
            transform === undefined
              ? undefined
              : convertTransformerTransformCallback(
                  transform,
                  original,
                  `${context} has member 'transform' that`
                ),
          writableType
        }
      }
      function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context)
        return (controller) => promiseCall(fn, original, [controller])
      }
      function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context)
        return (controller) => reflectCall(fn, original, [controller])
      }
      function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context)
        return (chunk, controller) =>
          promiseCall(fn, original, [chunk, controller])
      }

      // Class TransformStream
      /**
       * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},
       * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.
       * In a manner specific to the transform stream in question, writes to the writable side result in new data being
       * made available for reading from the readable side.
       *
       * @public
       */
      class TransformStream {
        constructor(
          rawTransformer = {},
          rawWritableStrategy = {},
          rawReadableStrategy = {}
        ) {
          if (rawTransformer === undefined) {
            rawTransformer = null
          }
          const writableStrategy = convertQueuingStrategy(
            rawWritableStrategy,
            'Second parameter'
          )
          const readableStrategy = convertQueuingStrategy(
            rawReadableStrategy,
            'Third parameter'
          )
          const transformer = convertTransformer(
            rawTransformer,
            'First parameter'
          )
          if (transformer.readableType !== undefined) {
            throw new RangeError('Invalid readableType specified')
          }
          if (transformer.writableType !== undefined) {
            throw new RangeError('Invalid writableType specified')
          }
          const readableHighWaterMark = ExtractHighWaterMark(
            readableStrategy,
            0
          )
          const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy)
          const writableHighWaterMark = ExtractHighWaterMark(
            writableStrategy,
            1
          )
          const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy)
          let startPromise_resolve
          const startPromise = newPromise((resolve) => {
            startPromise_resolve = resolve
          })
          InitializeTransformStream(
            this,
            startPromise,
            writableHighWaterMark,
            writableSizeAlgorithm,
            readableHighWaterMark,
            readableSizeAlgorithm
          )
          SetUpTransformStreamDefaultControllerFromTransformer(
            this,
            transformer
          )
          if (transformer.start !== undefined) {
            startPromise_resolve(
              transformer.start(this._transformStreamController)
            )
          } else {
            startPromise_resolve(undefined)
          }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException('readable')
          }
          return this._readable
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException('writable')
          }
          return this._writable
        }
      }
      Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          TransformStream.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'TransformStream',
            configurable: true
          }
        )
      }
      function InitializeTransformStream(
        stream,
        startPromise,
        writableHighWaterMark,
        writableSizeAlgorithm,
        readableHighWaterMark,
        readableSizeAlgorithm
      ) {
        function startAlgorithm() {
          return startPromise
        }
        function writeAlgorithm(chunk) {
          return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk)
        }
        function abortAlgorithm(reason) {
          return TransformStreamDefaultSinkAbortAlgorithm(stream, reason)
        }
        function closeAlgorithm() {
          return TransformStreamDefaultSinkCloseAlgorithm(stream)
        }
        stream._writable = CreateWritableStream(
          startAlgorithm,
          writeAlgorithm,
          closeAlgorithm,
          abortAlgorithm,
          writableHighWaterMark,
          writableSizeAlgorithm
        )
        function pullAlgorithm() {
          return TransformStreamDefaultSourcePullAlgorithm(stream)
        }
        function cancelAlgorithm(reason) {
          TransformStreamErrorWritableAndUnblockWrite(stream, reason)
          return promiseResolvedWith(undefined)
        }
        stream._readable = CreateReadableStream(
          startAlgorithm,
          pullAlgorithm,
          cancelAlgorithm,
          readableHighWaterMark,
          readableSizeAlgorithm
        )
        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.
        stream._backpressure = undefined
        stream._backpressureChangePromise = undefined
        stream._backpressureChangePromise_resolve = undefined
        TransformStreamSetBackpressure(stream, true)
        stream._transformStreamController = undefined
      }
      function IsTransformStream(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_transformStreamController')
        ) {
          return false
        }
        return x instanceof TransformStream
      }
      // This is a no-op if both sides are already errored.
      function TransformStreamError(stream, e) {
        ReadableStreamDefaultControllerError(
          stream._readable._readableStreamController,
          e
        )
        TransformStreamErrorWritableAndUnblockWrite(stream, e)
      }
      function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
        TransformStreamDefaultControllerClearAlgorithms(
          stream._transformStreamController
        )
        WritableStreamDefaultControllerErrorIfNeeded(
          stream._writable._writableStreamController,
          e
        )
        if (stream._backpressure) {
          // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()
          // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time
          // _backpressure is set.
          TransformStreamSetBackpressure(stream, false)
        }
      }
      function TransformStreamSetBackpressure(stream, backpressure) {
        // Passes also when called during construction.
        if (stream._backpressureChangePromise !== undefined) {
          stream._backpressureChangePromise_resolve()
        }
        stream._backpressureChangePromise = newPromise((resolve) => {
          stream._backpressureChangePromise_resolve = resolve
        })
        stream._backpressure = backpressure
      }
      // Class TransformStreamDefaultController
      /**
       * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.
       *
       * @public
       */
      class TransformStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor')
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException('desiredSize')
          }
          const readableController =
            this._controlledTransformStream._readable._readableStreamController
          return ReadableStreamDefaultControllerGetDesiredSize(
            readableController
          )
        }
        enqueue(chunk = undefined) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException('enqueue')
          }
          TransformStreamDefaultControllerEnqueue(this, chunk)
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = undefined) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException('error')
          }
          TransformStreamDefaultControllerError(this, reason)
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException('terminate')
          }
          TransformStreamDefaultControllerTerminate(this)
        }
      }
      Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
      })
      if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(
          TransformStreamDefaultController.prototype,
          SymbolPolyfill.toStringTag,
          {
            value: 'TransformStreamDefaultController',
            configurable: true
          }
        )
      }
      // Transform Stream Default Controller Abstract Operations
      function IsTransformStreamDefaultController(x) {
        if (!typeIsObject(x)) {
          return false
        }
        if (
          !Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')
        ) {
          return false
        }
        return x instanceof TransformStreamDefaultController
      }
      function SetUpTransformStreamDefaultController(
        stream,
        controller,
        transformAlgorithm,
        flushAlgorithm
      ) {
        controller._controlledTransformStream = stream
        stream._transformStreamController = controller
        controller._transformAlgorithm = transformAlgorithm
        controller._flushAlgorithm = flushAlgorithm
      }
      function SetUpTransformStreamDefaultControllerFromTransformer(
        stream,
        transformer
      ) {
        const controller = Object.create(
          TransformStreamDefaultController.prototype
        )
        let transformAlgorithm = (chunk) => {
          try {
            TransformStreamDefaultControllerEnqueue(controller, chunk)
            return promiseResolvedWith(undefined)
          } catch (transformResultE) {
            return promiseRejectedWith(transformResultE)
          }
        }
        let flushAlgorithm = () => promiseResolvedWith(undefined)
        if (transformer.transform !== undefined) {
          transformAlgorithm = (chunk) =>
            transformer.transform(chunk, controller)
        }
        if (transformer.flush !== undefined) {
          flushAlgorithm = () => transformer.flush(controller)
        }
        SetUpTransformStreamDefaultController(
          stream,
          controller,
          transformAlgorithm,
          flushAlgorithm
        )
      }
      function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = undefined
        controller._flushAlgorithm = undefined
      }
      function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream
        const readableController = stream._readable._readableStreamController
        if (
          !ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)
        ) {
          throw new TypeError(
            'Readable side is not in a state that permits enqueue'
          )
        }
        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still
        // accept TransformStreamDefaultControllerEnqueue() calls.
        try {
          ReadableStreamDefaultControllerEnqueue(readableController, chunk)
        } catch (e) {
          // This happens when readableStrategy.size() throws.
          TransformStreamErrorWritableAndUnblockWrite(stream, e)
          throw stream._readable._storedError
        }
        const backpressure =
          ReadableStreamDefaultControllerHasBackpressure(readableController)
        if (backpressure !== stream._backpressure) {
          TransformStreamSetBackpressure(stream, true)
        }
      }
      function TransformStreamDefaultControllerError(controller, e) {
        TransformStreamError(controller._controlledTransformStream, e)
      }
      function TransformStreamDefaultControllerPerformTransform(
        controller,
        chunk
      ) {
        const transformPromise = controller._transformAlgorithm(chunk)
        return transformPromiseWith(transformPromise, undefined, (r) => {
          TransformStreamError(controller._controlledTransformStream, r)
          throw r
        })
      }
      function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream
        const readableController = stream._readable._readableStreamController
        ReadableStreamDefaultControllerClose(readableController)
        const error = new TypeError('TransformStream terminated')
        TransformStreamErrorWritableAndUnblockWrite(stream, error)
      }
      // TransformStreamDefaultSink Algorithms
      function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController
        if (stream._backpressure) {
          const backpressureChangePromise = stream._backpressureChangePromise
          return transformPromiseWith(backpressureChangePromise, () => {
            const writable = stream._writable
            const state = writable._state
            if (state === 'erroring') {
              throw writable._storedError
            }
            return TransformStreamDefaultControllerPerformTransform(
              controller,
              chunk
            )
          })
        }
        return TransformStreamDefaultControllerPerformTransform(
          controller,
          chunk
        )
      }
      function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already
        // errored.
        TransformStreamError(stream, reason)
        return promiseResolvedWith(undefined)
      }
      function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        // stream._readable cannot change after construction, so caching it across a call to user code is safe.
        const readable = stream._readable
        const controller = stream._transformStreamController
        const flushPromise = controller._flushAlgorithm()
        TransformStreamDefaultControllerClearAlgorithms(controller)
        // Return a promise that is fulfilled with undefined on success.
        return transformPromiseWith(
          flushPromise,
          () => {
            if (readable._state === 'errored') {
              throw readable._storedError
            }
            ReadableStreamDefaultControllerClose(
              readable._readableStreamController
            )
          },
          (r) => {
            TransformStreamError(stream, r)
            throw readable._storedError
          }
        )
      }
      // TransformStreamDefaultSource Algorithms
      function TransformStreamDefaultSourcePullAlgorithm(stream) {
        // Invariant. Enforced by the promises returned by start() and pull().
        TransformStreamSetBackpressure(stream, false)
        // Prevent the next pull() call until there is backpressure.
        return stream._backpressureChangePromise
      }
      // Helper functions for the TransformStreamDefaultController.
      function defaultControllerBrandCheckException(name) {
        return new TypeError(
          `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`
        )
      }
      // Helper functions for the TransformStream.
      function streamBrandCheckException(name) {
        return new TypeError(
          `TransformStream.prototype.${name} can only be used on a TransformStream`
        )
      }

      exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy
      exports.CountQueuingStrategy = CountQueuingStrategy
      exports.ReadableByteStreamController = ReadableByteStreamController
      exports.ReadableStream = ReadableStream
      exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader
      exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest
      exports.ReadableStreamDefaultController = ReadableStreamDefaultController
      exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader
      exports.TransformStream = TransformStream
      exports.TransformStreamDefaultController =
        TransformStreamDefaultController
      exports.WritableStream = WritableStream
      exports.WritableStreamDefaultController = WritableStreamDefaultController
      exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter

      Object.defineProperty(exports, '__esModule', { value: true })
    })
    //# sourceMappingURL=ponyfill.es2018.js.map

    /***/
  },

  /***/ 9491: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('assert')

    /***/
  },

  /***/ 852: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'async_hooks'
    )

    /***/
  },

  /***/ 4300: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('buffer')

    /***/
  },

  /***/ 6206: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'console'
    )

    /***/
  },

  /***/ 6113: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('crypto')

    /***/
  },

  /***/ 7643: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'diagnostics_channel'
    )

    /***/
  },

  /***/ 2361: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('events')

    /***/
  },

  /***/ 7147: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('fs')

    /***/
  },

  /***/ 3685: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('http')

    /***/
  },

  /***/ 5158: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('http2')

    /***/
  },

  /***/ 5687: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('https')

    /***/
  },

  /***/ 1808: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('net')

    /***/
  },

  /***/ 5673: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'node:events'
    )

    /***/
  },

  /***/ 7742: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'node:process'
    )

    /***/
  },

  /***/ 4492: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'node:stream'
    )

    /***/
  },

  /***/ 2477: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'node:stream/web'
    )

    /***/
  },

  /***/ 7261: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'node:util'
    )

    /***/
  },

  /***/ 2037: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('os')

    /***/
  },

  /***/ 1017: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('path')

    /***/
  },

  /***/ 4074: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'perf_hooks'
    )

    /***/
  },

  /***/ 3477: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'querystring'
    )

    /***/
  },

  /***/ 2781: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('stream')

    /***/
  },

  /***/ 5356: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'stream/web'
    )

    /***/
  },

  /***/ 1576: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'string_decoder'
    )

    /***/
  },

  /***/ 4404: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('tls')

    /***/
  },

  /***/ 7310: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('url')

    /***/
  },

  /***/ 3837: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('util')

    /***/
  },

  /***/ 9830: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'util/types'
    )

    /***/
  },

  /***/ 1267: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(
      'worker_threads'
    )

    /***/
  },

  /***/ 9796: /***/ (module) => {
    module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)('zlib')

    /***/
  },

  /***/ 2960: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const WritableStream = __nccwpck_require__(4492).Writable
    const inherits = __nccwpck_require__(7261).inherits

    const StreamSearch = __nccwpck_require__(1142)

    const PartStream = __nccwpck_require__(1620)
    const HeaderParser = __nccwpck_require__(2032)

    const DASH = 45
    const B_ONEDASH = Buffer.from('-')
    const B_CRLF = Buffer.from('\r\n')
    const EMPTY_FN = function () {}

    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg)
      }
      WritableStream.call(this, cfg)

      if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) {
        throw new TypeError('Boundary required')
      }

      if (typeof cfg.boundary === 'string') {
        this.setBoundary(cfg.boundary)
      } else {
        this._bparser = undefined
      }

      this._headerFirst = cfg.headerFirst

      this._dashes = 0
      this._parts = 0
      this._finished = false
      this._realFinish = false
      this._isPreamble = true
      this._justMatched = false
      this._firstWrite = true
      this._inHeader = true
      this._part = undefined
      this._cb = undefined
      this._ignoreData = false
      this._partOpts = { highWaterMark: cfg.partHwm }
      this._pause = false

      const self = this
      this._hparser = new HeaderParser(cfg)
      this._hparser.on('header', function (header) {
        self._inHeader = false
        self._part.emit('header', header)
      })
    }
    inherits(Dicer, WritableStream)

    Dicer.prototype.emit = function (ev) {
      if (ev === 'finish' && !this._realFinish) {
        if (!this._finished) {
          const self = this
          process.nextTick(function () {
            self.emit('error', new Error('Unexpected end of multipart data'))
            if (self._part && !self._ignoreData) {
              const type = self._isPreamble ? 'Preamble' : 'Part'
              self._part.emit(
                'error',
                new Error(
                  type +
                    ' terminated early due to unexpected end of multipart data'
                )
              )
              self._part.push(null)
              process.nextTick(function () {
                self._realFinish = true
                self.emit('finish')
                self._realFinish = false
              })
              return
            }
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          })
        }
      } else {
        WritableStream.prototype.emit.apply(this, arguments)
      }
    }

    Dicer.prototype._write = function (data, encoding, cb) {
      // ignore unexpected data (e.g. extra trailer data after finished)
      if (!this._hparser && !this._bparser) {
        return cb()
      }

      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts)
          if (this._events.preamble) {
            this.emit('preamble', this._part)
          } else {
            this._ignore()
          }
        }
        const r = this._hparser.push(data)
        if (!this._inHeader && r !== undefined && r < data.length) {
          data = data.slice(r)
        } else {
          return cb()
        }
      }

      // allows for "easier" testing
      if (this._firstWrite) {
        this._bparser.push(B_CRLF)
        this._firstWrite = false
      }

      this._bparser.push(data)

      if (this._pause) {
        this._cb = cb
      } else {
        cb()
      }
    }

    Dicer.prototype.reset = function () {
      this._part = undefined
      this._bparser = undefined
      this._hparser = undefined
    }

    Dicer.prototype.setBoundary = function (boundary) {
      const self = this
      this._bparser = new StreamSearch('\r\n--' + boundary)
      this._bparser.on('info', function (isMatch, data, start, end) {
        self._oninfo(isMatch, data, start, end)
      })
    }

    Dicer.prototype._ignore = function () {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true
        this._part.on('error', EMPTY_FN)
        // we must perform some kind of read on the stream even though we are
        // ignoring the data, otherwise node's Readable stream will not emit 'end'
        // after pushing null to the stream
        this._part.resume()
      }
    }

    Dicer.prototype._oninfo = function (isMatch, data, start, end) {
      let buf
      const self = this
      let i = 0
      let r
      let shouldWriteMore = true

      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start + i < end) {
          if (data[start + i] === DASH) {
            ++i
            ++this._dashes
          } else {
            if (this._dashes) {
              buf = B_ONEDASH
            }
            this._dashes = 0
            break
          }
        }
        if (this._dashes === 2) {
          if (start + i < end && this._events.trailer) {
            this.emit('trailer', data.slice(start + i, end))
          }
          this.reset()
          this._finished = true
          // no more parts will be added
          if (self._parts === 0) {
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          }
        }
        if (this._dashes) {
          return
        }
      }
      if (this._justMatched) {
        this._justMatched = false
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts)
        this._part._read = function (n) {
          self._unpause()
        }
        if (this._isPreamble && this._events.preamble) {
          this.emit('preamble', this._part)
        } else if (this._isPreamble !== true && this._events.part) {
          this.emit('part', this._part)
        } else {
          this._ignore()
        }
        if (!this._isPreamble) {
          this._inHeader = true
        }
      }
      if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf)
          }
          shouldWriteMore = this._part.push(data.slice(start, end))
          if (!shouldWriteMore) {
            this._pause = true
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf)
          }
          r = this._hparser.push(data.slice(start, end))
          if (!this._inHeader && r !== undefined && r < end) {
            this._oninfo(false, data, start + r, end)
          }
        }
      }
      if (isMatch) {
        this._hparser.reset()
        if (this._isPreamble) {
          this._isPreamble = false
        } else {
          if (start !== end) {
            ++this._parts
            this._part.on('end', function () {
              if (--self._parts === 0) {
                if (self._finished) {
                  self._realFinish = true
                  self.emit('finish')
                  self._realFinish = false
                } else {
                  self._unpause()
                }
              }
            })
          }
        }
        this._part.push(null)
        this._part = undefined
        this._ignoreData = false
        this._justMatched = true
        this._dashes = 0
      }
    }

    Dicer.prototype._unpause = function () {
      if (!this._pause) {
        return
      }

      this._pause = false
      if (this._cb) {
        const cb = this._cb
        this._cb = undefined
        cb()
      }
    }

    module.exports = Dicer

    /***/
  },

  /***/ 2032: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const EventEmitter = __nccwpck_require__(5673).EventEmitter
    const inherits = __nccwpck_require__(7261).inherits
    const getLimit = __nccwpck_require__(1467)

    const StreamSearch = __nccwpck_require__(1142)

    const B_DCRLF = Buffer.from('\r\n\r\n')
    const RE_CRLF = /\r\n/g
    const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex

    function HeaderParser(cfg) {
      EventEmitter.call(this)

      cfg = cfg || {}
      const self = this
      this.nread = 0
      this.maxed = false
      this.npairs = 0
      this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)
      this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)
      this.buffer = ''
      this.header = {}
      this.finished = false
      this.ss = new StreamSearch(B_DCRLF)
      this.ss.on('info', function (isMatch, data, start, end) {
        if (data && !self.maxed) {
          if (self.nread + end - start >= self.maxHeaderSize) {
            end = self.maxHeaderSize - self.nread + start
            self.nread = self.maxHeaderSize
            self.maxed = true
          } else {
            self.nread += end - start
          }

          self.buffer += data.toString('binary', start, end)
        }
        if (isMatch) {
          self._finish()
        }
      })
    }
    inherits(HeaderParser, EventEmitter)

    HeaderParser.prototype.push = function (data) {
      const r = this.ss.push(data)
      if (this.finished) {
        return r
      }
    }

    HeaderParser.prototype.reset = function () {
      this.finished = false
      this.buffer = ''
      this.header = {}
      this.ss.reset()
    }

    HeaderParser.prototype._finish = function () {
      if (this.buffer) {
        this._parseHeader()
      }
      this.ss.matches = this.ss.maxMatches
      const header = this.header
      this.header = {}
      this.buffer = ''
      this.finished = true
      this.nread = this.npairs = 0
      this.maxed = false
      this.emit('header', header)
    }

    HeaderParser.prototype._parseHeader = function () {
      if (this.npairs === this.maxHeaderPairs) {
        return
      }

      const lines = this.buffer.split(RE_CRLF)
      const len = lines.length
      let m, h

      for (var i = 0; i < len; ++i) {
        // eslint-disable-line no-var
        if (lines[i].length === 0) {
          continue
        }
        if (lines[i][0] === '\t' || lines[i][0] === ' ') {
          // folded header content
          // RFC2822 says to just remove the CRLF and not the whitespace following
          // it, so we follow the RFC and include the leading whitespace ...
          if (h) {
            this.header[h][this.header[h].length - 1] += lines[i]
            continue
          }
        }

        const posColon = lines[i].indexOf(':')
        if (posColon === -1 || posColon === 0) {
          return
        }
        m = RE_HDR.exec(lines[i])
        h = m[1].toLowerCase()
        this.header[h] = this.header[h] || []
        this.header[h].push(m[2] || '')
        if (++this.npairs === this.maxHeaderPairs) {
          break
        }
      }
    }

    module.exports = HeaderParser

    /***/
  },

  /***/ 1620: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const inherits = __nccwpck_require__(7261).inherits
    const ReadableStream = __nccwpck_require__(4492).Readable

    function PartStream(opts) {
      ReadableStream.call(this, opts)
    }
    inherits(PartStream, ReadableStream)

    PartStream.prototype._read = function (n) {}

    module.exports = PartStream

    /***/
  },

  /***/ 1142: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    /**
     * Copyright Brian White. All rights reserved.
     *
     * @see https://github.com/mscdex/streamsearch
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to
     * deal in the Software without restriction, including without limitation the
     * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
     * sell copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
     * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
     */
    const EventEmitter = __nccwpck_require__(5673).EventEmitter
    const inherits = __nccwpck_require__(7261).inherits

    function SBMH(needle) {
      if (typeof needle === 'string') {
        needle = Buffer.from(needle)
      }

      if (!Buffer.isBuffer(needle)) {
        throw new TypeError('The needle has to be a String or a Buffer.')
      }

      const needleLength = needle.length

      if (needleLength === 0) {
        throw new Error('The needle cannot be an empty String/Buffer.')
      }

      if (needleLength > 256) {
        throw new Error('The needle cannot have a length bigger than 256.')
      }

      this.maxMatches = Infinity
      this.matches = 0

      this._occ = new Array(256).fill(needleLength) // Initialize occurrence table.
      this._lookbehind_size = 0
      this._needle = needle
      this._bufpos = 0

      this._lookbehind = Buffer.alloc(needleLength)

      // Populate occurrence table with analysis of the needle,
      // ignoring last letter.
      for (var i = 0; i < needleLength - 1; ++i) {
        // eslint-disable-line no-var
        this._occ[needle[i]] = needleLength - 1 - i
      }
    }
    inherits(SBMH, EventEmitter)

    SBMH.prototype.reset = function () {
      this._lookbehind_size = 0
      this.matches = 0
      this._bufpos = 0
    }

    SBMH.prototype.push = function (chunk, pos) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, 'binary')
      }
      const chlen = chunk.length
      this._bufpos = pos || 0
      let r
      while (r !== chlen && this.matches < this.maxMatches) {
        r = this._sbmh_feed(chunk)
      }
      return r
    }

    SBMH.prototype._sbmh_feed = function (data) {
      const len = data.length
      const needle = this._needle
      const needleLength = needle.length
      const lastNeedleChar = needle[needleLength - 1]

      // Positive: points to a position in `data`
      //           pos == 3 points to data[3]
      // Negative: points to a position in the lookbehind buffer
      //           pos == -2 points to lookbehind[lookbehind_size - 2]
      let pos = -this._lookbehind_size
      let ch

      if (pos < 0) {
        // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
        // search with character lookup code that considers both the
        // lookbehind buffer and the current round's haystack data.
        //
        // Loop until
        //   there is a match.
        // or until
        //   we've moved past the position that requires the
        //   lookbehind buffer. In this case we switch to the
        //   optimized loop.
        // or until
        //   the character to look at lies outside the haystack.
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1)

          if (
            ch === lastNeedleChar &&
            this._sbmh_memcmp(data, pos, needleLength - 1)
          ) {
            this._lookbehind_size = 0
            ++this.matches
            this.emit('info', true)

            return (this._bufpos = pos + needleLength)
          }
          pos += this._occ[ch]
        }

        // No match.

        if (pos < 0) {
          // There's too few data for Boyer-Moore-Horspool to run,
          // so let's use a different algorithm to skip as much as
          // we can.
          // Forward pos until
          //   the trailing part of lookbehind + data
          //   looks like the beginning of the needle
          // or until
          //   pos == 0
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos
          }
        }

        if (pos >= 0) {
          // Discard lookbehind buffer.
          this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)
          this._lookbehind_size = 0
        } else {
          // Cut off part of the lookbehind buffer that has
          // been processed and append the entire haystack
          // into it.
          const bytesToCutOff = this._lookbehind_size + pos
          if (bytesToCutOff > 0) {
            // The cut off data is guaranteed not to contain the needle.
            this.emit('info', false, this._lookbehind, 0, bytesToCutOff)
          }

          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          )
          this._lookbehind_size -= bytesToCutOff

          data.copy(this._lookbehind, this._lookbehind_size)
          this._lookbehind_size += len

          this._bufpos = len
          return len
        }
      }

      pos += (pos >= 0) * this._bufpos

      // Lookbehind buffer is now empty. We only need to check if the
      // needle is in the haystack.
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos)
        ++this.matches
        if (pos > 0) {
          this.emit('info', true, data, this._bufpos, pos)
        } else {
          this.emit('info', true)
        }

        return (this._bufpos = pos + needleLength)
      } else {
        pos = len - needleLength
      }

      // There was no match. If there's trailing haystack data that we cannot
      // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
      // data is less than the needle size) then match using a modified
      // algorithm that starts matching from the beginning instead of the end.
      // Whatever trailing data is left after running this algorithm is added to
      // the lookbehind buffer.
      while (
        pos < len &&
        (data[pos] !== needle[0] ||
          Buffer.compare(
            data.subarray(pos, pos + len - pos),
            needle.subarray(0, len - pos)
          ) !== 0)
      ) {
        ++pos
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos))
        this._lookbehind_size = len - pos
      }

      // Everything until pos is guaranteed not to contain needle data.
      if (pos > 0) {
        this.emit('info', false, data, this._bufpos, pos < len ? pos : len)
      }

      this._bufpos = len
      return len
    }

    SBMH.prototype._sbmh_lookup_char = function (data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos]
    }

    SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
      for (var i = 0; i < len; ++i) {
        // eslint-disable-line no-var
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
          return false
        }
      }
      return true
    }

    module.exports = SBMH

    /***/
  },

  /***/ 727: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const WritableStream = __nccwpck_require__(4492).Writable
    const { inherits } = __nccwpck_require__(7261)
    const Dicer = __nccwpck_require__(2960)

    const MultipartParser = __nccwpck_require__(2183)
    const UrlencodedParser = __nccwpck_require__(8306)
    const parseParams = __nccwpck_require__(1854)

    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts)
      }

      if (typeof opts !== 'object') {
        throw new TypeError('Busboy expected an options-Object.')
      }
      if (typeof opts.headers !== 'object') {
        throw new TypeError(
          'Busboy expected an options-Object with headers-attribute.'
        )
      }
      if (typeof opts.headers['content-type'] !== 'string') {
        throw new TypeError('Missing Content-Type-header.')
      }

      const { headers, ...streamOptions } = opts

      this.opts = {
        autoDestroy: false,
        ...streamOptions
      }
      WritableStream.call(this, this.opts)

      this._done = false
      this._parser = this.getParserByHeaders(headers)
      this._finished = false
    }
    inherits(Busboy, WritableStream)

    Busboy.prototype.emit = function (ev) {
      if (ev === 'finish') {
        if (!this._done) {
          this._parser?.end()
          return
        } else if (this._finished) {
          return
        }
        this._finished = true
      }
      WritableStream.prototype.emit.apply(this, arguments)
    }

    Busboy.prototype.getParserByHeaders = function (headers) {
      const parsed = parseParams(headers['content-type'])

      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      }

      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg)
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg)
      }
      throw new Error('Unsupported Content-Type.')
    }

    Busboy.prototype._write = function (chunk, encoding, cb) {
      this._parser.write(chunk, cb)
    }

    module.exports = Busboy
    module.exports['default'] = Busboy
    module.exports.Busboy = Busboy

    module.exports.Dicer = Dicer

    /***/
  },

  /***/ 2183: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    // TODO:
    //  * support 1 nested multipart level
    //    (see second multipart example here:
    //     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
    //  * support limits.fieldNameSize
    //     -- this will require modifications to utils.parseParams

    const { Readable } = __nccwpck_require__(4492)
    const { inherits } = __nccwpck_require__(7261)

    const Dicer = __nccwpck_require__(2960)

    const parseParams = __nccwpck_require__(1854)
    const decodeText = __nccwpck_require__(4619)
    const basename = __nccwpck_require__(8647)
    const getLimit = __nccwpck_require__(1467)

    const RE_BOUNDARY = /^boundary$/i
    const RE_FIELD = /^form-data$/i
    const RE_CHARSET = /^charset$/i
    const RE_FILENAME = /^filename$/i
    const RE_NAME = /^name$/i

    Multipart.detect = /^multipart\/form-data/i
    function Multipart(boy, cfg) {
      let i
      let len
      const self = this
      let boundary
      const limits = cfg.limits
      const isPartAFile =
        cfg.isPartAFile ||
        ((fieldName, contentType, fileName) =>
          contentType === 'application/octet-stream' || fileName !== undefined)
      const parsedConType = cfg.parsedConType || []
      const defCharset = cfg.defCharset || 'utf8'
      const preservePath = cfg.preservePath
      const fileOpts = { highWaterMark: cfg.fileHwm }

      for (i = 0, len = parsedConType.length; i < len; ++i) {
        if (
          Array.isArray(parsedConType[i]) &&
          RE_BOUNDARY.test(parsedConType[i][0])
        ) {
          boundary = parsedConType[i][1]
          break
        }
      }

      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false
          self.end()
        }
      }

      if (typeof boundary !== 'string') {
        throw new Error('Multipart: Boundary not found')
      }

      const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
      const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)
      const filesLimit = getLimit(limits, 'files', Infinity)
      const fieldsLimit = getLimit(limits, 'fields', Infinity)
      const partsLimit = getLimit(limits, 'parts', Infinity)
      const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)
      const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)

      let nfiles = 0
      let nfields = 0
      let nends = 0
      let curFile
      let curField
      let finished = false

      this._needDrain = false
      this._pause = false
      this._cb = undefined
      this._nparts = 0
      this._boy = boy

      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      }

      this.parser = new Dicer(parserCfg)
      this.parser
        .on('drain', function () {
          self._needDrain = false
          if (self._cb && !self._pause) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        })
        .on('part', function onPart(part) {
          if (++self._nparts > partsLimit) {
            self.parser.removeListener('part', onPart)
            self.parser.on('part', skipPart)
            boy.hitPartsLimit = true
            boy.emit('partsLimit')
            return skipPart(part)
          }

          // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
          // us emit 'end' early since we know the part has ended if we are already
          // seeing the next part
          if (curField) {
            const field = curField
            field.emit('end')
            field.removeAllListeners('end')
          }

          part
            .on('header', function (header) {
              let contype
              let fieldname
              let parsed
              let charset
              let encoding
              let filename
              let nsize = 0

              if (header['content-type']) {
                parsed = parseParams(header['content-type'][0])
                if (parsed[0]) {
                  contype = parsed[0].toLowerCase()
                  for (i = 0, len = parsed.length; i < len; ++i) {
                    if (RE_CHARSET.test(parsed[i][0])) {
                      charset = parsed[i][1].toLowerCase()
                      break
                    }
                  }
                }
              }

              if (contype === undefined) {
                contype = 'text/plain'
              }
              if (charset === undefined) {
                charset = defCharset
              }

              if (header['content-disposition']) {
                parsed = parseParams(header['content-disposition'][0])
                if (!RE_FIELD.test(parsed[0])) {
                  return skipPart(part)
                }
                for (i = 0, len = parsed.length; i < len; ++i) {
                  if (RE_NAME.test(parsed[i][0])) {
                    fieldname = parsed[i][1]
                  } else if (RE_FILENAME.test(parsed[i][0])) {
                    filename = parsed[i][1]
                    if (!preservePath) {
                      filename = basename(filename)
                    }
                  }
                }
              } else {
                return skipPart(part)
              }

              if (header['content-transfer-encoding']) {
                encoding = header['content-transfer-encoding'][0].toLowerCase()
              } else {
                encoding = '7bit'
              }

              let onData, onEnd

              if (isPartAFile(fieldname, contype, filename)) {
                // file/binary field
                if (nfiles === filesLimit) {
                  if (!boy.hitFilesLimit) {
                    boy.hitFilesLimit = true
                    boy.emit('filesLimit')
                  }
                  return skipPart(part)
                }

                ++nfiles

                if (!boy._events.file) {
                  self.parser._ignore()
                  return
                }

                ++nends
                const file = new FileStream(fileOpts)
                curFile = file
                file.on('end', function () {
                  --nends
                  self._pause = false
                  checkFinished()
                  if (self._cb && !self._needDrain) {
                    const cb = self._cb
                    self._cb = undefined
                    cb()
                  }
                })
                file._read = function (n) {
                  if (!self._pause) {
                    return
                  }
                  self._pause = false
                  if (self._cb && !self._needDrain) {
                    const cb = self._cb
                    self._cb = undefined
                    cb()
                  }
                }
                boy.emit('file', fieldname, file, filename, encoding, contype)

                onData = function (data) {
                  if ((nsize += data.length) > fileSizeLimit) {
                    const extralen = fileSizeLimit - nsize + data.length
                    if (extralen > 0) {
                      file.push(data.slice(0, extralen))
                    }
                    file.truncated = true
                    file.bytesRead = fileSizeLimit
                    part.removeAllListeners('data')
                    file.emit('limit')
                    return
                  } else if (!file.push(data)) {
                    self._pause = true
                  }

                  file.bytesRead = nsize
                }

                onEnd = function () {
                  curFile = undefined
                  file.push(null)
                }
              } else {
                // non-file field
                if (nfields === fieldsLimit) {
                  if (!boy.hitFieldsLimit) {
                    boy.hitFieldsLimit = true
                    boy.emit('fieldsLimit')
                  }
                  return skipPart(part)
                }

                ++nfields
                ++nends
                let buffer = ''
                let truncated = false
                curField = part

                onData = function (data) {
                  if ((nsize += data.length) > fieldSizeLimit) {
                    const extralen = fieldSizeLimit - (nsize - data.length)
                    buffer += data.toString('binary', 0, extralen)
                    truncated = true
                    part.removeAllListeners('data')
                  } else {
                    buffer += data.toString('binary')
                  }
                }

                onEnd = function () {
                  curField = undefined
                  if (buffer.length) {
                    buffer = decodeText(buffer, 'binary', charset)
                  }
                  boy.emit(
                    'field',
                    fieldname,
                    buffer,
                    false,
                    truncated,
                    encoding,
                    contype
                  )
                  --nends
                  checkFinished()
                }
              }

              /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */
              part._readableState.sync = false

              part.on('data', onData)
              part.on('end', onEnd)
            })
            .on('error', function (err) {
              if (curFile) {
                curFile.emit('error', err)
              }
            })
        })
        .on('error', function (err) {
          boy.emit('error', err)
        })
        .on('finish', function () {
          finished = true
          checkFinished()
        })
    }

    Multipart.prototype.write = function (chunk, cb) {
      const r = this.parser.write(chunk)
      if (r && !this._pause) {
        cb()
      } else {
        this._needDrain = !r
        this._cb = cb
      }
    }

    Multipart.prototype.end = function () {
      const self = this

      if (self.parser.writable) {
        self.parser.end()
      } else if (!self._boy._done) {
        process.nextTick(function () {
          self._boy._done = true
          self._boy.emit('finish')
        })
      }
    }

    function skipPart(part) {
      part.resume()
    }

    function FileStream(opts) {
      Readable.call(this, opts)

      this.bytesRead = 0

      this.truncated = false
    }

    inherits(FileStream, Readable)

    FileStream.prototype._read = function (n) {}

    module.exports = Multipart

    /***/
  },

  /***/ 8306: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    const Decoder = __nccwpck_require__(7100)
    const decodeText = __nccwpck_require__(4619)
    const getLimit = __nccwpck_require__(1467)

    const RE_CHARSET = /^charset$/i

    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits
      const parsedConType = cfg.parsedConType
      this.boy = boy

      this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
      this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)
      this.fieldsLimit = getLimit(limits, 'fields', Infinity)

      let charset
      for (var i = 0, len = parsedConType.length; i < len; ++i) {
        // eslint-disable-line no-var
        if (
          Array.isArray(parsedConType[i]) &&
          RE_CHARSET.test(parsedConType[i][0])
        ) {
          charset = parsedConType[i][1].toLowerCase()
          break
        }
      }

      if (charset === undefined) {
        charset = cfg.defCharset || 'utf8'
      }

      this.decoder = new Decoder()
      this.charset = charset
      this._fields = 0
      this._state = 'key'
      this._checkingBytes = true
      this._bytesKey = 0
      this._bytesVal = 0
      this._key = ''
      this._val = ''
      this._keyTrunc = false
      this._valTrunc = false
      this._hitLimit = false
    }

    UrlEncoded.prototype.write = function (data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true
          this.boy.emit('fieldsLimit')
        }
        return cb()
      }

      let idxeq
      let idxamp
      let i
      let p = 0
      const len = data.length

      while (p < len) {
        if (this._state === 'key') {
          idxeq = idxamp = undefined
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p
            }
            if (data[i] === 0x3d /* = */) {
              idxeq = i
              break
            } else if (data[i] === 0x26 /* & */) {
              idxamp = i
              break
            }
            if (
              this._checkingBytes &&
              this._bytesKey === this.fieldNameSizeLimit
            ) {
              this._hitLimit = true
              break
            } else if (this._checkingBytes) {
              ++this._bytesKey
            }
          }

          if (idxeq !== undefined) {
            // key with assignment
            if (idxeq > p) {
              this._key += this.decoder.write(data.toString('binary', p, idxeq))
            }
            this._state = 'val'

            this._hitLimit = false
            this._checkingBytes = true
            this._val = ''
            this._bytesVal = 0
            this._valTrunc = false
            this.decoder.reset()

            p = idxeq + 1
          } else if (idxamp !== undefined) {
            // key with no assignment
            ++this._fields
            let key
            const keyTrunc = this._keyTrunc
            if (idxamp > p) {
              key = this._key += this.decoder.write(
                data.toString('binary', p, idxamp)
              )
            } else {
              key = this._key
            }

            this._hitLimit = false
            this._checkingBytes = true
            this._key = ''
            this._bytesKey = 0
            this._keyTrunc = false
            this.decoder.reset()

            if (key.length) {
              this.boy.emit(
                'field',
                decodeText(key, 'binary', this.charset),
                '',
                keyTrunc,
                false
              )
            }

            p = idxamp + 1
            if (this._fields === this.fieldsLimit) {
              return cb()
            }
          } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) {
              this._key += this.decoder.write(data.toString('binary', p, i))
            }
            p = i
            if (
              (this._bytesKey = this._key.length) === this.fieldNameSizeLimit
            ) {
              // yep, we actually did hit the limit
              this._checkingBytes = false
              this._keyTrunc = true
            }
          } else {
            if (p < len) {
              this._key += this.decoder.write(data.toString('binary', p))
            }
            p = len
          }
        } else {
          idxamp = undefined
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p
            }
            if (data[i] === 0x26 /* & */) {
              idxamp = i
              break
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true
              break
            } else if (this._checkingBytes) {
              ++this._bytesVal
            }
          }

          if (idxamp !== undefined) {
            ++this._fields
            if (idxamp > p) {
              this._val += this.decoder.write(
                data.toString('binary', p, idxamp)
              )
            }
            this.boy.emit(
              'field',
              decodeText(this._key, 'binary', this.charset),
              decodeText(this._val, 'binary', this.charset),
              this._keyTrunc,
              this._valTrunc
            )
            this._state = 'key'

            this._hitLimit = false
            this._checkingBytes = true
            this._key = ''
            this._bytesKey = 0
            this._keyTrunc = false
            this.decoder.reset()

            p = idxamp + 1
            if (this._fields === this.fieldsLimit) {
              return cb()
            }
          } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) {
              this._val += this.decoder.write(data.toString('binary', p, i))
            }
            p = i
            if (
              (this._val === '' && this.fieldSizeLimit === 0) ||
              (this._bytesVal = this._val.length) === this.fieldSizeLimit
            ) {
              // yep, we actually did hit the limit
              this._checkingBytes = false
              this._valTrunc = true
            }
          } else {
            if (p < len) {
              this._val += this.decoder.write(data.toString('binary', p))
            }
            p = len
          }
        }
      }
      cb()
    }

    UrlEncoded.prototype.end = function () {
      if (this.boy._done) {
        return
      }

      if (this._state === 'key' && this._key.length > 0) {
        this.boy.emit(
          'field',
          decodeText(this._key, 'binary', this.charset),
          '',
          this._keyTrunc,
          false
        )
      } else if (this._state === 'val') {
        this.boy.emit(
          'field',
          decodeText(this._key, 'binary', this.charset),
          decodeText(this._val, 'binary', this.charset),
          this._keyTrunc,
          this._valTrunc
        )
      }
      this.boy._done = true
      this.boy.emit('finish')
    }

    module.exports = UrlEncoded

    /***/
  },

  /***/ 7100: /***/ (module) => {
    const RE_PLUS = /\+/g

    const HEX = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
      1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0
    ]

    function Decoder() {
      this.buffer = undefined
    }
    Decoder.prototype.write = function (str) {
      // Replace '+' with ' ' before decoding
      str = str.replace(RE_PLUS, ' ')
      let res = ''
      let i = 0
      let p = 0
      const len = str.length
      for (; i < len; ++i) {
        if (this.buffer !== undefined) {
          if (!HEX[str.charCodeAt(i)]) {
            res += '%' + this.buffer
            this.buffer = undefined
            --i // retry character
          } else {
            this.buffer += str[i]
            ++p
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16))
              this.buffer = undefined
            }
          }
        } else if (str[i] === '%') {
          if (i > p) {
            res += str.substring(p, i)
            p = i
          }
          this.buffer = ''
          ++p
        }
      }
      if (p < len && this.buffer === undefined) {
        res += str.substring(p)
      }
      return res
    }
    Decoder.prototype.reset = function () {
      this.buffer = undefined
    }

    module.exports = Decoder

    /***/
  },

  /***/ 8647: /***/ (module) => {
    module.exports = function basename(path) {
      if (typeof path !== 'string') {
        return ''
      }
      for (var i = path.length - 1; i >= 0; --i) {
        // eslint-disable-line no-var
        switch (path.charCodeAt(i)) {
          case 0x2f: // '/'
          case 0x5c: // '\'
            path = path.slice(i + 1)
            return path === '..' || path === '.' ? '' : path
        }
      }
      return path === '..' || path === '.' ? '' : path
    }

    /***/
  },

  /***/ 4619: /***/ function (module) {
    // Node has always utf-8
    const utf8Decoder = new TextDecoder('utf-8')
    const textDecoders = new Map([
      ['utf-8', utf8Decoder],
      ['utf8', utf8Decoder]
    ])

    function getDecoder(charset) {
      let lc
      while (true) {
        switch (charset) {
          case 'utf-8':
          case 'utf8':
            return decoders.utf8
          case 'latin1':
          case 'ascii': // TODO: Make these a separate, strict decoder?
          case 'us-ascii':
          case 'iso-8859-1':
          case 'iso8859-1':
          case 'iso88591':
          case 'iso_8859-1':
          case 'windows-1252':
          case 'iso_8859-1:1987':
          case 'cp1252':
          case 'x-cp1252':
            return decoders.latin1
          case 'utf16le':
          case 'utf-16le':
          case 'ucs2':
          case 'ucs-2':
            return decoders.utf16le
          case 'base64':
            return decoders.base64
          default:
            if (lc === undefined) {
              lc = true
              charset = charset.toLowerCase()
              continue
            }
            return decoders.other.bind(charset)
        }
      }
    }

    const decoders = {
      utf8: (data, sourceEncoding) => {
        if (data.length === 0) {
          return ''
        }
        if (typeof data === 'string') {
          data = Buffer.from(data, sourceEncoding)
        }
        return data.utf8Slice(0, data.length)
      },

      latin1: (data, sourceEncoding) => {
        if (data.length === 0) {
          return ''
        }
        if (typeof data === 'string') {
          return data
        }
        return data.latin1Slice(0, data.length)
      },

      utf16le: (data, sourceEncoding) => {
        if (data.length === 0) {
          return ''
        }
        if (typeof data === 'string') {
          data = Buffer.from(data, sourceEncoding)
        }
        return data.ucs2Slice(0, data.length)
      },

      base64: (data, sourceEncoding) => {
        if (data.length === 0) {
          return ''
        }
        if (typeof data === 'string') {
          data = Buffer.from(data, sourceEncoding)
        }
        return data.base64Slice(0, data.length)
      },

      other: (data, sourceEncoding) => {
        if (data.length === 0) {
          return ''
        }
        if (typeof data === 'string') {
          data = Buffer.from(data, sourceEncoding)
        }

        if (textDecoders.has(this.toString())) {
          try {
            return textDecoders.get(this).decode(data)
          } catch (e) {}
        }
        return typeof data === 'string' ? data : data.toString()
      }
    }

    function decodeText(text, sourceEncoding, destEncoding) {
      if (text) {
        return getDecoder(destEncoding)(text, sourceEncoding)
      }
      return text
    }

    module.exports = decodeText

    /***/
  },

  /***/ 1467: /***/ (module) => {
    module.exports = function getLimit(limits, name, defaultLimit) {
      if (!limits || limits[name] === undefined || limits[name] === null) {
        return defaultLimit
      }

      if (typeof limits[name] !== 'number' || isNaN(limits[name])) {
        throw new TypeError('Limit ' + name + ' is not a valid number')
      }

      return limits[name]
    }

    /***/
  },

  /***/ 1854: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
    /* eslint-disable object-property-newline */

    const decodeText = __nccwpck_require__(4619)

    const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g

    const EncodedLookup = {
      '%00': '\x00',
      '%01': '\x01',
      '%02': '\x02',
      '%03': '\x03',
      '%04': '\x04',
      '%05': '\x05',
      '%06': '\x06',
      '%07': '\x07',
      '%08': '\x08',
      '%09': '\x09',
      '%0a': '\x0a',
      '%0A': '\x0a',
      '%0b': '\x0b',
      '%0B': '\x0b',
      '%0c': '\x0c',
      '%0C': '\x0c',
      '%0d': '\x0d',
      '%0D': '\x0d',
      '%0e': '\x0e',
      '%0E': '\x0e',
      '%0f': '\x0f',
      '%0F': '\x0f',
      '%10': '\x10',
      '%11': '\x11',
      '%12': '\x12',
      '%13': '\x13',
      '%14': '\x14',
      '%15': '\x15',
      '%16': '\x16',
      '%17': '\x17',
      '%18': '\x18',
      '%19': '\x19',
      '%1a': '\x1a',
      '%1A': '\x1a',
      '%1b': '\x1b',
      '%1B': '\x1b',
      '%1c': '\x1c',
      '%1C': '\x1c',
      '%1d': '\x1d',
      '%1D': '\x1d',
      '%1e': '\x1e',
      '%1E': '\x1e',
      '%1f': '\x1f',
      '%1F': '\x1f',
      '%20': '\x20',
      '%21': '\x21',
      '%22': '\x22',
      '%23': '\x23',
      '%24': '\x24',
      '%25': '\x25',
      '%26': '\x26',
      '%27': '\x27',
      '%28': '\x28',
      '%29': '\x29',
      '%2a': '\x2a',
      '%2A': '\x2a',
      '%2b': '\x2b',
      '%2B': '\x2b',
      '%2c': '\x2c',
      '%2C': '\x2c',
      '%2d': '\x2d',
      '%2D': '\x2d',
      '%2e': '\x2e',
      '%2E': '\x2e',
      '%2f': '\x2f',
      '%2F': '\x2f',
      '%30': '\x30',
      '%31': '\x31',
      '%32': '\x32',
      '%33': '\x33',
      '%34': '\x34',
      '%35': '\x35',
      '%36': '\x36',
      '%37': '\x37',
      '%38': '\x38',
      '%39': '\x39',
      '%3a': '\x3a',
      '%3A': '\x3a',
      '%3b': '\x3b',
      '%3B': '\x3b',
      '%3c': '\x3c',
      '%3C': '\x3c',
      '%3d': '\x3d',
      '%3D': '\x3d',
      '%3e': '\x3e',
      '%3E': '\x3e',
      '%3f': '\x3f',
      '%3F': '\x3f',
      '%40': '\x40',
      '%41': '\x41',
      '%42': '\x42',
      '%43': '\x43',
      '%44': '\x44',
      '%45': '\x45',
      '%46': '\x46',
      '%47': '\x47',
      '%48': '\x48',
      '%49': '\x49',
      '%4a': '\x4a',
      '%4A': '\x4a',
      '%4b': '\x4b',
      '%4B': '\x4b',
      '%4c': '\x4c',
      '%4C': '\x4c',
      '%4d': '\x4d',
      '%4D': '\x4d',
      '%4e': '\x4e',
      '%4E': '\x4e',
      '%4f': '\x4f',
      '%4F': '\x4f',
      '%50': '\x50',
      '%51': '\x51',
      '%52': '\x52',
      '%53': '\x53',
      '%54': '\x54',
      '%55': '\x55',
      '%56': '\x56',
      '%57': '\x57',
      '%58': '\x58',
      '%59': '\x59',
      '%5a': '\x5a',
      '%5A': '\x5a',
      '%5b': '\x5b',
      '%5B': '\x5b',
      '%5c': '\x5c',
      '%5C': '\x5c',
      '%5d': '\x5d',
      '%5D': '\x5d',
      '%5e': '\x5e',
      '%5E': '\x5e',
      '%5f': '\x5f',
      '%5F': '\x5f',
      '%60': '\x60',
      '%61': '\x61',
      '%62': '\x62',
      '%63': '\x63',
      '%64': '\x64',
      '%65': '\x65',
      '%66': '\x66',
      '%67': '\x67',
      '%68': '\x68',
      '%69': '\x69',
      '%6a': '\x6a',
      '%6A': '\x6a',
      '%6b': '\x6b',
      '%6B': '\x6b',
      '%6c': '\x6c',
      '%6C': '\x6c',
      '%6d': '\x6d',
      '%6D': '\x6d',
      '%6e': '\x6e',
      '%6E': '\x6e',
      '%6f': '\x6f',
      '%6F': '\x6f',
      '%70': '\x70',
      '%71': '\x71',
      '%72': '\x72',
      '%73': '\x73',
      '%74': '\x74',
      '%75': '\x75',
      '%76': '\x76',
      '%77': '\x77',
      '%78': '\x78',
      '%79': '\x79',
      '%7a': '\x7a',
      '%7A': '\x7a',
      '%7b': '\x7b',
      '%7B': '\x7b',
      '%7c': '\x7c',
      '%7C': '\x7c',
      '%7d': '\x7d',
      '%7D': '\x7d',
      '%7e': '\x7e',
      '%7E': '\x7e',
      '%7f': '\x7f',
      '%7F': '\x7f',
      '%80': '\x80',
      '%81': '\x81',
      '%82': '\x82',
      '%83': '\x83',
      '%84': '\x84',
      '%85': '\x85',
      '%86': '\x86',
      '%87': '\x87',
      '%88': '\x88',
      '%89': '\x89',
      '%8a': '\x8a',
      '%8A': '\x8a',
      '%8b': '\x8b',
      '%8B': '\x8b',
      '%8c': '\x8c',
      '%8C': '\x8c',
      '%8d': '\x8d',
      '%8D': '\x8d',
      '%8e': '\x8e',
      '%8E': '\x8e',
      '%8f': '\x8f',
      '%8F': '\x8f',
      '%90': '\x90',
      '%91': '\x91',
      '%92': '\x92',
      '%93': '\x93',
      '%94': '\x94',
      '%95': '\x95',
      '%96': '\x96',
      '%97': '\x97',
      '%98': '\x98',
      '%99': '\x99',
      '%9a': '\x9a',
      '%9A': '\x9a',
      '%9b': '\x9b',
      '%9B': '\x9b',
      '%9c': '\x9c',
      '%9C': '\x9c',
      '%9d': '\x9d',
      '%9D': '\x9d',
      '%9e': '\x9e',
      '%9E': '\x9e',
      '%9f': '\x9f',
      '%9F': '\x9f',
      '%a0': '\xa0',
      '%A0': '\xa0',
      '%a1': '\xa1',
      '%A1': '\xa1',
      '%a2': '\xa2',
      '%A2': '\xa2',
      '%a3': '\xa3',
      '%A3': '\xa3',
      '%a4': '\xa4',
      '%A4': '\xa4',
      '%a5': '\xa5',
      '%A5': '\xa5',
      '%a6': '\xa6',
      '%A6': '\xa6',
      '%a7': '\xa7',
      '%A7': '\xa7',
      '%a8': '\xa8',
      '%A8': '\xa8',
      '%a9': '\xa9',
      '%A9': '\xa9',
      '%aa': '\xaa',
      '%Aa': '\xaa',
      '%aA': '\xaa',
      '%AA': '\xaa',
      '%ab': '\xab',
      '%Ab': '\xab',
      '%aB': '\xab',
      '%AB': '\xab',
      '%ac': '\xac',
      '%Ac': '\xac',
      '%aC': '\xac',
      '%AC': '\xac',
      '%ad': '\xad',
      '%Ad': '\xad',
      '%aD': '\xad',
      '%AD': '\xad',
      '%ae': '\xae',
      '%Ae': '\xae',
      '%aE': '\xae',
      '%AE': '\xae',
      '%af': '\xaf',
      '%Af': '\xaf',
      '%aF': '\xaf',
      '%AF': '\xaf',
      '%b0': '\xb0',
      '%B0': '\xb0',
      '%b1': '\xb1',
      '%B1': '\xb1',
      '%b2': '\xb2',
      '%B2': '\xb2',
      '%b3': '\xb3',
      '%B3': '\xb3',
      '%b4': '\xb4',
      '%B4': '\xb4',
      '%b5': '\xb5',
      '%B5': '\xb5',
      '%b6': '\xb6',
      '%B6': '\xb6',
      '%b7': '\xb7',
      '%B7': '\xb7',
      '%b8': '\xb8',
      '%B8': '\xb8',
      '%b9': '\xb9',
      '%B9': '\xb9',
      '%ba': '\xba',
      '%Ba': '\xba',
      '%bA': '\xba',
      '%BA': '\xba',
      '%bb': '\xbb',
      '%Bb': '\xbb',
      '%bB': '\xbb',
      '%BB': '\xbb',
      '%bc': '\xbc',
      '%Bc': '\xbc',
      '%bC': '\xbc',
      '%BC': '\xbc',
      '%bd': '\xbd',
      '%Bd': '\xbd',
      '%bD': '\xbd',
      '%BD': '\xbd',
      '%be': '\xbe',
      '%Be': '\xbe',
      '%bE': '\xbe',
      '%BE': '\xbe',
      '%bf': '\xbf',
      '%Bf': '\xbf',
      '%bF': '\xbf',
      '%BF': '\xbf',
      '%c0': '\xc0',
      '%C0': '\xc0',
      '%c1': '\xc1',
      '%C1': '\xc1',
      '%c2': '\xc2',
      '%C2': '\xc2',
      '%c3': '\xc3',
      '%C3': '\xc3',
      '%c4': '\xc4',
      '%C4': '\xc4',
      '%c5': '\xc5',
      '%C5': '\xc5',
      '%c6': '\xc6',
      '%C6': '\xc6',
      '%c7': '\xc7',
      '%C7': '\xc7',
      '%c8': '\xc8',
      '%C8': '\xc8',
      '%c9': '\xc9',
      '%C9': '\xc9',
      '%ca': '\xca',
      '%Ca': '\xca',
      '%cA': '\xca',
      '%CA': '\xca',
      '%cb': '\xcb',
      '%Cb': '\xcb',
      '%cB': '\xcb',
      '%CB': '\xcb',
      '%cc': '\xcc',
      '%Cc': '\xcc',
      '%cC': '\xcc',
      '%CC': '\xcc',
      '%cd': '\xcd',
      '%Cd': '\xcd',
      '%cD': '\xcd',
      '%CD': '\xcd',
      '%ce': '\xce',
      '%Ce': '\xce',
      '%cE': '\xce',
      '%CE': '\xce',
      '%cf': '\xcf',
      '%Cf': '\xcf',
      '%cF': '\xcf',
      '%CF': '\xcf',
      '%d0': '\xd0',
      '%D0': '\xd0',
      '%d1': '\xd1',
      '%D1': '\xd1',
      '%d2': '\xd2',
      '%D2': '\xd2',
      '%d3': '\xd3',
      '%D3': '\xd3',
      '%d4': '\xd4',
      '%D4': '\xd4',
      '%d5': '\xd5',
      '%D5': '\xd5',
      '%d6': '\xd6',
      '%D6': '\xd6',
      '%d7': '\xd7',
      '%D7': '\xd7',
      '%d8': '\xd8',
      '%D8': '\xd8',
      '%d9': '\xd9',
      '%D9': '\xd9',
      '%da': '\xda',
      '%Da': '\xda',
      '%dA': '\xda',
      '%DA': '\xda',
      '%db': '\xdb',
      '%Db': '\xdb',
      '%dB': '\xdb',
      '%DB': '\xdb',
      '%dc': '\xdc',
      '%Dc': '\xdc',
      '%dC': '\xdc',
      '%DC': '\xdc',
      '%dd': '\xdd',
      '%Dd': '\xdd',
      '%dD': '\xdd',
      '%DD': '\xdd',
      '%de': '\xde',
      '%De': '\xde',
      '%dE': '\xde',
      '%DE': '\xde',
      '%df': '\xdf',
      '%Df': '\xdf',
      '%dF': '\xdf',
      '%DF': '\xdf',
      '%e0': '\xe0',
      '%E0': '\xe0',
      '%e1': '\xe1',
      '%E1': '\xe1',
      '%e2': '\xe2',
      '%E2': '\xe2',
      '%e3': '\xe3',
      '%E3': '\xe3',
      '%e4': '\xe4',
      '%E4': '\xe4',
      '%e5': '\xe5',
      '%E5': '\xe5',
      '%e6': '\xe6',
      '%E6': '\xe6',
      '%e7': '\xe7',
      '%E7': '\xe7',
      '%e8': '\xe8',
      '%E8': '\xe8',
      '%e9': '\xe9',
      '%E9': '\xe9',
      '%ea': '\xea',
      '%Ea': '\xea',
      '%eA': '\xea',
      '%EA': '\xea',
      '%eb': '\xeb',
      '%Eb': '\xeb',
      '%eB': '\xeb',
      '%EB': '\xeb',
      '%ec': '\xec',
      '%Ec': '\xec',
      '%eC': '\xec',
      '%EC': '\xec',
      '%ed': '\xed',
      '%Ed': '\xed',
      '%eD': '\xed',
      '%ED': '\xed',
      '%ee': '\xee',
      '%Ee': '\xee',
      '%eE': '\xee',
      '%EE': '\xee',
      '%ef': '\xef',
      '%Ef': '\xef',
      '%eF': '\xef',
      '%EF': '\xef',
      '%f0': '\xf0',
      '%F0': '\xf0',
      '%f1': '\xf1',
      '%F1': '\xf1',
      '%f2': '\xf2',
      '%F2': '\xf2',
      '%f3': '\xf3',
      '%F3': '\xf3',
      '%f4': '\xf4',
      '%F4': '\xf4',
      '%f5': '\xf5',
      '%F5': '\xf5',
      '%f6': '\xf6',
      '%F6': '\xf6',
      '%f7': '\xf7',
      '%F7': '\xf7',
      '%f8': '\xf8',
      '%F8': '\xf8',
      '%f9': '\xf9',
      '%F9': '\xf9',
      '%fa': '\xfa',
      '%Fa': '\xfa',
      '%fA': '\xfa',
      '%FA': '\xfa',
      '%fb': '\xfb',
      '%Fb': '\xfb',
      '%fB': '\xfb',
      '%FB': '\xfb',
      '%fc': '\xfc',
      '%Fc': '\xfc',
      '%fC': '\xfc',
      '%FC': '\xfc',
      '%fd': '\xfd',
      '%Fd': '\xfd',
      '%fD': '\xfd',
      '%FD': '\xfd',
      '%fe': '\xfe',
      '%Fe': '\xfe',
      '%fE': '\xfe',
      '%FE': '\xfe',
      '%ff': '\xff',
      '%Ff': '\xff',
      '%fF': '\xff',
      '%FF': '\xff'
    }

    function encodedReplacer(match) {
      return EncodedLookup[match]
    }

    const STATE_KEY = 0
    const STATE_VALUE = 1
    const STATE_CHARSET = 2
    const STATE_LANG = 3

    function parseParams(str) {
      const res = []
      let state = STATE_KEY
      let charset = ''
      let inquote = false
      let escaping = false
      let p = 0
      let tmp = ''
      const len = str.length

      for (var i = 0; i < len; ++i) {
        // eslint-disable-line no-var
        const char = str[i]
        if (char === '\\' && inquote) {
          if (escaping) {
            escaping = false
          } else {
            escaping = true
            continue
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false
              state = STATE_KEY
            } else {
              inquote = true
            }
            continue
          } else {
            escaping = false
          }
        } else {
          if (escaping && inquote) {
            tmp += '\\'
          }
          escaping = false
          if (
            (state === STATE_CHARSET || state === STATE_LANG) &&
            char === "'"
          ) {
            if (state === STATE_CHARSET) {
              state = STATE_LANG
              charset = tmp.substring(1)
            } else {
              state = STATE_VALUE
            }
            tmp = ''
            continue
          } else if (
            state === STATE_KEY &&
            (char === '*' || char === '=') &&
            res.length
          ) {
            state = char === '*' ? STATE_CHARSET : STATE_VALUE
            res[p] = [tmp, undefined]
            tmp = ''
            continue
          } else if (!inquote && char === ';') {
            state = STATE_KEY
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  'binary',
                  charset
                )
              }
              charset = ''
            } else if (tmp.length) {
              tmp = decodeText(tmp, 'binary', 'utf8')
            }
            if (res[p] === undefined) {
              res[p] = tmp
            } else {
              res[p][1] = tmp
            }
            tmp = ''
            ++p
            continue
          } else if (!inquote && (char === ' ' || char === '\t')) {
            continue
          }
        }
        tmp += char
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          'binary',
          charset
        )
      } else if (tmp) {
        tmp = decodeText(tmp, 'binary', 'utf8')
      }

      if (res[p] === undefined) {
        if (tmp) {
          res[p] = tmp
        }
      } else {
        res[p][1] = tmp
      }

      return res
    }

    module.exports = parseParams

    /***/
  },

  /***/ 8572: /***/ (
    __unused_webpack_module,
    __unused_webpack_exports,
    __nccwpck_require__
  ) => {
    /* c8 ignore start */
    // 64 KiB (same size chrome slice theirs blob into Uint8array's)
    const POOL_SIZE = 65536

    if (!globalThis.ReadableStream) {
      // `node:stream/web` got introduced in v16.5.0 as experimental
      // and it's preferred over the polyfilled version. So we also
      // suppress the warning that gets emitted by NodeJS for using it.
      try {
        const process = __nccwpck_require__(7742)
        const { emitWarning } = process
        try {
          process.emitWarning = () => {}
          Object.assign(globalThis, __nccwpck_require__(2477))
          process.emitWarning = emitWarning
        } catch (error) {
          process.emitWarning = emitWarning
          throw error
        }
      } catch (error) {
        // fallback to polyfill implementation
        Object.assign(globalThis, __nccwpck_require__(1452))
      }
    }

    try {
      // Don't use node: prefix for this, require+node: is not supported until node v14.14
      // Only `import()` can use prefix in 12.20 and later
      const { Blob } = __nccwpck_require__(4300)
      if (Blob && !Blob.prototype.stream) {
        Blob.prototype.stream = function name(params) {
          let position = 0
          const blob = this

          return new ReadableStream({
            type: 'bytes',
            async pull(ctrl) {
              const chunk = blob.slice(
                position,
                Math.min(blob.size, position + POOL_SIZE)
              )
              const buffer = await chunk.arrayBuffer()
              position += buffer.byteLength
              ctrl.enqueue(new Uint8Array(buffer))

              if (position === blob.size) {
                ctrl.close()
              }
            }
          })
        }
      }
    } catch (error) {}
    /* c8 ignore end */

    /***/
  },

  /***/ 3213: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    /* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
      /* harmony export */ Z: () => __WEBPACK_DEFAULT_EXPORT__
      /* harmony export */
    })
    /* unused harmony export File */
    /* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ =
      __nccwpck_require__(1410)

    const _File = class File extends _index_js__WEBPACK_IMPORTED_MODULE_0__ /* ["default"] */.Z {
      #lastModified = 0
      #name = ''

      /**
       * @param {*[]} fileBits
       * @param {string} fileName
       * @param {{lastModified?: number, type?: string}} options
       */ // @ts-ignore
      constructor(fileBits, fileName, options = {}) {
        if (arguments.length < 2) {
          throw new TypeError(
            `Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`
          )
        }
        super(fileBits, options)

        if (options === null) options = {}

        // Simulate WebIDL type casting for NaN value in lastModified option.
        const lastModified =
          options.lastModified === undefined
            ? Date.now()
            : Number(options.lastModified)
        if (!Number.isNaN(lastModified)) {
          this.#lastModified = lastModified
        }

        this.#name = String(fileName)
      }

      get name() {
        return this.#name
      }

      get lastModified() {
        return this.#lastModified
      }

      get [Symbol.toStringTag]() {
        return 'File'
      }

      static [Symbol.hasInstance](object) {
        return (
          !!object &&
          object instanceof
            _index_js__WEBPACK_IMPORTED_MODULE_0__ /* ["default"] */.Z &&
          /^(File)$/.test(object[Symbol.toStringTag])
        )
      }
    }

    /** @type {typeof globalThis.File} */ // @ts-ignore
    const File = _File
    /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = File

    /***/
  },

  /***/ 2777: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    // EXPORTS
    __nccwpck_require__.d(__webpack_exports__, {
      $B: () => /* reexport */ file /* default */.Z
    }) // CONCATENATED MODULE: external "node:fs"

    // UNUSED EXPORTS: Blob, blobFrom, blobFromSync, default, fileFrom, fileFromSync

    const external_node_fs_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:fs') // CONCATENATED MODULE: external "node:path"
    const external_node_path_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:path')
    // EXTERNAL MODULE: ./node_modules/node-domexception/index.js
    var node_domexception = __nccwpck_require__(7760)
    // EXTERNAL MODULE: ./node_modules/fetch-blob/file.js
    var file = __nccwpck_require__(3213)
    // EXTERNAL MODULE: ./node_modules/fetch-blob/index.js
    var fetch_blob = __nccwpck_require__(1410) // CONCATENATED MODULE: ./node_modules/fetch-blob/from.js
    const { stat } = external_node_fs_namespaceObject.promises

    /**
     * @param {string} path filepath on the disk
     * @param {string} [type] mimetype to use
     */
    const blobFromSync = (path, type) => fromBlob(statSync(path), path, type)

    /**
     * @param {string} path filepath on the disk
     * @param {string} [type] mimetype to use
     * @returns {Promise<Blob>}
     */
    const blobFrom = (path, type) =>
      stat(path).then((stat) => fromBlob(stat, path, type))

    /**
     * @param {string} path filepath on the disk
     * @param {string} [type] mimetype to use
     * @returns {Promise<File>}
     */
    const fileFrom = (path, type) =>
      stat(path).then((stat) => fromFile(stat, path, type))

    /**
     * @param {string} path filepath on the disk
     * @param {string} [type] mimetype to use
     */
    const fileFromSync = (path, type) => fromFile(statSync(path), path, type)

    // @ts-ignore
    const fromBlob = (stat, path, type = '') =>
      new Blob(
        [
          new BlobDataItem({
            path,
            size: stat.size,
            lastModified: stat.mtimeMs,
            start: 0
          })
        ],
        { type }
      )

    // @ts-ignore
    const fromFile = (stat, path, type = '') =>
      new File(
        [
          new BlobDataItem({
            path,
            size: stat.size,
            lastModified: stat.mtimeMs,
            start: 0
          })
        ],
        basename(path),
        { type, lastModified: stat.mtimeMs }
      )

    /**
     * This is a blob backed up by a file on the disk
     * with minium requirement. Its wrapped around a Blob as a blobPart
     * so you have no direct access to this.
     *
     * @private
     */
    class BlobDataItem {
      #path
      #start

      constructor(options) {
        this.#path = options.path
        this.#start = options.start
        this.size = options.size
        this.lastModified = options.lastModified
      }

      /**
       * Slicing arguments is first validated and formatted
       * to not be out of range by Blob.prototype.slice
       */
      slice(start, end) {
        return new BlobDataItem({
          path: this.#path,
          lastModified: this.lastModified,
          size: end - start,
          start: this.#start + start
        })
      }

      async *stream() {
        const { mtimeMs } = await stat(this.#path)
        if (mtimeMs > this.lastModified) {
          throw new DOMException(
            'The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.',
            'NotReadableError'
          )
        }
        yield* createReadStream(this.#path, {
          start: this.#start,
          end: this.#start + this.size - 1
        })
      }

      get [Symbol.toStringTag]() {
        return 'Blob'
      }
    }

    /* harmony default export */ const from =
      /* unused pure expression or super */ null && blobFromSync

    /***/
  },

  /***/ 1410: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    /* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
      /* harmony export */ Z: () => __WEBPACK_DEFAULT_EXPORT__
      /* harmony export */
    })
    /* unused harmony export Blob */
    /* harmony import */ var _streams_cjs__WEBPACK_IMPORTED_MODULE_0__ =
      __nccwpck_require__(8572)
    /*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

    // TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)
    // Node has recently added whatwg stream into core

    // 64 KiB (same size chrome slice theirs blob into Uint8array's)
    const POOL_SIZE = 65536

    /** @param {(Blob | Uint8Array)[]} parts */
    async function* toIterator(parts, clone = true) {
      for (const part of parts) {
        if ('stream' in part) {
          yield* /** @type {AsyncIterableIterator<Uint8Array>} */ (
            part.stream()
          )
        } else if (ArrayBuffer.isView(part)) {
          if (clone) {
            let position = part.byteOffset
            const end = part.byteOffset + part.byteLength
            while (position !== end) {
              const size = Math.min(end - position, POOL_SIZE)
              const chunk = part.buffer.slice(position, position + size)
              position += chunk.byteLength
              yield new Uint8Array(chunk)
            }
          } else {
            yield part
          }
          /* c8 ignore next 10 */
        } else {
          // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)
          let position = 0,
            b = /** @type {Blob} */ (part)
          while (position !== b.size) {
            const chunk = b.slice(
              position,
              Math.min(b.size, position + POOL_SIZE)
            )
            const buffer = await chunk.arrayBuffer()
            position += buffer.byteLength
            yield new Uint8Array(buffer)
          }
        }
      }
    }

    const _Blob = class Blob {
      /** @type {Array.<(Blob|Uint8Array)>} */
      #parts = []
      #type = ''
      #size = 0
      #endings = 'transparent'

      /**
       * The Blob() constructor returns a new Blob object. The content
       * of the blob consists of the concatenation of the values given
       * in the parameter array.
       *
       * @param {*} blobParts
       * @param {{ type?: string, endings?: string }} [options]
       */
      constructor(blobParts = [], options = {}) {
        if (typeof blobParts !== 'object' || blobParts === null) {
          throw new TypeError(
            "Failed to construct 'Blob': The provided value cannot be converted to a sequence."
          )
        }

        if (typeof blobParts[Symbol.iterator] !== 'function') {
          throw new TypeError(
            "Failed to construct 'Blob': The object must have a callable @@iterator property."
          )
        }

        if (typeof options !== 'object' && typeof options !== 'function') {
          throw new TypeError(
            "Failed to construct 'Blob': parameter 2 cannot convert to dictionary."
          )
        }

        if (options === null) options = {}

        const encoder = new TextEncoder()
        for (const element of blobParts) {
          let part
          if (ArrayBuffer.isView(element)) {
            part = new Uint8Array(
              element.buffer.slice(
                element.byteOffset,
                element.byteOffset + element.byteLength
              )
            )
          } else if (element instanceof ArrayBuffer) {
            part = new Uint8Array(element.slice(0))
          } else if (element instanceof Blob) {
            part = element
          } else {
            part = encoder.encode(`${element}`)
          }

          this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size
          this.#parts.push(part)
        }

        this.#endings = `${
          options.endings === undefined ? 'transparent' : options.endings
        }`
        const type = options.type === undefined ? '' : String(options.type)
        this.#type = /^[\x20-\x7E]*$/.test(type) ? type : ''
      }

      /**
       * The Blob interface's size property returns the
       * size of the Blob in bytes.
       */
      get size() {
        return this.#size
      }

      /**
       * The type property of a Blob object returns the MIME type of the file.
       */
      get type() {
        return this.#type
      }

      /**
       * The text() method in the Blob interface returns a Promise
       * that resolves with a string containing the contents of
       * the blob, interpreted as UTF-8.
       *
       * @return {Promise<string>}
       */
      async text() {
        // More optimized than using this.arrayBuffer()
        // that requires twice as much ram
        const decoder = new TextDecoder()
        let str = ''
        for await (const part of toIterator(this.#parts, false)) {
          str += decoder.decode(part, { stream: true })
        }
        // Remaining
        str += decoder.decode()
        return str
      }

      /**
       * The arrayBuffer() method in the Blob interface returns a
       * Promise that resolves with the contents of the blob as
       * binary data contained in an ArrayBuffer.
       *
       * @return {Promise<ArrayBuffer>}
       */
      async arrayBuffer() {
        // Easier way... Just a unnecessary overhead
        // const view = new Uint8Array(this.size);
        // await this.stream().getReader({mode: 'byob'}).read(view);
        // return view.buffer;

        const data = new Uint8Array(this.size)
        let offset = 0
        for await (const chunk of toIterator(this.#parts, false)) {
          data.set(chunk, offset)
          offset += chunk.length
        }

        return data.buffer
      }

      stream() {
        const it = toIterator(this.#parts, true)

        return new globalThis.ReadableStream({
          // @ts-ignore
          type: 'bytes',
          async pull(ctrl) {
            const chunk = await it.next()
            chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)
          },

          async cancel() {
            await it.return()
          }
        })
      }

      /**
       * The Blob interface's slice() method creates and returns a
       * new Blob object which contains data from a subset of the
       * blob on which it's called.
       *
       * @param {number} [start]
       * @param {number} [end]
       * @param {string} [type]
       */
      slice(start = 0, end = this.size, type = '') {
        const { size } = this

        let relativeStart =
          start < 0 ? Math.max(size + start, 0) : Math.min(start, size)
        let relativeEnd =
          end < 0 ? Math.max(size + end, 0) : Math.min(end, size)

        const span = Math.max(relativeEnd - relativeStart, 0)
        const parts = this.#parts
        const blobParts = []
        let added = 0

        for (const part of parts) {
          // don't add the overflow to new blobParts
          if (added >= span) {
            break
          }

          const size = ArrayBuffer.isView(part) ? part.byteLength : part.size
          if (relativeStart && size <= relativeStart) {
            // Skip the beginning and change the relative
            // start & end position as we skip the unwanted parts
            relativeStart -= size
            relativeEnd -= size
          } else {
            let chunk
            if (ArrayBuffer.isView(part)) {
              chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))
              added += chunk.byteLength
            } else {
              chunk = part.slice(relativeStart, Math.min(size, relativeEnd))
              added += chunk.size
            }
            relativeEnd -= size
            blobParts.push(chunk)
            relativeStart = 0 // All next sequential parts should start at 0
          }
        }

        const blob = new Blob([], { type: String(type).toLowerCase() })
        blob.#size = span
        blob.#parts = blobParts

        return blob
      }

      get [Symbol.toStringTag]() {
        return 'Blob'
      }

      static [Symbol.hasInstance](object) {
        return (
          object &&
          typeof object === 'object' &&
          typeof object.constructor === 'function' &&
          (typeof object.stream === 'function' ||
            typeof object.arrayBuffer === 'function') &&
          /^(Blob|File)$/.test(object[Symbol.toStringTag])
        )
      }
    }

    Object.defineProperties(_Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    })

    /** @type {typeof globalThis.Blob} */
    const Blob = _Blob
    /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = Blob

    /***/
  },

  /***/ 8010: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    /* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
      /* harmony export */ Ct: () => /* binding */ FormData,
      /* harmony export */ au: () => /* binding */ formDataToBlob
      /* harmony export */
    })
    /* unused harmony export File */
    /* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_0__ =
      __nccwpck_require__(1410)
    /* harmony import */ var fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__ =
      __nccwpck_require__(3213)
    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

    var { toStringTag: t, iterator: i, hasInstance: h } = Symbol,
      r = Math.random,
      m =
        'append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(
          ','
        ),
      f = (a, b, c) => (
        (a += ''),
        /^(Blob|File)$/.test(b && b[t])
          ? [
              ((c = c !== void 0 ? c + '' : b[t] == 'File' ? b.name : 'blob'),
              a),
              b.name !== c || b[t] == 'blob'
                ? new fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__ /* ["default"] */.Z(
                    [b],
                    c,
                    b
                  )
                : b
            ]
          : [a, b + '']
      ),
      e = (c, f) =>
        (f ? c : c.replace(/\r?\n|\r/g, '\r\n'))
          .replace(/\n/g, '%0A')
          .replace(/\r/g, '%0D')
          .replace(/"/g, '%22'),
      x = (n, a, e) => {
        if (a.length < e) {
          throw new TypeError(
            `Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`
          )
        }
      }

    const File = /* unused pure expression or super */ null && F

    /** @type {typeof globalThis.FormData} */
    const FormData = class FormData {
      #d = []
      constructor(...a) {
        if (a.length)
          throw new TypeError(
            `Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`
          )
      }
      get [t]() {
        return 'FormData'
      }
      [i]() {
        return this.entries()
      }
      static [h](o) {
        return (
          o &&
          typeof o === 'object' &&
          o[t] === 'FormData' &&
          !m.some((m) => typeof o[m] != 'function')
        )
      }
      append(...a) {
        x('append', arguments, 2)
        this.#d.push(f(...a))
      }
      delete(a) {
        x('delete', arguments, 1)
        a += ''
        this.#d = this.#d.filter(([b]) => b !== a)
      }
      get(a) {
        x('get', arguments, 1)
        a += ''
        for (var b = this.#d, l = b.length, c = 0; c < l; c++)
          if (b[c][0] === a) return b[c][1]
        return null
      }
      getAll(a, b) {
        x('getAll', arguments, 1)
        b = []
        a += ''
        this.#d.forEach((c) => c[0] === a && b.push(c[1]))
        return b
      }
      has(a) {
        x('has', arguments, 1)
        a += ''
        return this.#d.some((b) => b[0] === a)
      }
      forEach(a, b) {
        x('forEach', arguments, 1)
        for (var [c, d] of this) a.call(b, d, c, this)
      }
      set(...a) {
        x('set', arguments, 2)
        var b = [],
          c = !0
        a = f(...a)
        this.#d.forEach((d) => {
          d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d)
        })
        c && b.push(a)
        this.#d = b
      }
      *entries() {
        yield* this.#d
      }
      *keys() {
        for (var [a] of this) yield a
      }
      *values() {
        for (var [, a] of this) yield a
      }
    }

    /** @param {FormData} F */
    function formDataToBlob(
      F,
      B = fetch_blob__WEBPACK_IMPORTED_MODULE_0__ /* ["default"] */.Z
    ) {
      var b = `${r()}${r()}`.replace(/\./g, '').slice(-28).padStart(32, '-'),
        c = [],
        p = `--${b}\r\nContent-Disposition: form-data; name="`
      F.forEach((v, n) =>
        typeof v == 'string'
          ? c.push(
              p +
                e(n) +
                `"\r\n\r\n${v.replace(/\r(?!\n)|(?<!\r)\n/g, '\r\n')}\r\n`
            )
          : c.push(
              p +
                e(n) +
                `"; filename="${e(v.name, 1)}"\r\nContent-Type: ${
                  v.type || 'application/octet-stream'
                }\r\n\r\n`,
              v,
              '\r\n'
            )
      )
      c.push(`--${b}--`)
      return new B(c, { type: 'multipart/form-data; boundary=' + b })
    }

    /***/
  },

  /***/ 6139: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    // EXPORTS
    __nccwpck_require__.d(__webpack_exports__, {
      Z: () => /* binding */ bsky
    }) // CONCATENATED MODULE: external "node:http"

    const external_node_http_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:http') // CONCATENATED MODULE: external "node:https"
    const external_node_https_namespaceObject =
      __WEBPACK_EXTERNAL_createRequire(import.meta.url)('node:https') // CONCATENATED MODULE: external "node:zlib"
    const external_node_zlib_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:zlib')
    // EXTERNAL MODULE: external "node:stream"
    var external_node_stream_ = __nccwpck_require__(4492) // CONCATENATED MODULE: external "node:buffer"
    const external_node_buffer_namespaceObject =
      __WEBPACK_EXTERNAL_createRequire(import.meta.url)('node:buffer') // CONCATENATED MODULE: ./node_modules/data-uri-to-buffer/dist/index.js
    /**
     * Returns a `Buffer` instance from the given data URI `uri`.
     *
     * @param {String} uri Data URI to turn into a Buffer instance
     * @returns {Buffer} Buffer instance from Data URI
     * @api public
     */
    function dataUriToBuffer(uri) {
      if (!/^data:/i.test(uri)) {
        throw new TypeError(
          '`uri` does not appear to be a Data URI (must begin with "data:")'
        )
      }
      // strip newlines
      uri = uri.replace(/\r?\n/g, '')
      // split the URI up into the "metadata" and the "data" portions
      const firstComma = uri.indexOf(',')
      if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI')
      }
      // remove the "data:" scheme and parse the metadata
      const meta = uri.substring(5, firstComma).split(';')
      let charset = ''
      let base64 = false
      const type = meta[0] || 'text/plain'
      let typeFull = type
      for (let i = 1; i < meta.length; i++) {
        if (meta[i] === 'base64') {
          base64 = true
        } else if (meta[i]) {
          typeFull += `;${meta[i]}`
          if (meta[i].indexOf('charset=') === 0) {
            charset = meta[i].substring(8)
          }
        }
      }
      // defaults to US-ASCII only if type is not provided
      if (!meta[0] && !charset.length) {
        typeFull += ';charset=US-ASCII'
        charset = 'US-ASCII'
      }
      // get the encoded data portion and decode URI-encoded chars
      const encoding = base64 ? 'base64' : 'ascii'
      const data = unescape(uri.substring(firstComma + 1))
      const buffer = Buffer.from(data, encoding)
      // set `.type` and `.typeFull` properties to MIME type
      buffer.type = type
      buffer.typeFull = typeFull
      // set the `.charset` property
      buffer.charset = charset
      return buffer
    }
    /* harmony default export */ const dist = dataUriToBuffer
    //# sourceMappingURL=index.js.map
    // EXTERNAL MODULE: external "node:util"
    var external_node_util_ = __nccwpck_require__(7261)
    // EXTERNAL MODULE: ./node_modules/fetch-blob/index.js
    var fetch_blob = __nccwpck_require__(1410)
    // EXTERNAL MODULE: ./node_modules/formdata-polyfill/esm.min.js
    var esm_min = __nccwpck_require__(8010) // CONCATENATED MODULE: ./node_modules/node-fetch/src/errors/base.js
    class FetchBaseError extends Error {
      constructor(message, type) {
        super(message)
        // Hide custom error implementation details from end-users
        Error.captureStackTrace(this, this.constructor)

        this.type = type
      }

      get name() {
        return this.constructor.name
      }

      get [Symbol.toStringTag]() {
        return this.constructor.name
      }
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/errors/fetch-error.js

    /**
     * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError
     */

    /**
     * FetchError interface for operational errors
     */
    class FetchError extends FetchBaseError {
      /**
       * @param  {string} message -      Error message for human
       * @param  {string} [type] -        Error type for machine
       * @param  {SystemError} [systemError] - For Node.js system error
       */
      constructor(message, type, systemError) {
        super(message, type)
        // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code
        if (systemError) {
          // eslint-disable-next-line no-multi-assign
          this.code = this.errno = systemError.code
          this.erroredSysCall = systemError.syscall
        }
      }
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/utils/is.js

    /**
     * Is.js
     *
     * Object type checks.
     */

    const NAME = Symbol.toStringTag

    /**
     * Check if `obj` is a URLSearchParams object
     * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143
     * @param {*} object - Object to check for
     * @return {boolean}
     */
    const isURLSearchParameters = (object) => {
      return (
        typeof object === 'object' &&
        typeof object.append === 'function' &&
        typeof object.delete === 'function' &&
        typeof object.get === 'function' &&
        typeof object.getAll === 'function' &&
        typeof object.has === 'function' &&
        typeof object.set === 'function' &&
        typeof object.sort === 'function' &&
        object[NAME] === 'URLSearchParams'
      )
    }

    /**
     * Check if `object` is a W3C `Blob` object (which `File` inherits from)
     * @param {*} object - Object to check for
     * @return {boolean}
     */
    const isBlob = (object) => {
      return (
        object &&
        typeof object === 'object' &&
        typeof object.arrayBuffer === 'function' &&
        typeof object.type === 'string' &&
        typeof object.stream === 'function' &&
        typeof object.constructor === 'function' &&
        /^(Blob|File)$/.test(object[NAME])
      )
    }

    /**
     * Check if `obj` is an instance of AbortSignal.
     * @param {*} object - Object to check for
     * @return {boolean}
     */
    const isAbortSignal = (object) => {
      return (
        typeof object === 'object' &&
        (object[NAME] === 'AbortSignal' || object[NAME] === 'EventTarget')
      )
    }

    /**
     * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of
     * the parent domain.
     *
     * Both domains must already be in canonical form.
     * @param {string|URL} original
     * @param {string|URL} destination
     */
    const isDomainOrSubdomain = (destination, original) => {
      const orig = new URL(original).hostname
      const dest = new URL(destination).hostname

      return orig === dest || orig.endsWith(`.${dest}`)
    }

    /**
     * isSameProtocol reports whether the two provided URLs use the same protocol.
     *
     * Both domains must already be in canonical form.
     * @param {string|URL} original
     * @param {string|URL} destination
     */
    const isSameProtocol = (destination, original) => {
      const orig = new URL(original).protocol
      const dest = new URL(destination).protocol

      return orig === dest
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/body.js

    /**
     * Body.js
     *
     * Body interface provides common methods for Request and Response
     */

    const pipeline = (0, external_node_util_.promisify)(
      external_node_stream_.pipeline
    )
    const INTERNALS = Symbol('Body internals')

    /**
     * Body mixin
     *
     * Ref: https://fetch.spec.whatwg.org/#body
     *
     * @param   Stream  body  Readable stream
     * @param   Object  opts  Response options
     * @return  Void
     */
    class Body {
      constructor(body, { size = 0 } = {}) {
        let boundary = null

        if (body === null) {
          // Body is undefined or null
          body = null
        } else if (isURLSearchParameters(body)) {
          // Body is a URLSearchParams
          body = external_node_buffer_namespaceObject.Buffer.from(
            body.toString()
          )
        } else if (isBlob(body)) {
          // Body is blob
        } else if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
          // Body is Buffer
        } else if (external_node_util_.types.isAnyArrayBuffer(body)) {
          // Body is ArrayBuffer
          body = external_node_buffer_namespaceObject.Buffer.from(body)
        } else if (ArrayBuffer.isView(body)) {
          // Body is ArrayBufferView
          body = external_node_buffer_namespaceObject.Buffer.from(
            body.buffer,
            body.byteOffset,
            body.byteLength
          )
        } else if (body instanceof external_node_stream_) {
          // Body is stream
        } else if (body instanceof esm_min /* FormData */.Ct) {
          // Body is FormData
          body = (0, esm_min /* formDataToBlob */.au)(body)
          boundary = body.type.split('=')[1]
        } else {
          // None of the above
          // coerce to string then buffer
          body = external_node_buffer_namespaceObject.Buffer.from(String(body))
        }

        let stream = body

        if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
          stream = external_node_stream_.Readable.from(body)
        } else if (isBlob(body)) {
          stream = external_node_stream_.Readable.from(body.stream())
        }

        this[INTERNALS] = {
          body,
          stream,
          boundary,
          disturbed: false,
          error: null
        }
        this.size = size

        if (body instanceof external_node_stream_) {
          body.on('error', (error_) => {
            const error =
              error_ instanceof FetchBaseError
                ? error_
                : new FetchError(
                    `Invalid response body while trying to fetch ${this.url}: ${error_.message}`,
                    'system',
                    error_
                  )
            this[INTERNALS].error = error
          })
        }
      }

      get body() {
        return this[INTERNALS].stream
      }

      get bodyUsed() {
        return this[INTERNALS].disturbed
      }

      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this)
        return buffer.slice(byteOffset, byteOffset + byteLength)
      }

      async formData() {
        const ct = this.headers.get('content-type')

        if (ct.startsWith('application/x-www-form-urlencoded')) {
          const formData = new esm_min /* FormData */.Ct()
          const parameters = new URLSearchParams(await this.text())

          for (const [name, value] of parameters) {
            formData.append(name, value)
          }

          return formData
        }

        const { toFormData } = await __nccwpck_require__
          .e(/* import() */ 37)
          .then(__nccwpck_require__.bind(__nccwpck_require__, 4037))
        return toFormData(this.body, ct)
      }

      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      async blob() {
        const ct =
          (this.headers && this.headers.get('content-type')) ||
          (this[INTERNALS].body && this[INTERNALS].body.type) ||
          ''
        const buf = await this.arrayBuffer()

        return new fetch_blob /* default */.Z([buf], {
          type: ct
        })
      }

      /**
       * Decode response as json
       *
       * @return  Promise
       */
      async json() {
        const text = await this.text()
        return JSON.parse(text)
      }

      /**
       * Decode response as text
       *
       * @return  Promise
       */
      async text() {
        const buffer = await consumeBody(this)
        return new TextDecoder().decode(buffer)
      }

      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody(this)
      }
    }

    Body.prototype.buffer = (0, external_node_util_.deprecate)(
      Body.prototype.buffer,
      "Please use 'response.arrayBuffer()' instead of 'response.buffer()'",
      'node-fetch#buffer'
    )

    // In browsers, all properties are enumerable.
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true },
      data: {
        get: (0, external_node_util_.deprecate)(
          () => {},
          "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
          'https://github.com/node-fetch/node-fetch/issues/1000 (response)'
        )
      }
    })

    /**
     * Consume and convert an entire Body to a Buffer.
     *
     * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
     *
     * @return Promise
     */
    async function consumeBody(data) {
      if (data[INTERNALS].disturbed) {
        throw new TypeError(`body used already for: ${data.url}`)
      }

      data[INTERNALS].disturbed = true

      if (data[INTERNALS].error) {
        throw data[INTERNALS].error
      }

      const { body } = data

      // Body is null
      if (body === null) {
        return external_node_buffer_namespaceObject.Buffer.alloc(0)
      }

      /* c8 ignore next 3 */
      if (!(body instanceof external_node_stream_)) {
        return external_node_buffer_namespaceObject.Buffer.alloc(0)
      }

      // Body is stream
      // get ready to actually consume the body
      const accum = []
      let accumBytes = 0

      try {
        for await (const chunk of body) {
          if (data.size > 0 && accumBytes + chunk.length > data.size) {
            const error = new FetchError(
              `content size at ${data.url} over limit: ${data.size}`,
              'max-size'
            )
            body.destroy(error)
            throw error
          }

          accumBytes += chunk.length
          accum.push(chunk)
        }
      } catch (error) {
        const error_ =
          error instanceof FetchBaseError
            ? error
            : new FetchError(
                `Invalid response body while trying to fetch ${data.url}: ${error.message}`,
                'system',
                error
              )
        throw error_
      }

      if (body.readableEnded === true || body._readableState.ended === true) {
        try {
          if (accum.every((c) => typeof c === 'string')) {
            return external_node_buffer_namespaceObject.Buffer.from(
              accum.join('')
            )
          }

          return external_node_buffer_namespaceObject.Buffer.concat(
            accum,
            accumBytes
          )
        } catch (error) {
          throw new FetchError(
            `Could not create Buffer from response body for ${data.url}: ${error.message}`,
            'system',
            error
          )
        }
      } else {
        throw new FetchError(
          `Premature close of server response while trying to fetch ${data.url}`
        )
      }
    }

    /**
     * Clone body given Res/Req instance
     *
     * @param   Mixed   instance       Response or Request instance
     * @param   String  highWaterMark  highWaterMark for both PassThrough body streams
     * @return  Mixed
     */
    const clone = (instance, highWaterMark) => {
      let p1
      let p2
      let { body } = instance[INTERNALS]

      // Don't allow cloning a used body
      if (instance.bodyUsed) {
        throw new Error('cannot clone body after it is used')
      }

      // Check that body is a stream and not form-data object
      // note: we can't clone the form-data object without having it as a dependency
      if (
        body instanceof external_node_stream_ &&
        typeof body.getBoundary !== 'function'
      ) {
        // Tee instance body
        p1 = new external_node_stream_.PassThrough({ highWaterMark })
        p2 = new external_node_stream_.PassThrough({ highWaterMark })
        body.pipe(p1)
        body.pipe(p2)
        // Set instance body to teed body and return the other teed body
        instance[INTERNALS].stream = p1
        body = p2
      }

      return body
    }

    const getNonSpecFormDataBoundary = (0, external_node_util_.deprecate)(
      (body) => body.getBoundary(),
      "form-data doesn't follow the spec and requires special treatment. Use alternative package",
      'https://github.com/node-fetch/node-fetch/issues/1167'
    )

    /**
     * Performs the operation "extract a `Content-Type` value from |object|" as
     * specified in the specification:
     * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
     *
     * This function assumes that instance.body is present.
     *
     * @param {any} body Any options.body input
     * @returns {string | null}
     */
    const extractContentType = (body, request) => {
      // Body is null or undefined
      if (body === null) {
        return null
      }

      // Body is string
      if (typeof body === 'string') {
        return 'text/plain;charset=UTF-8'
      }

      // Body is a URLSearchParams
      if (isURLSearchParameters(body)) {
        return 'application/x-www-form-urlencoded;charset=UTF-8'
      }

      // Body is blob
      if (isBlob(body)) {
        return body.type || null
      }

      // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)
      if (
        external_node_buffer_namespaceObject.Buffer.isBuffer(body) ||
        external_node_util_.types.isAnyArrayBuffer(body) ||
        ArrayBuffer.isView(body)
      ) {
        return null
      }

      if (body instanceof esm_min /* FormData */.Ct) {
        return `multipart/form-data; boundary=${request[INTERNALS].boundary}`
      }

      // Detect form data input from form-data module
      if (body && typeof body.getBoundary === 'function') {
        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(
          body
        )}`
      }

      // Body is stream - can't really do much about this
      if (body instanceof external_node_stream_) {
        return null
      }

      // Body constructor defaults other things to string
      return 'text/plain;charset=UTF-8'
    }

    /**
     * The Fetch Standard treats this as if "total bytes" is a property on the body.
     * For us, we have to explicitly get it with a function.
     *
     * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
     *
     * @param {any} obj.body Body object from the Body instance.
     * @returns {number | null}
     */
    const getTotalBytes = (request) => {
      const { body } = request[INTERNALS]

      // Body is null or undefined
      if (body === null) {
        return 0
      }

      // Body is Blob
      if (isBlob(body)) {
        return body.size
      }

      // Body is Buffer
      if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
        return body.length
      }

      // Detect form data input from form-data module
      if (body && typeof body.getLengthSync === 'function') {
        return body.hasKnownLength && body.hasKnownLength()
          ? body.getLengthSync()
          : null
      }

      // Body is stream
      return null
    }

    /**
     * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
     *
     * @param {Stream.Writable} dest The stream to write to.
     * @param obj.body Body object from the Body instance.
     * @returns {Promise<void>}
     */
    const writeToStream = async (dest, { body }) => {
      if (body === null) {
        // Body is null
        dest.end()
      } else {
        // Body is stream
        await pipeline(body, dest)
      }
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/headers.js

    /**
     * Headers.js
     *
     * Headers class offers convenient helpers
     */

    /* c8 ignore next 9 */
    const validateHeaderName =
      typeof external_node_http_namespaceObject.validateHeaderName ===
      'function'
        ? external_node_http_namespaceObject.validateHeaderName
        : (name) => {
            if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
              const error = new TypeError(
                `Header name must be a valid HTTP token [${name}]`
              )
              Object.defineProperty(error, 'code', {
                value: 'ERR_INVALID_HTTP_TOKEN'
              })
              throw error
            }
          }

    /* c8 ignore next 9 */
    const validateHeaderValue =
      typeof external_node_http_namespaceObject.validateHeaderValue ===
      'function'
        ? external_node_http_namespaceObject.validateHeaderValue
        : (name, value) => {
            if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
              const error = new TypeError(
                `Invalid character in header content ["${name}"]`
              )
              Object.defineProperty(error, 'code', {
                value: 'ERR_INVALID_CHAR'
              })
              throw error
            }
          }

    /**
     * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit
     */

    /**
     * This Fetch API interface allows you to perform various actions on HTTP request and response headers.
     * These actions include retrieving, setting, adding to, and removing.
     * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.
     * You can add to this using methods like append() (see Examples.)
     * In all methods of this interface, header names are matched by case-insensitive byte sequence.
     *
     */
    class Headers extends URLSearchParams {
      /**
       * Headers class
       *
       * @constructor
       * @param {HeadersInit} [init] - Response headers
       */
      constructor(init) {
        // Validate and normalize init object in [name, value(s)][]
        /** @type {string[][]} */
        let result = []
        if (init instanceof Headers) {
          const raw = init.raw()
          for (const [name, values] of Object.entries(raw)) {
            result.push(...values.map((value) => [name, value]))
          }
        } else if (init == null) {
          // eslint-disable-line no-eq-null, eqeqeq
          // No op
        } else if (
          typeof init === 'object' &&
          !external_node_util_.types.isBoxedPrimitive(init)
        ) {
          const method = init[Symbol.iterator]
          // eslint-disable-next-line no-eq-null, eqeqeq
          if (method == null) {
            // Record<ByteString, ByteString>
            result.push(...Object.entries(init))
          } else {
            if (typeof method !== 'function') {
              throw new TypeError('Header pairs must be iterable')
            }

            // Sequence<sequence<ByteString>>
            // Note: per spec we have to first exhaust the lists then process them
            result = [...init]
              .map((pair) => {
                if (
                  typeof pair !== 'object' ||
                  external_node_util_.types.isBoxedPrimitive(pair)
                ) {
                  throw new TypeError(
                    'Each header pair must be an iterable object'
                  )
                }

                return [...pair]
              })
              .map((pair) => {
                if (pair.length !== 2) {
                  throw new TypeError(
                    'Each header pair must be a name/value tuple'
                  )
                }

                return [...pair]
              })
          }
        } else {
          throw new TypeError(
            "Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)"
          )
        }

        // Validate and lowercase
        result =
          result.length > 0
            ? result.map(([name, value]) => {
                validateHeaderName(name)
                validateHeaderValue(name, String(value))
                return [String(name).toLowerCase(), String(value)]
              })
            : undefined

        super(result)

        // Returning a Proxy that will lowercase key names, validate parameters and sort keys
        // eslint-disable-next-line no-constructor-return
        return new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case 'append':
              case 'set':
                return (name, value) => {
                  validateHeaderName(name)
                  validateHeaderValue(name, String(value))
                  return URLSearchParams.prototype[p].call(
                    target,
                    String(name).toLowerCase(),
                    String(value)
                  )
                }

              case 'delete':
              case 'has':
              case 'getAll':
                return (name) => {
                  validateHeaderName(name)
                  return URLSearchParams.prototype[p].call(
                    target,
                    String(name).toLowerCase()
                  )
                }

              case 'keys':
                return () => {
                  target.sort()
                  return new Set(
                    URLSearchParams.prototype.keys.call(target)
                  ).keys()
                }

              default:
                return Reflect.get(target, p, receiver)
            }
          }
        })
        /* c8 ignore next */
      }

      get [Symbol.toStringTag]() {
        return this.constructor.name
      }

      toString() {
        return Object.prototype.toString.call(this)
      }

      get(name) {
        const values = this.getAll(name)
        if (values.length === 0) {
          return null
        }

        let value = values.join(', ')
        if (/^content-encoding$/i.test(name)) {
          value = value.toLowerCase()
        }

        return value
      }

      forEach(callback, thisArg = undefined) {
        for (const name of this.keys()) {
          Reflect.apply(callback, thisArg, [this.get(name), name, this])
        }
      }

      *values() {
        for (const name of this.keys()) {
          yield this.get(name)
        }
      }

      /**
       * @type {() => IterableIterator<[string, string]>}
       */
      *entries() {
        for (const name of this.keys()) {
          yield [name, this.get(name)]
        }
      }

      [Symbol.iterator]() {
        return this.entries()
      }

      /**
       * Node-fetch non-spec method
       * returning all headers and their values as array
       * @returns {Record<string, string[]>}
       */
      raw() {
        return [...this.keys()].reduce((result, key) => {
          result[key] = this.getAll(key)
          return result
        }, {})
      }

      /**
       * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
       */
      [Symbol.for('nodejs.util.inspect.custom')]() {
        return [...this.keys()].reduce((result, key) => {
          const values = this.getAll(key)
          // Http.request() only supports string as Host header.
          // This hack makes specifying custom Host header possible.
          if (key === 'host') {
            result[key] = values[0]
          } else {
            result[key] = values.length > 1 ? values : values[0]
          }

          return result
        }, {})
      }
    }

    /**
     * Re-shaping object for Web IDL tests
     * Only need to do it for overridden methods
     */
    Object.defineProperties(
      Headers.prototype,
      ['get', 'entries', 'forEach', 'values'].reduce((result, property) => {
        result[property] = { enumerable: true }
        return result
      }, {})
    )

    /**
     * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do
     * not conform to HTTP grammar productions.
     * @param {import('http').IncomingMessage['rawHeaders']} headers
     */
    function fromRawHeaders(headers = []) {
      return new Headers(
        headers
          // Split into pairs
          .reduce((result, value, index, array) => {
            if (index % 2 === 0) {
              result.push(array.slice(index, index + 2))
            }

            return result
          }, [])
          .filter(([name, value]) => {
            try {
              validateHeaderName(name)
              validateHeaderValue(name, String(value))
              return true
            } catch {
              return false
            }
          })
      )
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/utils/is-redirect.js

    const redirectStatus = new Set([301, 302, 303, 307, 308])

    /**
     * Redirect code matching
     *
     * @param {number} code - Status code
     * @return {boolean}
     */
    const isRedirect = (code) => {
      return redirectStatus.has(code)
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/response.js

    /**
     * Response.js
     *
     * Response class provides content decoding
     */

    const response_INTERNALS = Symbol('Response internals')

    /**
     * Response class
     *
     * Ref: https://fetch.spec.whatwg.org/#response-class
     *
     * @param   Stream  body  Readable stream
     * @param   Object  opts  Response options
     * @return  Void
     */
    class Response extends Body {
      constructor(body = null, options = {}) {
        super(body, options)

        // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition
        const status = options.status != null ? options.status : 200

        const headers = new Headers(options.headers)

        if (body !== null && !headers.has('Content-Type')) {
          const contentType = extractContentType(body, this)
          if (contentType) {
            headers.append('Content-Type', contentType)
          }
        }

        this[response_INTERNALS] = {
          type: 'default',
          url: options.url,
          status,
          statusText: options.statusText || '',
          headers,
          counter: options.counter,
          highWaterMark: options.highWaterMark
        }
      }

      get type() {
        return this[response_INTERNALS].type
      }

      get url() {
        return this[response_INTERNALS].url || ''
      }

      get status() {
        return this[response_INTERNALS].status
      }

      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return (
          this[response_INTERNALS].status >= 200 &&
          this[response_INTERNALS].status < 300
        )
      }

      get redirected() {
        return this[response_INTERNALS].counter > 0
      }

      get statusText() {
        return this[response_INTERNALS].statusText
      }

      get headers() {
        return this[response_INTERNALS].headers
      }

      get highWaterMark() {
        return this[response_INTERNALS].highWaterMark
      }

      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new Response(clone(this, this.highWaterMark), {
          type: this.type,
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected,
          size: this.size,
          highWaterMark: this.highWaterMark
        })
      }

      /**
       * @param {string} url    The URL that the new response is to originate from.
       * @param {number} status An optional status code for the response (e.g., 302.)
       * @returns {Response}    A Response object.
       */
      static redirect(url, status = 302) {
        if (!isRedirect(status)) {
          throw new RangeError(
            'Failed to execute "redirect" on "response": Invalid status code'
          )
        }

        return new Response(null, {
          headers: {
            location: new URL(url).toString()
          },
          status
        })
      }

      static error() {
        const response = new Response(null, { status: 0, statusText: '' })
        response[response_INTERNALS].type = 'error'
        return response
      }

      static json(data = undefined, init = {}) {
        const body = JSON.stringify(data)

        if (body === undefined) {
          throw new TypeError('data is not JSON serializable')
        }

        const headers = new Headers(init && init.headers)

        if (!headers.has('content-type')) {
          headers.set('content-type', 'application/json')
        }

        return new Response(body, {
          ...init,
          headers
        })
      }

      get [Symbol.toStringTag]() {
        return 'Response'
      }
    }

    Object.defineProperties(Response.prototype, {
      type: { enumerable: true },
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    }) // CONCATENATED MODULE: external "node:url"

    const external_node_url_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:url') // CONCATENATED MODULE: ./node_modules/node-fetch/src/utils/get-search.js
    const getSearch = (parsedURL) => {
      if (parsedURL.search) {
        return parsedURL.search
      }

      const lastOffset = parsedURL.href.length - 1
      const hash =
        parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '')
      return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : ''
    } // CONCATENATED MODULE: external "node:net"

    const external_node_net_namespaceObject = __WEBPACK_EXTERNAL_createRequire(
      import.meta.url
    )('node:net') // CONCATENATED MODULE: ./node_modules/node-fetch/src/utils/referrer.js
    /**
     * @external URL
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}
     */

    /**
     * @module utils/referrer
     * @private
     */

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}
     * @param {string} URL
     * @param {boolean} [originOnly=false]
     */
    function stripURLForUseAsAReferrer(url, originOnly = false) {
      // 1. If url is null, return no referrer.
      if (url == null) {
        // eslint-disable-line no-eq-null, eqeqeq
        return 'no-referrer'
      }

      url = new URL(url)

      // 2. If url's scheme is a local scheme, then return no referrer.
      if (/^(about|blob|data):$/.test(url.protocol)) {
        return 'no-referrer'
      }

      // 3. Set url's username to the empty string.
      url.username = ''

      // 4. Set url's password to null.
      // Note: `null` appears to be a mistake as this actually results in the password being `"null"`.
      url.password = ''

      // 5. Set url's fragment to null.
      // Note: `null` appears to be a mistake as this actually results in the fragment being `"#null"`.
      url.hash = ''

      // 6. If the origin-only flag is true, then:
      if (originOnly) {
        // 6.1. Set url's path to null.
        // Note: `null` appears to be a mistake as this actually results in the path being `"/null"`.
        url.pathname = ''

        // 6.2. Set url's query to null.
        // Note: `null` appears to be a mistake as this actually results in the query being `"?null"`.
        url.search = ''
      }

      // 7. Return url.
      return url
    }

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}
     */
    const ReferrerPolicy = new Set([
      '',
      'no-referrer',
      'no-referrer-when-downgrade',
      'same-origin',
      'origin',
      'strict-origin',
      'origin-when-cross-origin',
      'strict-origin-when-cross-origin',
      'unsafe-url'
    ])

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}
     */
    const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin'

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}
     * @param {string} referrerPolicy
     * @returns {string} referrerPolicy
     */
    function validateReferrerPolicy(referrerPolicy) {
      if (!ReferrerPolicy.has(referrerPolicy)) {
        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`)
      }

      return referrerPolicy
    }

    /**
     * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}
     * @param {external:URL} url
     * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
     */
    function isOriginPotentiallyTrustworthy(url) {
      // 1. If origin is an opaque origin, return "Not Trustworthy".
      // Not applicable

      // 2. Assert: origin is a tuple origin.
      // Not for implementations

      // 3. If origin's scheme is either "https" or "wss", return "Potentially Trustworthy".
      if (/^(http|ws)s:$/.test(url.protocol)) {
        return true
      }

      // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return "Potentially Trustworthy".
      const hostIp = url.host.replace(/(^\[)|(]$)/g, '')
      const hostIPVersion = (0, external_node_net_namespaceObject.isIP)(hostIp)

      if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
        return true
      }

      if (
        hostIPVersion === 6 &&
        /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)
      ) {
        return true
      }

      // 5. If origin's host component is "localhost" or falls within ".localhost", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return "Potentially Trustworthy".
      // We are returning FALSE here because we cannot ensure conformance to
      // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)
      if (url.host === 'localhost' || url.host.endsWith('.localhost')) {
        return false
      }

      // 6. If origin's scheme component is file, return "Potentially Trustworthy".
      if (url.protocol === 'file:') {
        return true
      }

      // 7. If origin's scheme component is one which the user agent considers to be authenticated, return "Potentially Trustworthy".
      // Not supported

      // 8. If origin has been configured as a trustworthy origin, return "Potentially Trustworthy".
      // Not supported

      // 9. Return "Not Trustworthy".
      return false
    }

    /**
     * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}
     * @param {external:URL} url
     * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
     */
    function isUrlPotentiallyTrustworthy(url) {
      // 1. If url is "about:blank" or "about:srcdoc", return "Potentially Trustworthy".
      if (/^about:(blank|srcdoc)$/.test(url)) {
        return true
      }

      // 2. If url's scheme is "data", return "Potentially Trustworthy".
      if (url.protocol === 'data:') {
        return true
      }

      // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were
      // created. Therefore, blobs created in a trustworthy origin will themselves be potentially
      // trustworthy.
      if (/^(blob|filesystem):$/.test(url.protocol)) {
        return true
      }

      // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.
      return isOriginPotentiallyTrustworthy(url)
    }

    /**
     * Modifies the referrerURL to enforce any extra security policy considerations.
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
     * @callback module:utils/referrer~referrerURLCallback
     * @param {external:URL} referrerURL
     * @returns {external:URL} modified referrerURL
     */

    /**
     * Modifies the referrerOrigin to enforce any extra security policy considerations.
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
     * @callback module:utils/referrer~referrerOriginCallback
     * @param {external:URL} referrerOrigin
     * @returns {external:URL} modified referrerOrigin
     */

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}
     * @param {Request} request
     * @param {object} o
     * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback
     * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback
     * @returns {external:URL} Request's referrer
     */
    function determineRequestsReferrer(
      request,
      { referrerURLCallback, referrerOriginCallback } = {}
    ) {
      // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for
      // these cases:
      // > Note: If request's referrer is "no-referrer", Fetch will not call into this algorithm.
      // > Note: If request's referrer policy is the empty string, Fetch will not call into this
      // > algorithm.
      if (request.referrer === 'no-referrer' || request.referrerPolicy === '') {
        return null
      }

      // 1. Let policy be request's associated referrer policy.
      const policy = request.referrerPolicy

      // 2. Let environment be request's client.
      // not applicable to node.js

      // 3. Switch on request's referrer:
      if (request.referrer === 'about:client') {
        return 'no-referrer'
      }

      // "a URL": Let referrerSource be request's referrer.
      const referrerSource = request.referrer

      // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.
      let referrerURL = stripURLForUseAsAReferrer(referrerSource)

      // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the
      //    origin-only flag set to true.
      let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true)

      // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set
      //    referrerURL to referrerOrigin.
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin
      }

      // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary
      //    policy considerations in the interests of minimizing data leakage. For example, the user
      //    agent could strip the URL down to an origin, modify its host, replace it with an empty
      //    string, etc.
      if (referrerURLCallback) {
        referrerURL = referrerURLCallback(referrerURL)
      }

      if (referrerOriginCallback) {
        referrerOrigin = referrerOriginCallback(referrerOrigin)
      }

      // 8.Execute the statements corresponding to the value of policy:
      const currentURL = new URL(request.url)

      switch (policy) {
        case 'no-referrer':
          return 'no-referrer'

        case 'origin':
          return referrerOrigin

        case 'unsafe-url':
          return referrerURL

        case 'strict-origin':
          // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
          //    potentially trustworthy URL, then return no referrer.
          if (
            isUrlPotentiallyTrustworthy(referrerURL) &&
            !isUrlPotentiallyTrustworthy(currentURL)
          ) {
            return 'no-referrer'
          }

          // 2. Return referrerOrigin.
          return referrerOrigin.toString()

        case 'strict-origin-when-cross-origin':
          // 1. If the origin of referrerURL and the origin of request's current URL are the same, then
          //    return referrerURL.
          if (referrerURL.origin === currentURL.origin) {
            return referrerURL
          }

          // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a
          //    potentially trustworthy URL, then return no referrer.
          if (
            isUrlPotentiallyTrustworthy(referrerURL) &&
            !isUrlPotentiallyTrustworthy(currentURL)
          ) {
            return 'no-referrer'
          }

          // 3. Return referrerOrigin.
          return referrerOrigin

        case 'same-origin':
          // 1. If the origin of referrerURL and the origin of request's current URL are the same, then
          //    return referrerURL.
          if (referrerURL.origin === currentURL.origin) {
            return referrerURL
          }

          // 2. Return no referrer.
          return 'no-referrer'

        case 'origin-when-cross-origin':
          // 1. If the origin of referrerURL and the origin of request's current URL are the same, then
          //    return referrerURL.
          if (referrerURL.origin === currentURL.origin) {
            return referrerURL
          }

          // Return referrerOrigin.
          return referrerOrigin

        case 'no-referrer-when-downgrade':
          // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
          //    potentially trustworthy URL, then return no referrer.
          if (
            isUrlPotentiallyTrustworthy(referrerURL) &&
            !isUrlPotentiallyTrustworthy(currentURL)
          ) {
            return 'no-referrer'
          }

          // 2. Return referrerURL.
          return referrerURL

        default:
          throw new TypeError(`Invalid referrerPolicy: ${policy}`)
      }
    }

    /**
     * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}
     * @param {Headers} headers Response headers
     * @returns {string} policy
     */
    function parseReferrerPolicyFromHeader(headers) {
      // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`
      //    and response’s header list.
      const policyTokens = (headers.get('referrer-policy') || '').split(
        /[,\s]+/
      )

      // 2. Let policy be the empty string.
      let policy = ''

      // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty
      //    string, then set policy to token.
      // Note: This algorithm loops over multiple policy values to allow deployment of new policy
      // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.
      for (const token of policyTokens) {
        if (token && ReferrerPolicy.has(token)) {
          policy = token
        }
      }

      // 4. Return policy.
      return policy
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/request.js

    /**
     * Request.js
     *
     * Request class contains server only options
     *
     * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
     */

    const request_INTERNALS = Symbol('Request internals')

    /**
     * Check if `obj` is an instance of Request.
     *
     * @param  {*} object
     * @return {boolean}
     */
    const isRequest = (object) => {
      return (
        typeof object === 'object' &&
        typeof object[request_INTERNALS] === 'object'
      )
    }

    const doBadDataWarn = (0, external_node_util_.deprecate)(
      () => {},
      '.data is not a valid RequestInit property, use .body instead',
      'https://github.com/node-fetch/node-fetch/issues/1000 (request)'
    )

    /**
     * Request class
     *
     * Ref: https://fetch.spec.whatwg.org/#request-class
     *
     * @param   Mixed   input  Url or Request instance
     * @param   Object  init   Custom options
     * @return  Void
     */
    class Request extends Body {
      constructor(input, init = {}) {
        let parsedURL

        // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)
        if (isRequest(input)) {
          parsedURL = new URL(input.url)
        } else {
          parsedURL = new URL(input)
          input = {}
        }

        if (parsedURL.username !== '' || parsedURL.password !== '') {
          throw new TypeError(
            `${parsedURL} is an url with embedded credentials.`
          )
        }

        let method = init.method || input.method || 'GET'
        if (/^(delete|get|head|options|post|put)$/i.test(method)) {
          method = method.toUpperCase()
        }

        if (!isRequest(init) && 'data' in init) {
          doBadDataWarn()
        }

        // eslint-disable-next-line no-eq-null, eqeqeq
        if (
          (init.body != null || (isRequest(input) && input.body !== null)) &&
          (method === 'GET' || method === 'HEAD')
        ) {
          throw new TypeError('Request with GET/HEAD method cannot have body')
        }

        const inputBody = init.body
          ? init.body
          : isRequest(input) && input.body !== null
            ? clone(input)
            : null

        super(inputBody, {
          size: init.size || input.size || 0
        })

        const headers = new Headers(init.headers || input.headers || {})

        if (inputBody !== null && !headers.has('Content-Type')) {
          const contentType = extractContentType(inputBody, this)
          if (contentType) {
            headers.set('Content-Type', contentType)
          }
        }

        let signal = isRequest(input) ? input.signal : null
        if ('signal' in init) {
          signal = init.signal
        }

        // eslint-disable-next-line no-eq-null, eqeqeq
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError(
            'Expected signal to be an instanceof AbortSignal or EventTarget'
          )
        }

        // §5.4, Request constructor steps, step 15.1
        // eslint-disable-next-line no-eq-null, eqeqeq
        let referrer = init.referrer == null ? input.referrer : init.referrer
        if (referrer === '') {
          // §5.4, Request constructor steps, step 15.2
          referrer = 'no-referrer'
        } else if (referrer) {
          // §5.4, Request constructor steps, step 15.3.1, 15.3.2
          const parsedReferrer = new URL(referrer)
          // §5.4, Request constructor steps, step 15.3.3, 15.3.4
          referrer = /^about:(\/\/)?client$/.test(parsedReferrer)
            ? 'client'
            : parsedReferrer
        } else {
          referrer = undefined
        }

        this[request_INTERNALS] = {
          method,
          redirect: init.redirect || input.redirect || 'follow',
          headers,
          parsedURL,
          signal,
          referrer
        }

        // Node-fetch-only options
        this.follow =
          init.follow === undefined
            ? input.follow === undefined
              ? 20
              : input.follow
            : init.follow
        this.compress =
          init.compress === undefined
            ? input.compress === undefined
              ? true
              : input.compress
            : init.compress
        this.counter = init.counter || input.counter || 0
        this.agent = init.agent || input.agent
        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384
        this.insecureHTTPParser =
          init.insecureHTTPParser || input.insecureHTTPParser || false

        // §5.4, Request constructor steps, step 16.
        // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy
        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || ''
      }

      /** @returns {string} */
      get method() {
        return this[request_INTERNALS].method
      }

      /** @returns {string} */
      get url() {
        return (0, external_node_url_namespaceObject.format)(
          this[request_INTERNALS].parsedURL
        )
      }

      /** @returns {Headers} */
      get headers() {
        return this[request_INTERNALS].headers
      }

      get redirect() {
        return this[request_INTERNALS].redirect
      }

      /** @returns {AbortSignal} */
      get signal() {
        return this[request_INTERNALS].signal
      }

      // https://fetch.spec.whatwg.org/#dom-request-referrer
      get referrer() {
        if (this[request_INTERNALS].referrer === 'no-referrer') {
          return ''
        }

        if (this[request_INTERNALS].referrer === 'client') {
          return 'about:client'
        }

        if (this[request_INTERNALS].referrer) {
          return this[request_INTERNALS].referrer.toString()
        }

        return undefined
      }

      get referrerPolicy() {
        return this[request_INTERNALS].referrerPolicy
      }

      set referrerPolicy(referrerPolicy) {
        this[request_INTERNALS].referrerPolicy =
          validateReferrerPolicy(referrerPolicy)
      }

      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new Request(this)
      }

      get [Symbol.toStringTag]() {
        return 'Request'
      }
    }

    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true },
      referrer: { enumerable: true },
      referrerPolicy: { enumerable: true }
    })

    /**
     * Convert a Request to Node.js http request options.
     *
     * @param {Request} request - A Request instance
     * @return The options object to be passed to http.request
     */
    const getNodeRequestOptions = (request) => {
      const { parsedURL } = request[request_INTERNALS]
      const headers = new Headers(request[request_INTERNALS].headers)

      // Fetch step 1.3
      if (!headers.has('Accept')) {
        headers.set('Accept', '*/*')
      }

      // HTTP-network-or-cache fetch steps 2.4-2.7
      let contentLengthValue = null
      if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = '0'
      }

      if (request.body !== null) {
        const totalBytes = getTotalBytes(request)
        // Set Content-Length if totalBytes is a number (that is not NaN)
        if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {
          contentLengthValue = String(totalBytes)
        }
      }

      if (contentLengthValue) {
        headers.set('Content-Length', contentLengthValue)
      }

      // 4.1. Main fetch, step 2.6
      // > If request's referrer policy is the empty string, then set request's referrer policy to the
      // > default referrer policy.
      if (request.referrerPolicy === '') {
        request.referrerPolicy = DEFAULT_REFERRER_POLICY
      }

      // 4.1. Main fetch, step 2.7
      // > If request's referrer is not "no-referrer", set request's referrer to the result of invoking
      // > determine request's referrer.
      if (request.referrer && request.referrer !== 'no-referrer') {
        request[request_INTERNALS].referrer = determineRequestsReferrer(request)
      } else {
        request[request_INTERNALS].referrer = 'no-referrer'
      }

      // 4.5. HTTP-network-or-cache fetch, step 6.9
      // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized
      // >  and isomorphic encoded, to httpRequest's header list.
      if (request[request_INTERNALS].referrer instanceof URL) {
        headers.set('Referer', request.referrer)
      }

      // HTTP-network-or-cache fetch step 2.11
      if (!headers.has('User-Agent')) {
        headers.set('User-Agent', 'node-fetch')
      }

      // HTTP-network-or-cache fetch step 2.15
      if (request.compress && !headers.has('Accept-Encoding')) {
        headers.set('Accept-Encoding', 'gzip, deflate, br')
      }

      let { agent } = request
      if (typeof agent === 'function') {
        agent = agent(parsedURL)
      }

      // HTTP-network fetch step 4.2
      // chunked encoding is handled by Node.js

      const search = getSearch(parsedURL)

      // Pass the full URL directly to request(), but overwrite the following
      // options:
      const options = {
        // Overwrite search to retain trailing ? (issue #776)
        path: parsedURL.pathname + search,
        // The following options are not expressed in the URL
        method: request.method,
        headers: headers[Symbol.for('nodejs.util.inspect.custom')](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      }

      return {
        /** @type {URL} */
        parsedURL,
        options
      }
    } // CONCATENATED MODULE: ./node_modules/node-fetch/src/errors/abort-error.js

    /**
     * AbortError interface for cancelled requests
     */
    class AbortError extends FetchBaseError {
      constructor(message, type = 'aborted') {
        super(message, type)
      }
    }

    // EXTERNAL MODULE: ./node_modules/fetch-blob/from.js + 2 modules
    var from = __nccwpck_require__(2777) // CONCATENATED MODULE: ./node_modules/node-fetch/src/index.js
    /**
     * Index.js
     *
     * a request API compatible with window.fetch
     *
     * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
     */

    const supportedSchemas = new Set(['data:', 'http:', 'https:'])

    /**
     * Fetch function
     *
     * @param   {string | URL | import('./request').default} url - Absolute url or Request instance
     * @param   {*} [options_] - Fetch options
     * @return  {Promise<import('./response').default>}
     */
    async function fetch(url, options_) {
      return new Promise((resolve, reject) => {
        // Build request object
        const request = new Request(url, options_)
        const { parsedURL, options } = getNodeRequestOptions(request)
        if (!supportedSchemas.has(parsedURL.protocol)) {
          throw new TypeError(
            `node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(
              /:$/,
              ''
            )}" is not supported.`
          )
        }

        if (parsedURL.protocol === 'data:') {
          const data = dist(request.url)
          const response = new Response(data, {
            headers: { 'Content-Type': data.typeFull }
          })
          resolve(response)
          return
        }

        // Wrap http.request into fetch
        const send = (
          parsedURL.protocol === 'https:'
            ? external_node_https_namespaceObject
            : external_node_http_namespaceObject
        ).request
        const { signal } = request
        let response = null

        const abort = () => {
          const error = new AbortError('The operation was aborted.')
          reject(error)
          if (
            request.body &&
            request.body instanceof external_node_stream_.Readable
          ) {
            request.body.destroy(error)
          }

          if (!response || !response.body) {
            return
          }

          response.body.emit('error', error)
        }

        if (signal && signal.aborted) {
          abort()
          return
        }

        const abortAndFinalize = () => {
          abort()
          finalize()
        }

        // Send request
        const request_ = send(parsedURL.toString(), options)

        if (signal) {
          signal.addEventListener('abort', abortAndFinalize)
        }

        const finalize = () => {
          request_.abort()
          if (signal) {
            signal.removeEventListener('abort', abortAndFinalize)
          }
        }

        request_.on('error', (error) => {
          reject(
            new FetchError(
              `request to ${request.url} failed, reason: ${error.message}`,
              'system',
              error
            )
          )
          finalize()
        })

        fixResponseChunkedTransferBadEnding(request_, (error) => {
          if (response && response.body) {
            response.body.destroy(error)
          }
        })

        /* c8 ignore next 18 */
        if (process.version < 'v14') {
          // Before Node.js 14, pipeline() does not fully support async iterators and does not always
          // properly handle when the socket close/end events are out of order.
          request_.on('socket', (s) => {
            let endedWithEventsCount
            s.prependListener('end', () => {
              endedWithEventsCount = s._eventsCount
            })
            s.prependListener('close', (hadError) => {
              // if end happened before close but the socket didn't emit an error, do it now
              if (
                response &&
                endedWithEventsCount < s._eventsCount &&
                !hadError
              ) {
                const error = new Error('Premature close')
                error.code = 'ERR_STREAM_PREMATURE_CLOSE'
                response.body.emit('error', error)
              }
            })
          })
        }

        request_.on('response', (response_) => {
          request_.setTimeout(0)
          const headers = fromRawHeaders(response_.rawHeaders)

          // HTTP fetch step 5
          if (isRedirect(response_.statusCode)) {
            // HTTP fetch step 5.2
            const location = headers.get('Location')

            // HTTP fetch step 5.3
            let locationURL = null
            try {
              locationURL =
                location === null ? null : new URL(location, request.url)
            } catch {
              // error here can only be invalid URL in Location: header
              // do not throw when options.redirect == manual
              // let the user extract the errorneous redirect URL
              if (request.redirect !== 'manual') {
                reject(
                  new FetchError(
                    `uri requested responds with an invalid redirect URL: ${location}`,
                    'invalid-redirect'
                  )
                )
                finalize()
                return
              }
            }

            // HTTP fetch step 5.5
            switch (request.redirect) {
              case 'error':
                reject(
                  new FetchError(
                    `uri requested responds with a redirect, redirect mode is set to error: ${request.url}`,
                    'no-redirect'
                  )
                )
                finalize()
                return
              case 'manual':
                // Nothing to do
                break
              case 'follow': {
                // HTTP-redirect fetch step 2
                if (locationURL === null) {
                  break
                }

                // HTTP-redirect fetch step 5
                if (request.counter >= request.follow) {
                  reject(
                    new FetchError(
                      `maximum redirect reached at: ${request.url}`,
                      'max-redirect'
                    )
                  )
                  finalize()
                  return
                }

                // HTTP-redirect fetch step 6 (counter increment)
                // Create a new Request object.
                const requestOptions = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: clone(request),
                  signal: request.signal,
                  size: request.size,
                  referrer: request.referrer,
                  referrerPolicy: request.referrerPolicy
                }

                // when forwarding sensitive headers like "Authorization",
                // "WWW-Authenticate", and "Cookie" to untrusted targets,
                // headers will be ignored when following a redirect to a domain
                // that is not a subdomain match or exact match of the initial domain.
                // For example, a redirect from "foo.com" to either "foo.com" or "sub.foo.com"
                // will forward the sensitive headers, but a redirect to "bar.com" will not.
                // headers will also be ignored when following a redirect to a domain using
                // a different protocol. For example, a redirect from "https://foo.com" to "http://foo.com"
                // will not forward the sensitive headers
                if (
                  !isDomainOrSubdomain(request.url, locationURL) ||
                  !isSameProtocol(request.url, locationURL)
                ) {
                  for (const name of [
                    'authorization',
                    'www-authenticate',
                    'cookie',
                    'cookie2'
                  ]) {
                    requestOptions.headers.delete(name)
                  }
                }

                // HTTP-redirect fetch step 9
                if (
                  response_.statusCode !== 303 &&
                  request.body &&
                  options_.body instanceof external_node_stream_.Readable
                ) {
                  reject(
                    new FetchError(
                      'Cannot follow redirect with body being a readable stream',
                      'unsupported-redirect'
                    )
                  )
                  finalize()
                  return
                }

                // HTTP-redirect fetch step 11
                if (
                  response_.statusCode === 303 ||
                  ((response_.statusCode === 301 ||
                    response_.statusCode === 302) &&
                    request.method === 'POST')
                ) {
                  requestOptions.method = 'GET'
                  requestOptions.body = undefined
                  requestOptions.headers.delete('content-length')
                }

                // HTTP-redirect fetch step 14
                const responseReferrerPolicy =
                  parseReferrerPolicyFromHeader(headers)
                if (responseReferrerPolicy) {
                  requestOptions.referrerPolicy = responseReferrerPolicy
                }

                // HTTP-redirect fetch step 15
                resolve(fetch(new Request(locationURL, requestOptions)))
                finalize()
                return
              }

              default:
                return reject(
                  new TypeError(
                    `Redirect option '${request.redirect}' is not a valid value of RequestRedirect`
                  )
                )
            }
          }

          // Prepare response
          if (signal) {
            response_.once('end', () => {
              signal.removeEventListener('abort', abortAndFinalize)
            })
          }

          let body = (0, external_node_stream_.pipeline)(
            response_,
            new external_node_stream_.PassThrough(),
            (error) => {
              if (error) {
                reject(error)
              }
            }
          )
          // see https://github.com/nodejs/node/pull/29376
          /* c8 ignore next 3 */
          if (process.version < 'v12.10') {
            response_.on('aborted', abortAndFinalize)
          }

          const responseOptions = {
            url: request.url,
            status: response_.statusCode,
            statusText: response_.statusMessage,
            headers,
            size: request.size,
            counter: request.counter,
            highWaterMark: request.highWaterMark
          }

          // HTTP-network fetch step 12.1.1.3
          const codings = headers.get('Content-Encoding')

          // HTTP-network fetch step 12.1.1.4: handle content codings

          // in following scenarios we ignore compression support
          // 1. compression support is disabled
          // 2. HEAD request
          // 3. no Content-Encoding header
          // 4. no content response (204)
          // 5. content not modified response (304)
          if (
            !request.compress ||
            request.method === 'HEAD' ||
            codings === null ||
            response_.statusCode === 204 ||
            response_.statusCode === 304
          ) {
            response = new Response(body, responseOptions)
            resolve(response)
            return
          }

          // For Node v6+
          // Be less strict when decoding compressed responses, since sometimes
          // servers send slightly invalid responses that are still accepted
          // by common browsers.
          // Always using Z_SYNC_FLUSH is what cURL does.
          const zlibOptions = {
            flush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH,
            finishFlush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH
          }

          // For gzip
          if (codings === 'gzip' || codings === 'x-gzip') {
            body = (0, external_node_stream_.pipeline)(
              body,
              external_node_zlib_namespaceObject.createGunzip(zlibOptions),
              (error) => {
                if (error) {
                  reject(error)
                }
              }
            )
            response = new Response(body, responseOptions)
            resolve(response)
            return
          }

          // For deflate
          if (codings === 'deflate' || codings === 'x-deflate') {
            // Handle the infamous raw deflate response from old servers
            // a hack for old IIS and Apache servers
            const raw = (0, external_node_stream_.pipeline)(
              response_,
              new external_node_stream_.PassThrough(),
              (error) => {
                if (error) {
                  reject(error)
                }
              }
            )
            raw.once('data', (chunk) => {
              // See http://stackoverflow.com/questions/37519828
              if ((chunk[0] & 0x0f) === 0x08) {
                body = (0, external_node_stream_.pipeline)(
                  body,
                  external_node_zlib_namespaceObject.createInflate(),
                  (error) => {
                    if (error) {
                      reject(error)
                    }
                  }
                )
              } else {
                body = (0, external_node_stream_.pipeline)(
                  body,
                  external_node_zlib_namespaceObject.createInflateRaw(),
                  (error) => {
                    if (error) {
                      reject(error)
                    }
                  }
                )
              }

              response = new Response(body, responseOptions)
              resolve(response)
            })
            raw.once('end', () => {
              // Some old IIS servers return zero-length OK deflate responses, so
              // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903
              if (!response) {
                response = new Response(body, responseOptions)
                resolve(response)
              }
            })
            return
          }

          // For br
          if (codings === 'br') {
            body = (0, external_node_stream_.pipeline)(
              body,
              external_node_zlib_namespaceObject.createBrotliDecompress(),
              (error) => {
                if (error) {
                  reject(error)
                }
              }
            )
            response = new Response(body, responseOptions)
            resolve(response)
            return
          }

          // Otherwise, use response as-is
          response = new Response(body, responseOptions)
          resolve(response)
        })

        // eslint-disable-next-line promise/prefer-await-to-then
        writeToStream(request_, request).catch(reject)
      })
    }

    function fixResponseChunkedTransferBadEnding(request, errorCallback) {
      const LAST_CHUNK =
        external_node_buffer_namespaceObject.Buffer.from('0\r\n\r\n')

      let isChunkedTransfer = false
      let properLastChunkReceived = false
      let previousChunk

      request.on('response', (response) => {
        const { headers } = response
        isChunkedTransfer =
          headers['transfer-encoding'] === 'chunked' &&
          !headers['content-length']
      })

      request.on('socket', (socket) => {
        const onSocketClose = () => {
          if (isChunkedTransfer && !properLastChunkReceived) {
            const error = new Error('Premature close')
            error.code = 'ERR_STREAM_PREMATURE_CLOSE'
            errorCallback(error)
          }
        }

        const onData = (buf) => {
          properLastChunkReceived =
            external_node_buffer_namespaceObject.Buffer.compare(
              buf.slice(-5),
              LAST_CHUNK
            ) === 0

          // Sometimes final 0-length chunk and end of message code are in separate packets
          if (!properLastChunkReceived && previousChunk) {
            properLastChunkReceived =
              external_node_buffer_namespaceObject.Buffer.compare(
                previousChunk.slice(-3),
                LAST_CHUNK.slice(0, 3)
              ) === 0 &&
              external_node_buffer_namespaceObject.Buffer.compare(
                buf.slice(-2),
                LAST_CHUNK.slice(3)
              ) === 0
          }

          previousChunk = buf
        }

        socket.prependListener('close', onSocketClose)
        socket.on('data', onData)

        request.on('close', () => {
          socket.removeListener('close', onSocketClose)
          socket.removeListener('data', onData)
        })
      })
    }

    // EXTERNAL MODULE: ./node_modules/@atproto/api/dist/index.js
    var api_dist = __nccwpck_require__(7663) // CONCATENATED MODULE: ./src/agent.js
    const { BskyAgent } = api_dist

    async function bsky(service) {
      BskyAgent.configure({
        // fetch polyfill
        async fetch(httpUri, httpMethod, httpHeaders, httpReqBody) {
          const res = await fetch(httpUri, {
            method: httpMethod,
            headers: httpHeaders,
            body: JSON.stringify(httpReqBody)
          })
          const response = {
            status: res.status,
            body: await res.json()
          }
          return response
        }
      })

      const agent = new BskyAgent({
        service: service
      })

      await agent.login({
        identifier: process.env.BSKY_IDENTIFIER,
        password: process.env.BSKY_PASSWORD
      })

      return agent
    }

    /***/
  },

  /***/ 7633: /***/ (
    __webpack_module__,
    __unused_webpack___webpack_exports__,
    __nccwpck_require__
  ) => {
    __nccwpck_require__.a(
      __webpack_module__,
      async (
        __webpack_handle_async_dependencies__,
        __webpack_async_result__
      ) => {
        try {
          /* harmony import */ var _actions_core__WEBPACK_IMPORTED_MODULE_0__ =
            __nccwpck_require__(2186)
          /* harmony import */ var _agent_js__WEBPACK_IMPORTED_MODULE_1__ =
            __nccwpck_require__(6139)
          /* harmony import */ var _post_js__WEBPACK_IMPORTED_MODULE_2__ =
            __nccwpck_require__(2651)
          /* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ =
            __nccwpck_require__(2684)

          const content = _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput(
            'post',
            { required: true }
          )
          const service =
            _actions_core__WEBPACK_IMPORTED_MODULE_0__.getInput('service')

          const bskyAgent = await (0,
          _agent_js__WEBPACK_IMPORTED_MODULE_1__ /* ["default"] */.Z)(service)
          const bskyPost = await (0,
          _post_js__WEBPACK_IMPORTED_MODULE_2__ /* ["default"] */.Z)(
            content,
            bskyAgent
          )
          const validation = await (0,
          _validate_js__WEBPACK_IMPORTED_MODULE_3__ /* ["default"] */.Z)(
            bskyPost
          )

          if (validation.success) {
            try {
              await bskyAgent.post(bskyPost)
              _actions_core__WEBPACK_IMPORTED_MODULE_0__.info('Post successful')
            } catch (error) {
              _actions_core__WEBPACK_IMPORTED_MODULE_0__.error(error)
              _actions_core__WEBPACK_IMPORTED_MODULE_0__.setFailed(error)
            }
          } else {
            _actions_core__WEBPACK_IMPORTED_MODULE_0__.error(validation)
            _actions_core__WEBPACK_IMPORTED_MODULE_0__.setFailed(validation)
          }

          __webpack_async_result__()
        } catch (e) {
          __webpack_async_result__(e)
        }
      },
      1
    )

    /***/
  },

  /***/ 2651: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    /* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
      /* harmony export */ Z: () => /* binding */ post
      /* harmony export */
    })
    /* harmony import */ var _atproto_api__WEBPACK_IMPORTED_MODULE_0__ =
      __nccwpck_require__(7663)

    const { RichText } = _atproto_api__WEBPACK_IMPORTED_MODULE_0__

    async function post(content, agent) {
      const rt = new RichText({
        text: content
      })

      // Automatically detect facets.
      await rt.detectFacets(agent)

      // https://github.com/bluesky-social/atproto/issues/834#issuecomment-1514046354
      // Filter out any facets with features
      // that have no value set value.
      let facets = null

      if (rt.facets) {
        facets = rt.facets.filter((facet) => {
          const features = facet.features.filter(
            (feature) =>
              (feature?.uri && feature?.uri !== '') ||
              (feature?.did && feature?.did !== '')
          )

          return features.length > 0
        })
      }

      const postRecord = {
        $type: 'app.bsky.feed.post',
        text: rt.text,
        ...(facets && { facets }),
        createdAt: new Date().toISOString()
      }

      return postRecord
    }

    /***/
  },

  /***/ 2684: /***/ (
    __unused_webpack___webpack_module__,
    __webpack_exports__,
    __nccwpck_require__
  ) => {
    /* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
      /* harmony export */ Z: () => /* binding */ validate
      /* harmony export */
    })
    /* harmony import */ var _atproto_api__WEBPACK_IMPORTED_MODULE_0__ =
      __nccwpck_require__(7663)

    const { AppBskyFeedPost } = _atproto_api__WEBPACK_IMPORTED_MODULE_0__

    async function validate(bskyPost) {
      if (AppBskyFeedPost.isRecord(bskyPost)) {
        const res = AppBskyFeedPost.validateRecord(bskyPost)
        if (res.error) {
          return res.error
        }
        return res
      }
    }

    /***/
  }

  /******/
}
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {}
/******/
/******/ // The require function
/******/ function __nccwpck_require__(moduleId) {
  /******/ // Check if module is in cache
  /******/ var cachedModule = __webpack_module_cache__[moduleId]
  /******/ if (cachedModule !== undefined) {
    /******/ return cachedModule.exports
    /******/
  }
  /******/ // Create a new module (and put it into the cache)
  /******/ var module = (__webpack_module_cache__[moduleId] = {
    /******/ // no module.id needed
    /******/ // no module.loaded needed
    /******/ exports: {}
    /******/
  })
  /******/
  /******/ // Execute the module function
  /******/ var threw = true
  /******/ try {
    /******/ __webpack_modules__[moduleId].call(
      module.exports,
      module,
      module.exports,
      __nccwpck_require__
    )
    /******/ threw = false
    /******/
  } finally {
    /******/ if (threw) delete __webpack_module_cache__[moduleId]
    /******/
  }
  /******/
  /******/ // Return the exports of the module
  /******/ return module.exports
  /******/
}
/******/
/******/ // expose the modules object (__webpack_modules__)
/******/ __nccwpck_require__.m = __webpack_modules__
/******/
/************************************************************************/
/******/ /* webpack/runtime/async module */
/******/ ;(() => {
  /******/ var webpackQueues =
    typeof Symbol === 'function'
      ? Symbol('webpack queues')
      : '__webpack_queues__'
  /******/ var webpackExports =
    typeof Symbol === 'function'
      ? Symbol('webpack exports')
      : '__webpack_exports__'
  /******/ var webpackError =
    typeof Symbol === 'function' ? Symbol('webpack error') : '__webpack_error__'
  /******/ var resolveQueue = (queue) => {
    /******/ if (queue && !queue.d) {
      /******/ queue.d = 1
      /******/ queue.forEach((fn) => fn.r--)
      /******/ queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()))
      /******/
    }
    /******/
  }
  /******/ var wrapDeps = (deps) =>
    deps.map((dep) => {
      /******/ if (dep !== null && typeof dep === 'object') {
        /******/ if (dep[webpackQueues]) return dep
        /******/ if (dep.then) {
          /******/ var queue = []
          /******/ queue.d = 0
          /******/ dep.then(
            (r) => {
              /******/ obj[webpackExports] = r
              /******/ resolveQueue(queue)
              /******/
            },
            (e) => {
              /******/ obj[webpackError] = e
              /******/ resolveQueue(queue)
              /******/
            }
          )
          /******/ var obj = {}
          /******/ obj[webpackQueues] = (fn) => fn(queue)
          /******/ return obj
          /******/
        }
        /******/
      }
      /******/ var ret = {}
      /******/ ret[webpackQueues] = (x) => {}
      /******/ ret[webpackExports] = dep
      /******/ return ret
      /******/
    })
  /******/ __nccwpck_require__.a = (module, body, hasAwait) => {
    /******/ var queue
    /******/ hasAwait && ((queue = []).d = 1)
    /******/ var depQueues = new Set()
    /******/ var exports = module.exports
    /******/ var currentDeps
    /******/ var outerResolve
    /******/ var reject
    /******/ var promise = new Promise((resolve, rej) => {
      /******/ reject = rej
      /******/ outerResolve = resolve
      /******/
    })
    /******/ promise[webpackExports] = exports
    /******/ promise[webpackQueues] = (fn) => (
      queue && fn(queue), depQueues.forEach(fn), promise['catch']((x) => {})
    )
    /******/ module.exports = promise
    /******/ body(
      (deps) => {
        /******/ currentDeps = wrapDeps(deps)
        /******/ var fn
        /******/ var getResult = () =>
          currentDeps.map((d) => {
            /******/ if (d[webpackError]) throw d[webpackError]
            /******/ return d[webpackExports]
            /******/
          })
        /******/ var promise = new Promise((resolve) => {
          /******/ fn = () => resolve(getResult)
          /******/ fn.r = 0
          /******/ var fnQueue = (q) =>
            q !== queue &&
            !depQueues.has(q) &&
            (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn)))
          /******/ currentDeps.map((dep) => dep[webpackQueues](fnQueue))
          /******/
        })
        /******/ return fn.r ? promise : getResult()
        /******/
      },
      (err) => (
        err ? reject((promise[webpackError] = err)) : outerResolve(exports),
        resolveQueue(queue)
      )
    )
    /******/ queue && (queue.d = 0)
    /******/
  }
  /******/
})()
/******/
/******/ /* webpack/runtime/define property getters */
/******/ ;(() => {
  /******/ // define getter functions for harmony exports
  /******/ __nccwpck_require__.d = (exports, definition) => {
    /******/ for (var key in definition) {
      /******/ if (
        __nccwpck_require__.o(definition, key) &&
        !__nccwpck_require__.o(exports, key)
      ) {
        /******/ Object.defineProperty(exports, key, {
          enumerable: true,
          get: definition[key]
        })
        /******/
      }
      /******/
    }
    /******/
  }
  /******/
})()
/******/
/******/ /* webpack/runtime/ensure chunk */
/******/ ;(() => {
  /******/ __nccwpck_require__.f = {}
  /******/ // This file contains only the entry chunk.
  /******/ // The chunk loading function for additional chunks
  /******/ __nccwpck_require__.e = (chunkId) => {
    /******/ return Promise.all(
      Object.keys(__nccwpck_require__.f).reduce((promises, key) => {
        /******/ __nccwpck_require__.f[key](chunkId, promises)
        /******/ return promises
        /******/
      }, [])
    )
    /******/
  }
  /******/
})()
/******/
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ ;(() => {
  /******/ // This function allow to reference async chunks
  /******/ __nccwpck_require__.u = (chunkId) => {
    /******/ // return url for filenames based on template
    /******/ return '' + chunkId + '.index.js'
    /******/
  }
  /******/
})()
/******/
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ ;(() => {
  /******/ __nccwpck_require__.o = (obj, prop) =>
    Object.prototype.hasOwnProperty.call(obj, prop)
  /******/
})()
/******/
/******/ /* webpack/runtime/make namespace object */
/******/ ;(() => {
  /******/ // define __esModule on exports
  /******/ __nccwpck_require__.r = (exports) => {
    /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: 'Module'
      })
      /******/
    }
    /******/ Object.defineProperty(exports, '__esModule', { value: true })
    /******/
  }
  /******/
})()
/******/
/******/ /* webpack/runtime/compat */
/******/
/******/ if (typeof __nccwpck_require__ !== 'undefined')
  __nccwpck_require__.ab =
    new URL('.', import.meta.url).pathname.slice(
      import.meta.url.match(/^file:\/\/\/\w:/) ? 1 : 0,
      -1
    ) + '/'
/******/
/******/ /* webpack/runtime/import chunk loading */
/******/ ;(() => {
  /******/ // no baseURI
  /******/
  /******/ // object to store loaded and loading chunks
  /******/ // undefined = chunk not loaded, null = chunk preloaded/prefetched
  /******/ // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
  /******/ var installedChunks = {
    /******/ 179: 0
    /******/
  }
  /******/
  /******/ var installChunk = (data) => {
    /******/ var { ids, modules, runtime } = data
    /******/ // add "modules" to the modules object,
    /******/ // then flag all "ids" as loaded and fire callback
    /******/ var moduleId,
      chunkId,
      i = 0
    /******/ for (moduleId in modules) {
      /******/ if (__nccwpck_require__.o(modules, moduleId)) {
        /******/ __nccwpck_require__.m[moduleId] = modules[moduleId]
        /******/
      }
      /******/
    }
    /******/ if (runtime) runtime(__nccwpck_require__)
    /******/ for (; i < ids.length; i++) {
      /******/ chunkId = ids[i]
      /******/ if (
        __nccwpck_require__.o(installedChunks, chunkId) &&
        installedChunks[chunkId]
      ) {
        /******/ installedChunks[chunkId][0]()
        /******/
      }
      /******/ installedChunks[ids[i]] = 0
      /******/
    }
    /******/
    /******/
  }
  /******/
  /******/ __nccwpck_require__.f.j = (chunkId, promises) => {
    /******/ // import() chunk loading for javascript
    /******/ var installedChunkData = __nccwpck_require__.o(
      installedChunks,
      chunkId
    )
      ? installedChunks[chunkId]
      : undefined
    /******/ if (installedChunkData !== 0) {
      // 0 means "already installed".
      /******/
      /******/ // a Promise means "currently loading".
      /******/ if (installedChunkData) {
        /******/ promises.push(installedChunkData[1])
        /******/
      } else {
        /******/ if (true) {
          // all chunks have JS
          /******/ // setup Promise in chunk cache
          /******/ var promise = import(
            './' + __nccwpck_require__.u(chunkId)
          ).then(installChunk, (e) => {
            /******/ if (installedChunks[chunkId] !== 0)
              installedChunks[chunkId] = undefined
            /******/ throw e
            /******/
          })
          /******/ var promise = Promise.race([
            promise,
            new Promise(
              (resolve) =>
                (installedChunkData = installedChunks[chunkId] = [resolve])
            )
          ])
          /******/ promises.push((installedChunkData[1] = promise))
          /******/
        } else installedChunks[chunkId] = 0
        /******/
      }
      /******/
    }
    /******/
  }
  /******/
  /******/ // no external install chunk
  /******/
  /******/ // no on chunks loaded
  /******/
})()
/******/
/************************************************************************/
/******/
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module used 'module' so it can't be inlined
/******/ var __webpack_exports__ = __nccwpck_require__(7633)
/******/ __webpack_exports__ = await __webpack_exports__
/******/

//# sourceMappingURL=index.js.map
